We have two distributions of Dimmunix: one for *Java* and one for *POSIX Threads*.
Java Dimmunix intercepts the synchronization operations using the [http://asm.ow2.org/ ASM instrumentation framework].
POSIX Threads Dimmunix works for *Linux* systems and intercepts synchronization operations using LD_PRELOAD.

= Quick Guide to Using Dimmunix for Java =

This guide helps you get Dimmunix and use it to immunize Java programs against deadlock bugs.

== Download and Install ==

Follow the instructions from [Installation]

== Use Dimmunix on Test Java Programs ==

The test programs from dimmunix-java/test folder deadlock deterministically.

To use Dimmunix on a test program, do the following steps:

1. Compile the tests
{{{
cd dimmunix-java/test
ant
}}}
2. Run the test from Test.java
{{{
java dimmunixTests.Test
}}}
 You notice that the test deadlocks every time you run it. You can terminate it by typing *Ctrl-C*.
3. Now run the test program with Dimmunix
{{{
java -cp .:<path to asm-3.2>/lib/asm-3.2.jar -Xbootclasspath/p:../src/Dimmunix/bin -javaagent:../src/DimmunixInstrumentation/DimmunixAgent.jar dimmunixTests.Test
}}}
 You notice that the program deadlocks in the first run. Terminate the program with *Ctrl-C*. Run the test program with Dimmunix again. You notice that the program does not deadlock in the subsequent runs.

== Inspect the Deadlock History ==

You can find the deadlock history in *$HOME/Dimmunix/Dimmunix.hist*.

The deadlock history consists of deadlock signatures, one per line.

The signature of a deadlock involving n threads has the following format:
{{{
deadlock_template=depth_1#call_stack_1;...,depth_n#call_stack_n
}}}
 where call_stack_i represents the call stack thread i had when it acquired a lock involved in the deadlock.

= Quick Guide to Using Dimmunix for POSIX Threads =

== Download and Install ==

Follow the instructions from [Installation]

== Use Dimmunix on Test C/C++ Programs ==

In dimmunix-pthreads-test/test.cc, dimmunix-pthreads-test/hawknl/src/deadlock3.c and dimmunix-pthreads-test/sqlite/deadlock_test/deadlock.c, you can find test programs that deadlock deterministically. 

To compile and run the tests, run
{{{
cd dimmunix-pthreads/test
sh ./run_tests
}}}

In the first run, each test deadlocks and Dimmunix saves the deadlock history in the folder containing the test. In future runs, the test never deadlocks again.

= Notes: =

 * We tested POSIX Threads Dimmunix on the following Linux distributions:
  * Ubuntu 9.10 32 bit
  * Ubuntu 9.04 32 bit
  * Ubuntu 8.10 32 bit
  * Ubuntu 9.10 64 bit
  * Fedora 11 32 bit
  * Fedora 9 32 bit
 * There are two deprecated versions of Dimmunix: one for Linux systems that is integrated in the NPTL library, and one for Java that is implemented using AspectJ. We can provide these distributions upon request.