cscope 15 $HOME/code/pin/source/tools/ddb/klee/examples/sqlite/src               0001625631
	@alter.c

17 
	~"sqlôeI¡.h
"

18 
	~<˘y≥.h
>

24 #i‚de‡
SQLITE_OMIT_ALTERTABLE


40 
	$ª«meTabÀFunc
(

41 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

42 
¨gc
,

43 
sqlôe3_vÆue
 **
¨gv


45 c⁄° *
zSql
 = 
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]);

46 c⁄° *
zTabÀName
 = 
	`sqlôe3_vÆue_ãxt
(
¨gv
[1]);

48 
tokí
;

49 
Tokí
 
äame
;

50 c⁄° *
zC§
 = 
zSql
;

51 
Àn
 = 0;

52 *
zRë
;

58 if–
zSql
 ){

61 
äame
.
z
 = 
zC§
;

62 
äame
.
n
 = 
Àn
;

68 
zC§
 +
Àn
;

69 
Àn
 = 
	`sqlôe3GëTokí
(
zC§
, &
tokí
);

70 }  
tokí
==
TK_SPACE
 );

71 
	`as£π
–
Àn
>0 );

72 }  
tokí
!=
TK_LP
 );

74 
zRë
 = 
	`sqlôe3MPrötf
("%.*s%Q%s", 
äame
.
z
 - 
zSql
, zSql,

75 
zTabÀName
, 
äame
.
z
+äame.
n
);

76 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, 
zRë
, -1, 
sqlôe3FªeX
);

78 
	}
}

80 #i‚de‡
SQLITE_OMIT_TRIGGER


88 
	$ª«meTriggîFunc
(

89 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

90 
¨gc
,

91 
sqlôe3_vÆue
 **
¨gv


93 c⁄° *
zSql
 = 
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]);

94 c⁄° *
zTabÀName
 = 
	`sqlôe3_vÆue_ãxt
(
¨gv
[1]);

96 
tokí
;

97 
Tokí
 
äame
;

98 
di°
 = 3;

99 c⁄° *
zC§
 = 
zSql
;

100 
Àn
 = 0;

101 *
zRë
;

108 if–
zSql
 ){

111 
äame
.
z
 = 
zC§
;

112 
äame
.
n
 = 
Àn
;

118 
zC§
 +
Àn
;

119 
Àn
 = 
	`sqlôe3GëTokí
(
zC§
, &
tokí
);

120 } 
tokí
==
TK_SPACE
 );

121 
	`as£π
–
Àn
>0 );

132 
di°
++;

133 if–
tokí
==
TK_DOT
 ||Åokí==
TK_ON
 ){

134 
di°
 = 0;

136 }  
di°
!=2 || (
tokí
!=
TK_WHEN
 &&Åokí!=
TK_FOR
 &&Åokí!=
TK_BEGIN
) );

141 
zRë
 = 
	`sqlôe3MPrötf
("%.*s%Q%s", 
äame
.
z
 - 
zSql
, zSql,

142 
zTabÀName
, 
äame
.
z
+äame.
n
);

143 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, 
zRë
, -1, 
sqlôe3FªeX
);

145 
	}
}

151 
	$sqlôe3A…îFun˘i⁄s
(
sqlôe3
 *
db
){

153 *
zName
;

154 sig√d 
nArg
;

155 (*
xFunc
)(
sqlôe3_c⁄ãxt
*,,
sqlôe3_vÆue
 **);

156 } 
aFuncs
[] = {

157 { "sqlôe_ª«me_èbÀ", 2, 
ª«meTabÀFunc
},

158 #i‚de‡
SQLITE_OMIT_TRIGGER


159 { "sqlôe_ª«me_åiggî", 2, 
ª«meTriggîFunc
},

162 
i
;

164 
i
=0; i<(
aFuncs
)/(aFuncs[0]); i++){

165 
	`sqlôe3Cª©eFunc
(
db
, 
aFuncs
[
i
].
zName
,áFuncs[i].
nArg
,

166 
SQLITE_UTF8
, 0, 
aFuncs
[
i
].
xFunc
, 0, 0);

168 
	}
}

176 *
	$whîeTempTriggîs
(
P¨£
 *
pP¨£
, 
TabÀ
 *
pTab
){

177 
Triggî
 *
pTrig
;

178 *
zWhîe
 = 0;

179 *
tmp
 = 0;

180 c⁄° 
Schema
 *
pTempSchema
 = 
pP¨£
->
db
->
aDb
[1].
pSchema
;

187 if–
pTab
->
pSchema
!=
pTempSchema
 ){

188  
pTrig
=
pTab
->
pTriggî
;ÖTrig;ÖTrigıTrig->
pNext
 ){

189 if–
pTrig
->
pSchema
==
pTempSchema
 ){

190 if–!
zWhîe
 ){

191 
zWhîe
 = 
	`sqlôe3MPrötf
("«me=%Q", 
pTrig
->
«me
);

193 
tmp
 = 
zWhîe
;

194 
zWhîe
 = 
	`sqlôe3MPrötf
("%†ORÇame=%Q", zWhîe, 
pTrig
->
«me
);

195 
	`sqlôeFªe
(
tmp
);

200  
zWhîe
;

201 
	}
}

211 
	$ªlﬂdTabÀSchema
(
P¨£
 *
pP¨£
, 
TabÀ
 *
pTab
, c⁄° *
zName
){

212 
Vdbe
 *
v
;

213 *
zWhîe
;

214 
iDb
;

215 #i‚de‡
SQLITE_OMIT_TRIGGER


216 
Triggî
 *
pTrig
;

219 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

220 if–!
v
 ) ;

221 
iDb
 = 
	`sqlôe3SchemaToIndex
(
pP¨£
->
db
, 
pTab
->
pSchema
);

222 
	`as£π
–
iDb
>=0 );

224 #i‚de‡
SQLITE_OMIT_TRIGGER


226 
pTrig
=
pTab
->
pTriggî
;ÖTrig;ÖTrigıTrig->
pNext
){

227 
iTrigDb
 = 
	`sqlôe3SchemaToIndex
(
pP¨£
->
db
, 
pTrig
->
pSchema
);

228 
	`as£π
–
iTrigDb
==
iDb
 || iTrigDb==1 );

229 
	`sqlôe3VdbeOp3
(
v
, 
OP_Dr›Triggî
, 
iTrigDb
, 0, 
pTrig
->
«me
, 0);

234 
	`sqlôe3VdbeOp3
(
v
, 
OP_Dr›TabÀ
, 
iDb
, 0, 
pTab
->
zName
, 0);

237 
zWhîe
 = 
	`sqlôe3MPrötf
("tbl_«me=%Q", 
zName
);

238 if–!
zWhîe
 ) ;

239 
	`sqlôe3VdbeOp3
(
v
, 
OP_P¨£Schema
, 
iDb
, 0, 
zWhîe
, 
P3_DYNAMIC
);

241 #i‚de‡
SQLITE_OMIT_TRIGGER


245 if–(
zWhîe
=
	`whîeTempTriggîs
(
pP¨£
, 
pTab
))!=0 ){

246 
	`sqlôe3VdbeOp3
(
v
, 
OP_P¨£Schema
, 1, 0, 
zWhîe
, 
P3_DYNAMIC
);

249 
	}
}

255 
	$sqlôe3A…îRíameTabÀ
(

256 
P¨£
 *
pP¨£
,

257 
SrcLi°
 *
pSrc
,

258 
Tokí
 *
pName


260 
iDb
;

261 *
zDb
;

262 
TabÀ
 *
pTab
;

263 *
zName
 = 0;

264 
sqlôe3
 *
db
 = 
pP¨£
->db;

265 
Vdbe
 *
v
;

266 #i‚de‡
SQLITE_OMIT_TRIGGER


267 *
zWhîe
 = 0;

270 if–
	`sqlôe3MÆlocFaûed
(ËË
exô_ª«me_èbÀ
;

271 
	`as£π
–
pSrc
->
nSrc
==1 );

273 
pTab
 = 
	`sqlôe3LoˇãTabÀ
(
pP¨£
, 
pSrc
->
a
[0].
zName
,ÖSrc->a[0].
zD©aba£
);

274 if–!
pTab
 ) 
exô_ª«me_èbÀ
;

275 
iDb
 = 
	`sqlôe3SchemaToIndex
(
pP¨£
->
db
, 
pTab
->
pSchema
);

276 
zDb
 = 
db
->
aDb
[
iDb
].
zName
;

279 
zName
 = 
	`sqlôe3NameFromTokí
(
pName
);

280 if–!
zName
 ) 
exô_ª«me_èbÀ
;

285 if–
	`sqlôe3FödTabÀ
(
db
, 
zName
, 
zDb
Ë|| 
	`sqlôe3FödIndex
(db, zName, zDb) ){

286 
	`sqlôe3Eº‹Msg
(
pP¨£
,

287 "thîêi†ÆªadyánŸhîÅabÀ o∏ödex wôhÅhi†«me: %s", 
zName
);

288 
exô_ª«me_èbÀ
;

294 if–
	`°æí
(
pTab
->
zName
)>6 && 0==
	`sqlôe3SåNICmp
(pTab->zName, "sqlite_", 7) ){

295 
	`sqlôe3Eº‹Msg
(
pP¨£
, "èbÀ %†mayÇŸ bêÆãªd", 
pTab
->
zName
);

296 
exô_ª«me_èbÀ
;

298 if–
SQLITE_OK
!=
	`sqlôe3CheckObje˘Name
(
pP¨£
, 
zName
) ){

299 
exô_ª«me_èbÀ
;

302 #i‚de‡
SQLITE_OMIT_AUTHORIZATION


304 if–
	`sqlôe3AuthCheck
(
pP¨£
, 
SQLITE_ALTER_TABLE
, 
zDb
, 
pTab
->
zName
, 0) ){

305 
exô_ª«me_èbÀ
;

313 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

314 if–
v
==0 ){

315 
exô_ª«me_èbÀ
;

317 
	`sqlôe3BegöWrôeO≥øti⁄
(
pP¨£
, 0, 
iDb
);

318 
	`sqlôe3Ch™geCookõ
(
db
, 
v
, 
iDb
);

321 
	`sqlôe3Ne°edP¨£
(
pP¨£
,

323 #ifde‡
SQLITE_OMIT_TRIGGER


338 
zDb
, 
	`SCHEMA_TABLE
(
iDb
), 
zName
, zName, zName,

339 #i‚de‡
SQLITE_OMIT_TRIGGER


340 
zName
,

342 
zName
, 
	`°æí
(
pTab
->zName),ÖTab->zName

345 #i‚de‡
SQLITE_OMIT_AUTOINCREMENT


349 if–
	`sqlôe3FödTabÀ
(
db
, "sqlôe_£quí˚", 
zDb
) ){

350 
	`sqlôe3Ne°edP¨£
(
pP¨£
,

352 
zDb
, 
zName
, 
pTab
->zName);

356 #i‚de‡
SQLITE_OMIT_TRIGGER


361 if–(
zWhîe
=
	`whîeTempTriggîs
(
pP¨£
, 
pTab
))!=0 ){

362 
	`sqlôe3Ne°edP¨£
(
pP¨£
,

366 "WHERE %s;", 
zName
, zName, 
zWhîe
);

367 
	`sqlôeFªe
(
zWhîe
);

372 
	`ªlﬂdTabÀSchema
(
pP¨£
, 
pTab
, 
zName
);

374 
exô_ª«me_èbÀ
:

375 
	`sqlôe3SrcLi°Dñëe
(
pSrc
);

376 
	`sqlôeFªe
(
zName
);

377 
	}
}

388 
	$sqlôe3A…îFöishAddCﬁumn
(
P¨£
 *
pP¨£
, 
Tokí
 *
pCﬁDef
){

389 
TabÀ
 *
pNew
;

390 
TabÀ
 *
pTab
;

391 
iDb
;

392 c⁄° *
zDb
;

393 c⁄° *
zTab
;

394 *
zCﬁ
;

395 
Cﬁumn
 *
pCﬁ
;

396 
Ex¥
 *
pDÊt
;

398 if–
pP¨£
->
nEº
 ) ;

399 
pNew
 = 
pP¨£
->
pNewTabÀ
;

400 
	`as£π
–
pNew
 );

402 
iDb
 = 
	`sqlôe3SchemaToIndex
(
pP¨£
->
db
, 
pNew
->
pSchema
);

403 
zDb
 = 
pP¨£
->
db
->
aDb
[
iDb
].
zName
;

404 
zTab
 = 
pNew
->
zName
;

405 
pCﬁ
 = &
pNew
->
aCﬁ
[pNew->
nCﬁ
-1];

406 
pDÊt
 = 
pCﬁ
->pDflt;

407 
pTab
 = 
	`sqlôe3FödTabÀ
(
pP¨£
->
db
, 
zTab
, 
zDb
);

408 
	`as£π
–
pTab
 );

410 #i‚de‡
SQLITE_OMIT_AUTHORIZATION


412 if–
	`sqlôe3AuthCheck
(
pP¨£
, 
SQLITE_ALTER_TABLE
, 
zDb
, 
pTab
->
zName
, 0) ){

421 if–
pDÊt
 &&ÖDÊt->
›
==
TK_NULL
 ){

422 
pDÊt
 = 0;

429 if–
pCﬁ
->
isPrimKey
 ){

430 
	`sqlôe3Eº‹Msg
(
pP¨£
, "Cannotáddá PRIMARY KEY column");

433 if–
pNew
->
pIndex
 ){

434 
	`sqlôe3Eº‹Msg
(
pP¨£
, "Cannotáddá UNIQUE column");

437 if–
pCﬁ
->
nŸNuŒ
 && !
pDÊt
 ){

438 
	`sqlôe3Eº‹Msg
(
pP¨£
,

446 if–
pDÊt
 ){

447 
sqlôe3_vÆue
 *
pVÆ
;

448 if–
	`sqlôe3VÆueFromEx¥
(
pDÊt
, 
SQLITE_UTF8
, 
SQLITE_AFF_NONE
, &
pVÆ
) ){

452 if–!
pVÆ
 ){

453 
	`sqlôe3Eº‹Msg
(
pP¨£
, "Cannotáddá column withÇon-constant default");

456 
	`sqlôe3VÆueFªe
(
pVÆ
);

460 
zCﬁ
 = 
	`sqlôeSåNDup
((*)
pCﬁDef
->
z
,ÖCﬁDef->
n
);

461 if–
zCﬁ
 ){

462 *
zEnd
 = &
zCﬁ
[
pCﬁDef
->
n
-1];

463  (
zEnd
>
zCﬁ
 && *zEnd==';'Ë|| 
	`is•a˚
(*(*)zEnd) ){

464 *
zEnd
-- = '\0';

466 
	`sqlôe3Ne°edP¨£
(
pP¨£
,

470 
zDb
, 
	`SCHEMA_TABLE
(
iDb
), 
pNew
->
addCﬁOff£t
, 
zCﬁ
,ÖNew->addColOffset+1,

471 
zTab


473 
	`sqlôeFªe
(
zCﬁ
);

480 
	`sqlôe3MöimumFûeF‹m©
(
pP¨£
, 
iDb
, 
pDÊt
 ? 3 : 2);

483 
	`ªlﬂdTabÀSchema
(
pP¨£
, 
pTab
,ÖTab->
zName
);

484 
	}
}

501 
	$sqlôe3A…îBegöAddCﬁumn
(
P¨£
 *
pP¨£
, 
SrcLi°
 *
pSrc
){

502 
TabÀ
 *
pNew
;

503 
TabÀ
 *
pTab
;

504 
Vdbe
 *
v
;

505 
iDb
;

506 
i
;

507 
nAŒoc
;

510 
	`as£π
–
pP¨£
->
pNewTabÀ
==0 );

511 if–
	`sqlôe3MÆlocFaûed
(ËË
exô_begö_add_cﬁumn
;

512 
pTab
 = 
	`sqlôe3LoˇãTabÀ
(
pP¨£
, 
pSrc
->
a
[0].
zName
,ÖSrc->a[0].
zD©aba£
);

513 if–!
pTab
 ) 
exô_begö_add_cﬁumn
;

516 if–
pTab
->
pSñe˘
 ){

517 
	`sqlôe3Eº‹Msg
(
pP¨£
, "Cannotáddá columnÅoá view");

518 
exô_begö_add_cﬁumn
;

521 
	`as£π
–
pTab
->
addCﬁOff£t
>0 );

522 
iDb
 = 
	`sqlôe3SchemaToIndex
(
pP¨£
->
db
, 
pTab
->
pSchema
);

527 
pNew
 = (
TabÀ
 *)
	`sqlôeMÆloc
((Table));

528 if–!
pNew
 ) 
exô_begö_add_cﬁumn
;

529 
pP¨£
->
pNewTabÀ
 = 
pNew
;

530 
pNew
->
nRef
 = 1;

531 
pNew
->
nCﬁ
 = 
pTab
->nCol;

532 
	`as£π
–
pNew
->
nCﬁ
>0 );

533 
nAŒoc
 = (((
pNew
->
nCﬁ
-1)/8)*8)+8;

534 
	`as£π
–
nAŒoc
>=
pNew
->
nCﬁ
 &&ÇAlloc%8==0 &&ÇAlloc-pNew->nCol<8 );

535 
pNew
->
aCﬁ
 = (
Cﬁumn
 *)
	`sqlôeMÆloc
((Cﬁumn)*
nAŒoc
);

536 
pNew
->
zName
 = 
	`sqlôeSåDup
(
pTab
->zName);

537 if–!
pNew
->
aCﬁ
 || !pNew->
zName
 ){

538 
exô_begö_add_cﬁumn
;

540 
	`mem˝y
(
pNew
->
aCﬁ
, 
pTab
->aCﬁ, (
Cﬁumn
)*pNew->
nCﬁ
);

541 
i
=0; i<
pNew
->
nCﬁ
; i++){

542 
Cﬁumn
 *
pCﬁ
 = &
pNew
->
aCﬁ
[
i
];

543 
pCﬁ
->
zName
 = 
	`sqlôeSåDup
(pCol->zName);

544 
pCﬁ
->
zCﬁl
 = 0;

545 
pCﬁ
->
zTy≥
 = 0;

546 
pCﬁ
->
pDÊt
 = 0;

548 
pNew
->
pSchema
 = 
pP¨£
->
db
->
aDb
[
iDb
].pSchema;

549 
pNew
->
addCﬁOff£t
 = 
pTab
->addColOffset;

550 
pNew
->
nRef
 = 1;

553 
	`sqlôe3BegöWrôeO≥øti⁄
(
pP¨£
, 0, 
iDb
);

554 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

555 if–!
v
 ) 
exô_begö_add_cﬁumn
;

556 
	`sqlôe3Ch™geCookõ
(
pP¨£
->
db
, 
v
, 
iDb
);

558 
exô_begö_add_cﬁumn
:

559 
	`sqlôe3SrcLi°Dñëe
(
pSrc
);

561 
	}
}

	@analyze.c

16 #i‚de‡
SQLITE_OMIT_ANALYZE


17 
	~"sqlôeI¡.h
"

27 
	$›íSètTabÀ
(

28 
P¨£
 *
pP¨£
,

29 
iDb
,

30 
iSètCur
,

31 c⁄° *
zWhîe


33 
sqlôe3
 *
db
 = 
pP¨£
->db;

34 
Db
 *
pDb
;

35 
iRoŸPage
;

36 
TabÀ
 *
pSèt
;

37 
Vdbe
 *
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

39 
pDb
 = &
db
->
aDb
[
iDb
];

40 if–(
pSèt
 = 
	`sqlôe3FödTabÀ
(
db
, "sqlôe_°©1", 
pDb
->
zName
))==0 ){

45 
	`sqlôe3Ne°edP¨£
(
pP¨£
,

47 
pDb
->
zName


49 
iRoŸPage
 = 0;

50 }if–
zWhîe
 ){

53 
	`sqlôe3Ne°edP¨£
(
pP¨£
,

55 
pDb
->
zName
, 
zWhîe


57 
iRoŸPage
 = 
pSèt
->
äum
;

60 
iRoŸPage
 = 
pSèt
->
äum
;

61 
	`sqlôe3VdbeAddOp
(
v
, 
OP_CÀ¨
, 
pSèt
->
äum
, 
iDb
);

69 if–
iRoŸPage
>0 ){

70 
	`sqlôe3TabÀLock
(
pP¨£
, 
iDb
, 
iRoŸPage
, 1, "sqlite_stat1");

72 
	`sqlôe3VdbeAddOp
(
v
, 
OP_I¡egî
, 
iDb
, 0);

73 
	`sqlôe3VdbeAddOp
(
v
, 
OP_O≥nWrôe
, 
iSètCur
, 
iRoŸPage
);

74 
	`sqlôe3VdbeAddOp
(
v
, 
OP_SëNumCﬁumns
, 
iSètCur
, 3);

75 
	}
}

81 
	$™ÆyzeO√TabÀ
(

82 
P¨£
 *
pP¨£
,

83 
TabÀ
 *
pTab
,

84 
iSètCur
,

85 
iMem


87 
Index
 *
pIdx
;

88 
iIdxCur
;

89 
nCﬁ
;

90 
Vdbe
 *
v
;

91 
i
;

92 
t›OfLo›
;

93 
ídOfLo›
;

94 
addr
;

95 
iDb
;

97 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

98 if–
pTab
==0 ||ÖTab->
pIndex
==0 ){

103 
iDb
 = 
	`sqlôe3SchemaToIndex
(
pP¨£
->
db
, 
pTab
->
pSchema
);

104 
	`as£π
–
iDb
>=0 );

105 #i‚de‡
SQLITE_OMIT_AUTHORIZATION


106 if–
	`sqlôe3AuthCheck
(
pP¨£
, 
SQLITE_ANALYZE
, 
pTab
->
zName
, 0,

107 
pP¨£
->
db
->
aDb
[
iDb
].
zName
 ) ){

113 
	`sqlôe3TabÀLock
(
pP¨£
, 
iDb
, 
pTab
->
äum
, 0,ÖTab->
zName
);

115 
iIdxCur
 = 
pP¨£
->
nTab
;

116 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
){

117 
KeyInfo
 *
pKey
 = 
	`sqlôe3IndexKeyöfo
(
pP¨£
, 
pIdx
);

121 
	`as£π
–
iDb
==
	`sqlôe3SchemaToIndex
(
pP¨£
->
db
, 
pIdx
->
pSchema
) );

122 
	`sqlôe3VdbeAddOp
(
v
, 
OP_I¡egî
, 
iDb
, 0);

123 
	`VdbeCommít
((
v
, "# %s", 
pIdx
->
zName
));

124 
	`sqlôe3VdbeOp3
(
v
, 
OP_O≥nRód
, 
iIdxCur
, 
pIdx
->
äum
,

125 (*)
pKey
, 
P3_KEYINFO_HANDOFF
);

126 
nCﬁ
 = 
pIdx
->
nCﬁumn
;

127 if–
iMem
+
nCﬁ
*2>=
pP¨£
->
nMem
 ){

128 
pP¨£
->
nMem
 = 
iMem
+
nCﬁ
*2+1;

130 
	`sqlôe3VdbeAddOp
(
v
, 
OP_SëNumCﬁumns
, 
iIdxCur
, 
nCﬁ
+1);

145 
i
=0; i<=
nCﬁ
; i++){

146 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemI¡
, 0, 
iMem
+
i
);

148 
i
=0; i<
nCﬁ
; i++){

149 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemNuŒ
, 
iMem
+
nCﬁ
+
i
+1, 0);

154 
ídOfLo›
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

155 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Rewöd
, 
iIdxCur
, 
ídOfLo›
);

156 
t›OfLo›
 = 
	`sqlôe3VdbeCuºítAddr
(
v
);

157 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemIn¸
, 1, 
iMem
);

158 
i
=0; i<
nCﬁ
; i++){

159 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Cﬁumn
, 
iIdxCur
, 
i
);

160 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemLﬂd
, 
iMem
+
nCﬁ
+
i
+1, 0);

161 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Ne
, 0x100, 0);

163 
	`sqlôe3VdbeAddOp
(
v
, 
OP_GŸo
, 0, 
ídOfLo›
);

164 
i
=0; i<
nCﬁ
; i++){

165 
addr
 = 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemIn¸
, 1, 
iMem
+
i
+1);

166 
	`sqlôe3VdbeCh™geP2
(
v
, 
t›OfLo›
 + 3*
i
 + 3, 
addr
);

167 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Cﬁumn
, 
iIdxCur
, 
i
);

168 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemSt‹e
, 
iMem
+
nCﬁ
+
i
+1, 1);

170 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
ídOfLo›
);

171 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Next
, 
iIdxCur
, 
t›OfLo›
);

172 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Clo£
, 
iIdxCur
, 0);

192 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemLﬂd
, 
iMem
, 0);

193 
addr
 = 
	`sqlôe3VdbeAddOp
(
v
, 
OP_IfNŸ
, 0, 0);

194 
	`sqlôe3VdbeAddOp
(
v
, 
OP_NewRowid
, 
iSètCur
, 0);

195 
	`sqlôe3VdbeOp3
(
v
, 
OP_Såög8
, 0, 0, 
pTab
->
zName
, 0);

196 
	`sqlôe3VdbeOp3
(
v
, 
OP_Såög8
, 0, 0, 
pIdx
->
zName
, 0);

197 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemLﬂd
, 
iMem
, 0);

198 
	`sqlôe3VdbeOp3
(
v
, 
OP_Såög8
, 0, 0, " ", 0);

199 
i
=0; i<
nCﬁ
; i++){

200 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemLﬂd
, 
iMem
, 0);

201 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemLﬂd
, 
iMem
+
i
+1, 0);

202 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Add
, 0, 0);

203 
	`sqlôe3VdbeAddOp
(
v
, 
OP_AddImm
, -1, 0);

204 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemLﬂd
, 
iMem
+
i
+1, 0);

205 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Divide
, 0, 0);

206 
	`sqlôe3VdbeAddOp
(
v
, 
OP_ToI¡
, 0, 0);

207 if–
i
==
nCﬁ
-1 ){

208 
	`sqlôe3VdbeAddOp
(
v
, 
OP_C⁄ˇt
, 
nCﬁ
*2-1, 0);

210 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Dup
, 1, 0);

213 
	`sqlôe3VdbeOp3
(
v
, 
OP_MakeRec‹d
, 3, 0, "aaa", 0);

214 
	`sqlôe3VdbeAddOp
(
v
, 
OP_In£π
, 
iSètCur
, 0);

215 
	`sqlôe3VdbeJumpHîe
(
v
, 
addr
);

217 
	}
}

223 
	$lﬂdA«lysis
(
P¨£
 *
pP¨£
, 
iDb
){

224 
Vdbe
 *
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

225 
	`sqlôe3VdbeAddOp
(
v
, 
OP_LﬂdA«lysis
, 
iDb
, 0);

226 
	}
}

231 
	$™ÆyzeD©aba£
(
P¨£
 *
pP¨£
, 
iDb
){

232 
sqlôe3
 *
db
 = 
pP¨£
->db;

233 
Schema
 *
pSchema
 = 
db
->
aDb
[
iDb
].pSchema;

234 
HashEÀm
 *
k
;

235 
iSètCur
;

236 
iMem
;

238 
	`sqlôe3BegöWrôeO≥øti⁄
(
pP¨£
, 0, 
iDb
);

239 
iSètCur
 = 
pP¨£
->
nTab
++;

240 
	`›íSètTabÀ
(
pP¨£
, 
iDb
, 
iSètCur
, 0);

241 
iMem
 = 
pP¨£
->
nMem
;

242 
k
=
	`sqlôeHashFú°
(&
pSchema
->
tblHash
); k; k=
	`sqlôeHashNext
(k)){

243 
TabÀ
 *
pTab
 = (TabÀ*)
	`sqlôeHashD©a
(
k
);

244 
	`™ÆyzeO√TabÀ
(
pP¨£
, 
pTab
, 
iSètCur
, 
iMem
);

246 
	`lﬂdA«lysis
(
pP¨£
, 
iDb
);

247 
	}
}

253 
	$™ÆyzeTabÀ
(
P¨£
 *
pP¨£
, 
TabÀ
 *
pTab
){

254 
iDb
;

255 
iSètCur
;

257 
	`as£π
–
pTab
!=0 );

258 
iDb
 = 
	`sqlôe3SchemaToIndex
(
pP¨£
->
db
, 
pTab
->
pSchema
);

259 
	`sqlôe3BegöWrôeO≥øti⁄
(
pP¨£
, 0, 
iDb
);

260 
iSètCur
 = 
pP¨£
->
nTab
++;

261 
	`›íSètTabÀ
(
pP¨£
, 
iDb
, 
iSètCur
, 
pTab
->
zName
);

262 
	`™ÆyzeO√TabÀ
(
pP¨£
, 
pTab
, 
iSètCur
,ÖP¨£->
nMem
);

263 
	`lﬂdA«lysis
(
pP¨£
, 
iDb
);

264 
	}
}

278 
	$sqlôe3A«lyze
(
P¨£
 *
pP¨£
, 
Tokí
 *
pName1
, Tokí *
pName2
){

279 
sqlôe3
 *
db
 = 
pP¨£
->db;

280 
iDb
;

281 
i
;

282 *
z
, *
zDb
;

283 
TabÀ
 *
pTab
;

284 
Tokí
 *
pTabÀName
;

288 if–
SQLITE_OK
!=
	`sqlôe3RódSchema
(
pP¨£
) ){

292 if–
pName1
==0 ){

294 
i
=0; i<
db
->
nDb
; i++){

295 if–
i
==1 ) ;

296 
	`™ÆyzeD©aba£
(
pP¨£
, 
i
);

298 }if–
pName2
==0 ||ÖName2->
n
==0 ){

300 
iDb
 = 
	`sqlôe3FödDb
(
db
, 
pName1
);

301 if–
iDb
>=0 ){

302 
	`™ÆyzeD©aba£
(
pP¨£
, 
iDb
);

304 
z
 = 
	`sqlôe3NameFromTokí
(
pName1
);

305 
pTab
 = 
	`sqlôe3LoˇãTabÀ
(
pP¨£
, 
z
, 0);

306 
	`sqlôeFªe
(
z
);

307 if–
pTab
 ){

308 
	`™ÆyzeTabÀ
(
pP¨£
, 
pTab
);

313 
iDb
 = 
	`sqlôe3TwoP¨tName
(
pP¨£
, 
pName1
, 
pName2
, &
pTabÀName
);

314 if–
iDb
>=0 ){

315 
zDb
 = 
db
->
aDb
[
iDb
].
zName
;

316 
z
 = 
	`sqlôe3NameFromTokí
(
pTabÀName
);

317 
pTab
 = 
	`sqlôe3LoˇãTabÀ
(
pP¨£
, 
z
, 
zDb
);

318 
	`sqlôeFªe
(
z
);

319 if–
pTab
 ){

320 
	`™ÆyzeTabÀ
(
pP¨£
, 
pTab
);

324 
	}
}

330 
™ÆysisInfo
 
	t™ÆysisInfo
;

331 
	s™ÆysisInfo
 {

332 
sqlôe3
 *
	mdb
;

333 c⁄° *
	mzD©aba£
;

343 
	$™ÆysisLﬂdî
(*
pD©a
, 
¨gc
, **
¨gv
, **
azNŸU£d
){

344 
™ÆysisInfo
 *
pInfo
 = (™ÆysisInfo*)
pD©a
;

345 
Index
 *
pIndex
;

346 
i
, 
c
;

347 
v
;

348 c⁄° *
z
;

350 
	`as£π
–
¨gc
==2 );

351 if–
¨gv
==0 ||árgv[0]==0 ||árgv[1]==0 ){

354 
pIndex
 = 
	`sqlôe3FödIndex
(
pInfo
->
db
, 
¨gv
[0],ÖInfo->
zD©aba£
);

355 if–
pIndex
==0 ){

358 
z
 = 
¨gv
[1];

359 
i
=0; *
z
 && i<=
pIndex
->
nCﬁumn
; i++){

360 
v
 = 0;

361  (
c
=
z
[0])>='0' && c<='9' ){

362 
v
 = v*10 + 
c
 - '0';

363 
z
++;

365 
pIndex
->
aiRowE°
[
i
] = 
v
;

366 if–*
z
==' ' ) z++;

369 
	}
}

374 
	$sqlôe3A«lysisLﬂd
(
sqlôe3
 *
db
, 
iDb
){

375 
™ÆysisInfo
 
sInfo
;

376 
HashEÀm
 *
i
;

377 *
zSql
;

380 
i
=
	`sqlôeHashFú°
(&
db
->
aDb
[
iDb
].
pSchema
->
idxHash
);i;i=
	`sqlôeHashNext
(i)){

381 
Index
 *
pIdx
 = 
	`sqlôeHashD©a
(
i
);

382 
	`sqlôe3DeÁu…RowE°
(
pIdx
);

386 
sInfo
.
db
 = db;

387 
sInfo
.
zD©aba£
 = 
db
->
aDb
[
iDb
].
zName
;

388 if–
	`sqlôe3FödTabÀ
(
db
, "sqlôe_°©1", 
sInfo
.
zD©aba£
)==0 ){

394 
zSql
 = 
	`sqlôe3MPrötf
("SELECT idx, stat FROM %Q.sqlite_stat1",

395 
sInfo
.
zD©aba£
);

396 
	`sqlôe3Sa„tyOff
(
db
);

397 
	`sqlôe3_exec
(
db
, 
zSql
, 
™ÆysisLﬂdî
, &
sInfo
, 0);

398 
	`sqlôe3Sa„tyOn
(
db
);

399 
	`sqlôeFªe
(
zSql
);

400 
	}
}

	@attach.c

16 
	~"sqlôeI¡.h
"

36 
	$ªsﬁveAâachEx¥
(
NameC⁄ãxt
 *
pName
, 
Ex¥
 *
pEx¥
)

38 
rc
 = 
SQLITE_OK
;

39 if–
pEx¥
 ){

40 if–
pEx¥
->
›
!=
TK_ID
 ){

41 
rc
 = 
	`sqlôe3Ex¥ResﬁveNames
(
pName
, 
pEx¥
);

43 
pEx¥
->
›
 = 
TK_STRING
;

46  
rc
;

47 
	}
}

60 
	$©èchFunc
(

61 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

62 
¨gc
,

63 
sqlôe3_vÆue
 **
¨gv


65 
i
;

66 
rc
 = 0;

67 
sqlôe3
 *
db
 = 
	`sqlôe3_u£r_d©a
(
c⁄ãxt
);

68 c⁄° *
zName
;

69 c⁄° *
zFûe
;

70 
Db
 *
aNew
;

71 
zEº
[128];

72 *
zEºDyn
 = 0;

74 
zFûe
 = (c⁄° *)
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]);

75 
zName
 = (c⁄° *)
	`sqlôe3_vÆue_ãxt
(
¨gv
[1]);

83 if–
db
->
nDb
>=
MAX_ATTACHED
+2 ){

84 
	`sqlôe3_¢¥ötf
(

85 127, 
zEº
, "toÿm™yáâached d©aba£†- max %d", 
MAX_ATTACHED


87 
©èch_îr‹
;

89 if–!
db
->
autoCommô
 ){

90 
	`°r˝y
(
zEº
, "cannot ATTACH database withinÅransaction");

91 
©èch_îr‹
;

93 
i
=0; i<
db
->
nDb
; i++){

94 *
z
 = 
db
->
aDb
[
i
].
zName
;

95 if–
z
 && 
	`sqlôe3SåICmp
(z, 
zName
)==0 ){

96 
	`sqlôe3_¢¥ötf
(127, 
zEº
, "d©aba£ %†i†Æªady i¿u£", 
zName
);

97 
©èch_îr‹
;

104 if–
db
->
aDb
==db->
aDbSètic
 ){

105 
aNew
 = 
	`sqlôeMÆloc
–(
db
->
aDb
[0])*3 );

106 if–
aNew
==0 ){

109 
	`mem˝y
(
aNew
, 
db
->
aDb
, (db->aDb[0])*2);

111 
aNew
 = 
	`sqlôeRóŒoc
(
db
->
aDb
, (db->aDb[0])*(db->
nDb
+1) );

112 if–
aNew
==0 ){

116 
db
->
aDb
 = 
aNew
;

117 
aNew
 = &
db
->
aDb
[db->
nDb
++];

118 
	`mem£t
(
aNew
, 0, (*aNew));

124 
rc
 = 
	`sqlôe3BåìFa˘‹y
(
db
, 
zFûe
, 0, 
MAX_PAGES
, &
aNew
->
pBt
);

125 if–
rc
==
SQLITE_OK
 ){

126 
aNew
->
pSchema
 = 
	`sqlôe3SchemaGë
◊New->
pBt
);

127 if–!
aNew
->
pSchema
 ){

128 
rc
 = 
SQLITE_NOMEM
;

129 }if–
aNew
->
pSchema
->
fûe_f‹m©
 &&áNew->pSchema->
íc
!=
	`ENC
(
db
) ){

130 
	`°r˝y
(
zEº
,

132 
©èch_îr‹
;

135 
aNew
->
zName
 = 
	`sqlôeSåDup
(zName);

136 
aNew
->
ß„ty_Àvñ
 = 3;

138 #i‡
SQLITE_HAS_CODEC


140 
	`sqlôe3CodecAâach
(
sqlôe3
*, , *, );

141 
	`sqlôe3CodecGëKey
(
sqlôe3
*, , **, *);

142 
nKey
;

143 *
zKey
;

144 
t
 = 
	`sqlôe3_vÆue_ty≥
(
¨gv
[2]);

145  
t
 ){

146 
SQLITE_INTEGER
:

147 
SQLITE_FLOAT
:

148 
zEºDyn
 = 
	`sqlôeSåDup
("Invalid key value");

149 
rc
 = 
SQLITE_ERROR
;

152 
SQLITE_TEXT
:

153 
SQLITE_BLOB
:

154 
nKey
 = 
	`sqlôe3_vÆue_byãs
(
¨gv
[2]);

155 
zKey
 = (*)
	`sqlôe3_vÆue_blob
(
¨gv
[2]);

156 
	`sqlôe3CodecAâach
(
db
, db->
nDb
-1, 
zKey
, 
nKey
);

159 
SQLITE_NULL
:

161 
	`sqlôe3CodecGëKey
(
db
, 0, (**)&
zKey
, &
nKey
);

162 
	`sqlôe3CodecAâach
(
db
, db->
nDb
-1, 
zKey
, 
nKey
);

173 if–
rc
==
SQLITE_OK
 ){

174 
	`sqlôe3Sa„tyOn
(
db
);

175 
rc
 = 
	`sqlôe3Inô
(
db
, &
zEºDyn
);

176 
	`sqlôe3Sa„tyOff
(
db
);

178 if–
rc
 ){

179 
iDb
 = 
db
->
nDb
 - 1;

180 
	`as£π
–
iDb
>=2 );

181 if–
db
->
aDb
[
iDb
].
pBt
 ){

182 
	`sqlôe3BåìClo£
(
db
->
aDb
[
iDb
].
pBt
);

183 
db
->
aDb
[
iDb
].
pBt
 = 0;

184 
db
->
aDb
[
iDb
].
pSchema
 = 0;

186 
	`sqlôe3Re£tI¡î«lSchema
(
db
, 0);

187 
db
->
nDb
 = 
iDb
;

188 
	`sqlôe3_¢¥ötf
(127, 
zEº
, "u«bÀÅÿ›í d©aba£: %s", 
zFûe
);

189 
©èch_îr‹
;

194 
©èch_îr‹
:

196 if–
zEºDyn
 ){

197 
	`sqlôe3_ªsu…_îr‹
(
c⁄ãxt
, 
zEºDyn
, -1);

198 
	`sqlôeFªe
(
zEºDyn
);

200 
zEº
[(zErr)-1] = 0;

201 
	`sqlôe3_ªsu…_îr‹
(
c⁄ãxt
, 
zEº
, -1);

203 
	}
}

213 
	$dëachFunc
(

214 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

215 
¨gc
,

216 
sqlôe3_vÆue
 **
¨gv


218 c⁄° *
zName
 = (c⁄° *)
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]);

219 
sqlôe3
 *
db
 = 
	`sqlôe3_u£r_d©a
(
c⁄ãxt
);

220 
i
;

221 
Db
 *
pDb
 = 0;

222 
zEº
[128];

224 
	`as£π
(
zName
);

225 
i
=0; i<
db
->
nDb
; i++){

226 
pDb
 = &
db
->
aDb
[
i
];

227 if–
pDb
->
pBt
==0 ) ;

228 if–
	`sqlôe3SåICmp
(
pDb
->
zName
, zName)==0 ) ;

231 if–
i
>=
db
->
nDb
 ){

232 
	`sqlôe3_¢¥ötf
((
zEº
), zEº, "nÿsuch d©aba£: %s", 
zName
);

233 
dëach_îr‹
;

235 if–
i
<2 ){

236 
	`sqlôe3_¢¥ötf
((
zEº
), zEº, "ˇ¬Ÿ dëach d©aba£ %s", 
zName
);

237 
dëach_îr‹
;

239 if–!
db
->
autoCommô
 ){

240 
	`°r˝y
(
zEº
, "cannot DETACH database withinÅransaction");

241 
dëach_îr‹
;

244 
	`sqlôe3BåìClo£
(
pDb
->
pBt
);

245 
pDb
->
pBt
 = 0;

246 
pDb
->
pSchema
 = 0;

247 
	`sqlôe3Re£tI¡î«lSchema
(
db
, 0);

250 
dëach_îr‹
:

251 
	`sqlôe3_ªsu…_îr‹
(
c⁄ãxt
, 
zEº
, -1);

252 
	}
}

258 
	$codeAâach
(

259 
P¨£
 *
pP¨£
,

260 
ty≥
,

261 c⁄° *
zFunc
,

262 
nFunc
,

263 
Ex¥
 *
pAuthArg
,

264 
Ex¥
 *
pFûíame
,

265 
Ex¥
 *
pDb«me
,

266 
Ex¥
 *
pKey


268 
rc
;

269 
NameC⁄ãxt
 
sName
;

270 
Vdbe
 *
v
;

271 
FuncDef
 *
pFunc
;

272 
sqlôe3
* 
db
 = 
pP¨£
->db;

274 #i‚de‡
SQLITE_OMIT_AUTHORIZATION


275 
	`as£π
–
	`sqlôe3MÆlocFaûed
(Ë|| 
pAuthArg
 );

276 if–
pAuthArg
 ){

277 *
zAuthArg
 = 
	`sqlôe3NameFromTokí
(&
pAuthArg
->
•™
);

278 if–!
zAuthArg
 ){

279 
©èch_íd
;

281 
rc
 = 
	`sqlôe3AuthCheck
(
pP¨£
, 
ty≥
, 
zAuthArg
, 0, 0);

282 
	`sqlôeFªe
(
zAuthArg
);

283 if(
rc
!=
SQLITE_OK
 ){

284 
©èch_íd
;

289 
	`mem£t
(&
sName
, 0, (
NameC⁄ãxt
));

290 
sName
.
pP¨£
 =ÖParse;

293 
SQLITE_OK
!=(
rc
 = 
	`ªsﬁveAâachEx¥
(&
sName
, 
pFûíame
)) ||

294 
SQLITE_OK
!=(
rc
 = 
	`ªsﬁveAâachEx¥
(&
sName
, 
pDb«me
)) ||

295 
SQLITE_OK
!=(
rc
 = 
	`ªsﬁveAâachEx¥
(&
sName
, 
pKey
))

297 
pP¨£
->
nEº
++;

298 
©èch_íd
;

301 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

302 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pFûíame
);

303 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pDb«me
);

304 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pKey
);

306 
	`as£π
–
v
 || 
	`sqlôe3MÆlocFaûed
() );

307 if–
v
 ){

308 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Fun˘i⁄
, 0, 
nFunc
);

309 
pFunc
 = 
	`sqlôe3FödFun˘i⁄
(
db
, 
zFunc
, 
	`°æí
(zFunc), 
nFunc
, 
SQLITE_UTF8
,0);

310 
	`sqlôe3VdbeCh™geP3
(
v
, -1, (*)
pFunc
, 
P3_FUNCDEF
);

316 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Expúe
, (
ty≥
==
SQLITE_ATTACH
), 0);

319 
©èch_íd
:

320 
	`sqlôe3Ex¥Dñëe
(
pFûíame
);

321 
	`sqlôe3Ex¥Dñëe
(
pDb«me
);

322 
	`sqlôe3Ex¥Dñëe
(
pKey
);

323 
	}
}

330 
	$sqlôe3Dëach
(
P¨£
 *
pP¨£
, 
Ex¥
 *
pDb«me
){

331 
	`codeAâach
(
pP¨£
, 
SQLITE_DETACH
, "sqlôe_dëach", 1, 
pDb«me
, 0, 0,ÖDbname);

332 
	}
}

339 
	$sqlôe3Aâach
(
P¨£
 *
pP¨£
, 
Ex¥
 *
p
, Ex¥ *
pDb«me
, Ex¥ *
pKey
){

340 
	`codeAâach
(
pP¨£
, 
SQLITE_ATTACH
, "sqlôe_©èch", 3, 
p
,Ö, 
pDb«me
, 
pKey
);

341 
	}
}

346 
	$sqlôe3AâachFun˘i⁄s
(
sqlôe3
 *
db
){

347 c⁄° 
íc
 = 
SQLITE_UTF8
;

348 
	`sqlôe3Cª©eFunc
(
db
, "sqlôe_©èch", 3, 
íc
, db, 
©èchFunc
, 0, 0);

349 
	`sqlôe3Cª©eFunc
(
db
, "sqlôe_dëach", 1, 
íc
, db, 
dëachFunc
, 0, 0);

350 
	}
}

359 
	$sqlôe3FixInô
(

360 
DbFixî
 *
pFix
,

361 
P¨£
 *
pP¨£
,

362 
iDb
,

363 c⁄° *
zTy≥
,

364 c⁄° 
Tokí
 *
pName


366 
sqlôe3
 *
db
;

368 if–
iDb
<0 || iDb==1 )  0;

369 
db
 = 
pP¨£
->db;

370 
	`as£π
–
db
->
nDb
>
iDb
 );

371 
pFix
->
pP¨£
 =ÖParse;

372 
pFix
->
zDb
 = 
db
->
aDb
[
iDb
].
zName
;

373 
pFix
->
zTy≥
 = zType;

374 
pFix
->
pName
 =ÖName;

376 
	}
}

392 
	$sqlôe3FixSrcLi°
(

393 
DbFixî
 *
pFix
,

394 
SrcLi°
 *
pLi°


396 
i
;

397 c⁄° *
zDb
;

398 
SrcLi°_ôem
 *
pIãm
;

400 if–
pLi°
==0 )  0;

401 
zDb
 = 
pFix
->zDb;

402 
i
=0, 
pIãm
=
pLi°
->
a
; i<pLi°->
nSrc
; i++,ÖItem++){

403 if–
pIãm
->
zD©aba£
==0 ){

404 
pIãm
->
zD©aba£
 = 
	`sqlôeSåDup
(
zDb
);

405 }if–
	`sqlôe3SåICmp
(
pIãm
->
zD©aba£
,
zDb
)!=0 ){

406 
	`sqlôe3Eº‹Msg
(
pFix
->
pP¨£
,

408 
pFix
->
zTy≥
,ÖFix->
pName
, 
pIãm
->
zD©aba£
);

411 #i‡!
	`deföed
(
SQLITE_OMIT_VIEW
Ë|| !deföed(
SQLITE_OMIT_TRIGGER
)

412 if–
	`sqlôe3FixSñe˘
(
pFix
, 
pIãm
->
pSñe˘
) )  1;

413 if–
	`sqlôe3FixEx¥
(
pFix
, 
pIãm
->
pOn
) )  1;

417 
	}
}

418 #i‡!
deföed
(
SQLITE_OMIT_VIEW
Ë|| !deföed(
SQLITE_OMIT_TRIGGER
)

419 
	$sqlôe3FixSñe˘
(

420 
DbFixî
 *
pFix
,

421 
Sñe˘
 *
pSñe˘


423  
pSñe˘
 ){

424 if–
	`sqlôe3FixEx¥Li°
(
pFix
, 
pSñe˘
->
pELi°
) ){

427 if–
	`sqlôe3FixSrcLi°
(
pFix
, 
pSñe˘
->
pSrc
) ){

430 if–
	`sqlôe3FixEx¥
(
pFix
, 
pSñe˘
->
pWhîe
) ){

433 if–
	`sqlôe3FixEx¥
(
pFix
, 
pSñe˘
->
pHavög
) ){

436 
pSñe˘
 =ÖSñe˘->
pPri‹
;

439 
	}
}

440 
	$sqlôe3FixEx¥
(

441 
DbFixî
 *
pFix
,

442 
Ex¥
 *
pEx¥


444  
pEx¥
 ){

445 if–
	`sqlôe3FixSñe˘
(
pFix
, 
pEx¥
->
pSñe˘
) ){

448 if–
	`sqlôe3FixEx¥Li°
(
pFix
, 
pEx¥
->
pLi°
) ){

451 if–
	`sqlôe3FixEx¥
(
pFix
, 
pEx¥
->
pRight
) ){

454 
pEx¥
 =ÖEx¥->
pLe·
;

457 
	}
}

458 
	$sqlôe3FixEx¥Li°
(

459 
DbFixî
 *
pFix
,

460 
Ex¥Li°
 *
pLi°


462 
i
;

463 
Ex¥Li°_ôem
 *
pIãm
;

464 if–
pLi°
==0 )  0;

465 
i
=0, 
pIãm
=
pLi°
->
a
; i<pLi°->
nEx¥
; i++,ÖItem++){

466 if–
	`sqlôe3FixEx¥
(
pFix
, 
pIãm
->
pEx¥
) ){

471 
	}
}

474 #i‚de‡
SQLITE_OMIT_TRIGGER


475 
	$sqlôe3FixTriggîSãp
(

476 
DbFixî
 *
pFix
,

477 
TriggîSãp
 *
pSãp


479  
pSãp
 ){

480 if–
	`sqlôe3FixSñe˘
(
pFix
, 
pSãp
->
pSñe˘
) ){

483 if–
	`sqlôe3FixEx¥
(
pFix
, 
pSãp
->
pWhîe
) ){

486 if–
	`sqlôe3FixEx¥Li°
(
pFix
, 
pSãp
->
pEx¥Li°
) ){

489 
pSãp
 =ÖSãp->
pNext
;

492 
	}
}

	@auth.c

19 
	~"sqlôeI¡.h
"

25 #i‚de‡
SQLITE_OMIT_AUTHORIZATION


72 
sqlôe3_£t_auth‹izî
(

73 
sqlôe3
 *
db
,

74 (*
xAuth
)(*,,const *,const *,const *,const *),

75 *
pArg


77 
db
->
xAuth
 = xAuth;

78 
db
->
pAuthArg
 = 
pArg
;

79 
	`sqlôe3ExpúePª∑ªdSèãmíts
(
db
);

80  
SQLITE_OK
;

81 
	}
}

87 
	$sqlôeAuthBadRëu∫Code
(
P¨£
 *
pP¨£
, 
rc
){

88 
	`sqlôe3Eº‹Msg
(
pP¨£
, "illegalÑeturn value (%d) fromÅhe "

90 "‹ SQLITE_DENY", 
rc
);

91 
pP¨£
->
rc
 = 
SQLITE_ERROR
;

92 
	}
}

103 
	$sqlôe3AuthRód
(

104 
P¨£
 *
pP¨£
,

105 
Ex¥
 *
pEx¥
,

106 
SrcLi°
 *
pTabLi°


108 
sqlôe3
 *
db
 = 
pP¨£
->db;

109 
rc
;

110 
TabÀ
 *
pTab
;

111 c⁄° *
zCﬁ
;

112 
iSrc
;

113 c⁄° *
zDBa£
;

114 
TriggîSèck
 *
pSèck
;

115 
iDb
;

117 if–
db
->
xAuth
==0 ) ;

118 if–
pEx¥
->
›
==
TK_AS
 ) ;

119 
	`as£π
–
pEx¥
->
›
==
TK_COLUMN
 );

120 
iDb
 = 
	`sqlôe3SchemaToIndex
(
pP¨£
->
db
, 
pEx¥
->
pSchema
);

121 if–
iDb
<0 ){

126 
iSrc
=0; 
pTabLi°
 && iSrc<pTabLi°->
nSrc
; iSrc++){

127 if–
pEx¥
->
iTabÀ
==
pTabLi°
->
a
[
iSrc
].
iCurs‹
 ) ;

129 if–
iSrc
>=0 && 
pTabLi°
 && iSrc<pTabLi°->
nSrc
 ){

130 
pTab
 = 
pTabLi°
->
a
[
iSrc
].pTab;

131 }if–(
pSèck
 = 
pP¨£
->
åigSèck
)!=0 ){

135 
	`as£π
–
pEx¥
->
iTabÀ
==
pSèck
->
√wIdx
 ||ÖEx¥->iTabÀ=ıSèck->
ﬁdIdx
 );

136 
pTab
 = 
pSèck
->pTab;

140 if–
pTab
==0 ) ;

141 if–
pEx¥
->
iCﬁumn
>=0 ){

142 
	`as£π
–
pEx¥
->
iCﬁumn
<
pTab
->
nCﬁ
 );

143 
zCﬁ
 = 
pTab
->
aCﬁ
[
pEx¥
->
iCﬁumn
].
zName
;

144 }if–
pTab
->
iPKey
>=0 ){

145 
	`as£π
–
pTab
->
iPKey
<pTab->
nCﬁ
 );

146 
zCﬁ
 = 
pTab
->
aCﬁ
[pTab->
iPKey
].
zName
;

148 
zCﬁ
 = "ROWID";

150 
	`as£π
–
iDb
>=0 && iDb<
db
->
nDb
 );

151 
zDBa£
 = 
db
->
aDb
[
iDb
].
zName
;

152 
rc
 = 
db
->
	`xAuth
(db->
pAuthArg
, 
SQLITE_READ
, 
pTab
->
zName
, 
zCﬁ
, 
zDBa£
,

153 
pP¨£
->
zAuthC⁄ãxt
);

154 if–
rc
==
SQLITE_IGNORE
 ){

155 
pEx¥
->
›
 = 
TK_NULL
;

156 }if–
rc
==
SQLITE_DENY
 ){

157 if–
db
->
nDb
>2 || 
iDb
!=0 ){

158 
	`sqlôe3Eº‹Msg
(
pP¨£
, "accessÅo %s.%s.%s isÖrohibited",

159 
zDBa£
, 
pTab
->
zName
, 
zCﬁ
);

161 
	`sqlôe3Eº‹Msg
(
pP¨£
, "ac˚s†tÿ%s.%†i†¥ohibôed",
pTab
->
zName
,
zCﬁ
);

163 
pP¨£
->
rc
 = 
SQLITE_AUTH
;

164 }if–
rc
!=
SQLITE_OK
 ){

165 
	`sqlôeAuthBadRëu∫Code
(
pP¨£
, 
rc
);

167 
	}
}

175 
	$sqlôe3AuthCheck
(

176 
P¨£
 *
pP¨£
,

177 
code
,

178 c⁄° *
zArg1
,

179 c⁄° *
zArg2
,

180 c⁄° *
zArg3


182 
sqlôe3
 *
db
 = 
pP¨£
->db;

183 
rc
;

186 if–
db
->
öô
.
busy
 ){

187  
SQLITE_OK
;

190 if–
db
->
xAuth
==0 ){

191  
SQLITE_OK
;

193 
rc
 = 
db
->
	`xAuth
(db->
pAuthArg
, 
code
, 
zArg1
, 
zArg2
, 
zArg3
, 
pP¨£
->
zAuthC⁄ãxt
);

194 if–
rc
==
SQLITE_DENY
 ){

195 
	`sqlôe3Eº‹Msg
(
pP¨£
, "notáuthorized");

196 
pP¨£
->
rc
 = 
SQLITE_AUTH
;

197 }if–
rc
!=
SQLITE_OK
 &&Ñc!=
SQLITE_IGNORE
 ){

198 
rc
 = 
SQLITE_DENY
;

199 
	`sqlôeAuthBadRëu∫Code
(
pP¨£
, 
rc
);

201  
rc
;

202 
	}
}

209 
	$sqlôe3AuthC⁄ãxtPush
(

210 
P¨£
 *
pP¨£
,

211 
AuthC⁄ãxt
 *
pC⁄ãxt
,

212 c⁄° *
zC⁄ãxt


214 
pC⁄ãxt
->
pP¨£
 =ÖParse;

215 if–
pP¨£
 ){

216 
pC⁄ãxt
->
zAuthC⁄ãxt
 = 
pP¨£
->zAuthContext;

217 
pP¨£
->
zAuthC⁄ãxt
 = 
zC⁄ãxt
;

219 
	}
}

225 
	$sqlôe3AuthC⁄ãxtP›
(
AuthC⁄ãxt
 *
pC⁄ãxt
){

226 if–
pC⁄ãxt
->
pP¨£
 ){

227 
pC⁄ãxt
->
pP¨£
->
zAuthC⁄ãxt
 =ÖContext->zAuthContext;

228 
pC⁄ãxt
->
pP¨£
 = 0;

230 
	}
}

	@btree.c

208 
	~"sqlôeI¡.h
"

209 
	~"∑gî.h
"

210 
	~"båì.h
"

211 
	~"os.h
"

212 
	~<as£π.h
>

217 
	#ROUND8
(
x
Ë((x+7)&~7)

	)

223 
	#MX_CELL_SIZE
(
pBt
Ë’Bt->
∑geSize
-8)

	)

229 
	#MX_CELL
(
pBt
Ë(’Bt->
∑geSize
-8)/3)

	)

232 
MemPage
 
	tMemPage
;

233 
BtLock
 
	tBtLock
;

247 #i‚de‡
SQLITE_FILE_HEADER


248 
	#SQLITE_FILE_HEADER
 "SQLôêf‹m© 3"

	)

250 c⁄° 
	gzMagicHódî
[] = 
SQLITE_FILE_HEADER
;

256 
	#PTF_INTKEY
 0x01

	)

257 
	#PTF_ZERODATA
 0x02

	)

258 
	#PTF_LEAFDATA
 0x04

	)

259 
	#PTF_LEAF
 0x08

	)

271 
	sMemPage
 {

272 
u8
 
	misInô
;

273 
u8
 
	midxShi·
;

274 
u8
 
	mnOvîÊow
;

275 
u8
 
	mötKey
;

276 
u8
 
	mÀaf
;

277 
u8
 
	mzîoD©a
;

278 
u8
 
	mÀafD©a
;

279 
u8
 
	mhasD©a
;

280 
u8
 
	mhdrOff£t
;

281 
u8
 
	mchûdPåSize
;

282 
u16
 
	mmaxLoˇl
;

283 
u16
 
	mmöLoˇl
;

284 
u16
 
	m˚ŒOff£t
;

285 
u16
 
	midxP¨ít
;

286 
u16
 
	mnFªe
;

287 
u16
 
	mnCñl
;

288 
	s_OvÊCñl
 {

289 
u8
 *
	mpCñl
;

290 
u16
 
	midx
;

291 } 
	maOvÊ
[5];

292 
BtSh¨ed
 *
	mpBt
;

293 
u8
 *
	maD©a
;

294 
Pgno
 
	mpgno
;

295 
MemPage
 *
	mpP¨ít
;

303 
	#EXTRA_SIZE
 (
MemPage
)

	)

306 
	sBåì
 {

307 
sqlôe3
 *
	mpSqlôe
;

308 
BtSh¨ed
 *
	mpBt
;

309 
u8
 
	möTøns
;

320 
	#TRANS_NONE
 0

	)

321 
	#TRANS_READ
 1

	)

322 
	#TRANS_WRITE
 2

	)

327 
	sBtSh¨ed
 {

328 
Pagî
 *
	mpPagî
;

329 
BtCurs‹
 *
	mpCurs‹
;

330 
MemPage
 *
	mpPage1
;

331 
u8
 
	möStmt
;

332 
u8
 
	mªadO∆y
;

333 
u8
 
	mmaxEmbedFøc
;

334 
u8
 
	mmöEmbedFøc
;

335 
u8
 
	mmöLófFøc
;

336 
u8
 
	m∑geSizeFixed
;

337 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


338 
u8
 
	mautoVacuum
;

340 
u16
 
	m∑geSize
;

341 
u16
 
	mußbÀSize
;

342 
	mmaxLoˇl
;

343 
	mmöLoˇl
;

344 
	mmaxLóf
;

345 
	mmöLóf
;

346 
BusyH™dÀr
 *
	mpBusyH™dÀr
;

347 
u8
 
	möTønß˘i⁄
;

348 
	mnRef
;

349 
	mnTønß˘i⁄
;

350 *
	mpSchema
;

351 (*
	mxFªeSchema
)(*);

352 #i‚de‡
SQLITE_OMIT_SHARED_CACHE


353 
BtLock
 *
	mpLock
;

354 
BtSh¨ed
 *
	mpNext
;

363 
CñlInfo
 
	tCñlInfo
;

364 
	sCñlInfo
 {

365 
u8
 *
	mpCñl
;

366 
i64
 
	mnKey
;

367 
u32
 
	mnD©a
;

368 
u16
 
	mnHódî
;

369 
u16
 
	mnLoˇl
;

370 
u16
 
	miOvîÊow
;

371 
u16
 
	mnSize
;

379 
	sBtCurs‹
 {

380 
Båì
 *
	mpBåì
;

381 
BtCurs‹
 *
	mpNext
, *
	mpPªv
;

382 (*
	mxCom∑ª
)(*,,const *,,const *);

383 *
	mpArg
;

384 
Pgno
 
	mpgnoRoŸ
;

385 
MemPage
 *
	mpPage
;

386 
	midx
;

387 
CñlInfo
 
	möfo
;

388 
u8
 
	mwrFœg
;

389 
u8
 
	meSèã
;

390 #i‚de‡
SQLITE_OMIT_SHARED_CACHE


391 *
	mpKey
;

392 
i64
 
	mnKey
;

393 
	mskù
;

417 
	#CURSOR_INVALID
 0

	)

418 
	#CURSOR_VALID
 1

	)

419 
	#CURSOR_REQUIRESEEK
 2

	)

426 #i‡
SQLITE_TEST


427 
	#TRACE
(
X
Ëif–
sqlôe3_båì_åa˚
 )\

428 { 
sqlôe3DebugPrötf
 
X
; 
	`fÊush
(
°dout
); }

	)

430 
	#TRACE
(
X
)

	)

432 
	gsqlôe3_båì_åa˚
=0;

437 
checkRódLocks
(
BtSh¨ed
*,
Pgno
,
BtCurs‹
*);

442 
u32
 
	$gë2byã
(*
p
){

443  (
p
[0]<<8) |Ö[1];

444 
	}
}

445 
u32
 
	$gë4byã
(*
p
){

446  (
p
[0]<<24) | (p[1]<<16) | (p[2]<<8) |Ö[3];

447 
	}
}

448 
	$put2byã
(*
p
, 
u32
 
v
){

449 
p
[0] = 
v
>>8;

450 
p
[1] = 
v
;

451 
	}
}

452 
	$put4byã
(*
p
, 
u32
 
v
){

453 
p
[0] = 
v
>>24;

454 
p
[1] = 
v
>>16;

455 
p
[2] = 
v
>>8;

456 
p
[3] = 
v
;

457 
	}
}

464 
	#gëV¨öt
 
sqlôe3GëV¨öt


	)

466 
	#gëV¨öt32
(
A
,
B
Ë((*B=*(A))<=0x7f?1:
	`sqlôe3GëV¨öt32
(A,B))

	)

467 
	#putV¨öt
 
sqlôe3PutV¨öt


	)

473 
	#PENDING_BYTE_PAGE
(
pBt
Ë((
PENDING_BYTE
/’Bt)->
∑geSize
)+1)

	)

482 
	sBtLock
 {

483 
Båì
 *
	mpBåì
;

484 
Pgno
 
	miTabÀ
;

485 
u8
 
	meLock
;

486 
BtLock
 *
	mpNext
;

490 
	#READ_LOCK
 1

	)

491 
	#WRITE_LOCK
 2

	)

493 #ifde‡
SQLITE_OMIT_SHARED_CACHE


502 
	#quîyTabÀLock
(
a
,
b
,
c
Ë
SQLITE_OK


	)

503 
	#lockTabÀ
(
a
,
b
,
c
Ë
SQLITE_OK


	)

504 
	#u∆ockAŒTabÀs
(
a
)

	)

505 
	#ª°‹eOrCÀ¨Curs‹Posôi⁄
(
a
,
b
Ë
SQLITE_OK


	)

506 
	#ßveAŒCurs‹s
(
a
,
b
,
c
Ë
SQLITE_OK


	)

510 
ªÀa£Page
(
MemPage
 *
pPage
);

516 
	$ßveCurs‹Posôi⁄
(
BtCurs‹
 *
pCur
){

517 
rc
;

519 
	`as£π
–
CURSOR_VALID
==
pCur
->
eSèã
 );

520 
	`as£π
–0==
pCur
->
pKey
 );

522 
rc
 = 
	`sqlôe3BåìKeySize
(
pCur
, &pCur->
nKey
);

530 if–
rc
==
SQLITE_OK
 && 0==
pCur
->
pPage
->
ötKey
){

531 *
pKey
 = 
	`sqlôeMÆloc
(
pCur
->
nKey
);

532 if–
pKey
 ){

533 
rc
 = 
	`sqlôe3BåìKey
(
pCur
, 0,ÖCur->
nKey
, 
pKey
);

534 if–
rc
==
SQLITE_OK
 ){

535 
pCur
->
pKey
 =ÖKey;

537 
	`sqlôeFªe
(
pKey
);

540 
rc
 = 
SQLITE_NOMEM
;

543 
	`as£π
–!
pCur
->
pPage
->
ötKey
 || !pCur->
pKey
 );

545 if–
rc
==
SQLITE_OK
 ){

546 
	`ªÀa£Page
(
pCur
->
pPage
);

547 
pCur
->
pPage
 = 0;

548 
pCur
->
eSèã
 = 
CURSOR_REQUIRESEEK
;

551  
rc
;

552 
	}
}

559 
	$ßveAŒCurs‹s
(
BtSh¨ed
 *
pBt
, 
Pgno
 
iRoŸ
, 
BtCurs‹
 *
pEx˚±
){

560 
BtCurs‹
 *
p
;

561 if–
	`sqlôe3ThªadD©aRódO∆y
()->
u£Sh¨edD©a
 ){

562 
p
=
pBt
->
pCurs‹
;Ö;Öı->
pNext
){

563 if–
p
!=
pEx˚±
 && (0==
iRoŸ
 ||Ö->
pgnoRoŸ
==iRoot) &&

564 
p
->
eSèã
==
CURSOR_VALID
 ){

565 
rc
 = 
	`ßveCurs‹Posôi⁄
(
p
);

566 if–
SQLITE_OK
!=
rc
 ){

567  
rc
;

572  
SQLITE_OK
;

573 
	}
}

586 
	$ª°‹eOrCÀ¨Curs‹Posôi⁄X
(
BtCurs‹
 *
pCur
, 
doSìk
){

587 
rc
 = 
SQLITE_OK
;

588 
	`as£π
–
	`sqlôe3ThªadD©aRódO∆y
()->
u£Sh¨edD©a
 );

589 
	`as£π
–
pCur
->
eSèã
==
CURSOR_REQUIRESEEK
 );

590 
pCur
->
eSèã
 = 
CURSOR_INVALID
;

591 if–
doSìk
 ){

592 
rc
 = 
	`sqlôe3BåìMovëo
(
pCur
,ÖCur->
pKey
,ÖCur->
nKey
, &pCur->
skù
);

594 if–
rc
==
SQLITE_OK
 ){

595 
	`sqlôeFªe
(
pCur
->
pKey
);

596 
pCur
->
pKey
 = 0;

597 
	`as£π
–
CURSOR_VALID
==
pCur
->
eSèã
 || 
CURSOR_INVALID
==pCur->eState );

599  
rc
;

600 
	}
}

602 
	#ª°‹eOrCÀ¨Curs‹Posôi⁄
(
p
,
x
) \

603 (
p
->
eSèã
==
CURSOR_REQUIRESEEK
?
	`ª°‹eOrCÀ¨Curs‹Posôi⁄X
’,
x
):
SQLITE_OK
)

	)

611 
	$quîyTabÀLock
(
Båì
 *
p
, 
Pgno
 
iTab
, 
u8
 
eLock
){

612 
BtSh¨ed
 *
pBt
 = 
p
->pBt;

613 
BtLock
 *
pIãr
;

616 if–0==
	`sqlôe3ThªadD©aRódO∆y
()->
u£Sh¨edD©a
 ){

617  
SQLITE_OK
;

635 !
p
->
pSqlôe
 ||

636 0==(
p
->
pSqlôe
->
Êags
&
SQLITE_RódUncommôãd
) ||

637 
eLock
==
WRITE_LOCK
 ||

638 
iTab
==
MASTER_ROOT


640 
pIãr
=
pBt
->
pLock
;ÖIãr;ÖIãrıIãr->
pNext
){

641 if–
pIãr
->
pBåì
!=
p
 &&ÖIãr->
iTabÀ
==
iTab
 &&

642 (
pIãr
->
eLock
!ÛLock ||ÉLock!=
READ_LOCK
) ){

643  
SQLITE_LOCKED
;

647  
SQLITE_OK
;

648 
	}
}

658 
	$lockTabÀ
(
Båì
 *
p
, 
Pgno
 
iTabÀ
, 
u8
 
eLock
){

659 
BtSh¨ed
 *
pBt
 = 
p
->pBt;

660 
BtLock
 *
pLock
 = 0;

661 
BtLock
 *
pIãr
;

664 if–0==
	`sqlôe3ThªadD©aRódO∆y
()->
u£Sh¨edD©a
 ){

665  
SQLITE_OK
;

668 
	`as£π
–
SQLITE_OK
==
	`quîyTabÀLock
(
p
, 
iTabÀ
, 
eLock
) );

676 (
p
->
pSqlôe
) &&

677 (
p
->
pSqlôe
->
Êags
&
SQLITE_RódUncommôãd
) &&

678 (
eLock
==
READ_LOCK
) &&

679 
iTabÀ
!=
MASTER_ROOT


681  
SQLITE_OK
;

685 
pIãr
=
pBt
->
pLock
;ÖIãr;ÖIãrıIãr->
pNext
){

686 if–
pIãr
->
iTabÀ
==iTabÀ &&ÖIãr->
pBåì
==
p
 ){

687 
pLock
 = 
pIãr
;

695 if–!
pLock
 ){

696 
pLock
 = (
BtLock
 *)
	`sqlôeMÆloc
((BtLock));

697 if–!
pLock
 ){

698  
SQLITE_NOMEM
;

700 
pLock
->
iTabÀ
 = iTable;

701 
pLock
->
pBåì
 = 
p
;

702 
pLock
->
pNext
 = 
pBt
->pLock;

703 
pBt
->
pLock
 =ÖLock;

710 
	`as£π
–
WRITE_LOCK
>
READ_LOCK
 );

711 if–
eLock
>
pLock
->eLock ){

712 
pLock
->
eLock
 =ÉLock;

715  
SQLITE_OK
;

716 
	}
}

722 
	$u∆ockAŒTabÀs
(
Båì
 *
p
){

723 
BtLock
 **
µIãr
 = &
p
->
pBt
->
pLock
;

729 
	`as£π
–
	`sqlôe3ThªadD©aRódO∆y
()->
u£Sh¨edD©a
 || 0==*
µIãr
 );

731  *
µIãr
 ){

732 
BtLock
 *
pLock
 = *
µIãr
;

733 if–
pLock
->
pBåì
==
p
 ){

734 *
µIãr
 = 
pLock
->
pNext
;

735 
	`sqlôeFªe
(
pLock
);

737 
µIãr
 = &
pLock
->
pNext
;

740 
	}
}

743 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


759 
	#PTRMAP_PAGENO
(
pgsz
, 
pgno
Ë((’gno-2)/’gsz/5+1))*’gsz/5+1)+2)

	)

760 
	#PTRMAP_PTROFFSET
(
pgsz
, 
pgno
Ë((’gno-2)%’gsz/5+1)-1)*5)

	)

761 
	#PTRMAP_ISPAGE
(
pgsz
, 
pgno
Ë(
	`PTRMAP_PAGENO
’gsz,pgno)=ıgno)

	)

794 
	#PTRMAP_ROOTPAGE
 1

	)

795 
	#PTRMAP_FREEPAGE
 2

	)

796 
	#PTRMAP_OVERFLOW1
 3

	)

797 
	#PTRMAP_OVERFLOW2
 4

	)

798 
	#PTRMAP_BTREE
 5

	)

807 
	$±rm≠Put
(
BtSh¨ed
 *
pBt
, 
Pgno
 
key
, 
u8
 
eTy≥
, Pgnÿ
∑ª¡
){

808 
u8
 *
pPåm≠
;

809 
Pgno
 
iPåm≠
;

810 
off£t
;

811 
rc
;

813 
	`as£π
–
pBt
->
autoVacuum
 );

814 if–
key
==0 ){

815  
SQLITE_CORRUPT_BKPT
;

817 
iPåm≠
 = 
	`PTRMAP_PAGENO
(
pBt
->
ußbÀSize
, 
key
);

818 
rc
 = 
	`sqlôe3∑gî_gë
(
pBt
->
pPagî
, 
iPåm≠
, (**)&
pPåm≠
);

819 if–
rc
!=
SQLITE_OK
 ){

820  
rc
;

822 
off£t
 = 
	`PTRMAP_PTROFFSET
(
pBt
->
ußbÀSize
, 
key
);

824 if–
eTy≥
!=
pPåm≠
[
off£t
] || 
	`gë4byã
(&pPåm≠[off£t+1])!=
∑ª¡
 ){

825 
	`TRACE
(("PTRMAP_UPDATE: %d->(%d,%d)\n", 
key
, 
eTy≥
, 
∑ª¡
));

826 
rc
 = 
	`sqlôe3∑gî_wrôe
(
pPåm≠
);

827 if–
rc
==
SQLITE_OK
 ){

828 
pPåm≠
[
off£t
] = 
eTy≥
;

829 
	`put4byã
(&
pPåm≠
[
off£t
+1], 
∑ª¡
);

833 
	`sqlôe3∑gî_uƒef
(
pPåm≠
);

834  
rc
;

835 
	}
}

844 
	$±rm≠Gë
(
BtSh¨ed
 *
pBt
, 
Pgno
 
key
, 
u8
 *
pETy≥
, Pgnÿ*
pPgno
){

845 
iPåm≠
;

846 
u8
 *
pPåm≠
;

847 
off£t
;

848 
rc
;

850 
iPåm≠
 = 
	`PTRMAP_PAGENO
(
pBt
->
ußbÀSize
, 
key
);

851 
rc
 = 
	`sqlôe3∑gî_gë
(
pBt
->
pPagî
, 
iPåm≠
, (**)&
pPåm≠
);

852 if–
rc
!=0 ){

853  
rc
;

856 
off£t
 = 
	`PTRMAP_PTROFFSET
(
pBt
->
ußbÀSize
, 
key
);

857 if–
pETy≥
 ) *pETy≥ = 
pPåm≠
[
off£t
];

858 if–
pPgno
 ) *pPgnÿ
	`gë4byã
(&
pPåm≠
[
off£t
+1]);

860 
	`sqlôe3∑gî_uƒef
(
pPåm≠
);

861 if–*
pETy≥
<1 || *pETy≥>5 )  
SQLITE_CORRUPT_BKPT
;

862  
SQLITE_OK
;

863 
	}
}

874 
u8
 *
	$födCñl
(
MemPage
 *
pPage
, 
iCñl
){

875 
u8
 *
d©a
 = 
pPage
->
aD©a
;

876 
	`as£π
–
iCñl
>=0 );

877 
	`as£π
–
iCñl
<
	`gë2byã
(&
d©a
[
pPage
->
hdrOff£t
+3]) );

878  
d©a
 + 
	`gë2byã
(&d©a[
pPage
->
˚ŒOff£t
+2*
iCñl
]);

879 
	}
}

885 
u8
 *
	$födOvîÊowCñl
(
MemPage
 *
pPage
, 
iCñl
){

886 
i
;

887 
i
=
pPage
->
nOvîÊow
-1; i>=0; i--){

888 
k
;

889 
_OvÊCñl
 *
pOvÊ
;

890 
pOvÊ
 = &
pPage
->
aOvÊ
[
i
];

891 
k
 = 
pOvÊ
->
idx
;

892 if–
k
<=
iCñl
 ){

893 if–
k
==
iCñl
 ){

894  
pOvÊ
->
pCñl
;

896 
iCñl
--;

899  
	`födCñl
(
pPage
, 
iCñl
);

900 
	}
}

908 
	$∑r£CñlPå
(

909 
MemPage
 *
pPage
,

910 
u8
 *
pCñl
,

911 
CñlInfo
 *
pInfo


913 
n
;

914 
u32
 
nPaylﬂd
;

916 
pInfo
->
pCñl
 =ÖCell;

917 
	`as£π
–
pPage
->
Àaf
==0 ||ÖPage->leaf==1 );

918 
n
 = 
pPage
->
chûdPåSize
;

919 
	`as£π
–
n
==4-4*
pPage
->
Àaf
 );

920 if–
pPage
->
hasD©a
 ){

921 
n
 +
	`gëV¨öt32
(&
pCñl
[n], &
nPaylﬂd
);

923 
nPaylﬂd
 = 0;

925 
pInfo
->
nD©a
 = 
nPaylﬂd
;

926 if–
pPage
->
ötKey
 ){

927 
n
 +
	`gëV¨öt
(&
pCñl
[n], (
u64
 *)&
pInfo
->
nKey
);

929 
u32
 
x
;

930 
n
 +
	`gëV¨öt32
(&
pCñl
[n], &
x
);

931 
pInfo
->
nKey
 = 
x
;

932 
nPaylﬂd
 +
x
;

934 
pInfo
->
nHódî
 = 
n
;

935 if–
nPaylﬂd
<=
pPage
->
maxLoˇl
 ){

939 
nSize
;

940 
pInfo
->
nLoˇl
 = 
nPaylﬂd
;

941 
pInfo
->
iOvîÊow
 = 0;

942 
nSize
 = 
nPaylﬂd
 + 
n
;

943 if–
nSize
<4 ){

944 
nSize
 = 4;

946 
pInfo
->
nSize
 =ÇSize;

957 
möLoˇl
;

958 
maxLoˇl
;

959 
suΩlus
;

961 
möLoˇl
 = 
pPage
->minLocal;

962 
maxLoˇl
 = 
pPage
->maxLocal;

963 
suΩlus
 = 
möLoˇl
 + (
nPaylﬂd
 - möLoˇl)%(
pPage
->
pBt
->
ußbÀSize
 - 4);

964 if–
suΩlus
 <
maxLoˇl
 ){

965 
pInfo
->
nLoˇl
 = 
suΩlus
;

967 
pInfo
->
nLoˇl
 = 
möLoˇl
;

969 
pInfo
->
iOvîÊow
 =ÖInfo->
nLoˇl
 + 
n
;

970 
pInfo
->
nSize
 =ÖInfo->
iOvîÊow
 + 4;

972 
	}
}

973 
	$∑r£Cñl
(

974 
MemPage
 *
pPage
,

975 
iCñl
,

976 
CñlInfo
 *
pInfo


978 
	`∑r£CñlPå
(
pPage
, 
	`födCñl
’Page, 
iCñl
), 
pInfo
);

979 
	}
}

987 #i‚de‡
NDEBUG


988 
	$˚ŒSize
(
MemPage
 *
pPage
, 
iCñl
){

989 
CñlInfo
 
öfo
;

990 
	`∑r£Cñl
(
pPage
, 
iCñl
, &
öfo
);

991  
öfo
.
nSize
;

992 
	}
}

994 
	$˚ŒSizePå
(
MemPage
 *
pPage
, 
u8
 *
pCñl
){

995 
CñlInfo
 
öfo
;

996 
	`∑r£CñlPå
(
pPage
, 
pCñl
, &
öfo
);

997  
öfo
.
nSize
;

998 
	}
}

1000 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


1006 
	$±rm≠PutOvÊPå
(
MemPage
 *
pPage
, 
u8
 *
pCñl
){

1007 if–
pCñl
 ){

1008 
CñlInfo
 
öfo
;

1009 
	`∑r£CñlPå
(
pPage
, 
pCñl
, &
öfo
);

1010 if–(
öfo
.
nD©a
+(
pPage
->
ötKey
?0:öfo.
nKey
))>öfo.
nLoˇl
 ){

1011 
Pgno
 
ovÊ
 = 
	`gë4byã
(&
pCñl
[
öfo
.
iOvîÊow
]);

1012  
	`±rm≠Put
(
pPage
->
pBt
, 
ovÊ
, 
PTRMAP_OVERFLOW1
,ÖPage->
pgno
);

1015  
SQLITE_OK
;

1016 
	}
}

1022 
	$±rm≠PutOvÊ
(
MemPage
 *
pPage
, 
iCñl
){

1023 
u8
 *
pCñl
;

1024 
pCñl
 = 
	`födOvîÊowCñl
(
pPage
, 
iCñl
);

1025  
	`±rm≠PutOvÊPå
(
pPage
, 
pCñl
);

1026 
	}
}

1037 #i‡
deföed
(
BTREE_DEBUG
Ë&& !deföed(
NDEBUG
) && 0

1038 
	$_∑geI¡egrôy
(
MemPage
 *
pPage
){

1039 
ußbÀSize
;

1040 
u8
 *
d©a
;

1041 
i
, 
j
, 
idx
, 
c
, 
pc
, 
hdr
, 
nFªe
;

1042 
˚ŒOff£t
;

1043 
nCñl
, 
˚ŒLimô
;

1044 
u8
 *
u£d
;

1046 
u£d
 = 
	`sqlôeMÆlocRaw
–
pPage
->
pBt
->
∑geSize
 );

1047 if–
u£d
==0 ) ;

1048 
ußbÀSize
 = 
pPage
->
pBt
->usableSize;

1049 
	`as£π
–
pPage
->
aD©a
==&((*ÌPage)[-pPage->
pBt
->
∑geSize
] );

1050 
hdr
 = 
pPage
->
hdrOff£t
;

1051 
	`as£π
–
hdr
==(
pPage
->
pgno
==1 ? 100 : 0) );

1052 
	`as£π
–
pPage
->
pgno
==
	`sqlôe3∑gî_∑gíumbî
’Page->
aD©a
) );

1053 
c
 = 
pPage
->
aD©a
[
hdr
];

1054 if–
pPage
->
isInô
 ){

1055 
	`as£π
–
pPage
->
Àaf
 =((
c
 & 
PTF_LEAF
)!=0) );

1056 
	`as£π
–
pPage
->
zîoD©a
 =((
c
 & 
PTF_ZERODATA
)!=0) );

1057 
	`as£π
–
pPage
->
ÀafD©a
 =((
c
 & 
PTF_LEAFDATA
)!=0) );

1058 
	`as£π
–
pPage
->
ötKey
 =((
c
 & (
PTF_INTKEY
|
PTF_LEAFDATA
))!=0) );

1059 
	`as£π
–
pPage
->
hasD©a
 ==

1060 !(
pPage
->
zîoD©a
 || (!pPage->
Àaf
 &&ÖPage->
ÀafD©a
)) );

1061 
	`as£π
–
pPage
->
˚ŒOff£t
=ıPage->
hdrOff£t
+12-4*pPage->
Àaf
 );

1062 
	`as£π
–
pPage
->
nCñl
 = 
	`gë2byã
(&pPage->
aD©a
[
hdr
+3]) );

1064 
d©a
 = 
pPage
->
aD©a
;

1065 
	`mem£t
(
u£d
, 0, 
ußbÀSize
);

1066 
i
=0; i<
hdr
+10-
pPage
->
Àaf
*4; i++Ë
u£d
[i] = 1;

1067 
nFªe
 = 0;

1068 
pc
 = 
	`gë2byã
(&
d©a
[
hdr
+1]);

1069  
pc
 ){

1070 
size
;

1071 
	`as£π
–
pc
>0 &&Öc<
ußbÀSize
-4 );

1072 
size
 = 
	`gë2byã
(&
d©a
[
pc
+2]);

1073 
	`as£π
–
pc
+
size
<=
ußbÀSize
 );

1074 
nFªe
 +
size
;

1075 
i
=
pc
; i<pc+
size
; i++){

1076 
	`as£π
–
u£d
[
i
]==0 );

1077 
u£d
[
i
] = 1;

1079 
pc
 = 
	`gë2byã
(&
d©a
[pc]);

1081 
idx
 = 0;

1082 
nCñl
 = 
	`gë2byã
(&
d©a
[
hdr
+3]);

1083 
˚ŒLimô
 = 
	`gë2byã
(&
d©a
[
hdr
+5]);

1084 
	`as£π
–
pPage
->
isInô
==0

1085 || 
pPage
->
nFªe
=ÚFªe+
d©a
[
hdr
+7]+
˚ŒLimô
-(
˚ŒOff£t
+2*
nCñl
) );

1086 
˚ŒOff£t
 = 
pPage
->cellOffset;

1087 
i
=0; i<
nCñl
; i++){

1088 
size
;

1089 
pc
 = 
	`gë2byã
(&
d©a
[
˚ŒOff£t
+2*
i
]);

1090 
	`as£π
–
pc
>0 &&Öc<
ußbÀSize
-4 );

1091 
size
 = 
	`˚ŒSize
(
pPage
, &
d©a
[
pc
]);

1092 
	`as£π
–
pc
+
size
<=
ußbÀSize
 );

1093 
j
=
pc
; j<pc+
size
; j++){

1094 
	`as£π
–
u£d
[
j
]==0 );

1095 
u£d
[
j
] = 1;

1098 
i
=
˚ŒOff£t
+2*
nCñl
; i<
˚Œimô
; i++){

1099 
	`as£π
–
u£d
[
i
]==0 );

1100 
u£d
[
i
] = 1;

1102 
nFªe
 = 0;

1103 
i
=0; i<
ußbÀSize
; i++){

1104 
	`as£π
–
u£d
[
i
]<=1 );

1105 if–
u£d
[
i
]==0 ) 
nFªe
++;

1107 
	`as£π
–
nFªe
==
d©a
[
hdr
+7] );

1108 
	`sqlôeFªe
(
u£d
);

1109 
	}
}

1110 
	#∑geI¡egrôy
(
X
Ë
	`_∑geI¡egrôy
(X)

	)

1112 
	#∑geI¡egrôy
(
X
)

	)

1118 
	#båìI¡egrôy
(
p
) \

1119 
	`as£π
–
p
->
öTøns
!=
TRANS_NONE
 ||Ö->
pBt
->
nTønß˘i⁄
<p->pBt->
nRef
 ); \

1120 
	`as£π
–
p
->
pBt
->
nTønß˘i⁄
<ı->pBt->
nRef
 ); \

1121 
	`as£π
–
p
->
pBt
->
öTønß˘i⁄
!=
TRANS_NONE
 ||Ö->pBt->
nTønß˘i⁄
==0 ); \

1122 
	`as£π
–
p
->
pBt
->
öTønß˘i⁄
>ı->
öTøns
 );

	)

1130 
	$de‰agmítPage
(
MemPage
 *
pPage
){

1131 
i
;

1132 
pc
;

1133 
addr
;

1134 
hdr
;

1135 
size
;

1136 
ußbÀSize
;

1137 
˚ŒOff£t
;

1138 
brk
;

1139 
nCñl
;

1140 *
d©a
;

1141 *
ãmp
;

1143 
	`as£π
–
	`sqlôe3∑gî_iswrôóbÀ
(
pPage
->
aD©a
) );

1144 
	`as£π
–
pPage
->
pBt
!=0 );

1145 
	`as£π
–
pPage
->
pBt
->
ußbÀSize
 <
SQLITE_MAX_PAGE_SIZE
 );

1146 
	`as£π
–
pPage
->
nOvîÊow
==0 );

1147 
ãmp
 = 
	`sqlôeMÆloc
–
pPage
->
pBt
->
∑geSize
 );

1148 if–
ãmp
==0 )  
SQLITE_NOMEM
;

1149 
d©a
 = 
pPage
->
aD©a
;

1150 
hdr
 = 
pPage
->
hdrOff£t
;

1151 
˚ŒOff£t
 = 
pPage
->cellOffset;

1152 
nCñl
 = 
pPage
->nCell;

1153 
	`as£π
–
nCñl
==
	`gë2byã
(&
d©a
[
hdr
+3]) );

1154 
ußbÀSize
 = 
pPage
->
pBt
->usableSize;

1155 
brk
 = 
	`gë2byã
(&
d©a
[
hdr
+5]);

1156 
	`mem˝y
(&
ãmp
[
brk
], &
d©a
[brk], 
ußbÀSize
 - brk);

1157 
brk
 = 
ußbÀSize
;

1158 
i
=0; i<
nCñl
; i++){

1159 
u8
 *
pAddr
;

1160 
pAddr
 = &
d©a
[
˚ŒOff£t
 + 
i
*2];

1161 
pc
 = 
	`gë2byã
(
pAddr
);

1162 
	`as£π
–
pc
<
pPage
->
pBt
->
ußbÀSize
 );

1163 
size
 = 
	`˚ŒSizePå
(
pPage
, &
ãmp
[
pc
]);

1164 
brk
 -
size
;

1165 
	`mem˝y
(&
d©a
[
brk
], &
ãmp
[
pc
], 
size
);

1166 
	`put2byã
(
pAddr
, 
brk
);

1168 
	`as£π
–
brk
>=
˚ŒOff£t
+2*
nCñl
 );

1169 
	`put2byã
(&
d©a
[
hdr
+5], 
brk
);

1170 
d©a
[
hdr
+1] = 0;

1171 
d©a
[
hdr
+2] = 0;

1172 
d©a
[
hdr
+7] = 0;

1173 
addr
 = 
˚ŒOff£t
+2*
nCñl
;

1174 
	`mem£t
(&
d©a
[
addr
], 0, 
brk
-addr);

1175 
	`sqlôeFªe
(
ãmp
);

1176  
SQLITE_OK
;

1177 
	}
}

1191 
	$ÆloˇãS∑˚
(
MemPage
 *
pPage
, 
nByã
){

1192 
addr
, 
pc
, 
hdr
;

1193 
size
;

1194 
nFøg
;

1195 
t›
;

1196 
nCñl
;

1197 
˚ŒOff£t
;

1198 *
d©a
;

1200 
d©a
 = 
pPage
->
aD©a
;

1201 
	`as£π
–
	`sqlôe3∑gî_iswrôóbÀ
(
d©a
) );

1202 
	`as£π
–
pPage
->
pBt
 );

1203 if–
nByã
<4 )ÇByte = 4;

1204 if–
pPage
->
nFªe
<
nByã
 ||ÖPage->
nOvîÊow
>0 )  0;

1205 
pPage
->
nFªe
 -
nByã
;

1206 
hdr
 = 
pPage
->
hdrOff£t
;

1208 
nFøg
 = 
d©a
[
hdr
+7];

1209 if–
nFøg
<60 ){

1212 
addr
 = 
hdr
+1;

1213  (
pc
 = 
	`gë2byã
(&
d©a
[
addr
]))>0 ){

1214 
size
 = 
	`gë2byã
(&
d©a
[
pc
+2]);

1215 if–
size
>=
nByã
 ){

1216 if–
size
<
nByã
+4 ){

1217 
	`mem˝y
(&
d©a
[
addr
], &d©a[
pc
], 2);

1218 
d©a
[
hdr
+7] = 
nFøg
 + 
size
 - 
nByã
;

1219  
pc
;

1221 
	`put2byã
(&
d©a
[
pc
+2], 
size
-
nByã
);

1222  
pc
 + 
size
 - 
nByã
;

1225 
addr
 = 
pc
;

1232 
t›
 = 
	`gë2byã
(&
d©a
[
hdr
+5]);

1233 
nCñl
 = 
	`gë2byã
(&
d©a
[
hdr
+3]);

1234 
˚ŒOff£t
 = 
pPage
->cellOffset;

1235 if–
nFøg
>=60 || 
˚ŒOff£t
 + 2*
nCñl
 > 
t›
 - 
nByã
 ){

1236 if–
	`de‰agmítPage
(
pPage
) )  0;

1237 
t›
 = 
	`gë2byã
(&
d©a
[
hdr
+5]);

1239 
t›
 -
nByã
;

1240 
	`as£π
–
˚ŒOff£t
 + 2*
nCñl
 <
t›
 );

1241 
	`put2byã
(&
d©a
[
hdr
+5], 
t›
);

1242  
t›
;

1243 
	}
}

1253 
	$‰ìS∑˚
(
MemPage
 *
pPage
, 
°¨t
, 
size
){

1254 
addr
, 
pbegö
, 
hdr
;

1255 *
d©a
 = 
pPage
->
aD©a
;

1257 
	`as£π
–
pPage
->
pBt
!=0 );

1258 
	`as£π
–
	`sqlôe3∑gî_iswrôóbÀ
(
d©a
) );

1259 
	`as£π
–
°¨t
>=
pPage
->
hdrOff£t
+6+’Page->
Àaf
?0:4) );

1260 
	`as£π
–(
°¨t
 + 
size
)<=
pPage
->
pBt
->
ußbÀSize
 );

1261 if–
size
<4 ) size = 4;

1264 
hdr
 = 
pPage
->
hdrOff£t
;

1265 
addr
 = 
hdr
 + 1;

1266  (
pbegö
 = 
	`gë2byã
(&
d©a
[
addr
]))<
°¨t
 &&Öbegin>0 ){

1267 
	`as£π
–
pbegö
<=
pPage
->
pBt
->
ußbÀSize
-4 );

1268 
	`as£π
–
pbegö
>
addr
 );

1269 
addr
 = 
pbegö
;

1271 
	`as£π
–
pbegö
<=
pPage
->
pBt
->
ußbÀSize
-4 );

1272 
	`as£π
–
pbegö
>
addr
 ||Öbegin==0 );

1273 
	`put2byã
(&
d©a
[
addr
], 
°¨t
);

1274 
	`put2byã
(&
d©a
[
°¨t
], 
pbegö
);

1275 
	`put2byã
(&
d©a
[
°¨t
+2], 
size
);

1276 
pPage
->
nFªe
 +
size
;

1279 
addr
 = 
pPage
->
hdrOff£t
 + 1;

1280  (
pbegö
 = 
	`gë2byã
(&
d©a
[
addr
]))>0 ){

1281 
≤ext
, 
psize
;

1282 
	`as£π
–
pbegö
>
addr
 );

1283 
	`as£π
–
pbegö
<=
pPage
->
pBt
->
ußbÀSize
-4 );

1284 
≤ext
 = 
	`gë2byã
(&
d©a
[
pbegö
]);

1285 
psize
 = 
	`gë2byã
(&
d©a
[
pbegö
+2]);

1286 if–
pbegö
 + 
psize
 + 3 >
≤ext
 &&Önext>0 ){

1287 
‰ag
 = 
≤ext
 - (
pbegö
+
psize
);

1288 
	`as£π
–
‰ag
<=
d©a
[
pPage
->
hdrOff£t
+7] );

1289 
d©a
[
pPage
->
hdrOff£t
+7] -
‰ag
;

1290 
	`put2byã
(&
d©a
[
pbegö
], 
	`gë2byã
(&d©a[
≤ext
]));

1291 
	`put2byã
(&
d©a
[
pbegö
+2], 
≤ext
+
	`gë2byã
(&data[pnext+2])-pbegin);

1293 
addr
 = 
pbegö
;

1298 if–
d©a
[
hdr
+1]==data[hdr+5] && data[hdr+2]==data[hdr+6] ){

1299 
t›
;

1300 
pbegö
 = 
	`gë2byã
(&
d©a
[
hdr
+1]);

1301 
	`mem˝y
(&
d©a
[
hdr
+1], &d©a[
pbegö
], 2);

1302 
t›
 = 
	`gë2byã
(&
d©a
[
hdr
+5]);

1303 
	`put2byã
(&
d©a
[
hdr
+5], 
t›
 + 
	`gë2byã
(&d©a[
pbegö
+2]));

1305 
	}
}

1311 
	$decodeFœgs
(
MemPage
 *
pPage
, 
ÊagByã
){

1312 
BtSh¨ed
 *
pBt
;

1314 
	`as£π
–
pPage
->
hdrOff£t
==’Page->
pgno
==1 ? 100 : 0) );

1315 
pPage
->
ötKey
 = (
ÊagByã
 & (
PTF_INTKEY
|
PTF_LEAFDATA
))!=0;

1316 
pPage
->
zîoD©a
 = (
ÊagByã
 & 
PTF_ZERODATA
)!=0;

1317 
pPage
->
Àaf
 = (
ÊagByã
 & 
PTF_LEAF
)!=0;

1318 
pPage
->
chûdPåSize
 = 4*’Page->
Àaf
==0);

1319 
pBt
 = 
pPage
->pBt;

1320 if–
ÊagByã
 & 
PTF_LEAFDATA
 ){

1321 
pPage
->
ÀafD©a
 = 1;

1322 
pPage
->
maxLoˇl
 = 
pBt
->
maxLóf
;

1323 
pPage
->
möLoˇl
 = 
pBt
->
möLóf
;

1325 
pPage
->
ÀafD©a
 = 0;

1326 
pPage
->
maxLoˇl
 = 
pBt
->maxLocal;

1327 
pPage
->
möLoˇl
 = 
pBt
->minLocal;

1329 
pPage
->
hasD©a
 = !’Page->
zîoD©a
 || (!pPage->
Àaf
 &&ÖPage->
ÀafD©a
));

1330 
	}
}

1345 
	$öôPage
(

1346 
MemPage
 *
pPage
,

1347 
MemPage
 *
pP¨ít


1349 
pc
;

1350 
hdr
;

1351 
u8
 *
d©a
;

1352 
BtSh¨ed
 *
pBt
;

1353 
ußbÀSize
;

1354 
˚ŒOff£t
;

1355 
nFªe
;

1356 
t›
;

1358 
pBt
 = 
pPage
->pBt;

1359 
	`as£π
–
pBt
!=0 );

1360 
	`as£π
–
pP¨ít
==0 ||ÖP¨ít->
pBt
==pBt );

1361 
	`as£π
–
pPage
->
pgno
==
	`sqlôe3∑gî_∑gíumbî
’Page->
aD©a
) );

1362 
	`as£π
–
pPage
->
aD©a
 =&((*ÌPage)[-
pBt
->
∑geSize
] );

1363 if–
pPage
->
pP¨ít
!ıP¨íà&& (pPage->pP¨ít!=0 ||ÖPage->
isInô
) ){

1365  
SQLITE_CORRUPT_BKPT
;

1367 if–
pPage
->
isInô
 )  
SQLITE_OK
;

1368 if–
pPage
->
pP¨ít
==0 &&ÖParent!=0 ){

1369 
pPage
->
pP¨ít
 =ÖParent;

1370 
	`sqlôe3∑gî_ªf
(
pP¨ít
->
aD©a
);

1372 
hdr
 = 
pPage
->
hdrOff£t
;

1373 
d©a
 = 
pPage
->
aD©a
;

1374 
	`decodeFœgs
(
pPage
, 
d©a
[
hdr
]);

1375 
pPage
->
nOvîÊow
 = 0;

1376 
pPage
->
idxShi·
 = 0;

1377 
ußbÀSize
 = 
pBt
->usableSize;

1378 
pPage
->
˚ŒOff£t
 = cñlOff£à
hdr
 + 12 - 4*pPage->
Àaf
;

1379 
t›
 = 
	`gë2byã
(&
d©a
[
hdr
+5]);

1380 
pPage
->
nCñl
 = 
	`gë2byã
(&
d©a
[
hdr
+3]);

1381 if–
pPage
->
nCñl
>
	`MX_CELL
(
pBt
) ){

1383  
SQLITE_CORRUPT_BKPT
;

1385 if–
pPage
->
nCñl
==0 && 
pP¨ít
!=0 &&ÖP¨ít->
pgno
!=1 ){

1387  
SQLITE_CORRUPT_BKPT
;

1391 
pc
 = 
	`gë2byã
(&
d©a
[
hdr
+1]);

1392 
nFªe
 = 
d©a
[
hdr
+7] + 
t›
 - (
˚ŒOff£t
 + 2*
pPage
->
nCñl
);

1393  
pc
>0 ){

1394 
√xt
, 
size
;

1395 if–
pc
>
ußbÀSize
-4 ){

1397  
SQLITE_CORRUPT_BKPT
;

1399 
√xt
 = 
	`gë2byã
(&
d©a
[
pc
]);

1400 
size
 = 
	`gë2byã
(&
d©a
[
pc
+2]);

1401 if–
√xt
>0 &&Çext<=
pc
+
size
+3 ){

1403  
SQLITE_CORRUPT_BKPT
;

1405 
nFªe
 +
size
;

1406 
pc
 = 
√xt
;

1408 
pPage
->
nFªe
 =ÇFree;

1409 if–
nFªe
>=
ußbÀSize
 ){

1411  
SQLITE_CORRUPT_BKPT
;

1414 
pPage
->
isInô
 = 1;

1415 
	`∑geI¡egrôy
(
pPage
);

1416  
SQLITE_OK
;

1417 
	}
}

1423 
	$zîoPage
(
MemPage
 *
pPage
, 
Êags
){

1424 *
d©a
 = 
pPage
->
aD©a
;

1425 
BtSh¨ed
 *
pBt
 = 
pPage
->pBt;

1426 
hdr
 = 
pPage
->
hdrOff£t
;

1427 
fú°
;

1429 
	`as£π
–
	`sqlôe3∑gî_∑gíumbî
(
d©a
)==
pPage
->
pgno
 );

1430 
	`as£π
–&
d©a
[
pBt
->
∑geSize
] =(*)
pPage
 );

1431 
	`as£π
–
	`sqlôe3∑gî_iswrôóbÀ
(
d©a
) );

1432 
	`mem£t
(&
d©a
[
hdr
], 0, 
pBt
->
ußbÀSize
 - hdr);

1433 
d©a
[
hdr
] = 
Êags
;

1434 
fú°
 = 
hdr
 + 8 + 4*((
Êags
&
PTF_LEAF
)==0);

1435 
	`mem£t
(&
d©a
[
hdr
+1], 0, 4);

1436 
d©a
[
hdr
+7] = 0;

1437 
	`put2byã
(&
d©a
[
hdr
+5], 
pBt
->
ußbÀSize
);

1438 
pPage
->
nFªe
 = 
pBt
->
ußbÀSize
 - 
fú°
;

1439 
	`decodeFœgs
(
pPage
, 
Êags
);

1440 
pPage
->
hdrOff£t
 = 
hdr
;

1441 
pPage
->
˚ŒOff£t
 = 
fú°
;

1442 
pPage
->
nOvîÊow
 = 0;

1443 
pPage
->
idxShi·
 = 0;

1444 
pPage
->
nCñl
 = 0;

1445 
pPage
->
isInô
 = 1;

1446 
	`∑geI¡egrôy
(
pPage
);

1447 
	}
}

1453 
	$gëPage
(
BtSh¨ed
 *
pBt
, 
Pgno
 
pgno
, 
MemPage
 **
µPage
){

1454 
rc
;

1455 *
aD©a
;

1456 
MemPage
 *
pPage
;

1457 
rc
 = 
	`sqlôe3∑gî_gë
(
pBt
->
pPagî
, 
pgno
, (**)&
aD©a
);

1458 if–
rc
 ) Ñc;

1459 
pPage
 = (
MemPage
*)&
aD©a
[
pBt
->
∑geSize
];

1460 
pPage
->
aD©a
 =áData;

1461 
pPage
->
pBt
 =ÖBt;

1462 
pPage
->
pgno
 =Ögno;

1463 
pPage
->
hdrOff£t
 =ÖPage->
pgno
==1 ? 100 : 0;

1464 *
µPage
 = 
pPage
;

1465  
SQLITE_OK
;

1466 
	}
}

1473 
	$gëAndInôPage
(

1474 
BtSh¨ed
 *
pBt
,

1475 
Pgno
 
pgno
,

1476 
MemPage
 **
µPage
,

1477 
MemPage
 *
pP¨ít


1479 
rc
;

1480 if–
pgno
==0 ){

1481  
SQLITE_CORRUPT_BKPT
;

1483 
rc
 = 
	`gëPage
(
pBt
, 
pgno
, 
µPage
);

1484 if–
rc
==
SQLITE_OK
 && (*
µPage
)->
isInô
==0 ){

1485 
rc
 = 
	`öôPage
(*
µPage
, 
pP¨ít
);

1487  
rc
;

1488 
	}
}

1494 
	$ªÀa£Page
(
MemPage
 *
pPage
){

1495 if–
pPage
 ){

1496 
	`as£π
–
pPage
->
aD©a
 );

1497 
	`as£π
–
pPage
->
pBt
 );

1498 
	`as£π
–&
pPage
->
aD©a
[pPage->
pBt
->
∑geSize
]==(*)pPage );

1499 
	`sqlôe3∑gî_uƒef
(
pPage
->
aD©a
);

1501 
	}
}

1508 
	$∑geDe°ru˘‹
(*
pD©a
, 
∑geSize
){

1509 
MemPage
 *
pPage
;

1510 
	`as£π
–(
∑geSize
 & 7)==0 );

1511 
pPage
 = (
MemPage
*)&((*)
pD©a
)[
∑geSize
];

1512 if–
pPage
->
pP¨ít
 ){

1513 
MemPage
 *
pP¨ít
 = 
pPage
->pParent;

1514 
pPage
->
pP¨ít
 = 0;

1515 
	`ªÀa£Page
(
pP¨ít
);

1517 
pPage
->
isInô
 = 0;

1518 
	}
}

1528 
	$∑geReöô
(*
pD©a
, 
∑geSize
){

1529 
MemPage
 *
pPage
;

1530 
	`as£π
–(
∑geSize
 & 7)==0 );

1531 
pPage
 = (
MemPage
*)&((*)
pD©a
)[
∑geSize
];

1532 if–
pPage
->
isInô
 ){

1533 
pPage
->
isInô
 = 0;

1534 
	`öôPage
(
pPage
,ÖPage->
pP¨ít
);

1536 
	}
}

1545 
	$sqlôe3BåìO≥n
(

1546 c⁄° *
zFûíame
,

1547 
sqlôe3
 *
pSqlôe
,

1548 
Båì
 **
µBåì
,

1549 
Êags


1551 
BtSh¨ed
 *
pBt
;

1552 
Båì
 *
p
;

1553 
rc
;

1554 
nRe£rve
;

1555 
zDbHódî
[100];

1556 #i‡!
	`deföed
(
SQLITE_OMIT_SHARED_CACHE
Ë&& !deföed(
SQLITE_OMIT_DISKIO
)

1557 c⁄° 
ThªadD©a
 *
pTsdro
;

1565 #i‡!
	`deföed
(
SQLITE_OMIT_SHARED_CACHE
Ë|| !deföed(
SQLITE_OMIT_AUTOVACUUM
)

1566 #ifde‡
SQLITE_OMIT_MEMORYDB


1567 c⁄° 
isMemdb
 = !
zFûíame
;

1569 c⁄° 
isMemdb
 = !
zFûíame
 || (
	`°rcmp
(zFilename, ":memory:")?0:1);

1573 
p
 = 
	`sqlôeMÆloc
((
Båì
));

1574 if–!
p
 ){

1575  
SQLITE_NOMEM
;

1577 
p
->
öTøns
 = 
TRANS_NONE
;

1578 
p
->
pSqlôe
 =ÖSqlite;

1581 #i‡!
	`deföed
(
SQLITE_OMIT_SHARED_CACHE
Ë&& !deföed(
SQLITE_OMIT_DISKIO
)

1582 
pTsdro
 = 
	`sqlôe3ThªadD©aRódO∆y
();

1583 if–
pTsdro
->
u£Sh¨edD©a
 && 
zFûíame
 && !
isMemdb
 ){

1584 *
zFuŒP©h«me
 = 
	`sqlôe3OsFuŒP©h«me
(
zFûíame
);

1585 if–!
zFuŒP©h«me
 ){

1586 
	`sqlôeFªe
(
p
);

1587  
SQLITE_NOMEM
;

1589 
pBt
=
pTsdro
->
pBåì
;ÖBt;ÖBtıBt->
pNext
){

1590 
	`as£π
–
pBt
->
nRef
>0 );

1591 if–0==
	`°rcmp
(
zFuŒP©h«me
, 
	`sqlôe3∑gî_fûíame
(
pBt
->
pPagî
)) ){

1592 
p
->
pBt
 =ÖBt;

1593 *
µBåì
 = 
p
;

1594 
pBt
->
nRef
++;

1595 
	`sqlôeFªe
(
zFuŒP©h«me
);

1596  
SQLITE_OK
;

1599 
	`sqlôeFªe
(
zFuŒP©h«me
);

1608 
	`as£π
–(
i64
)==8 );

1609 
	`as£π
–(
u64
)==8 );

1610 
	`as£π
–(
u32
)==4 );

1611 
	`as£π
–(
u16
)==2 );

1612 
	`as£π
–(
Pgno
)==4 );

1614 
pBt
 = 
	`sqlôeMÆloc
( (*pBt) );

1615 if–
pBt
==0 ){

1616 *
µBåì
 = 0;

1617 
	`sqlôeFªe
(
p
);

1618  
SQLITE_NOMEM
;

1620 
rc
 = 
	`sqlôe3∑gî_›í
(&
pBt
->
pPagî
, 
zFûíame
, 
EXTRA_SIZE
, 
Êags
);

1621 if–
rc
!=
SQLITE_OK
 ){

1622 if–
pBt
->
pPagî
 ) 
	`sqlôe3∑gî_˛o£
(pBt->pPager);

1623 
	`sqlôeFªe
(
pBt
);

1624 
	`sqlôeFªe
(
p
);

1625 *
µBåì
 = 0;

1626  
rc
;

1628 
p
->
pBt
 =ÖBt;

1630 
	`sqlôe3∑gî_£t_de°ru˘‹
(
pBt
->
pPagî
, 
∑geDe°ru˘‹
);

1631 
	`sqlôe3∑gî_£t_ªöôî
(
pBt
->
pPagî
, 
∑geReöô
);

1632 
pBt
->
pCurs‹
 = 0;

1633 
pBt
->
pPage1
 = 0;

1634 
pBt
->
ªadO∆y
 = 
	`sqlôe3∑gî_i§ód⁄ly
’Bt->
pPagî
);

1635 
	`sqlôe3∑gî_ªad_fûehódî
(
pBt
->
pPagî
, (
zDbHódî
), zDbHeader);

1636 
pBt
->
∑geSize
 = 
	`gë2byã
(&
zDbHódî
[16]);

1637 if–
pBt
->
∑geSize
<512 ||ÖBt->∑geSize>
SQLITE_MAX_PAGE_SIZE


1638 || ((
pBt
->
∑geSize
-1)&pBt->pageSize)!=0 ){

1639 
pBt
->
∑geSize
 = 
SQLITE_DEFAULT_PAGE_SIZE
;

1640 
pBt
->
maxEmbedFøc
 = 64;

1641 
pBt
->
möEmbedFøc
 = 32;

1642 
pBt
->
möLófFøc
 = 32;

1643 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


1650 if–
zFûíame
 && !
isMemdb
 ){

1651 
pBt
->
autoVacuum
 = 
SQLITE_DEFAULT_AUTOVACUUM
;

1654 
nRe£rve
 = 0;

1656 
nRe£rve
 = 
zDbHódî
[20];

1657 
pBt
->
maxEmbedFøc
 = 
zDbHódî
[21];

1658 
pBt
->
möEmbedFøc
 = 
zDbHódî
[22];

1659 
pBt
->
möLófFøc
 = 
zDbHódî
[23];

1660 
pBt
->
∑geSizeFixed
 = 1;

1661 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


1662 
pBt
->
autoVacuum
 = (
	`gë4byã
(&
zDbHódî
[36 + 4*4])?1:0);

1665 
pBt
->
ußbÀSize
 =ÖBt->
∑geSize
 - 
nRe£rve
;

1666 
	`as£π
–(
pBt
->
∑geSize
 & 7)==0 );

1667 
	`sqlôe3∑gî_£t_∑gesize
(
pBt
->
pPagî
,ÖBt->
∑geSize
);

1669 #i‚de‡
SQLITE_OMIT_SHARED_CACHE


1675 if–
pTsdro
->
u£Sh¨edD©a
 && 
zFûíame
 && !
isMemdb
 ){

1676 
pBt
->
pNext
 = 
pTsdro
->
pBåì
;

1677 
	`sqlôe3ThªadD©a
()->
pBåì
 = 
pBt
;

1680 
pBt
->
nRef
 = 1;

1681 *
µBåì
 = 
p
;

1682  
SQLITE_OK
;

1683 
	}
}

1688 
	$sqlôe3BåìClo£
(
Båì
 *
p
){

1689 
BtSh¨ed
 *
pBt
 = 
p
->pBt;

1690 
BtCurs‹
 *
pCur
;

1692 #i‚de‡
SQLITE_OMIT_SHARED_CACHE


1693 
ThªadD©a
 *
pTsd
;

1697 
pCur
 = 
pBt
->
pCurs‹
;

1698  
pCur
 ){

1699 
BtCurs‹
 *
pTmp
 = 
pCur
;

1700 
pCur
 =ÖCur->
pNext
;

1701 if–
pTmp
->
pBåì
==
p
 ){

1702 
	`sqlôe3BåìClo£Curs‹
(
pTmp
);

1710 
	`sqlôe3BåìRﬁlback
(
p
);

1711 
	`sqlôeFªe
(
p
);

1713 #i‚de‡
SQLITE_OMIT_SHARED_CACHE


1718 
	`as£π
–
pBt
->
nRef
>0 );

1719 
pBt
->
nRef
--;

1720 if–
pBt
->
nRef
 ){

1721  
SQLITE_OK
;

1728 
pTsd
 = (
ThªadD©a
 *)
	`sqlôe3ThªadD©aRódO∆y
();

1729 if–
pTsd
->
pBåì
==
pBt
 ){

1730 
	`as£π
–
pTsd
==
	`sqlôe3ThªadD©a
() );

1731 
pTsd
->
pBåì
 = 
pBt
->
pNext
;

1733 
BtSh¨ed
 *
pPªv
;

1734 
pPªv
=
pTsd
->
pBåì
;ÖPªv &&ÖPªv->
pNext
!=
pBt
;ÖPrev=pPrev->pNext);

1735 if–
pPªv
 ){

1736 
	`as£π
–
pTsd
==
	`sqlôe3ThªadD©a
() );

1737 
pPªv
->
pNext
 = 
pBt
->pNext;

1743 
	`as£π
–!
pBt
->
pCurs‹
 );

1744 
	`sqlôe3∑gî_˛o£
(
pBt
->
pPagî
);

1745 if–
pBt
->
xFªeSchema
 &&ÖBt->
pSchema
 ){

1746 
pBt
->
	`xFªeSchema
’Bt->
pSchema
);

1748 
	`sqlôeFªe
(
pBt
->
pSchema
);

1749 
	`sqlôeFªe
(
pBt
);

1750  
SQLITE_OK
;

1751 
	}
}

1756 
	$sqlôe3BåìSëBusyH™dÀr
(
Båì
 *
p
, 
BusyH™dÀr
 *
pH™dÀr
){

1757 
BtSh¨ed
 *
pBt
 = 
p
->pBt;

1758 
pBt
->
pBusyH™dÀr
 = 
pH™dÀr
;

1759 
	`sqlôe3∑gî_£t_busyh™dÀr
(
pBt
->
pPagî
, 
pH™dÀr
);

1760  
SQLITE_OK
;

1761 
	}
}

1778 
	$sqlôe3BåìSëCacheSize
(
Båì
 *
p
, 
mxPage
){

1779 
BtSh¨ed
 *
pBt
 = 
p
->pBt;

1780 
	`sqlôe3∑gî_£t_ˇchesize
(
pBt
->
pPagî
, 
mxPage
);

1781  
SQLITE_OK
;

1782 
	}
}

1792 #i‚de‡
SQLITE_OMIT_PAGER_PRAGMAS


1793 
	$sqlôe3BåìSëSa„tyLevñ
(
Båì
 *
p
, 
Àvñ
){

1794 
BtSh¨ed
 *
pBt
 = 
p
->pBt;

1795 
	`sqlôe3∑gî_£t_ß„ty_Àvñ
(
pBt
->
pPagî
, 
Àvñ
);

1796  
SQLITE_OK
;

1797 
	}
}

1804 
	$sqlôe3BåìSyncDißbÀd
(
Båì
 *
p
){

1805 
BtSh¨ed
 *
pBt
 = 
p
->pBt;

1806 
	`as£π
–
pBt
 &&ÖBt->
pPagî
 );

1807  
	`sqlôe3∑gî_nosync
(
pBt
->
pPagî
);

1808 
	}
}

1810 #i‡!
deföed
(
SQLITE_OMIT_PAGER_PRAGMAS
Ë|| !deföed(
SQLITE_OMIT_VACUUM
)

1826 
	$sqlôe3BåìSëPageSize
(
Båì
 *
p
, 
∑geSize
, 
nRe£rve
){

1827 
BtSh¨ed
 *
pBt
 = 
p
->pBt;

1828 if–
pBt
->
∑geSizeFixed
 ){

1829  
SQLITE_READONLY
;

1831 if–
nRe£rve
<0 ){

1832 
nRe£rve
 = 
pBt
->
∑geSize
 -ÖBt->
ußbÀSize
;

1834 if–
∑geSize
>=512 &&ÖageSize<=
SQLITE_MAX_PAGE_SIZE
 &&

1835 ((
∑geSize
-1)&pageSize)==0 ){

1836 
	`as£π
–(
∑geSize
 & 7)==0 );

1837 
	`as£π
–!
pBt
->
pPage1
 && !pBt->
pCurs‹
 );

1838 
pBt
->
∑geSize
 = 
	`sqlôe3∑gî_£t_∑gesize
’Bt->
pPagî
,ÖageSize);

1840 
pBt
->
ußbÀSize
 =ÖBt->
∑geSize
 - 
nRe£rve
;

1841  
SQLITE_OK
;

1842 
	}
}

1847 
	$sqlôe3BåìGëPageSize
(
Båì
 *
p
){

1848  
p
->
pBt
->
∑geSize
;

1849 
	}
}

1850 
	$sqlôe3BåìGëRe£rve
(
Båì
 *
p
){

1851  
p
->
pBt
->
∑geSize
 -Ö->pBt->
ußbÀSize
;

1852 
	}
}

1861 
	$sqlôe3BåìSëAutoVacuum
(
Båì
 *
p
, 
autoVacuum
){

1862 
BtSh¨ed
 *
pBt
 = 
p
->pBt;;

1863 #ifde‡
SQLITE_OMIT_AUTOVACUUM


1864  
SQLITE_READONLY
;

1866 if–
pBt
->
∑geSizeFixed
 ){

1867  
SQLITE_READONLY
;

1869 
pBt
->
autoVacuum
 = (autoVacuum?1:0);

1870  
SQLITE_OK
;

1872 
	}
}

1878 
	$sqlôe3BåìGëAutoVacuum
(
Båì
 *
p
){

1879 #ifde‡
SQLITE_OMIT_AUTOVACUUM


1882  
p
->
pBt
->
autoVacuum
;

1884 
	}
}

1897 
	$lockBåì
(
BtSh¨ed
 *
pBt
){

1898 
rc
, 
∑geSize
;

1899 
MemPage
 *
pPage1
;

1900 if–
pBt
->
pPage1
 )  
SQLITE_OK
;

1901 
rc
 = 
	`gëPage
(
pBt
, 1, &
pPage1
);

1902 if–
rc
!=
SQLITE_OK
 ) Ñc;

1908 
rc
 = 
SQLITE_NOTADB
;

1909 if–
	`sqlôe3∑gî_∑gecou¡
(
pBt
->
pPagî
)>0 ){

1910 
u8
 *
∑ge1
 = 
pPage1
->
aD©a
;

1911 if–
	`memcmp
(
∑ge1
, 
zMagicHódî
, 16)!=0 ){

1912 
∑ge1_öô_Áûed
;

1914 if–
∑ge1
[18]>1 ||Öage1[19]>1 ){

1915 
∑ge1_öô_Áûed
;

1917 
∑geSize
 = 
	`gë2byã
(&
∑ge1
[16]);

1918 if–((
∑geSize
-1)&pageSize)!=0 ){

1919 
∑ge1_öô_Áûed
;

1921 
	`as£π
–(
∑geSize
 & 7)==0 );

1922 
pBt
->
∑geSize
 =ÖageSize;

1923 
pBt
->
ußbÀSize
 = 
∑geSize
 - 
∑ge1
[20];

1924 if–
pBt
->
ußbÀSize
<500 ){

1925 
∑ge1_öô_Áûed
;

1927 
pBt
->
maxEmbedFøc
 = 
∑ge1
[21];

1928 
pBt
->
möEmbedFøc
 = 
∑ge1
[22];

1929 
pBt
->
möLófFøc
 = 
∑ge1
[23];

1930 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


1931 
pBt
->
autoVacuum
 = (
	`gë4byã
(&
∑ge1
[36 + 4*4])?1:0);

1948 
pBt
->
maxLoˇl
 = (pBt->
ußbÀSize
-12)*pBt->
maxEmbedFøc
/255 - 23;

1949 
pBt
->
möLoˇl
 = (pBt->
ußbÀSize
-12)*pBt->
möEmbedFøc
/255 - 23;

1950 
pBt
->
maxLóf
 =ÖBt->
ußbÀSize
 - 35;

1951 
pBt
->
möLóf
 = (pBt->
ußbÀSize
-12)*pBt->
möLófFøc
/255 - 23;

1952 if–
pBt
->
möLoˇl
>pBt->
maxLoˇl
 ||ÖBt->maxLocal<0 ){

1953 
∑ge1_öô_Áûed
;

1955 
	`as£π
–
pBt
->
maxLóf
 + 23 <
	`MX_CELL_SIZE
(pBt) );

1956 
pBt
->
pPage1
 =ÖPage1;

1957  
SQLITE_OK
;

1959 
∑ge1_öô_Áûed
:

1960 
	`ªÀa£Page
(
pPage1
);

1961 
pBt
->
pPage1
 = 0;

1962  
rc
;

1963 
	}
}

1969 
	$lockBåìWôhRëry
(
Båì
 *
pRef
){

1970 
rc
 = 
SQLITE_OK
;

1971 if–
pRef
->
öTøns
==
TRANS_NONE
 ){

1972 
u8
 
öTønß˘i⁄
 = 
pRef
->
pBt
->inTransaction;

1973 
	`båìI¡egrôy
(
pRef
);

1974 
rc
 = 
	`sqlôe3BåìBegöTøns
(
pRef
, 0);

1975 
pRef
->
pBt
->
öTønß˘i⁄
 = inTransaction;

1976 
pRef
->
öTøns
 = 
TRANS_NONE
;

1977 if–
rc
==
SQLITE_OK
 ){

1978 
pRef
->
pBt
->
nTønß˘i⁄
--;

1980 
	`båìI¡egrôy
(
pRef
);

1982  
rc
;

1983 
	}
}

1996 
	$u∆ockBåìIfUnu£d
(
BtSh¨ed
 *
pBt
){

1997 if–
pBt
->
öTønß˘i⁄
==
TRANS_NONE
 &&ÖBt->
pCurs‹
==0 &&ÖBt->
pPage1
!=0 ){

1998 if–
pBt
->
pPage1
->
aD©a
==0 ){

1999 
MemPage
 *
pPage
 = 
pBt
->
pPage1
;

2000 
pPage
->
aD©a
 = &((
u8
*ÌPage)[-
pBt
->
∑geSize
];

2001 
pPage
->
pBt
 =ÖBt;

2002 
pPage
->
pgno
 = 1;

2004 
	`ªÀa£Page
(
pBt
->
pPage1
);

2005 
pBt
->
pPage1
 = 0;

2006 
pBt
->
öStmt
 = 0;

2008 
	}
}

2014 
	$√wD©aba£
(
BtSh¨ed
 *
pBt
){

2015 
MemPage
 *
pP1
;

2016 *
d©a
;

2017 
rc
;

2018 if–
	`sqlôe3∑gî_∑gecou¡
(
pBt
->
pPagî
)>0 )  
SQLITE_OK
;

2019 
pP1
 = 
pBt
->
pPage1
;

2020 
	`as£π
–
pP1
!=0 );

2021 
d©a
 = 
pP1
->
aD©a
;

2022 
rc
 = 
	`sqlôe3∑gî_wrôe
(
d©a
);

2023 if–
rc
 ) Ñc;

2024 
	`mem˝y
(
d©a
, 
zMagicHódî
, (zMagicHeader));

2025 
	`as£π
–(
zMagicHódî
)==16 );

2026 
	`put2byã
(&
d©a
[16], 
pBt
->
∑geSize
);

2027 
d©a
[18] = 1;

2028 
d©a
[19] = 1;

2029 
d©a
[20] = 
pBt
->
∑geSize
 -ÖBt->
ußbÀSize
;

2030 
d©a
[21] = 
pBt
->
maxEmbedFøc
;

2031 
d©a
[22] = 
pBt
->
möEmbedFøc
;

2032 
d©a
[23] = 
pBt
->
möLófFøc
;

2033 
	`mem£t
(&
d©a
[24], 0, 100-24);

2034 
	`zîoPage
(
pP1
, 
PTF_INTKEY
|
PTF_LEAF
|
PTF_LEAFDATA
 );

2035 
pBt
->
∑geSizeFixed
 = 1;

2036 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


2037 if–
pBt
->
autoVacuum
 ){

2038 
	`put4byã
(&
d©a
[36 + 4*4], 1);

2041  
SQLITE_OK
;

2042 
	}
}

2079 
	$sqlôe3BåìBegöTøns
(
Båì
 *
p
, 
wrÊag
){

2080 
BtSh¨ed
 *
pBt
 = 
p
->pBt;

2081 
rc
 = 
SQLITE_OK
;

2083 
	`båìI¡egrôy
(
p
);

2089 if–
p
->
öTøns
==
TRANS_WRITE
 || (p->öTøns==
TRANS_READ
 && !
wrÊag
) ){

2090  
SQLITE_OK
;

2094 if–
pBt
->
ªadO∆y
 && 
wrÊag
 ){

2095  
SQLITE_READONLY
;

2102 if–
pBt
->
öTønß˘i⁄
==
TRANS_WRITE
 && 
wrÊag
 ){

2103  
SQLITE_BUSY
;

2107 if–
pBt
->
pPage1
==0 ){

2108 
rc
 = 
	`lockBåì
(
pBt
);

2111 if–
rc
==
SQLITE_OK
 && 
wrÊag
 ){

2112 
rc
 = 
	`sqlôe3∑gî_begö
(
pBt
->
pPage1
->
aD©a
, 
wrÊag
>1);

2113 if–
rc
==
SQLITE_OK
 ){

2114 
rc
 = 
	`√wD©aba£
(
pBt
);

2118 if–
rc
==
SQLITE_OK
 ){

2119 if–
wrÊag
 ) 
pBt
->
öStmt
 = 0;

2121 
	`u∆ockBåìIfUnu£d
(
pBt
);

2123 } 
rc
==
SQLITE_BUSY
 && 
pBt
->
öTønß˘i⁄
==
TRANS_NONE
 &&

2124 
	`sqlôe3InvokeBusyH™dÀr
(
pBt
->
pBusyH™dÀr
) );

2126 if–
rc
==
SQLITE_OK
 ){

2127 if–
p
->
öTøns
==
TRANS_NONE
 ){

2128 
pBt
->
nTønß˘i⁄
++;

2130 
p
->
öTøns
 = (
wrÊag
?
TRANS_WRITE
:
TRANS_READ
);

2131 if–
p
->
öTøns
>
pBt
->
öTønß˘i⁄
 ){

2132 
pBt
->
öTønß˘i⁄
 = 
p
->
öTøns
;

2136 
	`båìI¡egrôy
(
p
);

2137  
rc
;

2138 
	}
}

2140 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


2147 
	$£tChûdPåm≠s
(
MemPage
 *
pPage
){

2148 
i
;

2149 
nCñl
;

2150 
rc
 = 
SQLITE_OK
;

2151 
BtSh¨ed
 *
pBt
 = 
pPage
->pBt;

2152 
isInôOrig
 = 
pPage
->
isInô
;

2153 
Pgno
 
pgno
 = 
pPage
->pgno;

2155 
	`öôPage
(
pPage
, 0);

2156 
nCñl
 = 
pPage
->nCell;

2158 
i
=0; i<
nCñl
; i++){

2159 
u8
 *
pCñl
 = 
	`födCñl
(
pPage
, 
i
);

2161 
rc
 = 
	`±rm≠PutOvÊPå
(
pPage
, 
pCñl
);

2162 if–
rc
!=
SQLITE_OK
 ){

2163 
£t_chûd_±rm≠s_out
;

2166 if–!
pPage
->
Àaf
 ){

2167 
Pgno
 
chûdPgno
 = 
	`gë4byã
(
pCñl
);

2168 
rc
 = 
	`±rm≠Put
(
pBt
, 
chûdPgno
, 
PTRMAP_BTREE
, 
pgno
);

2169 if–
rc
!=
SQLITE_OK
 ) 
£t_chûd_±rm≠s_out
;

2173 if–!
pPage
->
Àaf
 ){

2174 
Pgno
 
chûdPgno
 = 
	`gë4byã
(&
pPage
->
aD©a
[pPage->
hdrOff£t
+8]);

2175 
rc
 = 
	`±rm≠Put
(
pBt
, 
chûdPgno
, 
PTRMAP_BTREE
, 
pgno
);

2178 
£t_chûd_±rm≠s_out
:

2179 
pPage
->
isInô
 = 
isInôOrig
;

2180  
rc
;

2181 
	}
}

2198 
	$modifyPagePoöãr
(
MemPage
 *
pPage
, 
Pgno
 
iFrom
, Pgnÿ
iTo
, 
u8
 
eTy≥
){

2199 if–
eTy≥
==
PTRMAP_OVERFLOW2
 ){

2201 if–
	`gë4byã
(
pPage
->
aD©a
)!=
iFrom
 ){

2202  
SQLITE_CORRUPT_BKPT
;

2204 
	`put4byã
(
pPage
->
aD©a
, 
iTo
);

2206 
isInôOrig
 = 
pPage
->
isInô
;

2207 
i
;

2208 
nCñl
;

2210 
	`öôPage
(
pPage
, 0);

2211 
nCñl
 = 
pPage
->nCell;

2213 
i
=0; i<
nCñl
; i++){

2214 
u8
 *
pCñl
 = 
	`födCñl
(
pPage
, 
i
);

2215 if–
eTy≥
==
PTRMAP_OVERFLOW1
 ){

2216 
CñlInfo
 
öfo
;

2217 
	`∑r£CñlPå
(
pPage
, 
pCñl
, &
öfo
);

2218 if–
öfo
.
iOvîÊow
 ){

2219 if–
iFrom
==
	`gë4byã
(&
pCñl
[
öfo
.
iOvîÊow
]) ){

2220 
	`put4byã
(&
pCñl
[
öfo
.
iOvîÊow
], 
iTo
);

2225 if–
	`gë4byã
(
pCñl
)==
iFrom
 ){

2226 
	`put4byã
(
pCñl
, 
iTo
);

2232 if–
i
==
nCñl
 ){

2233 if–
eTy≥
!=
PTRMAP_BTREE
 ||

2234 
	`gë4byã
(&
pPage
->
aD©a
[pPage->
hdrOff£t
+8])!=
iFrom
 ){

2235  
SQLITE_CORRUPT_BKPT
;

2237 
	`put4byã
(&
pPage
->
aD©a
[pPage->
hdrOff£t
+8], 
iTo
);

2240 
pPage
->
isInô
 = 
isInôOrig
;

2242  
SQLITE_OK
;

2243 
	}
}

2250 
	$ªloˇãPage
(

2251 
BtSh¨ed
 *
pBt
,

2252 
MemPage
 *
pDbPage
,

2253 
u8
 
eTy≥
,

2254 
Pgno
 
iPåPage
,

2255 
Pgno
 
iFªePage


2257 
MemPage
 *
pPåPage
;

2258 
Pgno
 
iDbPage
 = 
pDbPage
->
pgno
;

2259 
Pagî
 *
pPagî
 = 
pBt
->pPager;

2260 
rc
;

2262 
	`as£π
–
eTy≥
==
PTRMAP_OVERFLOW2
 ||ÉTy≥==
PTRMAP_OVERFLOW1
 ||

2263 
eTy≥
==
PTRMAP_BTREE
 ||ÉTy≥==
PTRMAP_ROOTPAGE
 );

2266 
	`TRACE
(("AUTOVACUUM: Moving %dÅo freeÖage %d (ptrÖage %dÅype %d)\n",

2267 
iDbPage
, 
iFªePage
, 
iPåPage
, 
eTy≥
));

2268 
rc
 = 
	`sqlôe3∑gî_movïage
(
pPagî
, 
pDbPage
->
aD©a
, 
iFªePage
);

2269 if–
rc
!=
SQLITE_OK
 ){

2270  
rc
;

2272 
pDbPage
->
pgno
 = 
iFªePage
;

2282 if–
eTy≥
==
PTRMAP_BTREE
 ||ÉTy≥==
PTRMAP_ROOTPAGE
 ){

2283 
rc
 = 
	`£tChûdPåm≠s
(
pDbPage
);

2284 if–
rc
!=
SQLITE_OK
 ){

2285  
rc
;

2288 
Pgno
 
√xtOvÊ
 = 
	`gë4byã
(
pDbPage
->
aD©a
);

2289 if–
√xtOvÊ
!=0 ){

2290 
rc
 = 
	`±rm≠Put
(
pBt
, 
√xtOvÊ
, 
PTRMAP_OVERFLOW2
, 
iFªePage
);

2291 if–
rc
!=
SQLITE_OK
 ){

2292  
rc
;

2301 if–
eTy≥
!=
PTRMAP_ROOTPAGE
 ){

2302 
rc
 = 
	`gëPage
(
pBt
, 
iPåPage
, &
pPåPage
);

2303 if–
rc
!=
SQLITE_OK
 ){

2304  
rc
;

2306 
rc
 = 
	`sqlôe3∑gî_wrôe
(
pPåPage
->
aD©a
);

2307 if–
rc
!=
SQLITE_OK
 ){

2308 
	`ªÀa£Page
(
pPåPage
);

2309  
rc
;

2311 
rc
 = 
	`modifyPagePoöãr
(
pPåPage
, 
iDbPage
, 
iFªePage
, 
eTy≥
);

2312 
	`ªÀa£Page
(
pPåPage
);

2313 if–
rc
==
SQLITE_OK
 ){

2314 
rc
 = 
	`±rm≠Put
(
pBt
, 
iFªePage
, 
eTy≥
, 
iPåPage
);

2317  
rc
;

2318 
	}
}

2321 
ÆloˇãPage
(
BtSh¨ed
 *, 
MemPage
 **, 
Pgno
 *, Pgno, 
u8
);

2327 
	$autoVacuumCommô
(
BtSh¨ed
 *
pBt
, 
Pgno
 *
nTrunc
){

2328 
Pagî
 *
pPagî
 = 
pBt
->pPager;

2329 
Pgno
 
nFªeLi°
;

2330 
nPåM≠
;

2331 
Pgno
 
‹igSize
;

2332 
Pgno
 
föSize
;

2333 
rc
;

2334 
u8
 
eTy≥
;

2335 
pgsz
 = 
pBt
->
∑geSize
;

2336 
Pgno
 
iDbPage
;

2337 
MemPage
 *
pDbMemPage
 = 0;

2338 
Pgno
 
iPåPage
;

2339 
Pgno
 
iFªePage
;

2340 
MemPage
 *
pFªeMemPage
 = 0;

2342 #i‚de‡
NDEBUG


2343 
nRef
 = *
	`sqlôe3∑gî_°©s
(
pPagî
);

2346 
	`as£π
–
pBt
->
autoVacuum
 );

2347 if–
	`PTRMAP_ISPAGE
(
pgsz
, 
	`sqlôe3∑gî_∑gecou¡
(
pPagî
)) ){

2348  
SQLITE_CORRUPT_BKPT
;

2354 
nFªeLi°
 = 
	`gë4byã
(&
pBt
->
pPage1
->
aD©a
[36]);

2355 if–
nFªeLi°
==0 ){

2356 *
nTrunc
 = 0;

2357  
SQLITE_OK
;

2360 
‹igSize
 = 
	`sqlôe3∑gî_∑gecou¡
(
pPagî
);

2361 
nPåM≠
 = (
nFªeLi°
-
‹igSize
+
	`PTRMAP_PAGENO
(
pgsz
, origSize)+pgsz/5)/(pgsz/5);

2362 
föSize
 = 
‹igSize
 - 
nFªeLi°
 - 
nPåM≠
;

2363 if–
‹igSize
>=
	`PENDING_BYTE_PAGE
(
pBt
Ë&& 
föSize
<=PENDING_BYTE_PAGE(pBt) ){

2364 
föSize
--;

2365 if–
	`PTRMAP_ISPAGE
(
pBt
->
ußbÀSize
, 
föSize
) ){

2366 
föSize
--;

2369 
	`TRACE
(("AUTOVACUUM: Begö (db sizê%d->%d)\n", 
‹igSize
, 
föSize
));

2377  
iDbPage
=
föSize
+1; iDbPage<=
‹igSize
; iDbPage++ ){

2379 if–
	`PTRMAP_ISPAGE
(
pgsz
, 
iDbPage
Ë|| iDbPage==
	`PENDING_BYTE_PAGE
(
pBt
) ){

2383 
rc
 = 
	`±rm≠Gë
(
pBt
, 
iDbPage
, &
eTy≥
, &
iPåPage
);

2384 if–
rc
!=
SQLITE_OK
 ) 
autovacuum_out
;

2385 if–
eTy≥
==
PTRMAP_ROOTPAGE
 ){

2386 
rc
 = 
SQLITE_CORRUPT_BKPT
;

2387 
autovacuum_out
;

2391 if–
eTy≥
==
PTRMAP_FREEPAGE
 ){

2394 
rc
 = 
	`gëPage
(
pBt
, 
iDbPage
, &
pDbMemPage
);

2395 if–
rc
!=
SQLITE_OK
 ) 
autovacuum_out
;

2402 if–
pFªeMemPage
 ){

2403 
	`ªÀa£Page
(
pFªeMemPage
);

2404 
pFªeMemPage
 = 0;

2406 
rc
 = 
	`ÆloˇãPage
(
pBt
, &
pFªeMemPage
, &
iFªePage
, 0, 0);

2407 if–
rc
!=
SQLITE_OK
 ){

2408 
	`ªÀa£Page
(
pDbMemPage
);

2409 
autovacuum_out
;

2411 
	`as£π
–
iFªePage
<=
‹igSize
 );

2412 } 
iFªePage
>
föSize
 );

2413 
	`ªÀa£Page
(
pFªeMemPage
);

2414 
pFªeMemPage
 = 0;

2422 
rc
 = 
	`ªloˇãPage
(
pBt
, 
pDbMemPage
, 
eTy≥
, 
iPåPage
, 
iFªePage
);

2423 
	`ªÀa£Page
(
pDbMemPage
);

2424 if–
rc
!=
SQLITE_OK
 ) 
autovacuum_out
;

2431 
rc
 = 
	`sqlôe3∑gî_wrôe
(
pBt
->
pPage1
->
aD©a
);

2432 if–
rc
!=
SQLITE_OK
 ) 
autovacuum_out
;

2433 
	`put4byã
(&
pBt
->
pPage1
->
aD©a
[32], 0);

2434 
	`put4byã
(&
pBt
->
pPage1
->
aD©a
[36], 0);

2435 if–
rc
!=
SQLITE_OK
 ) 
autovacuum_out
;

2436 *
nTrunc
 = 
föSize
;

2438 
autovacuum_out
:

2439 
	`as£π
–
nRef
==*
	`sqlôe3∑gî_°©s
(
pPagî
) );

2440 if–
rc
!=
SQLITE_OK
 ){

2441 
	`sqlôe3∑gî_rﬁlback
(
pPagî
);

2443  
rc
;

2444 
	}
}

2453 
	$sqlôe3BåìCommô
(
Båì
 *
p
){

2454 
BtSh¨ed
 *
pBt
 = 
p
->pBt;

2456 
	`båìI¡egrôy
(
p
);

2461 if–
p
->
öTøns
==
TRANS_WRITE
 ){

2462 
rc
;

2463 
	`as£π
–
pBt
->
öTønß˘i⁄
==
TRANS_WRITE
 );

2464 
	`as£π
–
pBt
->
nTønß˘i⁄
>0 );

2465 
rc
 = 
	`sqlôe3∑gî_commô
(
pBt
->
pPagî
);

2466 if–
rc
!=
SQLITE_OK
 ){

2467  
rc
;

2469 
pBt
->
öTønß˘i⁄
 = 
TRANS_READ
;

2470 
pBt
->
öStmt
 = 0;

2472 
	`u∆ockAŒTabÀs
(
p
);

2479 if–
p
->
öTøns
!=
TRANS_NONE
 ){

2480 
pBt
->
nTønß˘i⁄
--;

2481 if–0==
pBt
->
nTønß˘i⁄
 ){

2482 
pBt
->
öTønß˘i⁄
 = 
TRANS_NONE
;

2489 
p
->
öTøns
 = 
TRANS_NONE
;

2490 
	`u∆ockBåìIfUnu£d
(
pBt
);

2492 
	`båìI¡egrôy
(
p
);

2493  
SQLITE_OK
;

2494 
	}
}

2496 #i‚de‡
NDEBUG


2502 
	$cou¡WrôeCurs‹s
(
BtSh¨ed
 *
pBt
){

2503 
BtCurs‹
 *
pCur
;

2504 
r
 = 0;

2505 
pCur
=
pBt
->
pCurs‹
;ÖCur;ÖCurıCur->
pNext
){

2506 if–
pCur
->
wrFœg
 ) 
r
++;

2508  
r
;

2509 
	}
}

2512 #i‡
deföed
(
SQLITE_TEST
Ë&& deföed(
SQLITE_DEBUG
)

2516 
	$sqlôe3BåìCurs‹Li°
(
Båì
 *
p
){

2517 
BtCurs‹
 *
pCur
;

2518 
BtSh¨ed
 *
pBt
 = 
p
->pBt;

2519 
pCur
=
pBt
->
pCurs‹
;ÖCur;ÖCurıCur->
pNext
){

2520 
MemPage
 *
pPage
 = 
pCur
->pPage;

2521 *
zMode
 = 
pCur
->
wrFœg
 ? "rw" : "ro";

2522 
	`sqlôe3DebugPrötf
("CURSOR %pÑootedát %4d(%s) currentlyát %d.%d%s\n",

2523 
pCur
,ÖCur->
pgnoRoŸ
, 
zMode
,

2524 
pPage
 ?ÖPage->
pgno
 : 0, 
pCur
->
idx
,

2525 (
pCur
->
eSèã
==
CURSOR_VALID
) ? "" : "Éof"

2528 
	}
}

2540 
	$sqlôe3BåìRﬁlback
(
Båì
 *
p
){

2541 
rc
;

2542 
BtSh¨ed
 *
pBt
 = 
p
->pBt;

2543 
MemPage
 *
pPage1
;

2545 
rc
 = 
	`ßveAŒCurs‹s
(
pBt
, 0, 0);

2546 #i‚de‡
SQLITE_OMIT_SHARED_CACHE


2547 if–
rc
!=
SQLITE_OK
 ){

2555  
pBt
->
pCurs‹
 ){

2556 
sqlôe3
 *
db
 = 
pBt
->
pCurs‹
->
pBåì
->
pSqlôe
;

2557 if–
db
 ){

2558 
	`sqlôe3Ab‹tOthîA˘iveVdbes
(
db
, 0);

2563 
	`båìI¡egrôy
(
p
);

2564 
	`u∆ockAŒTabÀs
(
p
);

2566 if–
p
->
öTøns
==
TRANS_WRITE
 ){

2567 
rc2
;

2569 
	`as£π
–
TRANS_WRITE
==
pBt
->
öTønß˘i⁄
 );

2570 
rc2
 = 
	`sqlôe3∑gî_rﬁlback
(
pBt
->
pPagî
);

2571 if–
rc2
!=
SQLITE_OK
 ){

2572 
rc
 = 
rc2
;

2578 if–
	`gëPage
(
pBt
, 1, &
pPage1
)==
SQLITE_OK
 ){

2579 
	`ªÀa£Page
(
pPage1
);

2581 
	`as£π
–
	`cou¡WrôeCurs‹s
(
pBt
)==0 );

2582 
pBt
->
öTønß˘i⁄
 = 
TRANS_READ
;

2585 if–
p
->
öTøns
!=
TRANS_NONE
 ){

2586 
	`as£π
–
pBt
->
nTønß˘i⁄
>0 );

2587 
pBt
->
nTønß˘i⁄
--;

2588 if–0==
pBt
->
nTønß˘i⁄
 ){

2589 
pBt
->
öTønß˘i⁄
 = 
TRANS_NONE
;

2593 
p
->
öTøns
 = 
TRANS_NONE
;

2594 
pBt
->
öStmt
 = 0;

2595 
	`u∆ockBåìIfUnu£d
(
pBt
);

2597 
	`båìI¡egrôy
(
p
);

2598  
rc
;

2599 
	}
}

2616 
	$sqlôe3BåìBegöStmt
(
Båì
 *
p
){

2617 
rc
;

2618 
BtSh¨ed
 *
pBt
 = 
p
->pBt;

2619 if–(
p
->
öTøns
!=
TRANS_WRITE
Ë|| 
pBt
->
öStmt
 ){

2620  
pBt
->
ªadO∆y
 ? 
SQLITE_READONLY
 : 
SQLITE_ERROR
;

2622 
	`as£π
–
pBt
->
öTønß˘i⁄
==
TRANS_WRITE
 );

2623 
rc
 = 
pBt
->
ªadO∆y
 ? 
SQLITE_OK
 : 
	`sqlôe3∑gî_°mt_begö
’Bt->
pPagî
);

2624 
pBt
->
öStmt
 = 1;

2625  
rc
;

2626 
	}
}

2633 
	$sqlôe3BåìCommôStmt
(
Båì
 *
p
){

2634 
rc
;

2635 
BtSh¨ed
 *
pBt
 = 
p
->pBt;

2636 if–
pBt
->
öStmt
 && !pBt->
ªadO∆y
 ){

2637 
rc
 = 
	`sqlôe3∑gî_°mt_commô
(
pBt
->
pPagî
);

2639 
rc
 = 
SQLITE_OK
;

2641 
pBt
->
öStmt
 = 0;

2642  
rc
;

2643 
	}
}

2653 
	$sqlôe3BåìRﬁlbackStmt
(
Båì
 *
p
){

2654 
rc
 = 
SQLITE_OK
;

2655 
BtSh¨ed
 *
pBt
 = 
p
->pBt;

2656 
	`sqlôe3MÆlocDißŒow
();

2657 if–
pBt
->
öStmt
 && !pBt->
ªadO∆y
 ){

2658 
rc
 = 
	`sqlôe3∑gî_°mt_rﬁlback
(
pBt
->
pPagî
);

2659 
	`as£π
–
	`cou¡WrôeCurs‹s
(
pBt
)==0 );

2660 
pBt
->
öStmt
 = 0;

2662 
	`sqlôe3MÆlocAŒow
();

2663  
rc
;

2664 
	}
}

2670 
	$dÊtCom∑ª
(

2671 *
NŸU£d
,

2672 
n1
, c⁄° *
p1
,

2673 
n2
, c⁄° *
p2


2675 
c
;

2676 
c
 = 
	`memcmp
(
p1
, 
p2
, 
n1
<
n2
 ?Ç1 :Ç2);

2677 if–
c
==0 ){

2678 
c
 = 
n1
 - 
n2
;

2680  
c
;

2681 
	}
}

2725 
sqlôe3BåìCurs‹
(

2726 
Båì
 *
p
,

2727 
iTabÀ
,

2728 
wrFœg
,

2729 (*
xCmp
)(*,,const *,,const *),

2730 *
pArg
,

2731 
BtCurs‹
 **
µCur


2733 
rc
;

2734 
BtCurs‹
 *
pCur
;

2735 
BtSh¨ed
 *
pBt
 = 
p
->pBt;

2737 *
µCur
 = 0;

2738 if–
wrFœg
 ){

2739 if–
pBt
->
ªadO∆y
 ){

2740  
SQLITE_READONLY
;

2742 if–
	`checkRódLocks
(
pBt
, 
iTabÀ
, 0) ){

2743  
SQLITE_LOCKED
;

2747 if–
pBt
->
pPage1
==0 ){

2748 
rc
 = 
	`lockBåìWôhRëry
(
p
);

2749 if–
rc
!=
SQLITE_OK
 ){

2750  
rc
;

2753 
pCur
 = 
	`sqlôeMÆloc
( (*pCur) );

2754 if–
pCur
==0 ){

2755 
rc
 = 
SQLITE_NOMEM
;

2756 
¸óã_curs‹_ex˚±i⁄
;

2758 
pCur
->
pgnoRoŸ
 = (
Pgno
)
iTabÀ
;

2759 if–
iTabÀ
==1 && 
	`sqlôe3∑gî_∑gecou¡
(
pBt
->
pPagî
)==0 ){

2760 
rc
 = 
SQLITE_EMPTY
;

2761 
¸óã_curs‹_ex˚±i⁄
;

2763 
rc
 = 
	`gëAndInôPage
(
pBt
, 
pCur
->
pgnoRoŸ
, &pCur->
pPage
, 0);

2764 if–
rc
!=
SQLITE_OK
 ){

2765 
¸óã_curs‹_ex˚±i⁄
;

2772 
pCur
->
xCom∑ª
 = 
xCmp
 ? xCm∞: 
dÊtCom∑ª
;

2773 
pCur
->
pArg
 =ÖArg;

2774 
pCur
->
pBåì
 = 
p
;

2775 
pCur
->
wrFœg
 = wrFlag;

2776 
pCur
->
pNext
 = 
pBt
->
pCurs‹
;

2777 if–
pCur
->
pNext
 ){

2778 
pCur
->
pNext
->
pPªv
 =ÖCur;

2780 
pBt
->
pCurs‹
 = 
pCur
;

2781 
pCur
->
eSèã
 = 
CURSOR_INVALID
;

2782 *
µCur
 = 
pCur
;

2784  
SQLITE_OK
;

2785 
¸óã_curs‹_ex˚±i⁄
:

2786 if–
pCur
 ){

2787 
	`ªÀa£Page
(
pCur
->
pPage
);

2788 
	`sqlôeFªe
(
pCur
);

2790 
	`u∆ockBåìIfUnu£d
(
pBt
);

2791  
rc
;

2792 
	}
}

2798 
sqlôe3BåìSëCom∑ª
(

2799 
BtCurs‹
 *
pCur
,

2800 (*
xCmp
)(*,,const *,,const *),

2801 *
pArg


2803 
pCur
->
xCom∑ª
 = 
xCmp
 ? xCm∞: 
dÊtCom∑ª
;

2804 
pCur
->
pArg
 =ÖArg;

2805 
	}
}

2812 
	$sqlôe3BåìClo£Curs‹
(
BtCurs‹
 *
pCur
){

2813 
BtSh¨ed
 *
pBt
 = 
pCur
->
pBåì
->pBt;

2814 
	`ª°‹eOrCÀ¨Curs‹Posôi⁄
(
pCur
, 0);

2815 if–
pCur
->
pPªv
 ){

2816 
pCur
->
pPªv
->
pNext
 =ÖCur->pNext;

2818 
pBt
->
pCurs‹
 = 
pCur
->
pNext
;

2820 if–
pCur
->
pNext
 ){

2821 
pCur
->
pNext
->
pPªv
 =ÖCur->pPrev;

2823 
	`ªÀa£Page
(
pCur
->
pPage
);

2824 
	`u∆ockBåìIfUnu£d
(
pBt
);

2825 
	`sqlôeFªe
(
pCur
);

2826  
SQLITE_OK
;

2827 
	}
}

2833 
	$gëTempCurs‹
(
BtCurs‹
 *
pCur
, BtCurs‹ *
pTempCur
){

2834 
	`mem˝y
(
pTempCur
, 
pCur
, (*pCur));

2835 
pTempCur
->
pNext
 = 0;

2836 
pTempCur
->
pPªv
 = 0;

2837 if–
pTempCur
->
pPage
 ){

2838 
	`sqlôe3∑gî_ªf
(
pTempCur
->
pPage
->
aD©a
);

2840 
	}
}

2846 
	$ªÀa£TempCurs‹
(
BtCurs‹
 *
pCur
){

2847 if–
pCur
->
pPage
 ){

2848 
	`sqlôe3∑gî_uƒef
(
pCur
->
pPage
->
aD©a
);

2850 
	}
}

2859 
	$gëCñlInfo
(
BtCurs‹
 *
pCur
){

2860 if–
pCur
->
öfo
.
nSize
==0 ){

2861 
	`∑r£Cñl
(
pCur
->
pPage
,ÖCur->
idx
, &pCur->
öfo
);

2863 #i‚de‡
NDEBUG


2864 
CñlInfo
 
öfo
;

2865 
	`mem£t
(&
öfo
, 0, (info));

2866 
	`∑r£Cñl
(
pCur
->
pPage
,ÖCur->
idx
, &
öfo
);

2867 
	`as£π
–
	`memcmp
(&
öfo
, &
pCur
->info, (info))==0 );

2870 
	}
}

2880 
	$sqlôe3BåìKeySize
(
BtCurs‹
 *
pCur
, 
i64
 *
pSize
){

2881 
rc
 = 
	`ª°‹eOrCÀ¨Curs‹Posôi⁄
(
pCur
, 1);

2882 if–
rc
==
SQLITE_OK
 ){

2883 
	`as£π
–
pCur
->
eSèã
==
CURSOR_INVALID
 ||ÖCur->eSèã==
CURSOR_VALID
 );

2884 if–
pCur
->
eSèã
==
CURSOR_INVALID
 ){

2885 *
pSize
 = 0;

2887 
	`gëCñlInfo
(
pCur
);

2888 *
pSize
 = 
pCur
->
öfo
.
nKey
;

2891  
rc
;

2892 
	}
}

2901 
	$sqlôe3BåìD©aSize
(
BtCurs‹
 *
pCur
, 
u32
 *
pSize
){

2902 
rc
 = 
	`ª°‹eOrCÀ¨Curs‹Posôi⁄
(
pCur
, 1);

2903 if–
rc
==
SQLITE_OK
 ){

2904 
	`as£π
–
pCur
->
eSèã
==
CURSOR_INVALID
 ||ÖCur->eSèã==
CURSOR_VALID
 );

2905 if–
pCur
->
eSèã
==
CURSOR_INVALID
 ){

2907 *
pSize
 = 0;

2909 
	`gëCñlInfo
(
pCur
);

2910 *
pSize
 = 
pCur
->
öfo
.
nD©a
;

2913  
rc
;

2914 
	}
}

2925 
	$gëPaylﬂd
(

2926 
BtCurs‹
 *
pCur
,

2927 
off£t
,

2928 
amt
,

2929 *
pBuf
,

2930 
skùKey


2932 *
aPaylﬂd
;

2933 
Pgno
 
√xtPage
;

2934 
rc
;

2935 
MemPage
 *
pPage
;

2936 
BtSh¨ed
 *
pBt
;

2937 
ovÊSize
;

2938 
u32
 
nKey
;

2940 
	`as£π
–
pCur
!=0 &&ÖCur->
pPage
!=0 );

2941 
	`as£π
–
pCur
->
eSèã
==
CURSOR_VALID
 );

2942 
pBt
 = 
pCur
->
pBåì
->pBt;

2943 
pPage
 = 
pCur
->pPage;

2944 
	`∑geI¡egrôy
(
pPage
);

2945 
	`as£π
–
pCur
->
idx
>=0 &&ÖCur->idx<
pPage
->
nCñl
 );

2946 
	`gëCñlInfo
(
pCur
);

2947 
aPaylﬂd
 = 
pCur
->
öfo
.
pCñl
 +ÖCur->öfo.
nHódî
;

2948 if–
pPage
->
ötKey
 ){

2949 
nKey
 = 0;

2951 
nKey
 = 
pCur
->
öfo
.nKey;

2953 
	`as£π
–
off£t
>=0 );

2954 if–
skùKey
 ){

2955 
off£t
 +
nKey
;

2957 if–
off£t
+
amt
 > 
nKey
+
pCur
->
öfo
.
nD©a
 ){

2958  
SQLITE_ERROR
;

2960 if–
off£t
<
pCur
->
öfo
.
nLoˇl
 ){

2961 
a
 = 
amt
;

2962 if–
a
+
off£t
>
pCur
->
öfo
.
nLoˇl
 ){

2963 
a
 = 
pCur
->
öfo
.
nLoˇl
 - 
off£t
;

2965 
	`mem˝y
(
pBuf
, &
aPaylﬂd
[
off£t
], 
a
);

2966 if–
a
==
amt
 ){

2967  
SQLITE_OK
;

2969 
off£t
 = 0;

2970 
pBuf
 +
a
;

2971 
amt
 -
a
;

2973 
off£t
 -
pCur
->
öfo
.
nLoˇl
;

2975 
ovÊSize
 = 
pBt
->
ußbÀSize
 - 4;

2976 if–
amt
>0 ){

2977 
√xtPage
 = 
	`gë4byã
(&
aPaylﬂd
[
pCur
->
öfo
.
nLoˇl
]);

2978  
amt
>0 && 
√xtPage
 ){

2979 
rc
 = 
	`sqlôe3∑gî_gë
(
pBt
->
pPagî
, 
√xtPage
, (**)&
aPaylﬂd
);

2980 if–
rc
!=0 ){

2981  
rc
;

2983 
√xtPage
 = 
	`gë4byã
(
aPaylﬂd
);

2984 if–
off£t
<
ovÊSize
 ){

2985 
a
 = 
amt
;

2986 if–
a
 + 
off£t
 > 
ovÊSize
 ){

2987 
a
 = 
ovÊSize
 - 
off£t
;

2989 
	`mem˝y
(
pBuf
, &
aPaylﬂd
[
off£t
+4], 
a
);

2990 
off£t
 = 0;

2991 
amt
 -
a
;

2992 
pBuf
 +
a
;

2994 
off£t
 -
ovÊSize
;

2996 
	`sqlôe3∑gî_uƒef
(
aPaylﬂd
);

3000 if–
amt
>0 ){

3001  
SQLITE_CORRUPT_BKPT
;

3003  
SQLITE_OK
;

3004 
	}
}

3015 
	$sqlôe3BåìKey
(
BtCurs‹
 *
pCur
, 
u32
 
off£t
, u32 
amt
, *
pBuf
){

3016 
rc
 = 
	`ª°‹eOrCÀ¨Curs‹Posôi⁄
(
pCur
, 1);

3017 if–
rc
==
SQLITE_OK
 ){

3018 
	`as£π
–
pCur
->
eSèã
==
CURSOR_VALID
 );

3019 
	`as£π
–
pCur
->
pPage
!=0 );

3020 if–
pCur
->
pPage
->
ötKey
 ){

3021  
SQLITE_CORRUPT_BKPT
;

3023 
	`as£π
–
pCur
->
pPage
->
ötKey
==0 );

3024 
	`as£π
–
pCur
->
idx
>=0 &&ÖCur->idx<pCur->
pPage
->
nCñl
 );

3025 
rc
 = 
	`gëPaylﬂd
(
pCur
, 
off£t
, 
amt
, (*)
pBuf
, 0);

3027  
rc
;

3028 
	}
}

3039 
	$sqlôe3BåìD©a
(
BtCurs‹
 *
pCur
, 
u32
 
off£t
, u32 
amt
, *
pBuf
){

3040 
rc
 = 
	`ª°‹eOrCÀ¨Curs‹Posôi⁄
(
pCur
, 1);

3041 if–
rc
==
SQLITE_OK
 ){

3042 
	`as£π
–
pCur
->
eSèã
==
CURSOR_VALID
 );

3043 
	`as£π
–
pCur
->
pPage
!=0 );

3044 
	`as£π
–
pCur
->
idx
>=0 &&ÖCur->idx<pCur->
pPage
->
nCñl
 );

3045 
rc
 = 
	`gëPaylﬂd
(
pCur
, 
off£t
, 
amt
, 
pBuf
, 1);

3047  
rc
;

3048 
	}
}

3069 c⁄° *
	$„tchPaylﬂd
(

3070 
BtCurs‹
 *
pCur
,

3071 *
pAmt
,

3072 
skùKey


3074 *
aPaylﬂd
;

3075 
MemPage
 *
pPage
;

3076 
u32
 
nKey
;

3077 
nLoˇl
;

3079 
	`as£π
–
pCur
!=0 &&ÖCur->
pPage
!=0 );

3080 
	`as£π
–
pCur
->
eSèã
==
CURSOR_VALID
 );

3081 
pPage
 = 
pCur
->pPage;

3082 
	`∑geI¡egrôy
(
pPage
);

3083 
	`as£π
–
pCur
->
idx
>=0 &&ÖCur->idx<
pPage
->
nCñl
 );

3084 
	`gëCñlInfo
(
pCur
);

3085 
aPaylﬂd
 = 
pCur
->
öfo
.
pCñl
;

3086 
aPaylﬂd
 +
pCur
->
öfo
.
nHódî
;

3087 if–
pPage
->
ötKey
 ){

3088 
nKey
 = 0;

3090 
nKey
 = 
pCur
->
öfo
.nKey;

3092 if–
skùKey
 ){

3093 
aPaylﬂd
 +
nKey
;

3094 
nLoˇl
 = 
pCur
->
öfo
.nLoˇ»- 
nKey
;

3096 
nLoˇl
 = 
pCur
->
öfo
.nLocal;

3097 if–
nLoˇl
>
nKey
 ){

3098 
nLoˇl
 = 
nKey
;

3101 *
pAmt
 = 
nLoˇl
;

3102  
aPaylﬂd
;

3103 
	}
}

3117 c⁄° *
	$sqlôe3BåìKeyFëch
(
BtCurs‹
 *
pCur
, *
pAmt
){

3118 if–
pCur
->
eSèã
==
CURSOR_VALID
 ){

3119  (c⁄° *)
	`„tchPaylﬂd
(
pCur
, 
pAmt
, 0);

3122 
	}
}

3123 c⁄° *
	$sqlôe3BåìD©aFëch
(
BtCurs‹
 *
pCur
, *
pAmt
){

3124 if–
pCur
->
eSèã
==
CURSOR_VALID
 ){

3125  (c⁄° *)
	`„tchPaylﬂd
(
pCur
, 
pAmt
, 1);

3128 
	}
}

3135 
	$moveToChûd
(
BtCurs‹
 *
pCur
, 
u32
 
√wPgno
){

3136 
rc
;

3137 
MemPage
 *
pNewPage
;

3138 
MemPage
 *
pOldPage
;

3139 
BtSh¨ed
 *
pBt
 = 
pCur
->
pBåì
->pBt;

3141 
	`as£π
–
pCur
->
eSèã
==
CURSOR_VALID
 );

3142 
rc
 = 
	`gëAndInôPage
(
pBt
, 
√wPgno
, &
pNewPage
, 
pCur
->
pPage
);

3143 if–
rc
 ) Ñc;

3144 
	`∑geI¡egrôy
(
pNewPage
);

3145 
pNewPage
->
idxP¨ít
 = 
pCur
->
idx
;

3146 
pOldPage
 = 
pCur
->
pPage
;

3147 
pOldPage
->
idxShi·
 = 0;

3148 
	`ªÀa£Page
(
pOldPage
);

3149 
pCur
->
pPage
 = 
pNewPage
;

3150 
pCur
->
idx
 = 0;

3151 
pCur
->
öfo
.
nSize
 = 0;

3152 if–
pNewPage
->
nCñl
<1 ){

3153  
SQLITE_CORRUPT_BKPT
;

3155  
SQLITE_OK
;

3156 
	}
}

3167 
	$isRoŸPage
(
MemPage
 *
pPage
){

3168 
MemPage
 *
pP¨ít
 = 
pPage
->pParent;

3169 if–
pP¨ít
==0 )  1;

3170 if–
pP¨ít
->
pgno
>1 )  0;

3171 if–
	`gë2byã
(&
pP¨ít
->
aD©a
[pP¨ít->
hdrOff£t
+3])==0 )  1;

3173 
	}
}

3183 
	$moveToP¨ít
(
BtCurs‹
 *
pCur
){

3184 
MemPage
 *
pP¨ít
;

3185 
MemPage
 *
pPage
;

3186 
idxP¨ít
;

3188 
	`as£π
–
pCur
->
eSèã
==
CURSOR_VALID
 );

3189 
pPage
 = 
pCur
->pPage;

3190 
	`as£π
–
pPage
!=0 );

3191 
	`as£π
–!
	`isRoŸPage
(
pPage
) );

3192 
	`∑geI¡egrôy
(
pPage
);

3193 
pP¨ít
 = 
pPage
->pParent;

3194 
	`as£π
–
pP¨ít
!=0 );

3195 
	`∑geI¡egrôy
(
pP¨ít
);

3196 
idxP¨ít
 = 
pPage
->idxParent;

3197 
	`sqlôe3∑gî_ªf
(
pP¨ít
->
aD©a
);

3198 
	`ªÀa£Page
(
pPage
);

3199 
pCur
->
pPage
 = 
pP¨ít
;

3200 
pCur
->
öfo
.
nSize
 = 0;

3201 
	`as£π
–
pP¨ít
->
idxShi·
==0 );

3202 
pCur
->
idx
 = 
idxP¨ít
;

3203 
	}
}

3208 
	$moveToRoŸ
(
BtCurs‹
 *
pCur
){

3209 
MemPage
 *
pRoŸ
;

3210 
rc
 = 
SQLITE_OK
;

3211 
BtSh¨ed
 *
pBt
 = 
pCur
->
pBåì
->pBt;

3213 
	`ª°‹eOrCÀ¨Curs‹Posôi⁄
(
pCur
, 0);

3214 
pRoŸ
 = 
pCur
->
pPage
;

3215 if–
pRoŸ
 &&ÖRoŸ->
pgno
==
pCur
->
pgnoRoŸ
 ){

3216 
	`as£π
–
pRoŸ
->
isInô
 );

3219 
SQLITE_OK
!=(
rc
 = 
	`gëAndInôPage
(
pBt
, 
pCur
->
pgnoRoŸ
, &
pRoŸ
, 0))

3221 
pCur
->
eSèã
 = 
CURSOR_INVALID
;

3222  
rc
;

3224 
	`ªÀa£Page
(
pCur
->
pPage
);

3225 
	`∑geI¡egrôy
(
pRoŸ
);

3226 
pCur
->
pPage
 = 
pRoŸ
;

3228 
pCur
->
idx
 = 0;

3229 
pCur
->
öfo
.
nSize
 = 0;

3230 if–
pRoŸ
->
nCñl
==0 && !pRoŸ->
Àaf
 ){

3231 
Pgno
 
sub∑ge
;

3232 
	`as£π
–
pRoŸ
->
pgno
==1 );

3233 
sub∑ge
 = 
	`gë4byã
(&
pRoŸ
->
aD©a
[pRoŸ->
hdrOff£t
+8]);

3234 
	`as£π
–
sub∑ge
>0 );

3235 
pCur
->
eSèã
 = 
CURSOR_VALID
;

3236 
rc
 = 
	`moveToChûd
(
pCur
, 
sub∑ge
);

3238 
pCur
->
eSèã
 = (’Cur->
pPage
->
nCñl
>0)?
CURSOR_VALID
:
CURSOR_INVALID
);

3239  
rc
;

3240 
	}
}

3249 
	$moveToLe·mo°
(
BtCurs‹
 *
pCur
){

3250 
Pgno
 
pgno
;

3251 
rc
;

3252 
MemPage
 *
pPage
;

3254 
	`as£π
–
pCur
->
eSèã
==
CURSOR_VALID
 );

3255  !(
pPage
 = 
pCur
->pPage)->
Àaf
 ){

3256 
	`as£π
–
pCur
->
idx
>=0 &&ÖCur->idx<
pPage
->
nCñl
 );

3257 
pgno
 = 
	`gë4byã
(
	`födCñl
(
pPage
, 
pCur
->
idx
));

3258 
rc
 = 
	`moveToChûd
(
pCur
, 
pgno
);

3259 if–
rc
 ) Ñc;

3261  
SQLITE_OK
;

3262 
	}
}

3274 
	$moveToRightmo°
(
BtCurs‹
 *
pCur
){

3275 
Pgno
 
pgno
;

3276 
rc
;

3277 
MemPage
 *
pPage
;

3279 
	`as£π
–
pCur
->
eSèã
==
CURSOR_VALID
 );

3280  !(
pPage
 = 
pCur
->pPage)->
Àaf
 ){

3281 
pgno
 = 
	`gë4byã
(&
pPage
->
aD©a
[pPage->
hdrOff£t
+8]);

3282 
pCur
->
idx
 = 
pPage
->
nCñl
;

3283 
rc
 = 
	`moveToChûd
(
pCur
, 
pgno
);

3284 if–
rc
 ) Ñc;

3286 
pCur
->
idx
 = 
pPage
->
nCñl
 - 1;

3287 
pCur
->
öfo
.
nSize
 = 0;

3288  
SQLITE_OK
;

3289 
	}
}

3295 
	$sqlôe3BåìFú°
(
BtCurs‹
 *
pCur
, *
pRes
){

3296 
rc
;

3297 
rc
 = 
	`moveToRoŸ
(
pCur
);

3298 if–
rc
 ) Ñc;

3299 if–
pCur
->
eSèã
==
CURSOR_INVALID
 ){

3300 
	`as£π
–
pCur
->
pPage
->
nCñl
==0 );

3301 *
pRes
 = 1;

3302  
SQLITE_OK
;

3304 
	`as£π
–
pCur
->
pPage
->
nCñl
>0 );

3305 *
pRes
 = 0;

3306 
rc
 = 
	`moveToLe·mo°
(
pCur
);

3307  
rc
;

3308 
	}
}

3314 
	$sqlôe3BåìLa°
(
BtCurs‹
 *
pCur
, *
pRes
){

3315 
rc
;

3316 
rc
 = 
	`moveToRoŸ
(
pCur
);

3317 if–
rc
 ) Ñc;

3318 if–
CURSOR_INVALID
==
pCur
->
eSèã
 ){

3319 
	`as£π
–
pCur
->
pPage
->
nCñl
==0 );

3320 *
pRes
 = 1;

3321  
SQLITE_OK
;

3323 
	`as£π
–
pCur
->
eSèã
==
CURSOR_VALID
 );

3324 *
pRes
 = 0;

3325 
rc
 = 
	`moveToRightmo°
(
pCur
);

3326  
rc
;

3327 
	}
}

3356 
	$sqlôe3BåìMovëo
(
BtCurs‹
 *
pCur
, c⁄° *
pKey
, 
i64
 
nKey
, *
pRes
){

3357 
rc
;

3358 
åyRightmo°
;

3359 
rc
 = 
	`moveToRoŸ
(
pCur
);

3360 if–
rc
 ) Ñc;

3361 
	`as£π
–
pCur
->
pPage
 );

3362 
	`as£π
–
pCur
->
pPage
->
isInô
 );

3363 
åyRightmo°
 = 
pCur
->
pPage
->
ötKey
;

3364 if–
pCur
->
eSèã
==
CURSOR_INVALID
 ){

3365 *
pRes
 = -1;

3366 
	`as£π
–
pCur
->
pPage
->
nCñl
==0 );

3367  
SQLITE_OK
;

3370 
lwr
, 
u¥
;

3371 
Pgno
 
chldPg
;

3372 
MemPage
 *
pPage
 = 
pCur
->pPage;

3373 
c
 = -1;

3374 
lwr
 = 0;

3375 
u¥
 = 
pPage
->
nCñl
-1;

3376 if–!
pPage
->
ötKey
 && 
pKey
==0 ){

3377  
SQLITE_CORRUPT_BKPT
;

3379 
	`∑geI¡egrôy
(
pPage
);

3380  
lwr
<=
u¥
 ){

3381 *
pCñlKey
;

3382 
i64
 
nCñlKey
;

3383 
pCur
->
idx
 = (
lwr
+
u¥
)/2;

3384 
pCur
->
öfo
.
nSize
 = 0;

3385 if–
pPage
->
ötKey
 ){

3386 
u8
 *
pCñl
;

3387 if–
åyRightmo°
 ){

3388 
pCur
->
idx
 = 
u¥
;

3390 
pCñl
 = 
	`födCñl
(
pPage
, 
pCur
->
idx
Ë+ÖPage->
chûdPåSize
;

3391 if–
pPage
->
hasD©a
 ){

3392 
u32
 
dummy
;

3393 
pCñl
 +
	`gëV¨öt32
’Cñl, &
dummy
);

3395 
	`gëV¨öt
(
pCñl
, (
u64
 *)&
nCñlKey
);

3396 if–
nCñlKey
<
nKey
 ){

3397 
c
 = -1;

3398 }if–
nCñlKey
>
nKey
 ){

3399 
c
 = +1;

3400 
åyRightmo°
 = 0;

3402 
c
 = 0;

3405 
avaûabÀ
;

3406 
pCñlKey
 = (*)
	`„tchPaylﬂd
(
pCur
, &
avaûabÀ
, 0);

3407 
nCñlKey
 = 
pCur
->
öfo
.
nKey
;

3408 if–
avaûabÀ
>=
nCñlKey
 ){

3409 
c
 = 
pCur
->
	`xCom∑ª
’Cur->
pArg
, 
nCñlKey
, 
pCñlKey
, 
nKey
, 
pKey
);

3411 
pCñlKey
 = 
	`sqlôeMÆlocRaw
–
nCñlKey
 );

3412 if–
pCñlKey
==0 )  
SQLITE_NOMEM
;

3413 
rc
 = 
	`sqlôe3BåìKey
(
pCur
, 0, 
nCñlKey
, (*)
pCñlKey
);

3414 
c
 = 
pCur
->
	`xCom∑ª
’Cur->
pArg
, 
nCñlKey
, 
pCñlKey
, 
nKey
, 
pKey
);

3415 
	`sqlôeFªe
(
pCñlKey
);

3416 if–
rc
 ) Ñc;

3419 if–
c
==0 ){

3420 if–
pPage
->
ÀafD©a
 && !pPage->
Àaf
 ){

3421 
lwr
 = 
pCur
->
idx
;

3422 
u¥
 = 
lwr
 - 1;

3425 if–
pRes
 ) *pRes = 0;

3426  
SQLITE_OK
;

3429 if–
c
<0 ){

3430 
lwr
 = 
pCur
->
idx
+1;

3432 
u¥
 = 
pCur
->
idx
-1;

3435 
	`as£π
–
lwr
==
u¥
+1 );

3436 
	`as£π
–
pPage
->
isInô
 );

3437 if–
pPage
->
Àaf
 ){

3438 
chldPg
 = 0;

3439 }if–
lwr
>=
pPage
->
nCñl
 ){

3440 
chldPg
 = 
	`gë4byã
(&
pPage
->
aD©a
[pPage->
hdrOff£t
+8]);

3442 
chldPg
 = 
	`gë4byã
(
	`födCñl
(
pPage
, 
lwr
));

3444 if–
chldPg
==0 ){

3445 
	`as£π
–
pCur
->
idx
>=0 &&ÖCur->idx<pCur->
pPage
->
nCñl
 );

3446 if–
pRes
 ) *pRe†
c
;

3447  
SQLITE_OK
;

3449 
pCur
->
idx
 = 
lwr
;

3450 
pCur
->
öfo
.
nSize
 = 0;

3451 
rc
 = 
	`moveToChûd
(
pCur
, 
chldPg
);

3452 if–
rc
 ){

3453  
rc
;

3457 
	}
}

3466 
	$sqlôe3BåìEof
(
BtCurs‹
 *
pCur
){

3471  (
CURSOR_VALID
!=
pCur
->
eSèã
);

3472 
	}
}

3480 
	$sqlôe3BåìNext
(
BtCurs‹
 *
pCur
, *
pRes
){

3481 
rc
;

3482 
MemPage
 *
pPage
;

3484 #i‚de‡
SQLITE_OMIT_SHARED_CACHE


3485 
rc
 = 
	`ª°‹eOrCÀ¨Curs‹Posôi⁄
(
pCur
, 1);

3486 if–
rc
!=
SQLITE_OK
 ){

3487  
rc
;

3489 if–
pCur
->
skù
>0 ){

3490 
pCur
->
skù
 = 0;

3491 *
pRes
 = 0;

3492  
SQLITE_OK
;

3494 
pCur
->
skù
 = 0;

3497 
	`as£π
–
pRes
!=0 );

3498 
pPage
 = 
pCur
->pPage;

3499 if–
CURSOR_INVALID
==
pCur
->
eSèã
 ){

3500 *
pRes
 = 1;

3501  
SQLITE_OK
;

3503 
	`as£π
–
pPage
->
isInô
 );

3504 
	`as£π
–
pCur
->
idx
<
pPage
->
nCñl
 );

3506 
pCur
->
idx
++;

3507 
pCur
->
öfo
.
nSize
 = 0;

3508 if–
pCur
->
idx
>=
pPage
->
nCñl
 ){

3509 if–!
pPage
->
Àaf
 ){

3510 
rc
 = 
	`moveToChûd
(
pCur
, 
	`gë4byã
(&
pPage
->
aD©a
[pPage->
hdrOff£t
+8]));

3511 if–
rc
 ) Ñc;

3512 
rc
 = 
	`moveToLe·mo°
(
pCur
);

3513 *
pRes
 = 0;

3514  
rc
;

3517 if–
	`isRoŸPage
(
pPage
) ){

3518 *
pRes
 = 1;

3519 
pCur
->
eSèã
 = 
CURSOR_INVALID
;

3520  
SQLITE_OK
;

3522 
	`moveToP¨ít
(
pCur
);

3523 
pPage
 = 
pCur
->pPage;

3524 } 
pCur
->
idx
>=
pPage
->
nCñl
 );

3525 *
pRes
 = 0;

3526 if–
pPage
->
ÀafD©a
 ){

3527 
rc
 = 
	`sqlôe3BåìNext
(
pCur
, 
pRes
);

3529 
rc
 = 
SQLITE_OK
;

3531  
rc
;

3533 *
pRes
 = 0;

3534 if–
pPage
->
Àaf
 ){

3535  
SQLITE_OK
;

3537 
rc
 = 
	`moveToLe·mo°
(
pCur
);

3538  
rc
;

3539 
	}
}

3547 
	$sqlôe3BåìPªvious
(
BtCurs‹
 *
pCur
, *
pRes
){

3548 
rc
;

3549 
Pgno
 
pgno
;

3550 
MemPage
 *
pPage
;

3552 #i‚de‡
SQLITE_OMIT_SHARED_CACHE


3553 
rc
 = 
	`ª°‹eOrCÀ¨Curs‹Posôi⁄
(
pCur
, 1);

3554 if–
rc
!=
SQLITE_OK
 ){

3555  
rc
;

3557 if–
pCur
->
skù
<0 ){

3558 
pCur
->
skù
 = 0;

3559 *
pRes
 = 0;

3560  
SQLITE_OK
;

3562 
pCur
->
skù
 = 0;

3565 if–
CURSOR_INVALID
==
pCur
->
eSèã
 ){

3566 *
pRes
 = 1;

3567  
SQLITE_OK
;

3570 
pPage
 = 
pCur
->pPage;

3571 
	`as£π
–
pPage
->
isInô
 );

3572 
	`as£π
–
pCur
->
idx
>=0 );

3573 if–!
pPage
->
Àaf
 ){

3574 
pgno
 = 
	`gë4byã
–
	`födCñl
(
pPage
, 
pCur
->
idx
) );

3575 
rc
 = 
	`moveToChûd
(
pCur
, 
pgno
);

3576 if–
rc
 ) Ñc;

3577 
rc
 = 
	`moveToRightmo°
(
pCur
);

3579  
pCur
->
idx
==0 ){

3580 if–
	`isRoŸPage
(
pPage
) ){

3581 
pCur
->
eSèã
 = 
CURSOR_INVALID
;

3582 *
pRes
 = 1;

3583  
SQLITE_OK
;

3585 
	`moveToP¨ít
(
pCur
);

3586 
pPage
 = 
pCur
->pPage;

3588 
pCur
->
idx
--;

3589 
pCur
->
öfo
.
nSize
 = 0;

3590 if–
pPage
->
ÀafD©a
 && !pPage->
Àaf
 ){

3591 
rc
 = 
	`sqlôe3BåìPªvious
(
pCur
, 
pRes
);

3593 
rc
 = 
SQLITE_OK
;

3596 *
pRes
 = 0;

3597  
rc
;

3598 
	}
}

3621 
	$ÆloˇãPage
(

3622 
BtSh¨ed
 *
pBt
,

3623 
MemPage
 **
µPage
,

3624 
Pgno
 *
pPgno
,

3625 
Pgno
 
√¨by
,

3626 
u8
 
exa˘


3628 
MemPage
 *
pPage1
;

3629 
rc
;

3630 
n
;

3631 
k
;

3633 
pPage1
 = 
pBt
->pPage1;

3634 
n
 = 
	`gë4byã
(&
pPage1
->
aD©a
[36]);

3635 if–
n
>0 ){

3637 
MemPage
 *
pTrunk
 = 0;

3638 
Pgno
 
iTrunk
;

3639 
MemPage
 *
pPªvTrunk
 = 0;

3640 
u8
 
£¨chLi°
 = 0;

3646 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


3647 if–
exa˘
 ){

3648 
u8
 
eTy≥
;

3649 
	`as£π
–
√¨by
>0 );

3650 
	`as£π
–
pBt
->
autoVacuum
 );

3651 
rc
 = 
	`±rm≠Gë
(
pBt
, 
√¨by
, &
eTy≥
, 0);

3652 if–
rc
 ) Ñc;

3653 if–
eTy≥
==
PTRMAP_FREEPAGE
 ){

3654 
£¨chLi°
 = 1;

3656 *
pPgno
 = 
√¨by
;

3663 
rc
 = 
	`sqlôe3∑gî_wrôe
(
pPage1
->
aD©a
);

3664 if–
rc
 ) Ñc;

3665 
	`put4byã
(&
pPage1
->
aD©a
[36], 
n
-1);

3672 
pPªvTrunk
 = 
pTrunk
;

3673 if–
pPªvTrunk
 ){

3674 
iTrunk
 = 
	`gë4byã
(&
pPªvTrunk
->
aD©a
[0]);

3676 
iTrunk
 = 
	`gë4byã
(&
pPage1
->
aD©a
[32]);

3678 
rc
 = 
	`gëPage
(
pBt
, 
iTrunk
, &
pTrunk
);

3679 if–
rc
 ){

3680 
	`ªÀa£Page
(
pPªvTrunk
);

3681  
rc
;

3685 
rc
 = 
	`sqlôe3∑gî_wrôe
(
pTrunk
->
aD©a
);

3686 if–
rc
 ){

3687 
	`ªÀa£Page
(
pTrunk
);

3688 
	`ªÀa£Page
(
pPªvTrunk
);

3689  
rc
;

3692 
k
 = 
	`gë4byã
(&
pTrunk
->
aD©a
[4]);

3693 if–
k
==0 && !
£¨chLi°
 ){

3697 
	`as£π
–
pPªvTrunk
==0 );

3698 *
pPgno
 = 
iTrunk
;

3699 
	`mem˝y
(&
pPage1
->
aD©a
[32], &
pTrunk
->aData[0], 4);

3700 *
µPage
 = 
pTrunk
;

3701 
pTrunk
 = 0;

3702 
	`TRACE
(("ALLOCATE: %dÅrunk - %d fªê∑ge†À·\n", *
pPgno
, 
n
-1));

3703 }if–
k
>
pBt
->
ußbÀSize
/4 - 8 ){

3705  
SQLITE_CORRUPT_BKPT
;

3706 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


3707 }if–
£¨chLi°
 && 
√¨by
==
iTrunk
 ){

3711 
	`as£π
–*
pPgno
==
iTrunk
 );

3712 *
µPage
 = 
pTrunk
;

3713 
£¨chLi°
 = 0;

3714 if–
k
==0 ){

3715 if–!
pPªvTrunk
 ){

3716 
	`mem˝y
(&
pPage1
->
aD©a
[32], &
pTrunk
->aData[0], 4);

3718 
	`mem˝y
(&
pPªvTrunk
->
aD©a
[0], &
pTrunk
->aData[0], 4);

3725 
MemPage
 *
pNewTrunk
;

3726 
Pgno
 
iNewTrunk
 = 
	`gë4byã
(&
pTrunk
->
aD©a
[8]);

3727 
rc
 = 
	`gëPage
(
pBt
, 
iNewTrunk
, &
pNewTrunk
);

3728 if–
rc
!=
SQLITE_OK
 ){

3729 
	`ªÀa£Page
(
pTrunk
);

3730 
	`ªÀa£Page
(
pPªvTrunk
);

3731  
rc
;

3733 
rc
 = 
	`sqlôe3∑gî_wrôe
(
pNewTrunk
->
aD©a
);

3734 if–
rc
!=
SQLITE_OK
 ){

3735 
	`ªÀa£Page
(
pNewTrunk
);

3736 
	`ªÀa£Page
(
pTrunk
);

3737 
	`ªÀa£Page
(
pPªvTrunk
);

3738  
rc
;

3740 
	`mem˝y
(&
pNewTrunk
->
aD©a
[0], &
pTrunk
->aData[0], 4);

3741 
	`put4byã
(&
pNewTrunk
->
aD©a
[4], 
k
-1);

3742 
	`mem˝y
(&
pNewTrunk
->
aD©a
[8], &
pTrunk
->aD©a[12], (
k
-1)*4);

3743 if–!
pPªvTrunk
 ){

3744 
	`put4byã
(&
pPage1
->
aD©a
[32], 
iNewTrunk
);

3746 
	`put4byã
(&
pPªvTrunk
->
aD©a
[0], 
iNewTrunk
);

3748 
	`ªÀa£Page
(
pNewTrunk
);

3750 
pTrunk
 = 0;

3751 
	`TRACE
(("ALLOCATE: %dÅrunk - %d fªê∑ge†À·\n", *
pPgno
, 
n
-1));

3755 
˛o£°
;

3756 
Pgno
 
iPage
;

3757 *
aD©a
 = 
pTrunk
->aData;

3758 if–
√¨by
>0 ){

3759 
i
, 
di°
;

3760 
˛o£°
 = 0;

3761 
di°
 = 
	`gë4byã
(&
aD©a
[8]Ë- 
√¨by
;

3762 if–
di°
<0 ) dist = -dist;

3763 
i
=1; i<
k
; i++){

3764 
d2
 = 
	`gë4byã
(&
aD©a
[8+
i
*4]Ë- 
√¨by
;

3765 if–
d2
<0 ) d2 = -d2;

3766 if–
d2
<
di°
 ){

3767 
˛o£°
 = 
i
;

3768 
di°
 = 
d2
;

3772 
˛o£°
 = 0;

3775 
iPage
 = 
	`gë4byã
(&
aD©a
[8+
˛o£°
*4]);

3776 if–!
£¨chLi°
 || 
iPage
==
√¨by
 ){

3777 *
pPgno
 = 
iPage
;

3778 if–*
pPgno
>
	`sqlôe3∑gî_∑gecou¡
(
pBt
->
pPagî
) ){

3780  
SQLITE_CORRUPT_BKPT
;

3782 
	`TRACE
(("ALLOCATE: %d wasÜeaf %d of %d onÅrunk %d"

3784 *
pPgno
, 
˛o£°
+1, 
k
, 
pTrunk
->
pgno
, 
n
-1));

3785 if–
˛o£°
<
k
-1 ){

3786 
	`mem˝y
(&
aD©a
[8+
˛o£°
*4], &aD©a[4+
k
*4], 4);

3788 
	`put4byã
(&
aD©a
[4], 
k
-1);

3789 
rc
 = 
	`gëPage
(
pBt
, *
pPgno
, 
µPage
);

3790 if–
rc
==
SQLITE_OK
 ){

3791 
	`sqlôe3∑gî_d⁄t_rﬁlback
((*
µPage
)->
aD©a
);

3792 
rc
 = 
	`sqlôe3∑gî_wrôe
((*
µPage
)->
aD©a
);

3793 if–
rc
!=
SQLITE_OK
 ){

3794 
	`ªÀa£Page
(*
µPage
);

3797 
£¨chLi°
 = 0;

3800 
	`ªÀa£Page
(
pPªvTrunk
);

3801 } 
£¨chLi°
 );

3802 
	`ªÀa£Page
(
pTrunk
);

3806 *
pPgno
 = 
	`sqlôe3∑gî_∑gecou¡
(
pBt
->
pPagî
) + 1;

3808 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


3809 if–
pBt
->
autoVacuum
 && 
	`PTRMAP_ISPAGE
’Bt->
ußbÀSize
, *
pPgno
) ){

3814 
	`TRACE
(("ALLOCATE: %d fromÉnd o‡fûê’oöãr-m≠Öage)\n", *
pPgno
));

3815 
	`as£π
–*
pPgno
!=
	`PENDING_BYTE_PAGE
(
pBt
) );

3816 (*
pPgno
)++;

3820 
	`as£π
–*
pPgno
!=
	`PENDING_BYTE_PAGE
(
pBt
) );

3821 
rc
 = 
	`gëPage
(
pBt
, *
pPgno
, 
µPage
);

3822 if–
rc
 ) Ñc;

3823 
rc
 = 
	`sqlôe3∑gî_wrôe
((*
µPage
)->
aD©a
);

3824 if–
rc
!=
SQLITE_OK
 ){

3825 
	`ªÀa£Page
(*
µPage
);

3827 
	`TRACE
(("ALLOCATE: %d fromÉnd o‡fûe\n", *
pPgno
));

3830 
	`as£π
–*
pPgno
!=
	`PENDING_BYTE_PAGE
(
pBt
) );

3831  
rc
;

3832 
	}
}

3839 
	$‰ìPage
(
MemPage
 *
pPage
){

3840 
BtSh¨ed
 *
pBt
 = 
pPage
->pBt;

3841 
MemPage
 *
pPage1
 = 
pBt
->pPage1;

3842 
rc
, 
n
, 
k
;

3845 
	`as£π
–
pPage
->
pgno
>1 );

3846 
pPage
->
isInô
 = 0;

3847 
	`ªÀa£Page
(
pPage
->
pP¨ít
);

3848 
pPage
->
pP¨ít
 = 0;

3851 
rc
 = 
	`sqlôe3∑gî_wrôe
(
pPage1
->
aD©a
);

3852 if–
rc
 ) Ñc;

3853 
n
 = 
	`gë4byã
(&
pPage1
->
aD©a
[36]);

3854 
	`put4byã
(&
pPage1
->
aD©a
[36], 
n
+1);

3856 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


3860 if–
pBt
->
autoVacuum
 ){

3861 
rc
 = 
	`±rm≠Put
(
pBt
, 
pPage
->
pgno
, 
PTRMAP_FREEPAGE
, 0);

3862 if–
rc
 ) Ñc;

3866 if–
n
==0 ){

3868 
rc
 = 
	`sqlôe3∑gî_wrôe
(
pPage
->
aD©a
);

3869 if–
rc
 ) Ñc;

3870 
	`mem£t
(
pPage
->
aD©a
, 0, 8);

3871 
	`put4byã
(&
pPage1
->
aD©a
[32], 
pPage
->
pgno
);

3872 
	`TRACE
(("FREE-PAGE: %d fú°\n", 
pPage
->
pgno
));

3876 
MemPage
 *
pTrunk
;

3877 
rc
 = 
	`gëPage
(
pBt
, 
	`gë4byã
(&
pPage1
->
aD©a
[32]), &
pTrunk
);

3878 if–
rc
 ) Ñc;

3879 
k
 = 
	`gë4byã
(&
pTrunk
->
aD©a
[4]);

3880 if–
k
>=
pBt
->
ußbÀSize
/4 - 8 ){

3883 
rc
 = 
	`sqlôe3∑gî_wrôe
(
pPage
->
aD©a
);

3884 if–
rc
 ) Ñc;

3885 
	`put4byã
(
pPage
->
aD©a
, 
pTrunk
->
pgno
);

3886 
	`put4byã
(&
pPage
->
aD©a
[4], 0);

3887 
	`put4byã
(&
pPage1
->
aD©a
[32], 
pPage
->
pgno
);

3888 
	`TRACE
(("FREE-PAGE: %dÇewÅrunkÖageÑeplacing %d\n",

3889 
pPage
->
pgno
, 
pTrunk
->pgno));

3892 
rc
 = 
	`sqlôe3∑gî_wrôe
(
pTrunk
->
aD©a
);

3893 if–
rc
 ) Ñc;

3894 
	`put4byã
(&
pTrunk
->
aD©a
[4], 
k
+1);

3895 
	`put4byã
(&
pTrunk
->
aD©a
[8+
k
*4], 
pPage
->
pgno
);

3896 
	`sqlôe3∑gî_d⁄t_wrôe
(
pBt
->
pPagî
, 
pPage
->
pgno
);

3897 
	`TRACE
(("FREE-PAGE: %dÜó‡⁄ÅrunkÖagê%d\n",
pPage
->
pgno
,
pTrunk
->pgno));

3899 
	`ªÀa£Page
(
pTrunk
);

3901  
rc
;

3902 
	}
}

3907 
	$˛órCñl
(
MemPage
 *
pPage
, *
pCñl
){

3908 
BtSh¨ed
 *
pBt
 = 
pPage
->pBt;

3909 
CñlInfo
 
öfo
;

3910 
Pgno
 
ovÊPgno
;

3911 
rc
;

3913 
	`∑r£CñlPå
(
pPage
, 
pCñl
, &
öfo
);

3914 if–
öfo
.
iOvîÊow
==0 ){

3915  
SQLITE_OK
;

3917 
ovÊPgno
 = 
	`gë4byã
(&
pCñl
[
öfo
.
iOvîÊow
]);

3918  
ovÊPgno
!=0 ){

3919 
MemPage
 *
pOvÊ
;

3920 if–
ovÊPgno
>
	`sqlôe3∑gî_∑gecou¡
(
pBt
->
pPagî
) ){

3921  
SQLITE_CORRUPT_BKPT
;

3923 
rc
 = 
	`gëPage
(
pBt
, 
ovÊPgno
, &
pOvÊ
);

3924 if–
rc
 ) Ñc;

3925 
ovÊPgno
 = 
	`gë4byã
(
pOvÊ
->
aD©a
);

3926 
rc
 = 
	`‰ìPage
(
pOvÊ
);

3927 
	`sqlôe3∑gî_uƒef
(
pOvÊ
->
aD©a
);

3928 if–
rc
 ) Ñc;

3930  
SQLITE_OK
;

3931 
	}
}

3945 
	$fûlInCñl
(

3946 
MemPage
 *
pPage
,

3947 *
pCñl
,

3948 c⁄° *
pKey
, 
i64
 
nKey
,

3949 c⁄° *
pD©a
,
nD©a
,

3950 *
≤Size


3952 
nPaylﬂd
;

3953 c⁄° 
u8
 *
pSrc
;

3954 
nSrc
, 
n
, 
rc
;

3955 
•a˚Le·
;

3956 
MemPage
 *
pOvÊ
 = 0;

3957 
MemPage
 *
pToRñó£
 = 0;

3958 *
pPri‹
;

3959 *
pPaylﬂd
;

3960 
BtSh¨ed
 *
pBt
 = 
pPage
->pBt;

3961 
Pgno
 
pgnoOvÊ
 = 0;

3962 
nHódî
;

3963 
CñlInfo
 
öfo
;

3966 
nHódî
 = 0;

3967 if–!
pPage
->
Àaf
 ){

3968 
nHódî
 += 4;

3970 if–
pPage
->
hasD©a
 ){

3971 
nHódî
 +
	`putV¨öt
(&
pCñl
[nHódî], 
nD©a
);

3973 
nD©a
 = 0;

3975 
nHódî
 +
	`putV¨öt
(&
pCñl
[nHódî], *(
u64
*)&
nKey
);

3976 
	`∑r£CñlPå
(
pPage
, 
pCñl
, &
öfo
);

3977 
	`as£π
–
öfo
.
nHódî
==nHeader );

3978 
	`as£π
–
öfo
.
nKey
==nKey );

3979 
	`as£π
–
öfo
.
nD©a
==nData );

3982 
nPaylﬂd
 = 
nD©a
;

3983 if–
pPage
->
ötKey
 ){

3984 
pSrc
 = 
pD©a
;

3985 
nSrc
 = 
nD©a
;

3986 
nD©a
 = 0;

3988 
nPaylﬂd
 +
nKey
;

3989 
pSrc
 = 
pKey
;

3990 
nSrc
 = 
nKey
;

3992 *
≤Size
 = 
öfo
.
nSize
;

3993 
•a˚Le·
 = 
öfo
.
nLoˇl
;

3994 
pPaylﬂd
 = &
pCñl
[
nHódî
];

3995 
pPri‹
 = &
pCñl
[
öfo
.
iOvîÊow
];

3997  
nPaylﬂd
>0 ){

3998 if–
•a˚Le·
==0 ){

3999 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


4000 
Pgno
 
pgnoPåm≠
 = 
pgnoOvÊ
;

4002 
rc
 = 
	`ÆloˇãPage
(
pBt
, &
pOvÊ
, &
pgnoOvÊ
,ÖgnoOvfl, 0);

4003 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


4009 if–
pBt
->
autoVacuum
 && 
pgnoPåm≠
!=0 && 
rc
==
SQLITE_OK
 ){

4010 
rc
 = 
	`±rm≠Put
(
pBt
, 
pgnoOvÊ
, 
PTRMAP_OVERFLOW2
, 
pgnoPåm≠
);

4013 if–
rc
 ){

4014 
	`ªÀa£Page
(
pToRñó£
);

4016  
rc
;

4018 
	`put4byã
(
pPri‹
, 
pgnoOvÊ
);

4019 
	`ªÀa£Page
(
pToRñó£
);

4020 
pToRñó£
 = 
pOvÊ
;

4021 
pPri‹
 = 
pOvÊ
->
aD©a
;

4022 
	`put4byã
(
pPri‹
, 0);

4023 
pPaylﬂd
 = &
pOvÊ
->
aD©a
[4];

4024 
•a˚Le·
 = 
pBt
->
ußbÀSize
 - 4;

4026 
n
 = 
nPaylﬂd
;

4027 if–
n
>
•a˚Le·
 )Ç = spaceLeft;

4028 if–
n
>
nSrc
 )Ç =ÇSrc;

4029 
	`mem˝y
(
pPaylﬂd
, 
pSrc
, 
n
);

4030 
nPaylﬂd
 -
n
;

4031 
pPaylﬂd
 +
n
;

4032 
pSrc
 +
n
;

4033 
nSrc
 -
n
;

4034 
•a˚Le·
 -
n
;

4035 if–
nSrc
==0 ){

4036 
nSrc
 = 
nD©a
;

4037 
pSrc
 = 
pD©a
;

4040 
	`ªÀa£Page
(
pToRñó£
);

4041  
SQLITE_OK
;

4042 
	}
}

4049 
	$ª∑ª¡Page
(
BtSh¨ed
 *
pBt
, 
Pgno
 
pgno
, 
MemPage
 *
pNewP¨ít
, 
idx
){

4050 
MemPage
 *
pThis
;

4051 *
aD©a
;

4053 if–
pgno
==0 )  
SQLITE_OK
;

4054 
	`as£π
–
pBt
->
pPagî
!=0 );

4055 
aD©a
 = 
	`sqlôe3∑gî_lookup
(
pBt
->
pPagî
, 
pgno
);

4056 if–
aD©a
 ){

4057 
pThis
 = (
MemPage
*)&
aD©a
[
pBt
->
∑geSize
];

4058 
	`as£π
–
pThis
->
aD©a
==aData );

4059 if–
pThis
->
isInô
 ){

4060 if–
pThis
->
pP¨ít
!=
pNewP¨ít
 ){

4061 if–
pThis
->
pP¨ít
 ) 
	`sqlôe3∑gî_uƒef
’This->pP¨ít->
aD©a
);

4062 
pThis
->
pP¨ít
 = 
pNewP¨ít
;

4063 if–
pNewP¨ít
 ) 
	`sqlôe3∑gî_ªf
’NewP¨ít->
aD©a
);

4065 
pThis
->
idxP¨ít
 = 
idx
;

4067 
	`sqlôe3∑gî_uƒef
(
aD©a
);

4070 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


4071 if–
pBt
->
autoVacuum
 ){

4072  
	`±rm≠Put
(
pBt
, 
pgno
, 
PTRMAP_BTREE
, 
pNewP¨ít
->pgno);

4075  
SQLITE_OK
;

4076 
	}
}

4090 
	$ª∑ª¡ChûdPages
(
MemPage
 *
pPage
){

4091 
i
;

4092 
BtSh¨ed
 *
pBt
 = 
pPage
->pBt;

4093 
rc
 = 
SQLITE_OK
;

4095 if–
pPage
->
Àaf
 )  
SQLITE_OK
;

4097 
i
=0; i<
pPage
->
nCñl
; i++){

4098 
u8
 *
pCñl
 = 
	`födCñl
(
pPage
, 
i
);

4099 if–!
pPage
->
Àaf
 ){

4100 
rc
 = 
	`ª∑ª¡Page
(
pBt
, 
	`gë4byã
(
pCñl
), 
pPage
, 
i
);

4101 if–
rc
!=
SQLITE_OK
 ) Ñc;

4104 if–!
pPage
->
Àaf
 ){

4105 
rc
 = 
	`ª∑ª¡Page
(
pBt
, 
	`gë4byã
(&
pPage
->
aD©a
[pPage->
hdrOff£t
+8]),

4106 
pPage
, 
i
);

4107 
pPage
->
idxShi·
 = 0;

4109  
rc
;

4110 
	}
}

4120 
	$dr›Cñl
(
MemPage
 *
pPage
, 
idx
, 
sz
){

4121 
i
;

4122 
pc
;

4123 
u8
 *
d©a
;

4124 
u8
 *
±r
;

4126 
	`as£π
–
idx
>=0 && idx<
pPage
->
nCñl
 );

4127 
	`as£π
–
sz
==
	`˚ŒSize
(
pPage
, 
idx
) );

4128 
	`as£π
–
	`sqlôe3∑gî_iswrôóbÀ
(
pPage
->
aD©a
) );

4129 
d©a
 = 
pPage
->
aD©a
;

4130 
±r
 = &
d©a
[
pPage
->
˚ŒOff£t
 + 2*
idx
];

4131 
pc
 = 
	`gë2byã
(
±r
);

4132 
	`as£π
–
pc
>10 &&Öc+
sz
<=
pPage
->
pBt
->
ußbÀSize
 );

4133 
	`‰ìS∑˚
(
pPage
, 
pc
, 
sz
);

4134 
i
=
idx
+1; i<
pPage
->
nCñl
; i++, 
±r
+=2){

4135 
±r
[0] =Ötr[2];

4136 
±r
[1] =Ötr[3];

4138 
pPage
->
nCñl
--;

4139 
	`put2byã
(&
d©a
[
pPage
->
hdrOff£t
+3],ÖPage->
nCñl
);

4140 
pPage
->
nFªe
 += 2;

4141 
pPage
->
idxShi·
 = 1;

4142 
	}
}

4161 
	$ö£πCñl
(

4162 
MemPage
 *
pPage
,

4163 
i
,

4164 
u8
 *
pCñl
,

4165 
sz
,

4166 
u8
 *
pTemp
,

4167 
u8
 
nSkù


4169 
idx
;

4170 
j
;

4171 
t›
;

4172 
íd
;

4173 
ös
;

4174 
hdr
;

4175 
˚ŒOff£t
;

4176 
u8
 *
d©a
;

4177 
u8
 *
±r
;

4179 
	`as£π
–
i
>=0 && i<=
pPage
->
nCñl
+pPage->
nOvîÊow
 );

4180 
	`as£π
–
sz
==
	`˚ŒSizePå
(
pPage
, 
pCñl
) );

4181 
	`as£π
–
	`sqlôe3∑gî_iswrôóbÀ
(
pPage
->
aD©a
) );

4182 if–
pPage
->
nOvîÊow
 || 
sz
+2>pPage->
nFªe
 ){

4183 if–
pTemp
 ){

4184 
	`mem˝y
(
pTemp
+
nSkù
, 
pCñl
+nSkù, 
sz
-nSkip);

4185 
pCñl
 = 
pTemp
;

4187 
j
 = 
pPage
->
nOvîÊow
++;

4188 
	`as£π
–
j
<(
pPage
->
aOvÊ
)/(pPage->aOvfl[0]) );

4189 
pPage
->
aOvÊ
[
j
].
pCñl
 =ÖCell;

4190 
pPage
->
aOvÊ
[
j
].
idx
 = 
i
;

4191 
pPage
->
nFªe
 = 0;

4193 
d©a
 = 
pPage
->
aD©a
;

4194 
hdr
 = 
pPage
->
hdrOff£t
;

4195 
t›
 = 
	`gë2byã
(&
d©a
[
hdr
+5]);

4196 
˚ŒOff£t
 = 
pPage
->cellOffset;

4197 
íd
 = 
˚ŒOff£t
 + 2*
pPage
->
nCñl
 + 2;

4198 
ös
 = 
˚ŒOff£t
 + 2*
i
;

4199 if–
íd
 > 
t›
 - 
sz
 ){

4200 
rc
 = 
	`de‰agmítPage
(
pPage
);

4201 if–
rc
!=
SQLITE_OK
 ) Ñc;

4202 
t›
 = 
	`gë2byã
(&
d©a
[
hdr
+5]);

4203 
	`as£π
–
íd
 + 
sz
 <
t›
 );

4205 
idx
 = 
	`ÆloˇãS∑˚
(
pPage
, 
sz
);

4206 
	`as£π
–
idx
>0 );

4207 
	`as£π
–
íd
 <
	`gë2byã
(&
d©a
[
hdr
+5]) );

4208 
pPage
->
nCñl
++;

4209 
pPage
->
nFªe
 -= 2;

4210 
	`mem˝y
(&
d©a
[
idx
+
nSkù
], 
pCñl
+nSkù, 
sz
-nSkip);

4211 
j
=
íd
-2, 
±r
=&
d©a
[j]; j>
ös
; j-=2,Ötr-=2){

4212 
±r
[0] =Ötr[-2];

4213 
±r
[1] =Ötr[-1];

4215 
	`put2byã
(&
d©a
[
ös
], 
idx
);

4216 
	`put2byã
(&
d©a
[
hdr
+3], 
pPage
->
nCñl
);

4217 
pPage
->
idxShi·
 = 1;

4218 
	`∑geI¡egrôy
(
pPage
);

4219 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


4220 if–
pPage
->
pBt
->
autoVacuum
 ){

4224 
CñlInfo
 
öfo
;

4225 
	`∑r£CñlPå
(
pPage
, 
pCñl
, &
öfo
);

4226 if–(
öfo
.
nD©a
+(
pPage
->
ötKey
?0:öfo.
nKey
))>öfo.
nLoˇl
 ){

4227 
Pgno
 
pgnoOvÊ
 = 
	`gë4byã
(&
pCñl
[
öfo
.
iOvîÊow
]);

4228 
rc
 = 
	`±rm≠Put
(
pPage
->
pBt
, 
pgnoOvÊ
, 
PTRMAP_OVERFLOW1
,ÖPage->
pgno
);

4229 if–
rc
!=
SQLITE_OK
 ) Ñc;

4235  
SQLITE_OK
;

4236 
	}
}

4242 
	$as£mbÀPage
(

4243 
MemPage
 *
pPage
,

4244 
nCñl
,

4245 
u8
 **
≠Cñl
,

4246 *
aSize


4248 
i
;

4249 
tŸÆSize
;

4250 
hdr
;

4251 
˚Œ±r
;

4252 
˚Œbody
;

4253 
u8
 *
d©a
;

4255 
	`as£π
–
pPage
->
nOvîÊow
==0 );

4256 
tŸÆSize
 = 0;

4257 
i
=0; i<
nCñl
; i++){

4258 
tŸÆSize
 +
aSize
[
i
];

4260 
	`as£π
–
tŸÆSize
+2*
nCñl
<=
pPage
->
nFªe
 );

4261 
	`as£π
–
pPage
->
nCñl
==0 );

4262 
˚Œ±r
 = 
pPage
->
˚ŒOff£t
;

4263 
d©a
 = 
pPage
->
aD©a
;

4264 
hdr
 = 
pPage
->
hdrOff£t
;

4265 
	`put2byã
(&
d©a
[
hdr
+3], 
nCñl
);

4266 if–
nCñl
 ){

4267 
˚Œbody
 = 
	`ÆloˇãS∑˚
(
pPage
, 
tŸÆSize
);

4268 
	`as£π
–
˚Œbody
>0 );

4269 
	`as£π
–
pPage
->
nFªe
 >2*
nCñl
 );

4270 
pPage
->
nFªe
 -2*
nCñl
;

4271 
i
=0; i<
nCñl
; i++){

4272 
	`put2byã
(&
d©a
[
˚Œ±r
], 
˚Œbody
);

4273 
	`mem˝y
(&
d©a
[
˚Œbody
], 
≠Cñl
[
i
], 
aSize
[i]);

4274 
˚Œ±r
 += 2;

4275 
˚Œbody
 +
aSize
[
i
];

4277 
	`as£π
–
˚Œbody
==
pPage
->
pBt
->
ußbÀSize
 );

4279 
pPage
->
nCñl
 =ÇCell;

4280 
	}
}

4294 
	#NN
 1

	)

4295 
	#NB
 (
NN
*2+1Ë

	)

4298 
bÆ™˚
(
MemPage
*, );

4300 #i‚de‡
SQLITE_OMIT_QUICKBALANCE


4318 
	$bÆ™˚_quick
(
MemPage
 *
pPage
, MemPagê*
pP¨ít
){

4319 
rc
;

4320 
MemPage
 *
pNew
;

4321 
Pgno
 
pgnoNew
;

4322 
u8
 *
pCñl
;

4323 
szCñl
;

4324 
CñlInfo
 
öfo
;

4325 
BtSh¨ed
 *
pBt
 = 
pPage
->pBt;

4326 
∑ª¡Idx
 = 
pP¨ít
->
nCñl
;

4327 
∑ª¡Size
;

4328 
u8
 
∑ª¡Cñl
[64];

4333 
rc
 = 
	`ÆloˇãPage
(
pBt
, &
pNew
, &
pgnoNew
, 0, 0);

4334 if–
rc
!=
SQLITE_OK
 ){

4335  
rc
;

4337 
pCñl
 = 
pPage
->
aOvÊ
[0].pCell;

4338 
szCñl
 = 
	`˚ŒSizePå
(
pPage
, 
pCñl
);

4339 
	`zîoPage
(
pNew
, 
pPage
->
aD©a
[0]);

4340 
	`as£mbÀPage
(
pNew
, 1, &
pCñl
, &
szCñl
);

4341 
pPage
->
nOvîÊow
 = 0;

4344 
pNew
->
pP¨ít
 =ÖParent;

4345 
	`sqlôe3∑gî_ªf
(
pP¨ít
->
aD©a
);

4351 
	`as£π
–
pPage
->
nCñl
>0 );

4352 
	`∑r£CñlPå
(
pPage
, 
	`födCñl
’Page,ÖPage->
nCñl
-1), &
öfo
);

4353 
rc
 = 
	`fûlInCñl
(
pP¨ít
, 
∑ª¡Cñl
, 0, 
öfo
.
nKey
, 0, 0, &
∑ª¡Size
);

4354 if–
rc
!=
SQLITE_OK
 ){

4355  
rc
;

4357 
	`as£π
–
∑ª¡Size
<64 );

4358 
rc
 = 
	`ö£πCñl
(
pP¨ít
, 
∑ª¡Idx
, 
∑ª¡Cñl
, 
∑ª¡Size
, 0, 4);

4359 if–
rc
!=
SQLITE_OK
 ){

4360  
rc
;

4362 
	`put4byã
(
	`födOvîÊowCñl
(
pP¨ít
,
∑ª¡Idx
), 
pPage
->
pgno
);

4363 
	`put4byã
(&
pP¨ít
->
aD©a
[pP¨ít->
hdrOff£t
+8], 
pgnoNew
);

4365 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


4370 if–
pBt
->
autoVacuum
 ){

4371 
rc
 = 
	`±rm≠Put
(
pBt
, 
pgnoNew
, 
PTRMAP_BTREE
, 
pP¨ít
->
pgno
);

4372 if–
rc
!=
SQLITE_OK
 ){

4373  
rc
;

4375 
rc
 = 
	`±rm≠PutOvÊ
(
pNew
, 0);

4376 if–
rc
!=
SQLITE_OK
 ){

4377  
rc
;

4385 
	`ªÀa£Page
(
pNew
);

4386  
	`bÆ™˚
(
pP¨ít
, 0);

4387 
	}
}

4397 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


4398 
	#ISAUTOVACUUM
 (
pBt
->
autoVacuum
)

	)

4400 
	#ISAUTOVACUUM
 0

	)

4432 
	$bÆ™˚_n⁄roŸ
(
MemPage
 *
pPage
){

4433 
MemPage
 *
pP¨ít
;

4434 
BtSh¨ed
 *
pBt
;

4435 
nCñl
 = 0;

4436 
nMaxCñls
 = 0;

4437 
nOld
;

4438 
nNew
;

4439 
nDiv
;

4440 
i
, 
j
, 
k
;

4441 
idx
;

4442 
nxDiv
;

4443 
rc
;

4444 
ÀafC‹ª˘i⁄
;

4445 
ÀafD©a
;

4446 
ußbÀS∑˚
;

4447 
∑geFœgs
;

4448 
subtŸÆ
;

4449 
iS∑˚
 = 0;

4450 
MemPage
 *
≠Old
[
NB
];

4451 
Pgno
 
pgnoOld
[
NB
];

4452 
MemPage
 *
≠C›y
[
NB
];

4453 
MemPage
 *
≠New
[
NB
+2];

4454 
Pgno
 
pgnoNew
[
NB
+2];

4455 
u8
 *
≠Div
[
NB
];

4456 
˙tNew
[
NB
+2];

4457 
szNew
[
NB
+2];

4458 
u8
 **
≠Cñl
 = 0;

4459 *
szCñl
;

4460 
u8
 *
aC›y
[
NB
];

4461 
u8
 *
aS∑˚
;

4462 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


4463 
u8
 *
aFrom
 = 0;

4469 
	`as£π
–
pPage
->
isInô
 );

4470 
	`as£π
–
	`sqlôe3∑gî_iswrôóbÀ
(
pPage
->
aD©a
) );

4471 
pBt
 = 
pPage
->pBt;

4472 
pP¨ít
 = 
pPage
->pParent;

4473 
	`as£π
–
pP¨ít
 );

4474 if–
SQLITE_OK
!=(
rc
 = 
	`sqlôe3∑gî_wrôe
(
pP¨ít
->
aD©a
)) ){

4475  
rc
;

4477 
	`TRACE
(("BALANCE: begöÖagê%d chûd o‡%d\n", 
pPage
->
pgno
, 
pP¨ít
->pgno));

4479 #i‚de‡
SQLITE_OMIT_QUICKBALANCE


4488 if–
pPage
->
Àaf
 &&

4489 
pPage
->
ötKey
 &&

4490 
pPage
->
ÀafD©a
 &&

4491 
pPage
->
nOvîÊow
==1 &&

4492 
pPage
->
aOvÊ
[0].
idx
=ıPage->
nCñl
 &&

4493 
pPage
->
pP¨ít
->
pgno
!=1 &&

4494 
	`gë4byã
(&
pP¨ít
->
aD©a
[pP¨ít->
hdrOff£t
+8])==
pPage
->
pgno


4500  
	`bÆ™˚_quick
(
pPage
, 
pP¨ít
);

4509 if–
pP¨ít
->
idxShi·
 ){

4510 
Pgno
 
pgno
;

4511 
pgno
 = 
pPage
->pgno;

4512 
	`as£π
–
pgno
==
	`sqlôe3∑gî_∑gíumbî
(
pPage
->
aD©a
) );

4513 
idx
=0; idx<
pP¨ít
->
nCñl
; idx++){

4514 if–
	`gë4byã
(
	`födCñl
(
pP¨ít
, 
idx
))==
pgno
 ){

4518 
	`as£π
–
idx
<
pP¨ít
->
nCñl


4519 || 
	`gë4byã
(&
pP¨ít
->
aD©a
[pP¨ít->
hdrOff£t
+8])==
pgno
 );

4521 
idx
 = 
pPage
->
idxP¨ít
;

4528 
nOld
 = 
nNew
 = 0;

4529 
	`sqlôe3∑gî_ªf
(
pP¨ít
->
aD©a
);

4538 
nxDiv
 = 
idx
 - 
NN
;

4539 if–
nxDiv
 + 
NB
 > 
pP¨ít
->
nCñl
 ){

4540 
nxDiv
 = 
pP¨ít
->
nCñl
 - 
NB
 + 1;

4542 if–
nxDiv
<0 ){

4543 
nxDiv
 = 0;

4545 
nDiv
 = 0;

4546 
i
=0, 
k
=
nxDiv
; i<
NB
; i++, k++){

4547 if–
k
<
pP¨ít
->
nCñl
 ){

4548 
≠Div
[
i
] = 
	`födCñl
(
pP¨ít
, 
k
);

4549 
nDiv
++;

4550 
	`as£π
–!
pP¨ít
->
Àaf
 );

4551 
pgnoOld
[
i
] = 
	`gë4byã
(
≠Div
[i]);

4552 }if–
k
==
pP¨ít
->
nCñl
 ){

4553 
pgnoOld
[
i
] = 
	`gë4byã
(&
pP¨ít
->
aD©a
[pP¨ít->
hdrOff£t
+8]);

4557 
rc
 = 
	`gëAndInôPage
(
pBt
, 
pgnoOld
[
i
], &
≠Old
[i], 
pP¨ít
);

4558 if–
rc
 ) 
bÆ™˚_˛ónup
;

4559 
≠Old
[
i
]->
idxP¨ít
 = 
k
;

4560 
≠C›y
[
i
] = 0;

4561 
	`as£π
–
i
==
nOld
 );

4562 
nOld
++;

4563 
nMaxCñls
 +1+
≠Old
[
i
]->
nCñl
+≠Old[i]->
nOvîÊow
;

4568 
nMaxCñls
 = (nMaxCells + 1)&~1;

4573 
≠Cñl
 = 
	`sqlôeMÆlocRaw
(

4574 
nMaxCñls
*(
u8
*)

4575 + 
nMaxCñls
*()

4576 + 
	`ROUND8
((
MemPage
))*
NB


4577 + 
pBt
->
∑geSize
*(5+
NB
)

4578 + (
ISAUTOVACUUM
 ? 
nMaxCñls
 : 0)

4580 if–
≠Cñl
==0 ){

4581 
rc
 = 
SQLITE_NOMEM
;

4582 
bÆ™˚_˛ónup
;

4584 
szCñl
 = (*)&
≠Cñl
[
nMaxCñls
];

4585 
aC›y
[0] = (
u8
*)&
szCñl
[
nMaxCñls
];

4586 
	`as£π
–((
aC›y
[0] - (
u8
*)
≠Cñl
) & 7)==0 );

4587 
i
=1; i<
NB
; i++){

4588 
aC›y
[
i
] = &aC›y[i-1][
pBt
->
∑geSize
+
	`ROUND8
((
MemPage
))];

4589 
	`as£π
–((
aC›y
[
i
] - (
u8
*)
≠Cñl
) & 7)==0 );

4591 
aS∑˚
 = &
aC›y
[
NB
-1][
pBt
->
∑geSize
+
	`ROUND8
((
MemPage
))];

4592 
	`as£π
–((
aS∑˚
 - (
u8
*)
≠Cñl
) & 7)==0 );

4593 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


4594 if–
pBt
->
autoVacuum
 ){

4595 
aFrom
 = &
aS∑˚
[5*
pBt
->
∑geSize
];

4605 
i
=0; i<
nOld
; i++){

4606 
MemPage
 *
p
 = 
≠C›y
[
i
] = (MemPage*)&
aC›y
[i][
pBt
->
∑geSize
];

4607 
p
->
aD©a
 = &((
u8
*Ì)[-
pBt
->
∑geSize
];

4608 
	`mem˝y
(
p
->
aD©a
, 
≠Old
[
i
]->aD©a, 
pBt
->
∑geSize
 + (
MemPage
));

4611 
p
->
aD©a
 = &((
u8
*Ì)[-
pBt
->
∑geSize
];

4630 
nCñl
 = 0;

4631 
ÀafC‹ª˘i⁄
 = 
pPage
->
Àaf
*4;

4632 
ÀafD©a
 = 
pPage
->ÀafD©®&&ÖPage->
Àaf
;

4633 
i
=0; i<
nOld
; i++){

4634 
MemPage
 *
pOld
 = 
≠C›y
[
i
];

4635 
limô
 = 
pOld
->
nCñl
+pOld->
nOvîÊow
;

4636 
j
=0; j<
limô
; j++){

4637 
	`as£π
–
nCñl
<
nMaxCñls
 );

4638 
≠Cñl
[
nCñl
] = 
	`födOvîÊowCñl
(
pOld
, 
j
);

4639 
szCñl
[
nCñl
] = 
	`˚ŒSizePå
(
pOld
, 
≠Cñl
[nCell]);

4640 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


4641 if–
pBt
->
autoVacuum
 ){

4642 
a
;

4643 
aFrom
[
nCñl
] = 
i
;

4644 
a
=0;á<
pOld
->
nOvîÊow
;á++){

4645 if–
pOld
->
aOvÊ
[
a
].
pCñl
==
≠Cñl
[
nCñl
] ){

4646 
aFrom
[
nCñl
] = 0xFF;

4652 
nCñl
++;

4654 if–
i
<
nOld
-1 ){

4655 
sz
 = 
	`˚ŒSizePå
(
pP¨ít
, 
≠Div
[
i
]);

4656 if–
ÀafD©a
 ){

4662 
	`dr›Cñl
(
pP¨ít
, 
nxDiv
, 
sz
);

4664 
u8
 *
pTemp
;

4665 
	`as£π
–
nCñl
<
nMaxCñls
 );

4666 
szCñl
[
nCñl
] = 
sz
;

4667 
pTemp
 = &
aS∑˚
[
iS∑˚
];

4668 
iS∑˚
 +
sz
;

4669 
	`as£π
–
iS∑˚
<=
pBt
->
∑geSize
*5 );

4670 
	`mem˝y
(
pTemp
, 
≠Div
[
i
], 
sz
);

4671 
≠Cñl
[
nCñl
] = 
pTemp
+
ÀafC‹ª˘i⁄
;

4672 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


4673 if–
pBt
->
autoVacuum
 ){

4674 
aFrom
[
nCñl
] = 0xFF;

4677 
	`dr›Cñl
(
pP¨ít
, 
nxDiv
, 
sz
);

4678 
szCñl
[
nCñl
] -
ÀafC‹ª˘i⁄
;

4679 
	`as£π
–
	`gë4byã
(
pTemp
)==
pgnoOld
[
i
] );

4680 if–!
pOld
->
Àaf
 ){

4681 
	`as£π
–
ÀafC‹ª˘i⁄
==0 );

4684 
	`mem˝y
(
≠Cñl
[
nCñl
], &
pOld
->
aD©a
[pOld->
hdrOff£t
+8], 4);

4686 
	`as£π
–
ÀafC‹ª˘i⁄
==4 );

4688 
nCñl
++;

4709 
ußbÀS∑˚
 = 
pBt
->
ußbÀSize
 - 12 + 
ÀafC‹ª˘i⁄
;

4710 
subtŸÆ
=
k
=
i
=0; i<
nCñl
; i++){

4711 
	`as£π
–
i
<
nMaxCñls
 );

4712 
subtŸÆ
 +
szCñl
[
i
] + 2;

4713 if–
subtŸÆ
 > 
ußbÀS∑˚
 ){

4714 
szNew
[
k
] = 
subtŸÆ
 - 
szCñl
[
i
];

4715 
˙tNew
[
k
] = 
i
;

4716 if–
ÀafD©a
 ){ 
i
--; }

4717 
subtŸÆ
 = 0;

4718 
k
++;

4721 
szNew
[
k
] = 
subtŸÆ
;

4722 
˙tNew
[
k
] = 
nCñl
;

4723 
k
++;

4735 
i
=
k
-1; i>0; i--){

4736 
szRight
 = 
szNew
[
i
];

4737 
szLe·
 = 
szNew
[
i
-1];

4738 
r
;

4739 
d
;

4741 
r
 = 
˙tNew
[
i
-1] - 1;

4742 
d
 = 
r
 + 1 - 
ÀafD©a
;

4743 
	`as£π
–
d
<
nMaxCñls
 );

4744 
	`as£π
–
r
<
nMaxCñls
 );

4745  
szRight
==0 || szRight+
szCñl
[
d
]+2<=
szLe·
-(szCñl[
r
]+2) ){

4746 
szRight
 +
szCñl
[
d
] + 2;

4747 
szLe·
 -
szCñl
[
r
] + 2;

4748 
˙tNew
[
i
-1]--;

4749 
r
 = 
˙tNew
[
i
-1] - 1;

4750 
d
 = 
r
 + 1 - 
ÀafD©a
;

4752 
szNew
[
i
] = 
szRight
;

4753 
szNew
[
i
-1] = 
szLe·
;

4760 
	`as£π
–
˙tNew
[0]>0 || (
pP¨ít
->
pgno
==1 &&ÖP¨ít->
nCñl
==0) );

4765 
	`as£π
–
pPage
->
pgno
>1 );

4766 
∑geFœgs
 = 
pPage
->
aD©a
[0];

4767 
i
=0; i<
k
; i++){

4768 
MemPage
 *
pNew
;

4769 if–
i
<
nOld
 ){

4770 
pNew
 = 
≠New
[
i
] = 
≠Old
[i];

4771 
pgnoNew
[
i
] = 
pgnoOld
[i];

4772 
≠Old
[
i
] = 0;

4773 
rc
 = 
	`sqlôe3∑gî_wrôe
(
pNew
->
aD©a
);

4774 if–
rc
 ) 
bÆ™˚_˛ónup
;

4776 
rc
 = 
	`ÆloˇãPage
(
pBt
, &
pNew
, &
pgnoNew
[
i
],ÖgnoNew[i-1], 0);

4777 if–
rc
 ) 
bÆ™˚_˛ónup
;

4778 
≠New
[
i
] = 
pNew
;

4780 
nNew
++;

4781 
	`zîoPage
(
pNew
, 
∑geFœgs
);

4786  
i
<
nOld
 ){

4787 
rc
 = 
	`‰ìPage
(
≠Old
[
i
]);

4788 if–
rc
 ) 
bÆ™˚_˛ónup
;

4789 
	`ªÀa£Page
(
≠Old
[
i
]);

4790 
≠Old
[
i
] = 0;

4791 
i
++;

4808 
i
=0; i<
k
-1; i++){

4809 
möV
 = 
pgnoNew
[
i
];

4810 
möI
 = 
i
;

4811 
j
=
i
+1; j<
k
; j++){

4812 if–
pgnoNew
[
j
]<()
möV
 ){

4813 
möI
 = 
j
;

4814 
möV
 = 
pgnoNew
[
j
];

4817 if–
möI
>
i
 ){

4818 
t
;

4819 
MemPage
 *
pT
;

4820 
t
 = 
pgnoNew
[
i
];

4821 
pT
 = 
≠New
[
i
];

4822 
pgnoNew
[
i
] =ÖgnoNew[
möI
];

4823 
≠New
[
i
] =ápNew[
möI
];

4824 
pgnoNew
[
möI
] = 
t
;

4825 
≠New
[
möI
] = 
pT
;

4828 
	`TRACE
(("BALANCE: old: %d %d %dÇew: %d(%d) %d(%d) %d(%d) %d(%d) %d(%d)\n",

4829 
pgnoOld
[0],

4830 
nOld
>=2 ? 
pgnoOld
[1] : 0,

4831 
nOld
>=3 ? 
pgnoOld
[2] : 0,

4832 
pgnoNew
[0], 
szNew
[0],

4833 
nNew
>=2 ? 
pgnoNew
[1] : 0,ÇNew>=2 ? 
szNew
[1] : 0,

4834 
nNew
>=3 ? 
pgnoNew
[2] : 0,ÇNew>=3 ? 
szNew
[2] : 0,

4835 
nNew
>=4 ? 
pgnoNew
[3] : 0,ÇNew>=4 ? 
szNew
[3] : 0,

4836 
nNew
>=5 ? 
pgnoNew
[4] : 0,ÇNew>=5 ? 
szNew
[4] : 0));

4842 
j
 = 0;

4843 
i
=0; i<
nNew
; i++){

4845 
MemPage
 *
pNew
 = 
≠New
[
i
];

4846 
	`as£π
–
j
<
nMaxCñls
 );

4847 
	`as£π
–
pNew
->
pgno
==
pgnoNew
[
i
] );

4848 
	`as£mbÀPage
(
pNew
, 
˙tNew
[
i
]-
j
, &
≠Cñl
[j], &
szCñl
[j]);

4849 
	`as£π
–
pNew
->
nCñl
>0 || (
nNew
==1 && 
˙tNew
[0]==0) );

4850 
	`as£π
–
pNew
->
nOvîÊow
==0 );

4852 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


4858 if–
pBt
->
autoVacuum
 ){

4859 
k
=
j
; k<
˙tNew
[
i
]; k++){

4860 
	`as£π
–
k
<
nMaxCñls
 );

4861 if–
aFrom
[
k
]==0xFF || 
≠C›y
[aFrom[k]]->
pgno
!=
pNew
->pgno ){

4862 
rc
 = 
	`±rm≠PutOvÊ
(
pNew
, 
k
-
j
);

4863 if–
rc
!=
SQLITE_OK
 ){

4864 
bÆ™˚_˛ónup
;

4871 
j
 = 
˙tNew
[
i
];

4876 if–
i
<
nNew
-1 && 
j
<
nCñl
 ){

4877 
u8
 *
pCñl
;

4878 
u8
 *
pTemp
;

4879 
sz
;

4881 
	`as£π
–
j
<
nMaxCñls
 );

4882 
pCñl
 = 
≠Cñl
[
j
];

4883 
sz
 = 
szCñl
[
j
] + 
ÀafC‹ª˘i⁄
;

4884 if–!
pNew
->
Àaf
 ){

4885 
	`mem˝y
(&
pNew
->
aD©a
[8], 
pCñl
, 4);

4886 
pTemp
 = 0;

4887 }if–
ÀafD©a
 ){

4893 
CñlInfo
 
öfo
;

4894 
j
--;

4895 
	`∑r£CñlPå
(
pNew
, 
≠Cñl
[
j
], &
öfo
);

4896 
pCñl
 = &
aS∑˚
[
iS∑˚
];

4897 
	`fûlInCñl
(
pP¨ít
, 
pCñl
, 0, 
öfo
.
nKey
, 0, 0, &
sz
);

4898 
iS∑˚
 +
sz
;

4899 
	`as£π
–
iS∑˚
<=
pBt
->
∑geSize
*5 );

4900 
pTemp
 = 0;

4902 
pCñl
 -= 4;

4903 
pTemp
 = &
aS∑˚
[
iS∑˚
];

4904 
iS∑˚
 +
sz
;

4905 
	`as£π
–
iS∑˚
<=
pBt
->
∑geSize
*5 );

4907 
rc
 = 
	`ö£πCñl
(
pP¨ít
, 
nxDiv
, 
pCñl
, 
sz
, 
pTemp
, 4);

4908 if–
rc
!=
SQLITE_OK
 ) 
bÆ™˚_˛ónup
;

4909 
	`put4byã
(
	`födOvîÊowCñl
(
pP¨ít
,
nxDiv
), 
pNew
->
pgno
);

4910 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


4915 if–
pBt
->
autoVacuum
 && !
ÀafD©a
 ){

4916 
rc
 = 
	`±rm≠PutOvÊ
(
pP¨ít
, 
nxDiv
);

4917 if–
rc
!=
SQLITE_OK
 ){

4918 
bÆ™˚_˛ónup
;

4922 
j
++;

4923 
nxDiv
++;

4926 
	`as£π
–
j
==
nCñl
 );

4927 if–(
∑geFœgs
 & 
PTF_LEAF
)==0 ){

4928 
	`mem˝y
(&
≠New
[
nNew
-1]->
aD©a
[8], &
≠C›y
[
nOld
-1]->aData[8], 4);

4930 if–
nxDiv
==
pP¨ít
->
nCñl
+pP¨ít->
nOvîÊow
 ){

4932 
	`put4byã
(&
pP¨ít
->
aD©a
[pP¨ít->
hdrOff£t
+8], 
pgnoNew
[
nNew
-1]);

4936 
	`put4byã
(
	`födOvîÊowCñl
(
pP¨ít
, 
nxDiv
), 
pgnoNew
[
nNew
-1]);

4942 
i
=0; i<
nNew
; i++){

4943 
rc
 = 
	`ª∑ª¡ChûdPages
(
≠New
[
i
]);

4944 if–
rc
!=
SQLITE_OK
 ) 
bÆ™˚_˛ónup
;

4946 
rc
 = 
	`ª∑ª¡ChûdPages
(
pP¨ít
);

4947 if–
rc
!=
SQLITE_OK
 ) 
bÆ™˚_˛ónup
;

4954 
	`as£π
–
pP¨ít
->
isInô
 );

4957 
rc
 = 
	`bÆ™˚
(
pP¨ít
, 0);

4962 
bÆ™˚_˛ónup
:

4963 
	`sqlôeFªe
(
≠Cñl
);

4964 
i
=0; i<
nOld
; i++){

4965 
	`ªÀa£Page
(
≠Old
[
i
]);

4967 
i
=0; i<
nNew
; i++){

4968 
	`ªÀa£Page
(
≠New
[
i
]);

4970 
	`ªÀa£Page
(
pP¨ít
);

4971 
	`TRACE
(("BALANCE: finished with %d: old=%dÇew=%d cells=%d\n",

4972 
pPage
->
pgno
, 
nOld
, 
nNew
, 
nCñl
));

4973  
rc
;

4974 
	}
}

4981 
	$bÆ™˚_shÆlowî
(
MemPage
 *
pPage
){

4982 
MemPage
 *
pChûd
;

4983 
Pgno
 
pgnoChûd
;

4984 
rc
 = 
SQLITE_OK
;

4985 
BtSh¨ed
 *
pBt
;

4986 
mxCñlPîPage
;

4987 
u8
 **
≠Cñl
;

4988 *
szCñl
;

4990 
	`as£π
–
pPage
->
pP¨ít
==0 );

4991 
	`as£π
–
pPage
->
nCñl
==0 );

4992 
pBt
 = 
pPage
->pBt;

4993 
mxCñlPîPage
 = 
	`MX_CELL
(
pBt
);

4994 
≠Cñl
 = 
	`sqlôeMÆlocRaw
–
mxCñlPîPage
*((
u8
*)+()) );

4995 if–
≠Cñl
==0 )  
SQLITE_NOMEM
;

4996 
szCñl
 = (*)&
≠Cñl
[
mxCñlPîPage
];

4997 if–
pPage
->
Àaf
 ){

4999 
	`TRACE
(("BALANCE:Ém±yÅabÀ %d\n", 
pPage
->
pgno
));

5013 
pgnoChûd
 = 
	`gë4byã
(&
pPage
->
aD©a
[pPage->
hdrOff£t
+8]);

5014 
	`as£π
–
pgnoChûd
>0 );

5015 
	`as£π
–
pgnoChûd
<=
	`sqlôe3∑gî_∑gecou¡
(
pPage
->
pBt
->
pPagî
) );

5016 
rc
 = 
	`gëPage
(
pPage
->
pBt
, 
pgnoChûd
, &
pChûd
);

5017 if–
rc
 ) 
íd_shÆlow_bÆ™˚
;

5018 if–
pPage
->
pgno
==1 ){

5019 
rc
 = 
	`öôPage
(
pChûd
, 
pPage
);

5020 if–
rc
 ) 
íd_shÆlow_bÆ™˚
;

5021 
	`as£π
–
pChûd
->
nOvîÊow
==0 );

5022 if–
pChûd
->
nFªe
>=100 ){

5025 
i
;

5026 
	`zîoPage
(
pPage
, 
pChûd
->
aD©a
[0]);

5027 
i
=0; i<
pChûd
->
nCñl
; i++){

5028 
≠Cñl
[
i
] = 
	`födCñl
(
pChûd
,i);

5029 
szCñl
[
i
] = 
	`˚ŒSizePå
(
pChûd
, 
≠Cñl
[i]);

5031 
	`as£mbÀPage
(
pPage
, 
pChûd
->
nCñl
, 
≠Cñl
, 
szCñl
);

5033 
	`put4byã
(&
pPage
->
aD©a
[pPage->
hdrOff£t
+8],

5034 
	`gë4byã
(&
pChûd
->
aD©a
[pChûd->
hdrOff£t
+8]));

5035 
	`‰ìPage
(
pChûd
);

5036 
	`TRACE
(("BALANCE: chûd %dÅøns„∏tÿ∑gê1\n", 
pChûd
->
pgno
));

5040 
	`TRACE
(("BALANCE: chûd %d wû»nŸ fô o¿∑gê1\n", 
pChûd
->
pgno
));

5043 
	`mem˝y
(
pPage
->
aD©a
, 
pChûd
->aD©a,ÖPage->
pBt
->
ußbÀSize
);

5044 
pPage
->
isInô
 = 0;

5045 
pPage
->
pP¨ít
 = 0;

5046 
rc
 = 
	`öôPage
(
pPage
, 0);

5047 
	`as£π
–
rc
==
SQLITE_OK
 );

5048 
	`‰ìPage
(
pChûd
);

5049 
	`TRACE
(("BALANCE:Åransfer child %d intoÑoot %d\n",

5050 
pChûd
->
pgno
, 
pPage
->pgno));

5052 
rc
 = 
	`ª∑ª¡ChûdPages
(
pPage
);

5053 
	`as£π
–
pPage
->
nOvîÊow
==0 );

5054 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


5055 if–
pBt
->
autoVacuum
 ){

5056 
i
;

5057 
i
=0; i<
pPage
->
nCñl
; i++){

5058 
rc
 = 
	`±rm≠PutOvÊ
(
pPage
, 
i
);

5059 if–
rc
!=
SQLITE_OK
 ){

5060 
íd_shÆlow_bÆ™˚
;

5065 if–
rc
!=
SQLITE_OK
 ) 
íd_shÆlow_bÆ™˚
;

5066 
	`ªÀa£Page
(
pChûd
);

5068 
íd_shÆlow_bÆ™˚
:

5069 
	`sqlôeFªe
(
≠Cñl
);

5070  
rc
;

5071 
	}
}

5083 
	$bÆ™˚_dì≥r
(
MemPage
 *
pPage
){

5084 
rc
;

5085 
MemPage
 *
pChûd
;

5086 
Pgno
 
pgnoChûd
;

5087 
BtSh¨ed
 *
pBt
;

5088 
ußbÀSize
;

5089 
u8
 *
d©a
;

5090 
u8
 *
cd©a
;

5091 
hdr
;

5092 
brk
;

5094 
	`as£π
–
pPage
->
pP¨ít
==0 );

5095 
	`as£π
–
pPage
->
nOvîÊow
>0 );

5096 
pBt
 = 
pPage
->pBt;

5097 
rc
 = 
	`ÆloˇãPage
(
pBt
, &
pChûd
, &
pgnoChûd
, 
pPage
->
pgno
, 0);

5098 if–
rc
 ) Ñc;

5099 
	`as£π
–
	`sqlôe3∑gî_iswrôóbÀ
(
pChûd
->
aD©a
) );

5100 
ußbÀSize
 = 
pBt
->usableSize;

5101 
d©a
 = 
pPage
->
aD©a
;

5102 
hdr
 = 
pPage
->
hdrOff£t
;

5103 
brk
 = 
	`gë2byã
(&
d©a
[
hdr
+5]);

5104 
cd©a
 = 
pChûd
->
aD©a
;

5105 
	`mem˝y
(
cd©a
, &
d©a
[
hdr
], 
pPage
->
˚ŒOff£t
+2*pPage->
nCñl
-hdr);

5106 
	`mem˝y
(&
cd©a
[
brk
], &
d©a
[brk], 
ußbÀSize
-brk);

5107 
	`as£π
–
pChûd
->
isInô
==0 );

5108 
rc
 = 
	`öôPage
(
pChûd
, 
pPage
);

5109 if–
rc
 ) 
bÆ™˚dì≥r_out
;

5110 
	`mem˝y
(
pChûd
->
aOvÊ
, 
pPage
->aOvÊ,ÖPage->
nOvîÊow
*(pPage->aOvfl[0]));

5111 
pChûd
->
nOvîÊow
 = 
pPage
->nOverflow;

5112 if–
pChûd
->
nOvîÊow
 ){

5113 
pChûd
->
nFªe
 = 0;

5115 
	`as£π
–
pChûd
->
nCñl
==
pPage
->nCell );

5116 
	`zîoPage
(
pPage
, 
pChûd
->
aD©a
[0] & ~
PTF_LEAF
);

5117 
	`put4byã
(&
pPage
->
aD©a
[pPage->
hdrOff£t
+8], 
pgnoChûd
);

5118 
	`TRACE
(("BALANCE: c›yÑoŸ %d i¡ÿ%d\n", 
pPage
->
pgno
, 
pChûd
->pgno));

5119 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


5120 if–
pBt
->
autoVacuum
 ){

5121 
i
;

5122 
rc
 = 
	`±rm≠Put
(
pBt
, 
pChûd
->
pgno
, 
PTRMAP_BTREE
, 
pPage
->pgno);

5123 if–
rc
 ) 
bÆ™˚dì≥r_out
;

5124 
i
=0; i<
pChûd
->
nCñl
; i++){

5125 
rc
 = 
	`±rm≠PutOvÊ
(
pChûd
, 
i
);

5126 if–
rc
!=
SQLITE_OK
 ){

5127  
rc
;

5132 
rc
 = 
	`bÆ™˚_n⁄roŸ
(
pChûd
);

5134 
bÆ™˚dì≥r_out
:

5135 
	`ªÀa£Page
(
pChûd
);

5136  
rc
;

5137 
	}
}

5143 
	$bÆ™˚
(
MemPage
 *
pPage
, 
ö£π
){

5144 
rc
 = 
SQLITE_OK
;

5145 if–
pPage
->
pP¨ít
==0 ){

5146 if–
pPage
->
nOvîÊow
>0 ){

5147 
rc
 = 
	`bÆ™˚_dì≥r
(
pPage
);

5149 if–
rc
==
SQLITE_OK
 && 
pPage
->
nCñl
==0 ){

5150 
rc
 = 
	`bÆ™˚_shÆlowî
(
pPage
);

5153 if–
pPage
->
nOvîÊow
>0 ||

5154 (!
ö£π
 && 
pPage
->
nFªe
>pPage->
pBt
->
ußbÀSize
*2/3) ){

5155 
rc
 = 
	`bÆ™˚_n⁄roŸ
(
pPage
);

5158  
rc
;

5159 
	}
}

5176 
	$checkRódLocks
(
BtSh¨ed
 *
pBt
, 
Pgno
 
pgnoRoŸ
, 
BtCurs‹
 *
pEx˛ude
){

5177 
BtCurs‹
 *
p
;

5178 
p
=
pBt
->
pCurs‹
;Ö;Öı->
pNext
){

5179 
u32
 
Êags
 = (
p
->
pBåì
->
pSqlôe
 ?Ö->pBtree->pSqlite->flags : 0);

5180 if–
p
->
pgnoRoŸ
!ıgnoRoŸ ||Ö==
pEx˛ude
 ) ;

5181 if–
p
->
wrFœg
==0 && 
Êags
&
SQLITE_RódUncommôãd
 ) ;

5182 if–
p
->
wrFœg
==0 )  
SQLITE_LOCKED
;

5183 if–
p
->
pPage
->
pgno
!ı->
pgnoRoŸ
 ){

5184 
	`moveToRoŸ
(
p
);

5187  
SQLITE_OK
;

5188 
	}
}

5199 
	$sqlôe3BåìIn£π
(

5200 
BtCurs‹
 *
pCur
,

5201 c⁄° *
pKey
, 
i64
 
nKey
,

5202 c⁄° *
pD©a
, 
nD©a


5204 
rc
;

5205 
loc
;

5206 
szNew
;

5207 
MemPage
 *
pPage
;

5208 
BtSh¨ed
 *
pBt
 = 
pCur
->
pBåì
->pBt;

5209 *
ﬁdCñl
;

5210 *
√wCñl
 = 0;

5212 if–
pBt
->
öTønß˘i⁄
!=
TRANS_WRITE
 ){

5214  
pBt
->
ªadO∆y
 ? 
SQLITE_READONLY
 : 
SQLITE_ERROR
;

5216 
	`as£π
–!
pBt
->
ªadO∆y
 );

5217 if–!
pCur
->
wrFœg
 ){

5218  
SQLITE_PERM
;

5220 if–
	`checkRódLocks
(
pBt
, 
pCur
->
pgnoRoŸ
,ÖCur) ){

5221  
SQLITE_LOCKED
;

5225 
	`ª°‹eOrCÀ¨Curs‹Posôi⁄
(
pCur
, 0);

5227 
SQLITE_OK
!=(
rc
 = 
	`ßveAŒCurs‹s
(
pBt
, 
pCur
->
pgnoRoŸ
,ÖCur)) ||

5228 
SQLITE_OK
!=(
rc
 = 
	`sqlôe3BåìMovëo
(
pCur
, 
pKey
, 
nKey
, &
loc
))

5230  
rc
;

5233 
pPage
 = 
pCur
->pPage;

5234 
	`as£π
–
pPage
->
ötKey
 || 
nKey
>=0 );

5235 
	`as£π
–
pPage
->
Àaf
 || !pPage->
ÀafD©a
 );

5236 
	`TRACE
(("INSERT:Åable=%dÇkey=%lldÇdata=%dÖage=%d %s\n",

5237 
pCur
->
pgnoRoŸ
, 
nKey
, 
nD©a
, 
pPage
->
pgno
,

5238 
loc
==0 ? "overwrite" : "newÉntry"));

5239 
	`as£π
–
pPage
->
isInô
 );

5240 
rc
 = 
	`sqlôe3∑gî_wrôe
(
pPage
->
aD©a
);

5241 if–
rc
 ) Ñc;

5242 
√wCñl
 = 
	`sqlôeMÆlocRaw
–
	`MX_CELL_SIZE
(
pBt
) );

5243 if–
√wCñl
==0 )  
SQLITE_NOMEM
;

5244 
rc
 = 
	`fûlInCñl
(
pPage
, 
√wCñl
, 
pKey
, 
nKey
, 
pD©a
, 
nD©a
, &
szNew
);

5245 if–
rc
 ) 
íd_ö£π
;

5246 
	`as£π
–
szNew
==
	`˚ŒSizePå
(
pPage
, 
√wCñl
) );

5247 
	`as£π
–
szNew
<=
	`MX_CELL_SIZE
(
pBt
) );

5248 if–
loc
==0 && 
CURSOR_VALID
==
pCur
->
eSèã
 ){

5249 
szOld
;

5250 
	`as£π
–
pCur
->
idx
>=0 &&ÖCur->idx<
pPage
->
nCñl
 );

5251 
ﬁdCñl
 = 
	`födCñl
(
pPage
, 
pCur
->
idx
);

5252 if–!
pPage
->
Àaf
 ){

5253 
	`mem˝y
(
√wCñl
, 
ﬁdCñl
, 4);

5255 
szOld
 = 
	`˚ŒSizePå
(
pPage
, 
ﬁdCñl
);

5256 
rc
 = 
	`˛órCñl
(
pPage
, 
ﬁdCñl
);

5257 if–
rc
 ) 
íd_ö£π
;

5258 
	`dr›Cñl
(
pPage
, 
pCur
->
idx
, 
szOld
);

5259 }if–
loc
<0 && 
pPage
->
nCñl
>0 ){

5260 
	`as£π
–
pPage
->
Àaf
 );

5261 
pCur
->
idx
++;

5262 
pCur
->
öfo
.
nSize
 = 0;

5264 
	`as£π
–
pPage
->
Àaf
 );

5266 
rc
 = 
	`ö£πCñl
(
pPage
, 
pCur
->
idx
, 
√wCñl
, 
szNew
, 0, 0);

5267 if–
rc
!=
SQLITE_OK
 ) 
íd_ö£π
;

5268 
rc
 = 
	`bÆ™˚
(
pPage
, 1);

5271 if–
rc
==
SQLITE_OK
 ){

5272 
	`moveToRoŸ
(
pCur
);

5274 
íd_ö£π
:

5275 
	`sqlôeFªe
(
√wCñl
);

5276  
rc
;

5277 
	}
}

5283 
	$sqlôe3BåìDñëe
(
BtCurs‹
 *
pCur
){

5284 
MemPage
 *
pPage
 = 
pCur
->pPage;

5285 *
pCñl
;

5286 
rc
;

5287 
Pgno
 
pgnoChûd
 = 0;

5288 
BtSh¨ed
 *
pBt
 = 
pCur
->
pBåì
->pBt;

5290 
	`as£π
–
pPage
->
isInô
 );

5291 if–
pBt
->
öTønß˘i⁄
!=
TRANS_WRITE
 ){

5293  
pBt
->
ªadO∆y
 ? 
SQLITE_READONLY
 : 
SQLITE_ERROR
;

5295 
	`as£π
–!
pBt
->
ªadO∆y
 );

5296 if–
pCur
->
idx
 >
pPage
->
nCñl
 ){

5297  
SQLITE_ERROR
;

5299 if–!
pCur
->
wrFœg
 ){

5300  
SQLITE_PERM
;

5302 if–
	`checkRódLocks
(
pBt
, 
pCur
->
pgnoRoŸ
,ÖCur) ){

5303  
SQLITE_LOCKED
;

5312 (
rc
 = 
	`ª°‹eOrCÀ¨Curs‹Posôi⁄
(
pCur
, 1))!=0 ||

5313 (
rc
 = 
	`ßveAŒCurs‹s
(
pBt
, 
pCur
->
pgnoRoŸ
,ÖCur))!=0 ||

5314 (
rc
 = 
	`sqlôe3∑gî_wrôe
(
pPage
->
aD©a
))!=0

5316  
rc
;

5323 
pCñl
 = 
	`födCñl
(
pPage
, 
pCur
->
idx
);

5324 if–!
pPage
->
Àaf
 ){

5325 
pgnoChûd
 = 
	`gë4byã
(
pCñl
);

5327 
rc
 = 
	`˛órCñl
(
pPage
, 
pCñl
);

5328 if–
rc
 ) Ñc;

5330 if–!
pPage
->
Àaf
 ){

5338 
BtCurs‹
 
ÀafCur
;

5339 *
pNext
;

5340 
szNext
;

5343 
nŸU£d
;

5344 *
ãmpCñl
 = 0;

5345 
	`as£π
–!
pPage
->
ÀafD©a
 );

5346 
	`gëTempCurs‹
(
pCur
, &
ÀafCur
);

5347 
rc
 = 
	`sqlôe3BåìNext
(&
ÀafCur
, &
nŸU£d
);

5348 if–
rc
!=
SQLITE_OK
 ){

5349 if–
rc
!=
SQLITE_NOMEM
 ){

5350 
rc
 = 
SQLITE_CORRUPT_BKPT
;

5353 if–
rc
==
SQLITE_OK
 ){

5354 
rc
 = 
	`sqlôe3∑gî_wrôe
(
ÀafCur
.
pPage
->
aD©a
);

5356 if–
rc
==
SQLITE_OK
 ){

5357 
	`TRACE
(("DELETE:Åable=%d delete internal from %dÑeplace fromÜeaf %d\n",

5358 
pCur
->
pgnoRoŸ
, 
pPage
->
pgno
, 
ÀafCur
.pPage->pgno));

5359 
	`dr›Cñl
(
pPage
, 
pCur
->
idx
, 
	`˚ŒSizePå
’Page, 
pCñl
));

5360 
pNext
 = 
	`födCñl
(
ÀafCur
.
pPage
,ÜófCur.
idx
);

5361 
szNext
 = 
	`˚ŒSizePå
(
ÀafCur
.
pPage
, 
pNext
);

5362 
	`as£π
–
	`MX_CELL_SIZE
(
pBt
)>=
szNext
+4 );

5363 
ãmpCñl
 = 
	`sqlôeMÆlocRaw
–
	`MX_CELL_SIZE
(
pBt
) );

5364 if–
ãmpCñl
==0 ){

5365 
rc
 = 
SQLITE_NOMEM
;

5368 if–
rc
==
SQLITE_OK
 ){

5369 
rc
 = 
	`ö£πCñl
(
pPage
, 
pCur
->
idx
, 
pNext
-4, 
szNext
+4, 
ãmpCñl
, 0);

5371 if–
rc
==
SQLITE_OK
 ){

5372 
	`put4byã
(
	`födOvîÊowCñl
(
pPage
, 
pCur
->
idx
), 
pgnoChûd
);

5373 
rc
 = 
	`bÆ™˚
(
pPage
, 0);

5375 if–
rc
==
SQLITE_OK
 ){

5376 
	`dr›Cñl
(
ÀafCur
.
pPage
,ÜófCur.
idx
, 
szNext
);

5377 
rc
 = 
	`bÆ™˚
(
ÀafCur
.
pPage
, 0);

5379 
	`sqlôeFªe
(
ãmpCñl
);

5380 
	`ªÀa£TempCurs‹
(&
ÀafCur
);

5382 
	`TRACE
(("DELETE:Åable=%d delete fromÜeaf %d\n",

5383 
pCur
->
pgnoRoŸ
, 
pPage
->
pgno
));

5384 
	`dr›Cñl
(
pPage
, 
pCur
->
idx
, 
	`˚ŒSizePå
’Page, 
pCñl
));

5385 
rc
 = 
	`bÆ™˚
(
pPage
, 0);

5387 if–
rc
==
SQLITE_OK
 ){

5388 
	`moveToRoŸ
(
pCur
);

5390  
rc
;

5391 
	}
}

5404 
	$sqlôe3BåìCª©eTabÀ
(
Båì
 *
p
, *
piTabÀ
, 
Êags
){

5405 
BtSh¨ed
 *
pBt
 = 
p
->pBt;

5406 
MemPage
 *
pRoŸ
;

5407 
Pgno
 
pgnoRoŸ
;

5408 
rc
;

5409 if–
pBt
->
öTønß˘i⁄
!=
TRANS_WRITE
 ){

5411  
pBt
->
ªadO∆y
 ? 
SQLITE_READONLY
 : 
SQLITE_ERROR
;

5413 
	`as£π
–!
pBt
->
ªadO∆y
 );

5420 if–
pBt
->
pCurs‹
 ){

5421  
SQLITE_LOCKED
;

5424 #ifde‡
SQLITE_OMIT_AUTOVACUUM


5425 
rc
 = 
	`ÆloˇãPage
(
pBt
, &
pRoŸ
, &
pgnoRoŸ
, 1, 0);

5426 if–
rc
 ) Ñc;

5428 if–
pBt
->
autoVacuum
 ){

5429 
Pgno
 
pgnoMove
;

5430 
MemPage
 *
pPageMove
;

5436 
rc
 = 
	`sqlôe3BåìGëMëa
(
p
, 4, &
pgnoRoŸ
);

5437 if–
rc
!=
SQLITE_OK
 ) Ñc;

5438 
pgnoRoŸ
++;

5443 if–
pgnoRoŸ
==
	`PTRMAP_PAGENO
(
pBt
->
ußbÀSize
,ÖgnoRoot) ||

5444 
pgnoRoŸ
==
	`PENDING_BYTE_PAGE
(
pBt
) ){

5445 
pgnoRoŸ
++;

5447 
	`as£π
–
pgnoRoŸ
>=3 );

5453 
rc
 = 
	`ÆloˇãPage
(
pBt
, &
pPageMove
, &
pgnoMove
, 
pgnoRoŸ
, 1);

5454 if–
rc
!=
SQLITE_OK
 ){

5455  
rc
;

5458 if–
pgnoMove
!=
pgnoRoŸ
 ){

5459 
u8
 
eTy≥
;

5460 
Pgno
 
iPåPage
;

5462 
	`ªÀa£Page
(
pPageMove
);

5463 
rc
 = 
	`gëPage
(
pBt
, 
pgnoRoŸ
, &
pRoŸ
);

5464 if–
rc
!=
SQLITE_OK
 ){

5465  
rc
;

5467 
rc
 = 
	`±rm≠Gë
(
pBt
, 
pgnoRoŸ
, &
eTy≥
, &
iPåPage
);

5468 if–
rc
!=
SQLITE_OK
 || 
eTy≥
==
PTRMAP_ROOTPAGE
 ||ÉTy≥==
PTRMAP_FREEPAGE
 ){

5469 
	`ªÀa£Page
(
pRoŸ
);

5470  
rc
;

5472 
	`as£π
–
eTy≥
!=
PTRMAP_ROOTPAGE
 );

5473 
	`as£π
–
eTy≥
!=
PTRMAP_FREEPAGE
 );

5474 
rc
 = 
	`sqlôe3∑gî_wrôe
(
pRoŸ
->
aD©a
);

5475 if–
rc
!=
SQLITE_OK
 ){

5476 
	`ªÀa£Page
(
pRoŸ
);

5477  
rc
;

5479 
rc
 = 
	`ªloˇãPage
(
pBt
, 
pRoŸ
, 
eTy≥
, 
iPåPage
, 
pgnoMove
);

5480 
	`ªÀa£Page
(
pRoŸ
);

5481 if–
rc
!=
SQLITE_OK
 ){

5482  
rc
;

5484 
rc
 = 
	`gëPage
(
pBt
, 
pgnoRoŸ
, &
pRoŸ
);

5485 if–
rc
!=
SQLITE_OK
 ){

5486  
rc
;

5488 
rc
 = 
	`sqlôe3∑gî_wrôe
(
pRoŸ
->
aD©a
);

5489 if–
rc
!=
SQLITE_OK
 ){

5490 
	`ªÀa£Page
(
pRoŸ
);

5491  
rc
;

5494 
pRoŸ
 = 
pPageMove
;

5498 
rc
 = 
	`±rm≠Put
(
pBt
, 
pgnoRoŸ
, 
PTRMAP_ROOTPAGE
, 0);

5499 if–
rc
 ){

5500 
	`ªÀa£Page
(
pRoŸ
);

5501  
rc
;

5503 
rc
 = 
	`sqlôe3BåìUpd©eMëa
(
p
, 4, 
pgnoRoŸ
);

5504 if–
rc
 ){

5505 
	`ªÀa£Page
(
pRoŸ
);

5506  
rc
;

5510 
rc
 = 
	`ÆloˇãPage
(
pBt
, &
pRoŸ
, &
pgnoRoŸ
, 1, 0);

5511 if–
rc
 ) Ñc;

5514 
	`as£π
–
	`sqlôe3∑gî_iswrôóbÀ
(
pRoŸ
->
aD©a
) );

5515 
	`zîoPage
(
pRoŸ
, 
Êags
 | 
PTF_LEAF
);

5516 
	`sqlôe3∑gî_uƒef
(
pRoŸ
->
aD©a
);

5517 *
piTabÀ
 = ()
pgnoRoŸ
;

5518  
SQLITE_OK
;

5519 
	}
}

5525 
	$˛órD©aba£Page
(

5526 
BtSh¨ed
 *
pBt
,

5527 
Pgno
 
pgno
,

5528 
MemPage
 *
pP¨ít
,

5529 
‰ìPageFœg


5531 
MemPage
 *
pPage
 = 0;

5532 
rc
;

5533 *
pCñl
;

5534 
i
;

5536 if–
pgno
>
	`sqlôe3∑gî_∑gecou¡
(
pBt
->
pPagî
) ){

5537  
SQLITE_CORRUPT_BKPT
;

5540 
rc
 = 
	`gëAndInôPage
(
pBt
, 
pgno
, &
pPage
, 
pP¨ít
);

5541 if–
rc
 ) 
˛órd©aba£∑ge_out
;

5542 
rc
 = 
	`sqlôe3∑gî_wrôe
(
pPage
->
aD©a
);

5543 if–
rc
 ) 
˛órd©aba£∑ge_out
;

5544 
i
=0; i<
pPage
->
nCñl
; i++){

5545 
pCñl
 = 
	`födCñl
(
pPage
, 
i
);

5546 if–!
pPage
->
Àaf
 ){

5547 
rc
 = 
	`˛órD©aba£Page
(
pBt
, 
	`gë4byã
(
pCñl
), 
pPage
->
pP¨ít
, 1);

5548 if–
rc
 ) 
˛órd©aba£∑ge_out
;

5550 
rc
 = 
	`˛órCñl
(
pPage
, 
pCñl
);

5551 if–
rc
 ) 
˛órd©aba£∑ge_out
;

5553 if–!
pPage
->
Àaf
 ){

5554 
rc
 = 
	`˛órD©aba£Page
(
pBt
, 
	`gë4byã
(&
pPage
->
aD©a
[8]),ÖPage->
pP¨ít
, 1);

5555 if–
rc
 ) 
˛órd©aba£∑ge_out
;

5557 if–
‰ìPageFœg
 ){

5558 
rc
 = 
	`‰ìPage
(
pPage
);

5560 
	`zîoPage
(
pPage
,ÖPage->
aD©a
[0] | 
PTF_LEAF
);

5563 
˛órd©aba£∑ge_out
:

5564 
	`ªÀa£Page
(
pPage
);

5565  
rc
;

5566 
	}
}

5577 
	$sqlôe3BåìCÀ¨TabÀ
(
Båì
 *
p
, 
iTabÀ
){

5578 
rc
;

5579 
BtCurs‹
 *
pCur
;

5580 
BtSh¨ed
 *
pBt
 = 
p
->pBt;

5581 
sqlôe3
 *
db
 = 
p
->
pSqlôe
;

5582 if–
p
->
öTøns
!=
TRANS_WRITE
 ){

5583  
pBt
->
ªadO∆y
 ? 
SQLITE_READONLY
 : 
SQLITE_ERROR
;

5589 if–0==
db
 || 0==(db->
Êags
&
SQLITE_RódUncommôãd
) ){

5590 
pCur
=
pBt
->
pCurs‹
;ÖCur;ÖCurıCur->
pNext
){

5591 if–
pCur
->
pBåì
==
p
 &&ÖCur->
pgnoRoŸ
==(
Pgno
)
iTabÀ
 ){

5592 if–0==
pCur
->
wrFœg
 ){

5593  
SQLITE_LOCKED
;

5595 
	`moveToRoŸ
(
pCur
);

5601 if–
SQLITE_OK
!=(
rc
 = 
	`ßveAŒCurs‹s
(
pBt
, 
iTabÀ
, 0)) ){

5602  
rc
;

5605  
	`˛órD©aba£Page
(
pBt
, (
Pgno
)
iTabÀ
, 0, 0);

5606 
	}
}

5628 
	$sqlôe3BåìDr›TabÀ
(
Båì
 *
p
, 
iTabÀ
, *
piMoved
){

5629 
rc
;

5630 
MemPage
 *
pPage
 = 0;

5631 
BtSh¨ed
 *
pBt
 = 
p
->pBt;

5633 if–
p
->
öTøns
!=
TRANS_WRITE
 ){

5634  
pBt
->
ªadO∆y
 ? 
SQLITE_READONLY
 : 
SQLITE_ERROR
;

5643 if–
pBt
->
pCurs‹
 ){

5644  
SQLITE_LOCKED
;

5647 
rc
 = 
	`gëPage
(
pBt
, (
Pgno
)
iTabÀ
, &
pPage
);

5648 if–
rc
 ) Ñc;

5649 
rc
 = 
	`sqlôe3BåìCÀ¨TabÀ
(
p
, 
iTabÀ
);

5650 if–
rc
 ){

5651 
	`ªÀa£Page
(
pPage
);

5652  
rc
;

5655 *
piMoved
 = 0;

5657 if–
iTabÀ
>1 ){

5658 #ifde‡
SQLITE_OMIT_AUTOVACUUM


5659 
rc
 = 
	`‰ìPage
(
pPage
);

5660 
	`ªÀa£Page
(
pPage
);

5662 if–
pBt
->
autoVacuum
 ){

5663 
Pgno
 
maxRoŸPgno
;

5664 
rc
 = 
	`sqlôe3BåìGëMëa
(
p
, 4, &
maxRoŸPgno
);

5665 if–
rc
!=
SQLITE_OK
 ){

5666 
	`ªÀa£Page
(
pPage
);

5667  
rc
;

5670 if–
iTabÀ
==
maxRoŸPgno
 ){

5674 
rc
 = 
	`‰ìPage
(
pPage
);

5675 
	`ªÀa£Page
(
pPage
);

5676 if–
rc
!=
SQLITE_OK
 ){

5677  
rc
;

5684 
MemPage
 *
pMove
;

5685 
	`ªÀa£Page
(
pPage
);

5686 
rc
 = 
	`gëPage
(
pBt
, 
maxRoŸPgno
, &
pMove
);

5687 if–
rc
!=
SQLITE_OK
 ){

5688  
rc
;

5690 
rc
 = 
	`ªloˇãPage
(
pBt
, 
pMove
, 
PTRMAP_ROOTPAGE
, 0, 
iTabÀ
);

5691 
	`ªÀa£Page
(
pMove
);

5692 if–
rc
!=
SQLITE_OK
 ){

5693  
rc
;

5695 
rc
 = 
	`gëPage
(
pBt
, 
maxRoŸPgno
, &
pMove
);

5696 if–
rc
!=
SQLITE_OK
 ){

5697  
rc
;

5699 
rc
 = 
	`‰ìPage
(
pMove
);

5700 
	`ªÀa£Page
(
pMove
);

5701 if–
rc
!=
SQLITE_OK
 ){

5702  
rc
;

5704 *
piMoved
 = 
maxRoŸPgno
;

5712 
maxRoŸPgno
--;

5713 if–
maxRoŸPgno
==
	`PENDING_BYTE_PAGE
(
pBt
) ){

5714 
maxRoŸPgno
--;

5716 if–
maxRoŸPgno
==
	`PTRMAP_PAGENO
(
pBt
->
ußbÀSize
, maxRootPgno) ){

5717 
maxRoŸPgno
--;

5719 
	`as£π
–
maxRoŸPgno
!=
	`PENDING_BYTE_PAGE
(
pBt
) );

5721 
rc
 = 
	`sqlôe3BåìUpd©eMëa
(
p
, 4, 
maxRoŸPgno
);

5723 
rc
 = 
	`‰ìPage
(
pPage
);

5724 
	`ªÀa£Page
(
pPage
);

5729 
	`zîoPage
(
pPage
, 
PTF_INTKEY
|
PTF_LEAF
 );

5730 
	`ªÀa£Page
(
pPage
);

5732  
rc
;

5733 
	}
}

5746 
	$sqlôe3BåìGëMëa
(
Båì
 *
p
, 
idx
, 
u32
 *
pMëa
){

5747 
rc
;

5748 *
pP1
;

5749 
BtSh¨ed
 *
pBt
 = 
p
->pBt;

5756 
rc
 = 
	`quîyTabÀLock
(
p
, 1, 
READ_LOCK
);

5757 if–
rc
!=
SQLITE_OK
 ){

5758  
rc
;

5761 
	`as£π
–
idx
>=0 && idx<=15 );

5762 
rc
 = 
	`sqlôe3∑gî_gë
(
pBt
->
pPagî
, 1, (**)&
pP1
);

5763 if–
rc
 ) Ñc;

5764 *
pMëa
 = 
	`gë4byã
(&
pP1
[36 + 
idx
*4]);

5765 
	`sqlôe3∑gî_uƒef
(
pP1
);

5770 #ifde‡
SQLITE_OMIT_AUTOVACUUM


5771 if–
idx
==4 && *
pMëa
>0 ) 
pBt
->
ªadO∆y
 = 1;

5775 
rc
 = 
	`lockTabÀ
(
p
, 1, 
READ_LOCK
);

5776  
rc
;

5777 
	}
}

5783 
	$sqlôe3BåìUpd©eMëa
(
Båì
 *
p
, 
idx
, 
u32
 
iMëa
){

5784 
BtSh¨ed
 *
pBt
 = 
p
->pBt;

5785 *
pP1
;

5786 
rc
;

5787 
	`as£π
–
idx
>=1 && idx<=15 );

5788 if–
p
->
öTøns
!=
TRANS_WRITE
 ){

5789  
pBt
->
ªadO∆y
 ? 
SQLITE_READONLY
 : 
SQLITE_ERROR
;

5791 
	`as£π
–
pBt
->
pPage1
!=0 );

5792 
pP1
 = 
pBt
->
pPage1
->
aD©a
;

5793 
rc
 = 
	`sqlôe3∑gî_wrôe
(
pP1
);

5794 if–
rc
 ) Ñc;

5795 
	`put4byã
(&
pP1
[36 + 
idx
*4], 
iMëa
);

5796  
SQLITE_OK
;

5797 
	}
}

5803 
	$sqlôe3BåìFœgs
(
BtCurs‹
 *
pCur
){

5807 
MemPage
 *
pPage
 = 
pCur
->pPage;

5808  
pPage
 ?ÖPage->
aD©a
[pPage->
hdrOff£t
] : 0;

5809 
	}
}

5811 #ifde‡
SQLITE_DEBUG


5816 
	$båìPageDump
(
BtSh¨ed
 *
pBt
, 
pgno
, 
ªcursive
, 
MemPage
 *
pP¨ít
){

5817 
rc
;

5818 
MemPage
 *
pPage
;

5819 
i
, 
j
, 
c
;

5820 
nFªe
;

5821 
u16
 
idx
;

5822 
hdr
;

5823 
nCñl
;

5824 
isInô
;

5825 *
d©a
;

5826 
ønge
[20];

5827 
∑ylﬂd
[20];

5829 
rc
 = 
	`gëPage
(
pBt
, (
Pgno
)
pgno
, &
pPage
);

5830 
isInô
 = 
pPage
->isInit;

5831 if–
pPage
->
isInô
==0 ){

5832 
	`öôPage
(
pPage
, 
pP¨ít
);

5834 if–
rc
 ){

5835  
rc
;

5837 
hdr
 = 
pPage
->
hdrOff£t
;

5838 
d©a
 = 
pPage
->
aD©a
;

5839 
c
 = 
d©a
[
hdr
];

5840 
pPage
->
ötKey
 = (
c
 & (
PTF_INTKEY
|
PTF_LEAFDATA
))!=0;

5841 
pPage
->
zîoD©a
 = (
c
 & 
PTF_ZERODATA
)!=0;

5842 
pPage
->
ÀafD©a
 = (
c
 & 
PTF_LEAFDATA
)!=0;

5843 
pPage
->
Àaf
 = (
c
 & 
PTF_LEAF
)!=0;

5844 
pPage
->
hasD©a
 = !’Page->
zîoD©a
 || (!pPage->
Àaf
 &&ÖPage->
ÀafD©a
));

5845 
nCñl
 = 
	`gë2byã
(&
d©a
[
hdr
+3]);

5846 
	`sqlôe3DebugPrötf
("PAGE %d: fœgs=0x%02x føg=%dÖ¨ít=%d\n", 
pgno
,

5847 
d©a
[
hdr
], data[hdr+7],

5848 (
pPage
->
isInô
 &&ÖPage->
pP¨ít
Ë?ÖPage->pP¨ít->
pgno
 : 0);

5849 
	`as£π
–
hdr
 =(
pgno
==1 ? 100 : 0) );

5850 
idx
 = 
hdr
 + 12 - 
pPage
->
Àaf
*4;

5851 
i
=0; i<
nCñl
; i++){

5852 
CñlInfo
 
öfo
;

5853 
Pgno
 
chûd
;

5854 *
pCñl
;

5855 
sz
;

5856 
addr
;

5858 
addr
 = 
	`gë2byã
(&
d©a
[
idx
 + 2*
i
]);

5859 
pCñl
 = &
d©a
[
addr
];

5860 
	`∑r£CñlPå
(
pPage
, 
pCñl
, &
öfo
);

5861 
sz
 = 
öfo
.
nSize
;

5862 
	`•rötf
(
ønge
,"%d..%d", 
addr
,áddr+
sz
-1);

5863 if–
pPage
->
Àaf
 ){

5864 
chûd
 = 0;

5866 
chûd
 = 
	`gë4byã
(
pCñl
);

5868 
sz
 = 
öfo
.
nD©a
;

5869 if–!
pPage
->
ötKey
 ) 
sz
 +
öfo
.
nKey
;

5870 if–
sz
>(
∑ylﬂd
)-1 ) sz = (payload)-1;

5871 
	`mem˝y
(
∑ylﬂd
, &
pCñl
[
öfo
.
nHódî
], 
sz
);

5872 
j
=0; j<
sz
; j++){

5873 if–
∑ylﬂd
[
j
]<0x20 ||Öayload[j]>0x7f )Öayload[j] = '.';

5875 
∑ylﬂd
[
sz
] = 0;

5876 
	`sqlôe3DebugPrötf
(

5878 
i
, 
ønge
, 
chûd
, 
öfo
.
nKey
, info.
nD©a
, 
∑ylﬂd


5881 if–!
pPage
->
Àaf
 ){

5882 
	`sqlôe3DebugPrötf
("right_chûd: %d\n", 
	`gë4byã
(&
d©a
[
hdr
+8]));

5884 
nFªe
 = 0;

5885 
i
 = 0;

5886 
idx
 = 
	`gë2byã
(&
d©a
[
hdr
+1]);

5887  
idx
>0 && idx<
pPage
->
pBt
->
ußbÀSize
 ){

5888 
sz
 = 
	`gë2byã
(&
d©a
[
idx
+2]);

5889 
	`•rötf
(
ønge
,"%d..%d", 
idx
, idx+
sz
-1);

5890 
nFªe
 +
sz
;

5891 
	`sqlôe3DebugPrötf
("freeblock %2d: i=%-10s size=%-4dÅotal=%d\n",

5892 
i
, 
ønge
, 
sz
, 
nFªe
);

5893 
idx
 = 
	`gë2byã
(&
d©a
[idx]);

5894 
i
++;

5896 if–
idx
!=0 ){

5897 
	`sqlôe3DebugPrötf
("ERROR:Çexà‰ìblock index ouào‡ønge: %d\n", 
idx
);

5899 if–
ªcursive
 && !
pPage
->
Àaf
 ){

5900 
i
=0; i<
nCñl
; i++){

5901 *
pCñl
 = 
	`födCñl
(
pPage
, 
i
);

5902 
	`båìPageDump
(
pBt
, 
	`gë4byã
(
pCñl
), 1, 
pPage
);

5903 
idx
 = 
	`gë2byã
(
pCñl
);

5905 
	`båìPageDump
(
pBt
, 
	`gë4byã
(&
d©a
[
hdr
+8]), 1, 
pPage
);

5907 
pPage
->
isInô
 = isInit;

5908 
	`sqlôe3∑gî_uƒef
(
d©a
);

5909 
	`fÊush
(
°dout
);

5910  
SQLITE_OK
;

5911 
	}
}

5912 
	$sqlôe3BåìPageDump
(
Båì
 *
p
, 
pgno
, 
ªcursive
){

5913  
	`båìPageDump
(
p
->
pBt
, 
pgno
, 
ªcursive
, 0);

5914 
	}
}

5917 #i‡
deföed
(
SQLITE_TEST
Ë&& deföed(
SQLITE_DEBUG
)

5935 
	$sqlôe3BåìCurs‹Info
(
BtCurs‹
 *
pCur
, *
aResu…
, 
upC¡
){

5936 
˙t
, 
idx
;

5937 
MemPage
 *
pPage
 = 
pCur
->pPage;

5938 
BtCurs‹
 
tmpCur
;

5940 
rc
 = 
	`ª°‹eOrCÀ¨Curs‹Posôi⁄
(
pCur
, 1);

5941 if–
rc
!=
SQLITE_OK
 ){

5942  
rc
;

5945 
	`∑geI¡egrôy
(
pPage
);

5946 
	`as£π
–
pPage
->
isInô
 );

5947 
	`gëTempCurs‹
(
pCur
, &
tmpCur
);

5948  
upC¡
-- ){

5949 
	`moveToP¨ít
(&
tmpCur
);

5951 
pPage
 = 
tmpCur
.pPage;

5952 
	`∑geI¡egrôy
(
pPage
);

5953 
aResu…
[0] = 
	`sqlôe3∑gî_∑gíumbî
(
pPage
->
aD©a
);

5954 
	`as£π
–
aResu…
[0]==
pPage
->
pgno
 );

5955 
aResu…
[1] = 
tmpCur
.
idx
;

5956 
aResu…
[2] = 
pPage
->
nCñl
;

5957 if–
tmpCur
.
idx
>=0 &&ÅmpCur.idx<
pPage
->
nCñl
 ){

5958 
	`gëCñlInfo
(&
tmpCur
);

5959 
aResu…
[3] = 
tmpCur
.
öfo
.
nSize
;

5960 
aResu…
[6] = 
tmpCur
.
öfo
.
nD©a
;

5961 
aResu…
[7] = 
tmpCur
.
öfo
.
nHódî
;

5962 
aResu…
[8] = 
tmpCur
.
öfo
.
nLoˇl
;

5964 
aResu…
[3] = 0;

5965 
aResu…
[6] = 0;

5966 
aResu…
[7] = 0;

5967 
aResu…
[8] = 0;

5969 
aResu…
[4] = 
pPage
->
nFªe
;

5970 
˙t
 = 0;

5971 
idx
 = 
	`gë2byã
(&
pPage
->
aD©a
[pPage->
hdrOff£t
+1]);

5972  
idx
>0 && idx<
pPage
->
pBt
->
ußbÀSize
 ){

5973 
˙t
++;

5974 
idx
 = 
	`gë2byã
(&
pPage
->
aD©a
[idx]);

5976 
aResu…
[5] = 
˙t
;

5977 if–
pPage
->
pP¨ít
==0 || 
	`isRoŸPage
(pPage) ){

5978 
aResu…
[9] = 0;

5980 
aResu…
[9] = 
pPage
->
pP¨ít
->
pgno
;

5982 
	`ªÀa£TempCurs‹
(&
tmpCur
);

5983  
SQLITE_OK
;

5984 
	}
}

5991 
Pagî
 *
	$sqlôe3BåìPagî
(
Båì
 *
p
){

5992  
p
->
pBt
->
pPagî
;

5993 
	}
}

5999 
I¡egrôyCk
 
	tI¡egrôyCk
;

6000 
	sI¡egrôyCk
 {

6001 
BtSh¨ed
 *
	mpBt
;

6002 
Pagî
 *
	mpPagî
;

6003 
	mnPage
;

6004 *
	m™Ref
;

6005 *
	mzEºMsg
;

6008 #i‚de‡
SQLITE_OMIT_INTEGRITY_CHECK


6012 
	$checkAµídMsg
(

6013 
I¡egrôyCk
 *
pCheck
,

6014 *
zMsg1
,

6015 c⁄° *
zF‹m©
,

6018 
va_li°
 
≠
;

6019 *
zMsg2
;

6020 
	`va_°¨t
(
≠
, 
zF‹m©
);

6021 
zMsg2
 = 
	`sqlôe3VMPrötf
(
zF‹m©
, 
≠
);

6022 
	`va_íd
(
≠
);

6023 if–
zMsg1
==0 ) zMsg1 = "";

6024 if–
pCheck
->
zEºMsg
 ){

6025 *
zOld
 = 
pCheck
->
zEºMsg
;

6026 
pCheck
->
zEºMsg
 = 0;

6027 
	`sqlôe3SëSåög
(&
pCheck
->
zEºMsg
, 
zOld
, "\n", 
zMsg1
, 
zMsg2
, (*)0);

6028 
	`sqlôeFªe
(
zOld
);

6030 
	`sqlôe3SëSåög
(&
pCheck
->
zEºMsg
, 
zMsg1
, 
zMsg2
, (*)0);

6032 
	`sqlôeFªe
(
zMsg2
);

6033 
	}
}

6036 #i‚de‡
SQLITE_OMIT_INTEGRITY_CHECK


6045 
	$checkRef
(
I¡egrôyCk
 *
pCheck
, 
iPage
, *
zC⁄ãxt
){

6046 if–
iPage
==0 )  1;

6047 if–
iPage
>
pCheck
->
nPage
 || iPage<0 ){

6048 
	`checkAµídMsg
(
pCheck
, 
zC⁄ãxt
, "övÆidÖagênumbî %d", 
iPage
);

6051 if–
pCheck
->
™Ref
[
iPage
]==1 ){

6052 
	`checkAµídMsg
(
pCheck
, 
zC⁄ãxt
, "2ndÑe„ªn˚Åÿ∑gê%d", 
iPage
);

6055  (
pCheck
->
™Ref
[
iPage
]++)>1;

6056 
	}
}

6058 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


6064 
	$checkPåm≠
(

6065 
I¡egrôyCk
 *
pCheck
,

6066 
Pgno
 
iChûd
,

6067 
u8
 
eTy≥
,

6068 
Pgno
 
iP¨ít
,

6069 *
zC⁄ãxt


6071 
rc
;

6072 
u8
 
ePåm≠Ty≥
;

6073 
Pgno
 
iPåm≠P¨ít
;

6075 
rc
 = 
	`±rm≠Gë
(
pCheck
->
pBt
, 
iChûd
, &
ePåm≠Ty≥
, &
iPåm≠P¨ít
);

6076 if–
rc
!=
SQLITE_OK
 ){

6077 
	`checkAµídMsg
(
pCheck
, 
zC⁄ãxt
, "FaûedÅÿªadÖåm≠ key=%d", 
iChûd
);

6081 if–
ePåm≠Ty≥
!=
eTy≥
 || 
iPåm≠P¨ít
!=
iP¨ít
 ){

6082 
	`checkAµídMsg
(
pCheck
, 
zC⁄ãxt
,

6084 
iChûd
, 
eTy≥
, 
iP¨ít
, 
ePåm≠Ty≥
, 
iPåm≠P¨ít
);

6086 
	}
}

6093 
	$checkLi°
(

6094 
I¡egrôyCk
 *
pCheck
,

6095 
isFªeLi°
,

6096 
iPage
,

6097 
N
,

6098 *
zC⁄ãxt


6100 
i
;

6101 
ex≥˘ed
 = 
N
;

6102 
iFú°
 = 
iPage
;

6103  
N
-- > 0 ){

6104 *
pOvÊ
;

6105 if–
iPage
<1 ){

6106 
	`checkAµídMsg
(
pCheck
, 
zC⁄ãxt
,

6108 
N
+1, 
ex≥˘ed
, 
iFú°
);

6111 if–
	`checkRef
(
pCheck
, 
iPage
, 
zC⁄ãxt
) ) ;

6112 if–
	`sqlôe3∑gî_gë
(
pCheck
->
pPagî
, (
Pgno
)
iPage
, (**)&
pOvÊ
) ){

6113 
	`checkAµídMsg
(
pCheck
, 
zC⁄ãxt
, "ÁûedÅÿgëÖagê%d", 
iPage
);

6116 if–
isFªeLi°
 ){

6117 
n
 = 
	`gë4byã
(&
pOvÊ
[4]);

6118 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


6119 if–
pCheck
->
pBt
->
autoVacuum
 ){

6120 
	`checkPåm≠
(
pCheck
, 
iPage
, 
PTRMAP_FREEPAGE
, 0, 
zC⁄ãxt
);

6123 if–
n
>
pCheck
->
pBt
->
ußbÀSize
/4-8 ){

6124 
	`checkAµídMsg
(
pCheck
, 
zC⁄ãxt
,

6125 "‰ìli°Üó‡cou¡Åoÿbig o¿∑gê%d", 
iPage
);

6126 
N
--;

6128 
i
=0; i<
n
; i++){

6129 
Pgno
 
iFªePage
 = 
	`gë4byã
(&
pOvÊ
[8+
i
*4]);

6130 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


6131 if–
pCheck
->
pBt
->
autoVacuum
 ){

6132 
	`checkPåm≠
(
pCheck
, 
iFªePage
, 
PTRMAP_FREEPAGE
, 0, 
zC⁄ãxt
);

6135 
	`checkRef
(
pCheck
, 
iFªePage
, 
zC⁄ãxt
);

6137 
N
 -
n
;

6140 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


6146 if–
pCheck
->
pBt
->
autoVacuum
 && 
N
>0 ){

6147 
i
 = 
	`gë4byã
(
pOvÊ
);

6148 
	`checkPåm≠
(
pCheck
, 
i
, 
PTRMAP_OVERFLOW2
, 
iPage
, 
zC⁄ãxt
);

6152 
iPage
 = 
	`gë4byã
(
pOvÊ
);

6153 
	`sqlôe3∑gî_uƒef
(
pOvÊ
);

6155 
	}
}

6158 #i‚de‡
SQLITE_OMIT_INTEGRITY_CHECK


6177 
	$checkTªePage
(

6178 
I¡egrôyCk
 *
pCheck
,

6179 
iPage
,

6180 
MemPage
 *
pP¨ít
,

6181 *
zP¨ítC⁄ãxt
,

6182 *
zLowîBound
,

6183 
nLowî
,

6184 *
zUµîBound
,

6185 
nUµî


6187 
MemPage
 *
pPage
;

6188 
i
, 
rc
, 
dïth
, 
d2
, 
pgno
, 
˙t
;

6189 
hdr
, 
˚ŒSèπ
;

6190 
nCñl
;

6191 
u8
 *
d©a
;

6192 
BtSh¨ed
 *
pBt
;

6193 
ußbÀSize
;

6194 
zC⁄ãxt
[100];

6195 *
hô
;

6197 
	`•rötf
(
zC⁄ãxt
, "Pagê%d: ", 
iPage
);

6201 
pBt
 = 
pCheck
->pBt;

6202 
ußbÀSize
 = 
pBt
->usableSize;

6203 if–
iPage
==0 )  0;

6204 if–
	`checkRef
(
pCheck
, 
iPage
, 
zP¨ítC⁄ãxt
) )  0;

6205 if–(
rc
 = 
	`gëPage
(
pBt
, (
Pgno
)
iPage
, &
pPage
))!=0 ){

6206 
	`checkAµídMsg
(
pCheck
, 
zC⁄ãxt
,

6207 "u«bÀÅÿgëÅhê∑ge.Éº‹ code=%d", 
rc
);

6210 if–(
rc
 = 
	`öôPage
(
pPage
, 
pP¨ít
))!=0 ){

6211 
	`checkAµídMsg
(
pCheck
, 
zC⁄ãxt
, "öôPage(Ëªtu∫†îr‹ codê%d", 
rc
);

6212 
	`ªÀa£Page
(
pPage
);

6218 
dïth
 = 0;

6219 
i
=0; i<
pPage
->
nCñl
; i++){

6220 
u8
 *
pCñl
;

6221 
sz
;

6222 
CñlInfo
 
öfo
;

6226 
	`•rötf
(
zC⁄ãxt
, "O¿åìÖagê%d cñ»%d: ", 
iPage
, 
i
);

6227 
pCñl
 = 
	`födCñl
(
pPage
,
i
);

6228 
	`∑r£CñlPå
(
pPage
, 
pCñl
, &
öfo
);

6229 
sz
 = 
öfo
.
nD©a
;

6230 if–!
pPage
->
ötKey
 ) 
sz
 +
öfo
.
nKey
;

6231 if–
sz
>
öfo
.
nLoˇl
 ){

6232 
nPage
 = (
sz
 - 
öfo
.
nLoˇl
 + 
ußbÀSize
 - 5)/(usableSize - 4);

6233 
Pgno
 
pgnoOvÊ
 = 
	`gë4byã
(&
pCñl
[
öfo
.
iOvîÊow
]);

6234 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


6235 if–
pBt
->
autoVacuum
 ){

6236 
	`checkPåm≠
(
pCheck
, 
pgnoOvÊ
, 
PTRMAP_OVERFLOW1
, 
iPage
, 
zC⁄ãxt
);

6239 
	`checkLi°
(
pCheck
, 0, 
pgnoOvÊ
, 
nPage
, 
zC⁄ãxt
);

6244 if–!
pPage
->
Àaf
 ){

6245 
pgno
 = 
	`gë4byã
(
pCñl
);

6246 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


6247 if–
pBt
->
autoVacuum
 ){

6248 
	`checkPåm≠
(
pCheck
, 
pgno
, 
PTRMAP_BTREE
, 
iPage
, 
zC⁄ãxt
);

6251 
d2
 = 
	`checkTªePage
(
pCheck
,
pgno
,
pPage
,
zC⁄ãxt
,0,0,0,0);

6252 if–
i
>0 && 
d2
!=
dïth
 ){

6253 
	`checkAµídMsg
(
pCheck
, 
zC⁄ãxt
, "ChildÖage depth differs");

6255 
dïth
 = 
d2
;

6258 if–!
pPage
->
Àaf
 ){

6259 
pgno
 = 
	`gë4byã
(&
pPage
->
aD©a
[pPage->
hdrOff£t
+8]);

6260 
	`•rötf
(
zC⁄ãxt
, "O¿∑gê%dáàrighàchûd: ", 
iPage
);

6261 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


6262 if–
pBt
->
autoVacuum
 ){

6263 
	`checkPåm≠
(
pCheck
, 
pgno
, 
PTRMAP_BTREE
, 
iPage
, 0);

6266 
	`checkTªePage
(
pCheck
, 
pgno
, 
pPage
, 
zC⁄ãxt
,0,0,0,0);

6271 
d©a
 = 
pPage
->
aD©a
;

6272 
hdr
 = 
pPage
->
hdrOff£t
;

6273 
hô
 = 
	`sqlôeMÆloc
–
ußbÀSize
 );

6274 if–
hô
 ){

6275 
	`mem£t
(
hô
, 1, 
	`gë2byã
(&
d©a
[
hdr
+5]));

6276 
nCñl
 = 
	`gë2byã
(&
d©a
[
hdr
+3]);

6277 
˚ŒSèπ
 = 
hdr
 + 12 - 4*
pPage
->
Àaf
;

6278 
i
=0; i<
nCñl
; i++){

6279 
pc
 = 
	`gë2byã
(&
d©a
[
˚ŒSèπ
+
i
*2]);

6280 
size
 = 
	`˚ŒSizePå
(
pPage
, &
d©a
[
pc
]);

6281 
j
;

6282 if–(
pc
+
size
-1)>=
ußbÀSize
 ||Öc<0 ){

6283 
	`checkAµídMsg
(
pCheck
, 0,

6284 "C‹ru±i⁄ dëe˘ed i¿˚Œ %d o¿∑gê%d",
i
,
iPage
,0);

6286 
j
=
pc
+
size
-1; j>ıc; j--Ë
hô
[j]++;

6289 
˙t
=0, 
i
=
	`gë2byã
(&
d©a
[
hdr
+1]); i>0 && i<
ußbÀSize
 && cnt<10000;

6290 
˙t
++){

6291 
size
 = 
	`gë2byã
(&
d©a
[
i
+2]);

6292 
j
;

6293 if–(
i
+
size
-1)>=
ußbÀSize
 || i<0 ){

6294 
	`checkAµídMsg
(
pCheck
, 0,

6295 "C‹ru±i⁄ dëe˘ed i¿˚Œ %d o¿∑gê%d",
i
,
iPage
,0);

6297 
j
=
i
+
size
-1; j>=i; j--Ë
hô
[j]++;

6299 
i
 = 
	`gë2byã
(&
d©a
[i]);

6301 
i
=
˙t
=0; i<
ußbÀSize
; i++){

6302 if–
hô
[
i
]==0 ){

6303 
˙t
++;

6304 }if–
hô
[
i
]>1 ){

6305 
	`checkAµídMsg
(
pCheck
, 0,

6306 "Mu…ùÀ u£†f‹ byã %d o‡∑gê%d", 
i
, 
iPage
);

6310 if–
˙t
!=
d©a
[
hdr
+7] ){

6311 
	`checkAµídMsg
(
pCheck
, 0,

6313 
˙t
, 
d©a
[
hdr
+7], 
iPage
);

6316 
	`sqlôeFªe
(
hô
);

6318 
	`ªÀa£Page
(
pPage
);

6319  
dïth
+1;

6320 
	}
}

6323 #i‚de‡
SQLITE_OMIT_INTEGRITY_CHECK


6334 *
	$sqlôe3BåìI¡egrôyCheck
(
Båì
 *
p
, *
aRoŸ
, 
nRoŸ
){

6335 
i
;

6336 
nRef
;

6337 
I¡egrôyCk
 
sCheck
;

6338 
BtSh¨ed
 *
pBt
 = 
p
->pBt;

6340 
nRef
 = *
	`sqlôe3∑gî_°©s
(
pBt
->
pPagî
);

6341 if–
	`lockBåìWôhRëry
(
p
)!=
SQLITE_OK
 ){

6342  
	`sqlôeSåDup
("UnableÅoácquireáÑeadÜock onÅhe database");

6344 
sCheck
.
pBt
 =ÖBt;

6345 
sCheck
.
pPagî
 = 
pBt
->pPager;

6346 
sCheck
.
nPage
 = 
	`sqlôe3∑gî_∑gecou¡
(sCheck.
pPagî
);

6347 if–
sCheck
.
nPage
==0 ){

6348 
	`u∆ockBåìIfUnu£d
(
pBt
);

6351 
sCheck
.
™Ref
 = 
	`sqlôeMÆlocRaw
–(sCheck.
nPage
+1)*(sCheck.anRef[0]) );

6352 if–!
sCheck
.
™Ref
 ){

6353 
	`u∆ockBåìIfUnu£d
(
pBt
);

6354  
	`sqlôe3MPrötf
("UnableÅo malloc %d bytes",

6355 (
sCheck
.
nPage
+1)*(sCheck.
™Ref
[0]));

6357 
i
=0; i<=
sCheck
.
nPage
; i++){ sCheck.
™Ref
[i] = 0; }

6358 
i
 = 
	`PENDING_BYTE_PAGE
(
pBt
);

6359 if–
i
<=
sCheck
.
nPage
 ){

6360 
sCheck
.
™Ref
[
i
] = 1;

6362 
sCheck
.
zEºMsg
 = 0;

6366 
	`checkLi°
(&
sCheck
, 1, 
	`gë4byã
(&
pBt
->
pPage1
->
aD©a
[32]),

6367 
	`gë4byã
(&
pBt
->
pPage1
->
aD©a
[36]), "Main freelist: ");

6371 
i
=0; i<
nRoŸ
; i++){

6372 if–
aRoŸ
[
i
]==0 ) ;

6373 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


6374 if–
pBt
->
autoVacuum
 && 
aRoŸ
[
i
]>1 ){

6375 
	`checkPåm≠
(&
sCheck
, 
aRoŸ
[
i
], 
PTRMAP_ROOTPAGE
, 0, 0);

6378 
	`checkTªePage
(&
sCheck
, 
aRoŸ
[
i
], 0, "List ofÅreeÑoots: ", 0,0,0,0);

6383 
i
=1; i<=
sCheck
.
nPage
; i++){

6384 #ifde‡
SQLITE_OMIT_AUTOVACUUM


6385 if–
sCheck
.
™Ref
[
i
]==0 ){

6386 
	`checkAµídMsg
(&
sCheck
, 0, "Pagê%d i†√vî u£d", 
i
);

6392 if–
sCheck
.
™Ref
[
i
]==0 &&

6393 (
	`PTRMAP_PAGENO
(
pBt
->
ußbÀSize
, 
i
)!=ò|| !pBt->
autoVacuum
) ){

6394 
	`checkAµídMsg
(&
sCheck
, 0, "Pagê%d i†√vî u£d", 
i
);

6396 if–
sCheck
.
™Ref
[
i
]!=0 &&

6397 (
	`PTRMAP_PAGENO
(
pBt
->
ußbÀSize
, 
i
)==ò&&ÖBt->
autoVacuum
) ){

6398 
	`checkAµídMsg
(&
sCheck
, 0, "Poöã∏m≠Öagê%d i†ª„ªn˚d", 
i
);

6405 
	`u∆ockBåìIfUnu£d
(
pBt
);

6406 if–
nRef
 !*
	`sqlôe3∑gî_°©s
(
pBt
->
pPagî
) ){

6407 
	`checkAµídMsg
(&
sCheck
, 0,

6409 
nRef
, *
	`sqlôe3∑gî_°©s
(
pBt
->
pPagî
)

6415 
	`sqlôeFªe
(
sCheck
.
™Ref
);

6416  
sCheck
.
zEºMsg
;

6417 
	}
}

6423 c⁄° *
	$sqlôe3BåìGëFûíame
(
Båì
 *
p
){

6424 
	`as£π
–
p
->
pBt
->
pPagî
!=0 );

6425  
	`sqlôe3∑gî_fûíame
(
p
->
pBt
->
pPagî
);

6426 
	}
}

6431 c⁄° *
	$sqlôe3BåìGëDú«me
(
Båì
 *
p
){

6432 
	`as£π
–
p
->
pBt
->
pPagî
!=0 );

6433  
	`sqlôe3∑gî_dú«me
(
p
->
pBt
->
pPagî
);

6434 
	}
}

6441 c⁄° *
	$sqlôe3BåìGëJou∫Æ«me
(
Båì
 *
p
){

6442 
	`as£π
–
p
->
pBt
->
pPagî
!=0 );

6443  
	`sqlôe3∑gî_jou∫Æ«me
(
p
->
pBt
->
pPagî
);

6444 
	}
}

6446 #i‚de‡
SQLITE_OMIT_VACUUM


6454 
	$sqlôe3BåìC›yFûe
(
Båì
 *
pTo
, Båì *
pFrom
){

6455 
rc
 = 
SQLITE_OK
;

6456 
Pgno
 
i
, 
nPage
, 
nToPage
, 
iSkù
;

6458 
BtSh¨ed
 *
pBtTo
 = 
pTo
->
pBt
;

6459 
BtSh¨ed
 *
pBtFrom
 = 
pFrom
->
pBt
;

6461 if–
pTo
->
öTøns
!=
TRANS_WRITE
 || 
pFrom
->inTrans!=TRANS_WRITE ){

6462  
SQLITE_ERROR
;

6464 if–
pBtTo
->
pCurs‹
 )  
SQLITE_BUSY
;

6465 
nToPage
 = 
	`sqlôe3∑gî_∑gecou¡
(
pBtTo
->
pPagî
);

6466 
nPage
 = 
	`sqlôe3∑gî_∑gecou¡
(
pBtFrom
->
pPagî
);

6467 
iSkù
 = 
	`PENDING_BYTE_PAGE
(
pBtTo
);

6468 
i
=1; 
rc
==
SQLITE_OK
 && i<=
nPage
; i++){

6469 *
pPage
;

6470 if–
i
==
iSkù
 ) ;

6471 
rc
 = 
	`sqlôe3∑gî_gë
(
pBtFrom
->
pPagî
, 
i
, &
pPage
);

6472 if–
rc
 ) ;

6473 
rc
 = 
	`sqlôe3∑gî_ovîwrôe
(
pBtTo
->
pPagî
, 
i
, 
pPage
);

6474 if–
rc
 ) ;

6475 
	`sqlôe3∑gî_uƒef
(
pPage
);

6477 
i
=
nPage
+1; 
rc
==
SQLITE_OK
 && i<=
nToPage
; i++){

6478 *
pPage
;

6479 if–
i
==
iSkù
 ) ;

6480 
rc
 = 
	`sqlôe3∑gî_gë
(
pBtTo
->
pPagî
, 
i
, &
pPage
);

6481 if–
rc
 ) ;

6482 
rc
 = 
	`sqlôe3∑gî_wrôe
(
pPage
);

6483 
	`sqlôe3∑gî_uƒef
(
pPage
);

6484 
	`sqlôe3∑gî_d⁄t_wrôe
(
pBtTo
->
pPagî
, 
i
);

6486 if–!
rc
 && 
nPage
<
nToPage
 ){

6487 
rc
 = 
	`sqlôe3∑gî_åunˇã
(
pBtTo
->
pPagî
, 
nPage
);

6489 if–
rc
 ){

6490 
	`sqlôe3BåìRﬁlback
(
pTo
);

6492  
rc
;

6493 
	}
}

6499 
	$sqlôe3BåìIsInTøns
(
Båì
 *
p
){

6500  (
p
 && (p->
öTøns
==
TRANS_WRITE
));

6501 
	}
}

6506 
	$sqlôe3BåìIsInStmt
(
Båì
 *
p
){

6507  (
p
->
pBt
 &&Ö->pBt->
öStmt
);

6508 
	}
}

6524 
	$sqlôe3BåìSync
(
Båì
 *
p
, c⁄° *
zMa°î
){

6525 if–
p
->
öTøns
==
TRANS_WRITE
 ){

6526 
BtSh¨ed
 *
pBt
 = 
p
->pBt;

6527 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


6528 
Pgno
 
nTrunc
 = 0;

6529 if–
pBt
->
autoVacuum
 ){

6530 
rc
 = 
	`autoVacuumCommô
(
pBt
, &
nTrunc
);

6531 if–
rc
!=
SQLITE_OK
 ) Ñc;

6533  
	`sqlôe3∑gî_sync
(
pBt
->
pPagî
, 
zMa°î
, 
nTrunc
);

6535  
	`sqlôe3∑gî_sync
(
pBt
->
pPagî
, 
zMa°î
, 0);

6537  
SQLITE_OK
;

6538 
	}
}

6556 *
sqlôe3BåìSchema
(
Båì
 *
p
, 
nByãs
, (*
xFªe
)(*)){

6557 
BtSh¨ed
 *
pBt
 = 
p
->pBt;

6558 if–!
pBt
->
pSchema
 ){

6559 
pBt
->
pSchema
 = 
	`sqlôeMÆloc
(
nByãs
);

6560 
pBt
->
xFªeSchema
 = 
xFªe
;

6562  
pBt
->
pSchema
;

6563 
	}
}

6569 
	$sqlôe3BåìSchemaLocked
(
Båì
 *
p
){

6570  (
	`quîyTabÀLock
(
p
, 
MASTER_ROOT
, 
READ_LOCK
)!=
SQLITE_OK
);

6571 
	}
}

6573 
	$sqlôe3BåìLockTabÀ
(
Båì
 *
p
, 
iTab
, 
u8
 
isWrôeLock
){

6574 
rc
 = 
SQLITE_OK
;

6575 #i‚de‡
SQLITE_OMIT_SHARED_CACHE


6576 
u8
 
lockTy≥
 = (
isWrôeLock
?
WRITE_LOCK
:
READ_LOCK
);

6577 
rc
 = 
	`quîyTabÀLock
(
p
, 
iTab
, 
lockTy≥
);

6578 if–
rc
==
SQLITE_OK
 ){

6579 
rc
 = 
	`lockTabÀ
(
p
, 
iTab
, 
lockTy≥
);

6582  
rc
;

6583 
	}
}

6590 #i‡
deföed
(
SQLITE_DEBUG
Ë&& deföed(
TCLSH
)

6591 
	~<t˛.h
>

6592 
	$sqlôe3_sh¨ed_ˇche_ªp‹t
(

6593 * 
˛õ¡D©a
,

6594 
T˛_I¡îp
 *
öãΩ
,

6595 
objc
,

6596 
T˛_Obj
 *
CONST
 
objv
[]

6598 c⁄° 
ThªadD©a
 *
pTd
 = 
	`sqlôe3ThªadD©aRódO∆y
();

6599 if–
pTd
->
u£Sh¨edD©a
 ){

6600 
BtSh¨ed
 *
pBt
;

6601 
T˛_Obj
 *
pRë
 = 
	`T˛_NewObj
();

6602 
pBt
=
pTd
->
pBåì
;ÖBt;ÖBtıBt->
pNext
){

6603 c⁄° *
zFûe
 = 
	`sqlôe3∑gî_fûíame
(
pBt
->
pPagî
);

6604 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pRë
, 
	`T˛_NewSåögObj
(
zFûe
, -1));

6605 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pRë
, 
	`T˛_NewI¡Obj
(
pBt
->
nRef
));

6607 
	`T˛_SëObjResu…
(
öãΩ
, 
pRë
);

6609  
TCL_OK
;

6610 
	}
}

	@btree.h

18 #i‚de‡
_BTREE_H_


19 
	#_BTREE_H_


	)

24 
	#SQLITE_N_BTREE_META
 10

	)

30 #i‚de‡
SQLITE_DEFAULT_AUTOVACUUM


31 
	#SQLITE_DEFAULT_AUTOVACUUM
 0

	)

37 
Båì
 
	tBåì
;

38 
BtCurs‹
 
	tBtCurs‹
;

39 
BtSh¨ed
 
	tBtSh¨ed
;

42 
sqlôe3BåìO≥n
(

43 c⁄° *
zFûíame
,

44 
sqlôe3
 *
db
,

45 
Båì
 **,

46 
Êags


55 
	#BTREE_OMIT_JOURNAL
 1

	)

56 
	#BTREE_NO_READLOCK
 2

	)

57 
	#BTREE_MEMORY
 4

	)

59 
sqlôe3BåìClo£
(
Båì
*);

60 
sqlôe3BåìSëBusyH™dÀr
(
Båì
*,
BusyH™dÀr
*);

61 
sqlôe3BåìSëCacheSize
(
Båì
*,);

62 
sqlôe3BåìSëSa„tyLevñ
(
Båì
*,);

63 
sqlôe3BåìSyncDißbÀd
(
Båì
*);

64 
sqlôe3BåìSëPageSize
(
Båì
*,,);

65 
sqlôe3BåìGëPageSize
(
Båì
*);

66 
sqlôe3BåìGëRe£rve
(
Båì
*);

67 
sqlôe3BåìSëAutoVacuum
(
Båì
 *, );

68 
sqlôe3BåìGëAutoVacuum
(
Båì
 *);

69 
sqlôe3BåìBegöTøns
(
Båì
*,);

70 
sqlôe3BåìCommô
(
Båì
*);

71 
sqlôe3BåìRﬁlback
(
Båì
*);

72 
sqlôe3BåìBegöStmt
(
Båì
*);

73 
sqlôe3BåìCommôStmt
(
Båì
*);

74 
sqlôe3BåìRﬁlbackStmt
(
Båì
*);

75 
sqlôe3BåìCª©eTabÀ
(
Båì
*, *, 
Êags
);

76 
sqlôe3BåìIsInTøns
(
Båì
*);

77 
sqlôe3BåìIsInStmt
(
Båì
*);

78 
sqlôe3BåìSync
(
Båì
*, c⁄° *
zMa°î
);

79 *
sqlôe3BåìSchema
(
Båì
 *, , (*)(*));

80 
	`sqlôe3BåìSchemaLocked
(
Båì
 *);

81 
	`sqlôe3BåìLockTabÀ
(
Båì
 *, , 
u8
);

83 c⁄° *
	`sqlôe3BåìGëFûíame
(
Båì
 *);

84 c⁄° *
	`sqlôe3BåìGëDú«me
(
Båì
 *);

85 c⁄° *
	`sqlôe3BåìGëJou∫Æ«me
(
Båì
 *);

86 
	`sqlôe3BåìC›yFûe
(
Båì
 *, Btree *);

91 
	#BTREE_INTKEY
 1

	)

92 
	#BTREE_ZERODATA
 2

	)

93 
	#BTREE_LEAFDATA
 4

	)

95 
	`sqlôe3BåìDr›TabÀ
(
Båì
*, , *);

96 
	`sqlôe3BåìCÀ¨TabÀ
(
Båì
*, );

97 
	`sqlôe3BåìGëMëa
(
Båì
*, 
idx
, 
u32
 *
pVÆue
);

98 
	`sqlôe3BåìUpd©eMëa
(
Båì
*, 
idx
, 
u32
 
vÆue
);

100 
	`sqlôe3BåìCurs‹
(

101 
Båì
*,

102 
iTabÀ
,

103 
wrFœg
,

106 
BtCurs‹
 **
µCurs‹


109 
	`sqlôe3BåìSëCom∑ª
(

110 
BtCurs‹
 *,

115 
	`sqlôe3BåìClo£Curs‹
(
BtCurs‹
*);

116 
	`sqlôe3BåìMovëo
(
BtCurs‹
*, c⁄° *
pKey
, 
i64
 
nKey
, *
pRes
);

117 
	`sqlôe3BåìDñëe
(
BtCurs‹
*);

118 
	`sqlôe3BåìIn£π
(
BtCurs‹
*, c⁄° *
pKey
, 
i64
 
nKey
,

119 c⁄° *
pD©a
, 
nD©a
);

120 
	`sqlôe3BåìFú°
(
BtCurs‹
*, *
pRes
);

121 
	`sqlôe3BåìLa°
(
BtCurs‹
*, *
pRes
);

122 
	`sqlôe3BåìNext
(
BtCurs‹
*, *
pRes
);

123 
	`sqlôe3BåìEof
(
BtCurs‹
*);

124 
	`sqlôe3BåìFœgs
(
BtCurs‹
*);

125 
	`sqlôe3BåìPªvious
(
BtCurs‹
*, *
pRes
);

126 
	`sqlôe3BåìKeySize
(
BtCurs‹
*, 
i64
 *
pSize
);

127 
	`sqlôe3BåìKey
(
BtCurs‹
*, 
u32
 
off£t
, u32 
amt
, *);

128 c⁄° *
	`sqlôe3BåìKeyFëch
(
BtCurs‹
*, *
pAmt
);

129 c⁄° *
	`sqlôe3BåìD©aFëch
(
BtCurs‹
*, *
pAmt
);

130 
	`sqlôe3BåìD©aSize
(
BtCurs‹
*, 
u32
 *
pSize
);

131 
	`sqlôe3BåìD©a
(
BtCurs‹
*, 
u32
 
off£t
, u32 
amt
, *);

133 *
	`sqlôe3BåìI¡egrôyCheck
(
Båì
*, *
aRoŸ
, 
nRoŸ
);

134 
Pagî
 *
	`sqlôe3BåìPagî
(
Båì
*);

137 #ifde‡
SQLITE_TEST


138 
	`sqlôe3BåìCurs‹Info
(
BtCurs‹
*, *, );

139 
	`sqlôe3BåìCurs‹Li°
(
Båì
*);

142 #ifde‡
SQLITE_DEBUG


143 
	`sqlôe3BåìPageDump
(
Båì
*, , 
ªcursive
);

145 
	#sqlôe3BåìPageDump
(
X
,
Y
,
Z
Ë
SQLITE_OK


	)

	@build.c

27 
	~"sqlôeI¡.h
"

28 
	~<˘y≥.h
>

34 
	$sqlôe3BegöP¨£
(
P¨£
 *
pP¨£
, 
ex∂aöFœg
){

35 
pP¨£
->
ex∂aö
 = 
ex∂aöFœg
;

36 
pP¨£
->
nV¨
 = 0;

37 
	}
}

39 #i‚de‡
SQLITE_OMIT_SHARED_CACHE


44 
	sTabÀLock
 {

45 
	miDb
;

46 
	miTab
;

47 
u8
 
	misWrôeLock
;

48 c⁄° *
	mzName
;

59 
	$sqlôe3TabÀLock
(

60 
P¨£
 *
pP¨£
,

61 
iDb
,

62 
iTab
,

63 
u8
 
isWrôeLock
,

64 c⁄° *
zName


66 
i
;

67 
nByãs
;

68 
TabÀLock
 *
p
;

70 if–0==
	`sqlôe3ThªadD©aRódO∆y
()->
u£Sh¨edD©a
 || 
iDb
<0 ){

74 
i
=0; i<
pP¨£
->
nTabÀLock
; i++){

75 
p
 = &
pP¨£
->
aTabÀLock
[
i
];

76 if–
p
->
iDb
==iDb &&Ö->
iTab
==iTab ){

77 
p
->
isWrôeLock
 = (p->isWriteLock || isWriteLock);

82 
nByãs
 = (
TabÀLock
Ë* (
pP¨£
->
nTabÀLock
+1);

83 
	`sqlôeRóŒocOrFªe
((**)&
pP¨£
->
aTabÀLock
, 
nByãs
);

84 if–
pP¨£
->
aTabÀLock
 ){

85 
p
 = &
pP¨£
->
aTabÀLock
[pP¨£->
nTabÀLock
++];

86 
p
->
iDb
 = iDb;

87 
p
->
iTab
 = iTab;

88 
p
->
isWrôeLock
 = isWriteLock;

89 
p
->
zName
 = zName;

91 
	}
}

97 
	$codeTabÀLocks
(
P¨£
 *
pP¨£
){

98 
i
;

99 
Vdbe
 *
pVdbe
;

100 
	`as£π
–
	`sqlôe3ThªadD©aRódO∆y
()->
u£Sh¨edD©a
 || 
pP¨£
->
nTabÀLock
==0 );

102 if–0==(
pVdbe
 = 
	`sqlôe3GëVdbe
(
pP¨£
)) ){

106 
i
=0; i<
pP¨£
->
nTabÀLock
; i++){

107 
TabÀLock
 *
p
 = &
pP¨£
->
aTabÀLock
[
i
];

108 
p1
 = 
p
->
iDb
;

109 if–
p
->
isWrôeLock
 ){

110 
p1
 = -1*(p1+1);

112 
	`sqlôe3VdbeOp3
(
pVdbe
, 
OP_TabÀLock
, 
p1
, 
p
->
iTab
,Ö->
zName
, 
P3_STATIC
);

114 
	}
}

116 
	#codeTabÀLocks
(
x
)

	)

129 
	$sqlôe3FöishCodög
(
P¨£
 *
pP¨£
){

130 
sqlôe3
 *
db
;

131 
Vdbe
 *
v
;

133 if–
	`sqlôe3MÆlocFaûed
() ) ;

134 if–
pP¨£
->
√°ed
 ) ;

135 if–!
pP¨£
->
pVdbe
 ){

136 if–
pP¨£
->
rc
==
SQLITE_OK
 &&ÖP¨£->
nEº
 ){

137 
pP¨£
->
rc
 = 
SQLITE_ERROR
;

145 
db
 = 
pP¨£
->db;

146 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

147 if–
v
 ){

148 
	`sqlôe3VdbeAddOp
(
v
, 
OP_HÆt
, 0, 0);

156 if–
pP¨£
->
cookõGŸo
>0 ){

157 
u32
 
mask
;

158 
iDb
;

159 
	`sqlôe3VdbeJumpHîe
(
v
, 
pP¨£
->
cookõGŸo
-1);

160 
iDb
=0, 
mask
=1; iDb<
db
->
nDb
; mask<<=1, iDb++){

161 if–(
mask
 & 
pP¨£
->
cookõMask
)==0 ) ;

162 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Tønß˘i⁄
, 
iDb
, (
mask
 & 
pP¨£
->
wrôeMask
)!=0);

163 
	`sqlôe3VdbeAddOp
(
v
, 
OP_VîifyCookõ
, 
iDb
, 
pP¨£
->
cookõVÆue
[iDb]);

170 
	`codeTabÀLocks
(
pP¨£
);

171 
	`sqlôe3VdbeAddOp
(
v
, 
OP_GŸo
, 0, 
pP¨£
->
cookõGŸo
);

174 #i‚de‡
SQLITE_OMIT_TRACE


181 
	`sqlôe3VdbeOp3
(
v
, 
OP_No›
, 0, 0, 
pP¨£
->
zSql
,ÖP¨£->
zTaû
-pParse->zSql);

188 if–
v
 && 
pP¨£
->
nEº
==0 ){

189 
FILE
 *
åa˚
 = (
db
->
Êags
 & 
SQLITE_VdbeTø˚
)!=0 ? 
°dout
 : 0;

190 
	`sqlôe3VdbeTø˚
(
v
, 
åa˚
);

191 
	`sqlôe3VdbeMakeRódy
(
v
, 
pP¨£
->
nV¨
,ÖP¨£->
nMem
+3,

192 
pP¨£
->
nTab
+3,ÖP¨£->
ex∂aö
);

193 
pP¨£
->
rc
 = 
SQLITE_DONE
;

194 
pP¨£
->
cﬁNamesSë
 = 0;

195 }if–
pP¨£
->
rc
==
SQLITE_OK
 ){

196 
pP¨£
->
rc
 = 
SQLITE_ERROR
;

198 
pP¨£
->
nTab
 = 0;

199 
pP¨£
->
nMem
 = 0;

200 
pP¨£
->
nSë
 = 0;

201 
pP¨£
->
nV¨
 = 0;

202 
pP¨£
->
cookõMask
 = 0;

203 
pP¨£
->
cookõGŸo
 = 0;

204 
	}
}

218 
	$sqlôe3Ne°edP¨£
(
P¨£
 *
pP¨£
, c⁄° *
zF‹m©
, ...){

219 
va_li°
 
≠
;

220 *
zSql
;

221 
	#SAVE_SZ
 ((
P¨£
Ë- 
	`off£tof
(P¨£,
nV¨
))

	)

222 
ßveBuf
[
SAVE_SZ
];

224 if–
pP¨£
->
nEº
 ) ;

225 
	`as£π
–
pP¨£
->
√°ed
<10 );

226 
	`va_°¨t
(
≠
, 
zF‹m©
);

227 
zSql
 = 
	`sqlôe3VMPrötf
(
zF‹m©
, 
≠
);

228 
	`va_íd
(
≠
);

229 if–
zSql
==0 ){

232 
pP¨£
->
√°ed
++;

233 
	`mem˝y
(
ßveBuf
, &
pP¨£
->
nV¨
, 
SAVE_SZ
);

234 
	`mem£t
(&
pP¨£
->
nV¨
, 0, 
SAVE_SZ
);

235 
	`sqlôe3RunP¨£r
(
pP¨£
, 
zSql
, 0);

236 
	`sqlôeFªe
(
zSql
);

237 
	`mem˝y
(&
pP¨£
->
nV¨
, 
ßveBuf
, 
SAVE_SZ
);

238 
pP¨£
->
√°ed
--;

239 
	}
}

253 
TabÀ
 *
	$sqlôe3FödTabÀ
(
sqlôe3
 *
db
, c⁄° *
zName
, c⁄° *
zD©aba£
){

254 
TabÀ
 *
p
 = 0;

255 
i
;

256 
	`as£π
–
zName
!=0 );

257 
i
=
OMIT_TEMPDB
; i<
db
->
nDb
; i++){

258 
j
 = (
i
<2) ? i^1 : i;

259 if–
zD©aba£
!=0 && 
	`sqlôe3SåICmp
(zD©aba£, 
db
->
aDb
[
j
].
zName
) ) ;

260 
p
 = 
	`sqlôe3HashFöd
(&
db
->
aDb
[
j
].
pSchema
->
tblHash
, 
zName
, 
	`°æí
(zName)+1);

261 if–
p
 ) ;

263  
p
;

264 
	}
}

276 
TabÀ
 *
	$sqlôe3LoˇãTabÀ
(
P¨£
 *
pP¨£
, c⁄° *
zName
, c⁄° *
zDba£
){

277 
TabÀ
 *
p
;

281 if–
SQLITE_OK
!=
	`sqlôe3RódSchema
(
pP¨£
) ){

285 
p
 = 
	`sqlôe3FödTabÀ
(
pP¨£
->
db
, 
zName
, 
zDba£
);

286 if–
p
==0 ){

287 if–
zDba£
 ){

288 
	`sqlôe3Eº‹Msg
(
pP¨£
, "nÿsuchÅabÀ: %s.%s", 
zDba£
, 
zName
);

290 
	`sqlôe3Eº‹Msg
(
pP¨£
, "nÿsuchÅabÀ: %s", 
zName
);

292 
pP¨£
->
checkSchema
 = 1;

294  
p
;

295 
	}
}

309 
Index
 *
	$sqlôe3FödIndex
(
sqlôe3
 *
db
, c⁄° *
zName
, c⁄° *
zDb
){

310 
Index
 *
p
 = 0;

311 
i
;

312 
i
=
OMIT_TEMPDB
; i<
db
->
nDb
; i++){

313 
j
 = (
i
<2) ? i^1 : i;

314 
Schema
 *
pSchema
 = 
db
->
aDb
[
j
].pSchema;

315 if–
zDb
 && 
	`sqlôe3SåICmp
(zDb, 
db
->
aDb
[
j
].
zName
) ) ;

316 
	`as£π
–
pSchema
 || (
j
==1 && !
db
->
aDb
[1].
pBt
) );

317 if–
pSchema
 ){

318 
p
 = 
	`sqlôe3HashFöd
(&
pSchema
->
idxHash
, 
zName
, 
	`°æí
(zName)+1);

320 if–
p
 ) ;

322  
p
;

323 
	}
}

328 
	$‰ìIndex
(
Index
 *
p
){

329 
	`sqlôeFªe
(
p
->
zCﬁAff
);

330 
	`sqlôeFªe
(
p
);

331 
	}
}

341 
	$sqlôeDñëeIndex
(
sqlôe3
 *
db
, 
Index
 *
p
){

342 
Index
 *
pOld
;

343 c⁄° *
zName
 = 
p
->zName;

345 
pOld
 = 
	`sqlôe3HashIn£π
(&
p
->
pSchema
->
idxHash
, 
zName
, 
	`°æí
( zName)+1, 0);

346 
	`as£π
–
pOld
==0 ||ÖOld==
p
 );

347 
	`‰ìIndex
(
p
);

348 
	}
}

356 
	$sqlôe3U∆ökAndDñëeIndex
(
sqlôe3
 *
db
, 
iDb
, c⁄° *
zIdxName
){

357 
Index
 *
pIndex
;

358 
Àn
;

359 
Hash
 *
pHash
 = &
db
->
aDb
[
iDb
].
pSchema
->
idxHash
;

361 
Àn
 = 
	`°æí
(
zIdxName
);

362 
pIndex
 = 
	`sqlôe3HashIn£π
(
pHash
, 
zIdxName
, 
Àn
+1, 0);

363 if–
pIndex
 ){

364 if–
pIndex
->
pTabÀ
->pIndex==pIndex ){

365 
pIndex
->
pTabÀ
->pIndex =ÖIndex->
pNext
;

367 
Index
 *
p
;

368 
p
=
pIndex
->
pTabÀ
->pIndex;Ö &&Ö->
pNext
!=pIndex;Ö=p->pNext){}

369 if–
p
 &&Ö->
pNext
==
pIndex
 ){

370 
p
->
pNext
 = 
pIndex
->pNext;

373 
	`‰ìIndex
(
pIndex
);

375 
db
->
Êags
 |
SQLITE_I¡înCh™ges
;

376 
	}
}

389 
	$sqlôe3Re£tI¡î«lSchema
(
sqlôe3
 *
db
, 
iDb
){

390 
i
, 
j
;

392 
	`as£π
–
iDb
>=0 && iDb<
db
->
nDb
 );

393 
i
=
iDb
; i<
db
->
nDb
; i++){

394 
Db
 *
pDb
 = &
db
->
aDb
[
i
];

395 if–
pDb
->
pSchema
 ){

396 
	`sqlôe3SchemaFªe
(
pDb
->
pSchema
);

398 if–
iDb
>0 ) ;

400 
	`as£π
–
iDb
==0 );

401 
db
->
Êags
 &~
SQLITE_I¡înCh™ges
;

409 
i
=0; i<
db
->
nDb
; i++){

410 
Db
 *
pDb
 = &
db
->
aDb
[
i
];

411 if–
pDb
->
pBt
==0 ){

412 if–
pDb
->
pAux
 &&ÖDb->
xFªeAux
 )ÖDb->
	`xFªeAux
(pDb->pAux);

413 
pDb
->
pAux
 = 0;

416 
i
=
j
=2; i<
db
->
nDb
; i++){

417 
Db
 *
pDb
 = &
db
->
aDb
[
i
];

418 if–
pDb
->
pBt
==0 ){

419 
	`sqlôeFªe
(
pDb
->
zName
);

420 
pDb
->
zName
 = 0;

423 if–
j
<
i
 ){

424 
db
->
aDb
[
j
] = db->aDb[
i
];

426 
j
++;

428 
	`mem£t
(&
db
->
aDb
[
j
], 0, (db->
nDb
-j)*(db->aDb[j]));

429 
db
->
nDb
 = 
j
;

430 if–
db
->
nDb
<=2 && db->
aDb
!=db->
aDbSètic
 ){

431 
	`mem˝y
(
db
->
aDbSètic
, db->
aDb
, 2*(db->aDb[0]));

432 
	`sqlôeFªe
(
db
->
aDb
);

433 
db
->
aDb
 = db->
aDbSètic
;

435 
	}
}

442 
	$sqlôe3RﬁlbackI¡î«lCh™ges
(
sqlôe3
 *
db
){

443 if–
db
->
Êags
 & 
SQLITE_I¡înCh™ges
 ){

444 
	`sqlôe3Re£tI¡î«lSchema
(
db
, 0);

446 
	}
}

451 
	$sqlôe3CommôI¡î«lCh™ges
(
sqlôe3
 *
db
){

452 
db
->
Êags
 &~
SQLITE_I¡înCh™ges
;

453 
	}
}

458 
	$sqlôeRe£tCﬁumnNames
(
TabÀ
 *
pTabÀ
){

459 
i
;

460 
Cﬁumn
 *
pCﬁ
;

461 
	`as£π
–
pTabÀ
!=0 );

462 if–(
pCﬁ
 = 
pTabÀ
->
aCﬁ
)!=0 ){

463 
i
=0; i<
pTabÀ
->
nCﬁ
; i++, 
pCﬁ
++){

464 
	`sqlôeFªe
(
pCﬁ
->
zName
);

465 
	`sqlôe3Ex¥Dñëe
(
pCﬁ
->
pDÊt
);

466 
	`sqlôeFªe
(
pCﬁ
->
zTy≥
);

467 
	`sqlôeFªe
(
pCﬁ
->
zCﬁl
);

469 
	`sqlôeFªe
(
pTabÀ
->
aCﬁ
);

471 
pTabÀ
->
aCﬁ
 = 0;

472 
pTabÀ
->
nCﬁ
 = 0;

473 
	}
}

490 
	$sqlôe3DñëeTabÀ
(
sqlôe3
 *
db
, 
TabÀ
 *
pTabÀ
){

491 
Index
 *
pIndex
, *
pNext
;

492 
FKey
 *
pFKey
, *
pNextFKey
;

494 
db
 = 0;

496 if–
pTabÀ
==0 ) ;

499 
pTabÀ
->
nRef
--;

500 if–
pTabÀ
->
nRef
>0 ){

503 
	`as£π
–
pTabÀ
->
nRef
==0 );

507 
pIndex
 = 
pTabÀ
->pIndex;ÖIndex;ÖIndex=
pNext
){

508 
pNext
 = 
pIndex
->pNext;

509 
	`as£π
–
pIndex
->
pSchema
==
pTabÀ
->pSchema );

510 
	`sqlôeDñëeIndex
(
db
, 
pIndex
);

513 #i‚de‡
SQLITE_OMIT_FOREIGN_KEY


517 
pFKey
=
pTabÀ
->pFKey;ÖFKey;ÖFKey=
pNextFKey
){

518 
pNextFKey
 = 
pFKey
->
pNextFrom
;

519 
	`as£π
–
	`sqlôe3HashFöd
(&
pTabÀ
->
pSchema
->
aFKey
,

520 
pFKey
->
zTo
, 
	`°æí
(pFKey->zTo)+1)!=pFKey );

521 
	`sqlôeFªe
(
pFKey
);

527 
	`sqlôeRe£tCﬁumnNames
(
pTabÀ
);

528 
	`sqlôeFªe
(
pTabÀ
->
zName
);

529 
	`sqlôeFªe
(
pTabÀ
->
zCﬁAff
);

530 
	`sqlôe3Sñe˘Dñëe
(
pTabÀ
->
pSñe˘
);

531 #i‚de‡
SQLITE_OMIT_CHECK


532 
	`sqlôe3Ex¥Dñëe
(
pTabÀ
->
pCheck
);

534 
	`sqlôeFªe
(
pTabÀ
);

535 
	}
}

541 
	$sqlôe3U∆ökAndDñëeTabÀ
(
sqlôe3
 *
db
, 
iDb
, c⁄° *
zTabName
){

542 
TabÀ
 *
p
;

543 
FKey
 *
pF1
, *
pF2
;

544 
Db
 *
pDb
;

546 
	`as£π
–
db
!=0 );

547 
	`as£π
–
iDb
>=0 && iDb<
db
->
nDb
 );

548 
	`as£π
–
zTabName
 && zTabName[0] );

549 
pDb
 = &
db
->
aDb
[
iDb
];

550 
p
 = 
	`sqlôe3HashIn£π
(&
pDb
->
pSchema
->
tblHash
, 
zTabName
, 
	`°æí
(zTabName)+1,0);

551 if–
p
 ){

552 #i‚de‡
SQLITE_OMIT_FOREIGN_KEY


553 
pF1
=
p
->
pFKey
;ÖF1;ÖF1ıF1->
pNextFrom
){

554 
nTo
 = 
	`°æí
(
pF1
->
zTo
) + 1;

555 
pF2
 = 
	`sqlôe3HashFöd
(&
pDb
->
pSchema
->
aFKey
, 
pF1
->
zTo
, 
nTo
);

556 if–
pF2
==
pF1
 ){

557 
	`sqlôe3HashIn£π
(&
pDb
->
pSchema
->
aFKey
, 
pF1
->
zTo
, 
nTo
,ÖF1->
pNextTo
);

559  
pF2
 &&ÖF2->
pNextTo
!=
pF1
 ){ÖF2=pF2->pNextTo; }

560 if–
pF2
 ){

561 
pF2
->
pNextTo
 = 
pF1
->pNextTo;

566 
	`sqlôe3DñëeTabÀ
(
db
, 
p
);

568 
db
->
Êags
 |
SQLITE_I¡înCh™ges
;

569 
	}
}

581 *
	$sqlôe3NameFromTokí
(
Tokí
 *
pName
){

582 *
zName
;

583 if–
pName
 ){

584 
zName
 = 
	`sqlôeSåNDup
((*)
pName
->
z
,ÖName->
n
);

585 
	`sqlôe3DequŸe
(
zName
);

587 
zName
 = 0;

589  
zName
;

590 
	}
}

596 
	$sqlôe3O≥nMa°îTabÀ
(
P¨£
 *
p
, 
iDb
){

597 
Vdbe
 *
v
 = 
	`sqlôe3GëVdbe
(
p
);

598 
	`sqlôe3TabÀLock
(
p
, 
iDb
, 
MASTER_ROOT
, 1, 
	`SCHEMA_TABLE
(iDb));

599 
	`sqlôe3VdbeAddOp
(
v
, 
OP_I¡egî
, 
iDb
, 0);

600 
	`sqlôe3VdbeAddOp
(
v
, 
OP_O≥nWrôe
, 0, 
MASTER_ROOT
);

601 
	`sqlôe3VdbeAddOp
(
v
, 
OP_SëNumCﬁumns
, 0, 5);

602 
	}
}

610 
	$sqlôe3FödDb
(
sqlôe3
 *
db
, 
Tokí
 *
pName
){

611 
i
 = -1;

612 
n
;

613 
Db
 *
pDb
;

614 *
zName
;

616 
zName
 = 
	`sqlôe3NameFromTokí
(
pName
);

617 if–
zName
 ){

618 
n
 = 
	`°æí
(
zName
);

619 
i
=(
db
->
nDb
-1), 
pDb
=&db->
aDb
[i]; i>=0; i--,ÖDb--){

620 if–(!
OMIT_TEMPDB
 || 
i
!=1 ) && 
n
==
	`°æí
(
pDb
->
zName
) &&

621 0==
	`sqlôe3SåICmp
(
pDb
->
zName
, zName) ){

625 
	`sqlôeFªe
(
zName
);

627  
i
;

628 
	}
}

646 
	$sqlôe3TwoP¨tName
(

647 
P¨£
 *
pP¨£
,

648 
Tokí
 *
pName1
,

649 
Tokí
 *
pName2
,

650 
Tokí
 **
pUnquÆ


652 
iDb
;

653 
sqlôe3
 *
db
 = 
pP¨£
->db;

655 if–
pName2
 &&ÖName2->
n
>0 ){

656 
	`as£π
–!
db
->
öô
.
busy
 );

657 *
pUnquÆ
 = 
pName2
;

658 
iDb
 = 
	`sqlôe3FödDb
(
db
, 
pName1
);

659 if–
iDb
<0 ){

660 
	`sqlôe3Eº‹Msg
(
pP¨£
, "unknow¿d©aba£ %T", 
pName1
);

661 
pP¨£
->
nEº
++;

665 
	`as£π
–
db
->
öô
.
iDb
==0 || db->öô.
busy
 );

666 
iDb
 = 
db
->
öô
.iDb;

667 *
pUnquÆ
 = 
pName1
;

669  
iDb
;

670 
	}
}

679 
	$sqlôe3CheckObje˘Name
(
P¨£
 *
pP¨£
, c⁄° *
zName
){

680 if–!
pP¨£
->
db
->
öô
.
busy
 &&ÖP¨£->
√°ed
==0

681 && (
pP¨£
->
db
->
Êags
 & 
SQLITE_WrôeSchema
)==0

682 && 0==
	`sqlôe3SåNICmp
(
zName
, "sqlite_", 7) ){

683 
	`sqlôe3Eº‹Msg
(
pP¨£
, "obje˘Çamêª£rved f‹ i¡î«»u£: %s", 
zName
);

684  
SQLITE_ERROR
;

686  
SQLITE_OK
;

687 
	}
}

706 
	$sqlôe3SèπTabÀ
(

707 
P¨£
 *
pP¨£
,

708 
Tokí
 *
pSèπ
,

709 
Tokí
 *
pName1
,

710 
Tokí
 *
pName2
,

711 
isTemp
,

712 
isVõw
,

713 
noEº


715 
TabÀ
 *
pTabÀ
;

716 *
zName
 = 0;

717 
sqlôe3
 *
db
 = 
pP¨£
->db;

718 
Vdbe
 *
v
;

719 
iDb
;

720 
Tokí
 *
pName
;

739 
iDb
 = 
	`sqlôe3TwoP¨tName
(
pP¨£
, 
pName1
, 
pName2
, &
pName
);

740 if–
iDb
<0 ) ;

741 if–!
OMIT_TEMPDB
 && 
isTemp
 && 
iDb
>1 ){

743 
	`sqlôe3Eº‹Msg
(
pP¨£
, "temporaryÅableÇame must be unqualified");

746 if–!
OMIT_TEMPDB
 && 
isTemp
 ) 
iDb
 = 1;

748 
pP¨£
->
sNameTokí
 = *
pName
;

749 
zName
 = 
	`sqlôe3NameFromTokí
(
pName
);

750 if–
zName
==0 ) ;

751 if–
SQLITE_OK
!=
	`sqlôe3CheckObje˘Name
(
pP¨£
, 
zName
) ){

752 
begö_èbÀ_îr‹
;

754 if–
db
->
öô
.
iDb
==1 ) 
isTemp
 = 1;

755 #i‚de‡
SQLITE_OMIT_AUTHORIZATION


756 
	`as£π
–(
isTemp
 & 1)==isTemp );

758 
code
;

759 *
zDb
 = 
db
->
aDb
[
iDb
].
zName
;

760 if–
	`sqlôe3AuthCheck
(
pP¨£
, 
SQLITE_INSERT
, 
	`SCHEMA_TABLE
(
isTemp
), 0, 
zDb
) ){

761 
begö_èbÀ_îr‹
;

763 if–
isVõw
 ){

764 if–!
OMIT_TEMPDB
 && 
isTemp
 ){

765 
code
 = 
SQLITE_CREATE_TEMP_VIEW
;

767 
code
 = 
SQLITE_CREATE_VIEW
;

770 if–!
OMIT_TEMPDB
 && 
isTemp
 ){

771 
code
 = 
SQLITE_CREATE_TEMP_TABLE
;

773 
code
 = 
SQLITE_CREATE_TABLE
;

776 if–
	`sqlôe3AuthCheck
(
pP¨£
, 
code
, 
zName
, 0, 
zDb
) ){

777 
begö_èbÀ_îr‹
;

786 if–
SQLITE_OK
!=
	`sqlôe3RódSchema
(
pP¨£
) ){

787 
begö_èbÀ_îr‹
;

789 
pTabÀ
 = 
	`sqlôe3FödTabÀ
(
db
, 
zName
, db->
aDb
[
iDb
].zName);

790 if–
pTabÀ
 ){

791 if–!
noEº
 ){

792 
	`sqlôe3Eº‹Msg
(
pP¨£
, "èbÀ %TáÃódyÉxi°s", 
pName
);

794 
begö_èbÀ_îr‹
;

796 if–
	`sqlôe3FödIndex
(
db
, 
zName
, 0)!=0 && (
iDb
==0 || !db->
öô
.
busy
) ){

797 
	`sqlôe3Eº‹Msg
(
pP¨£
, "thîêi†Æªadyá¿ödexÇamed %s", 
zName
);

798 
begö_èbÀ_îr‹
;

800 
pTabÀ
 = 
	`sqlôeMÆloc
–(
TabÀ
) );

801 if–
pTabÀ
==0 ){

802 
pP¨£
->
rc
 = 
SQLITE_NOMEM
;

803 
pP¨£
->
nEº
++;

804 
begö_èbÀ_îr‹
;

806 
pTabÀ
->
zName
 = zName;

807 
pTabÀ
->
nCﬁ
 = 0;

808 
pTabÀ
->
aCﬁ
 = 0;

809 
pTabÀ
->
iPKey
 = -1;

810 
pTabÀ
->
pIndex
 = 0;

811 
pTabÀ
->
pSchema
 = 
db
->
aDb
[
iDb
].pSchema;

812 
pTabÀ
->
nRef
 = 1;

813 if–
pP¨£
->
pNewTabÀ
 ) 
	`sqlôe3DñëeTabÀ
(
db
,ÖParse->pNewTable);

814 
pP¨£
->
pNewTabÀ
 = 
pTabÀ
;

820 #i‚de‡
SQLITE_OMIT_AUTOINCREMENT


821 if–!
pP¨£
->
√°ed
 && 
	`°rcmp
(
zName
, "sqlite_sequence")==0 ){

822 
pTabÀ
->
pSchema
->
pSeqTab
 =ÖTable;

834 if–!
db
->
öô
.
busy
 && (
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
))!=0 ){

835 
lbl
;

836 
fûeF‹m©
;

837 
	`sqlôe3BegöWrôeO≥øti⁄
(
pP¨£
, 0, 
iDb
);

842 
	`sqlôe3VdbeAddOp
(
v
, 
OP_RódCookõ
, 
iDb
, 1);

843 
lbl
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

844 
	`sqlôe3VdbeAddOp
(
v
, 
OP_If
, 0, 
lbl
);

845 
fûeF‹m©
 = (
db
->
Êags
 & 
SQLITE_LegacyFûeFmt
)!=0 ?

846 1 : 
SQLITE_DEFAULT_FILE_FORMAT
;

847 
	`sqlôe3VdbeAddOp
(
v
, 
OP_I¡egî
, 
fûeF‹m©
, 0);

848 
	`sqlôe3VdbeAddOp
(
v
, 
OP_SëCookõ
, 
iDb
, 1);

849 
	`sqlôe3VdbeAddOp
(
v
, 
OP_I¡egî
, 
	`ENC
(
db
), 0);

850 
	`sqlôe3VdbeAddOp
(
v
, 
OP_SëCookõ
, 
iDb
, 4);

851 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
lbl
);

861 #i‚de‡
SQLITE_OMIT_VIEW


862 if–
isVõw
 ){

863 
	`sqlôe3VdbeAddOp
(
v
, 
OP_I¡egî
, 0, 0);

867 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Cª©eTabÀ
, 
iDb
, 0);

869 
	`sqlôe3O≥nMa°îTabÀ
(
pP¨£
, 
iDb
);

870 
	`sqlôe3VdbeAddOp
(
v
, 
OP_NewRowid
, 0, 0);

871 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Dup
, 0, 0);

872 
	`sqlôe3VdbeAddOp
(
v
, 
OP_NuŒ
, 0, 0);

873 
	`sqlôe3VdbeAddOp
(
v
, 
OP_In£π
, 0, 0);

874 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Clo£
, 0, 0);

875 
	`sqlôe3VdbeAddOp
(
v
, 
OP_PuŒ
, 1, 0);

882 
begö_èbÀ_îr‹
:

883 
	`sqlôeFªe
(
zName
);

885 
	}
}

895 
	#STRICMP
(
x
, 
y
) (\

896 
sqlôe3UµîToLowî
[*(*)(
x
)]== \

897 
sqlôe3UµîToLowî
[*(*)(
y
)] \

898 && 
	`sqlôe3SåICmp
((
x
)+1,(
y
)+1)==0 )

	)

908 
	$sqlôe3AddCﬁumn
(
P¨£
 *
pP¨£
, 
Tokí
 *
pName
){

909 
TabÀ
 *
p
;

910 
i
;

911 *
z
;

912 
Cﬁumn
 *
pCﬁ
;

913 if–(
p
 = 
pP¨£
->
pNewTabÀ
)==0 ) ;

914 
z
 = 
	`sqlôe3NameFromTokí
(
pName
);

915 if–
z
==0 ) ;

916 
i
=0; i<
p
->
nCﬁ
; i++){

917 if–
	`STRICMP
(
z
, 
p
->
aCﬁ
[
i
].
zName
) ){

918 
	`sqlôe3Eº‹Msg
(
pP¨£
, "du∂iˇã cﬁum¿«me: %s", 
z
);

919 
	`sqlôeFªe
(
z
);

923 if–(
p
->
nCﬁ
 & 0x7)==0 ){

924 
Cﬁumn
 *
aNew
;

925 
aNew
 = 
	`sqlôeRóŒoc
–
p
->
aCﬁ
, (p->
nCﬁ
+8)*(p->aCol[0]));

926 if–
aNew
==0 ){

927 
	`sqlôeFªe
(
z
);

930 
p
->
aCﬁ
 = 
aNew
;

932 
pCﬁ
 = &
p
->
aCﬁ
[p->
nCﬁ
];

933 
	`mem£t
(
pCﬁ
, 0, (
p
->
aCﬁ
[0]));

934 
pCﬁ
->
zName
 = 
z
;

940 
pCﬁ
->
afföôy
 = 
SQLITE_AFF_NONE
;

941 
p
->
nCﬁ
++;

942 
	}
}

950 
	$sqlôe3AddNŸNuŒ
(
P¨£
 *
pP¨£
, 
⁄Eº‹
){

951 
TabÀ
 *
p
;

952 
i
;

953 if–(
p
 = 
pP¨£
->
pNewTabÀ
)==0 ) ;

954 
i
 = 
p
->
nCﬁ
-1;

955 if–
i
>=0 ) 
p
->
aCﬁ
[i].
nŸNuŒ
 = 
⁄Eº‹
;

956 
	}
}

983 
	$sqlôe3AfföôyTy≥
(c⁄° 
Tokí
 *
pTy≥
){

984 
u32
 
h
 = 0;

985 
aff
 = 
SQLITE_AFF_NUMERIC
;

986 c⁄° *
zIn
 = 
pTy≥
->
z
;

987 c⁄° *
zEnd
 = &
pTy≥
->
z
[pTy≥->
n
];

989  
zIn
!=
zEnd
 ){

990 
h
 = (h<<8Ë+ 
sqlôe3UµîToLowî
[*
zIn
];

991 
zIn
++;

992 if–
h
==(('c'<<24)+('h'<<16)+('a'<<8)+'r') ){

993 
aff
 = 
SQLITE_AFF_TEXT
;

994 }if–
h
==(('c'<<24)+('l'<<16)+('o'<<8)+'b') ){

995 
aff
 = 
SQLITE_AFF_TEXT
;

996 }if–
h
==(('t'<<24)+('e'<<16)+('x'<<8)+'t') ){

997 
aff
 = 
SQLITE_AFF_TEXT
;

998 }if–
h
==(('b'<<24)+('l'<<16)+('o'<<8)+'b')

999 && (
aff
==
SQLITE_AFF_NUMERIC
 ||áff==
SQLITE_AFF_REAL
) ){

1000 
aff
 = 
SQLITE_AFF_NONE
;

1001 #i‚de‡
SQLITE_OMIT_FLOATING_POINT


1002 }if–
h
==(('r'<<24)+('e'<<16)+('a'<<8)+'l')

1003 && 
aff
==
SQLITE_AFF_NUMERIC
 ){

1004 
aff
 = 
SQLITE_AFF_REAL
;

1005 }if–
h
==(('f'<<24)+('l'<<16)+('o'<<8)+'a')

1006 && 
aff
==
SQLITE_AFF_NUMERIC
 ){

1007 
aff
 = 
SQLITE_AFF_REAL
;

1008 }if–
h
==(('d'<<24)+('o'<<16)+('u'<<8)+'b')

1009 && 
aff
==
SQLITE_AFF_NUMERIC
 ){

1010 
aff
 = 
SQLITE_AFF_REAL
;

1012 }if–(
h
&0x00FFFFFF)==(('i'<<16)+('n'<<8)+'t') ){

1013 
aff
 = 
SQLITE_AFF_INTEGER
;

1018  
aff
;

1019 
	}
}

1030 
	$sqlôe3AddCﬁumnTy≥
(
P¨£
 *
pP¨£
, 
Tokí
 *
pTy≥
){

1031 
TabÀ
 *
p
;

1032 
i
;

1033 
Cﬁumn
 *
pCﬁ
;

1035 if–(
p
 = 
pP¨£
->
pNewTabÀ
)==0 ) ;

1036 
i
 = 
p
->
nCﬁ
-1;

1037 if–
i
<0 ) ;

1038 
pCﬁ
 = &
p
->
aCﬁ
[
i
];

1039 
	`sqlôeFªe
(
pCﬁ
->
zTy≥
);

1040 
pCﬁ
->
zTy≥
 = 
	`sqlôe3NameFromTokí
(
pTy≥
);

1041 
pCﬁ
->
afföôy
 = 
	`sqlôe3AfföôyTy≥
(
pTy≥
);

1042 
	}
}

1054 
	$sqlôe3AddDeÁu…VÆue
(
P¨£
 *
pP¨£
, 
Ex¥
 *
pEx¥
){

1055 
TabÀ
 *
p
;

1056 
Cﬁumn
 *
pCﬁ
;

1057 if–(
p
 = 
pP¨£
->
pNewTabÀ
)!=0 ){

1058 
pCﬁ
 = &(
p
->
aCﬁ
[p->
nCﬁ
-1]);

1059 if–!
	`sqlôe3Ex¥IsC⁄°™tOrFun˘i⁄
(
pEx¥
) ){

1060 
	`sqlôe3Eº‹Msg
(
pP¨£
, "default value of column [%s] isÇot constant",

1061 
pCﬁ
->
zName
);

1063 
	`sqlôe3Ex¥Dñëe
(
pCﬁ
->
pDÊt
);

1064 
pCﬁ
->
pDÊt
 = 
	`sqlôe3Ex¥Dup
(
pEx¥
);

1067 
	`sqlôe3Ex¥Dñëe
(
pEx¥
);

1068 
	}
}

1088 
	$sqlôe3AddPrim¨yKey
(

1089 
P¨£
 *
pP¨£
,

1090 
Ex¥Li°
 *
pLi°
,

1091 
⁄Eº‹
,

1092 
autoInc
,

1093 
s‹tOrdî


1095 
TabÀ
 *
pTab
 = 
pP¨£
->
pNewTabÀ
;

1096 *
zTy≥
 = 0;

1097 
iCﬁ
 = -1, 
i
;

1098 if–
pTab
==0 ) 
¥im¨y_key_exô
;

1099 if–
pTab
->
hasPrimKey
 ){

1100 
	`sqlôe3Eº‹Msg
(
pP¨£
,

1101 "èbÀ \"%s\" ha†m‹êth™ o√Örim¨y key", 
pTab
->
zName
);

1102 
¥im¨y_key_exô
;

1104 
pTab
->
hasPrimKey
 = 1;

1105 if–
pLi°
==0 ){

1106 
iCﬁ
 = 
pTab
->
nCﬁ
 - 1;

1107 
pTab
->
aCﬁ
[
iCﬁ
].
isPrimKey
 = 1;

1109 
i
=0; i<
pLi°
->
nEx¥
; i++){

1110 
iCﬁ
=0; iCﬁ<
pTab
->
nCﬁ
; iCol++){

1111 if–
	`sqlôe3SåICmp
(
pLi°
->
a
[
i
].
zName
, 
pTab
->
aCﬁ
[
iCﬁ
].zName)==0 ){

1115 if–
iCﬁ
<
pTab
->
nCﬁ
 ){

1116 
pTab
->
aCﬁ
[
iCﬁ
].
isPrimKey
 = 1;

1119 if–
pLi°
->
nEx¥
>1 ) 
iCﬁ
 = -1;

1121 if–
iCﬁ
>=0 && iCﬁ<
pTab
->
nCﬁ
 ){

1122 
zTy≥
 = 
pTab
->
aCﬁ
[
iCﬁ
].zType;

1124 if–
zTy≥
 && 
	`sqlôe3SåICmp
(zType, "INTEGER")==0

1125 && 
s‹tOrdî
==
SQLITE_SO_ASC
 ){

1126 
pTab
->
iPKey
 = 
iCﬁ
;

1127 
pTab
->
keyC⁄f
 = 
⁄Eº‹
;

1128 
pTab
->
autoInc
 =áutoInc;

1129 }if–
autoInc
 ){

1130 #i‚de‡
SQLITE_OMIT_AUTOINCREMENT


1131 
	`sqlôe3Eº‹Msg
(
pP¨£
, "AUTOINCREMENT is onlyállowed onán "

1135 
	`sqlôe3Cª©eIndex
(
pP¨£
, 0, 0, 0, 
pLi°
, 
⁄Eº‹
, 0, 0, 
s‹tOrdî
, 0);

1136 
pLi°
 = 0;

1139 
¥im¨y_key_exô
:

1140 
	`sqlôe3Ex¥Li°Dñëe
(
pLi°
);

1142 
	}
}

1147 
	$sqlôe3AddCheckC⁄°øöt
(

1148 
P¨£
 *
pP¨£
,

1149 
Ex¥
 *
pCheckEx¥


1151 #i‚de‡
SQLITE_OMIT_CHECK


1152 
TabÀ
 *
pTab
 = 
pP¨£
->
pNewTabÀ
;

1153 if–
pTab
 ){

1157 
pTab
->
pCheck
 = 
	`sqlôe3Ex¥And
’Tab->pCheck, 
	`sqlôe3Ex¥Dup
(
pCheckEx¥
));

1160 
	`sqlôe3Ex¥Dñëe
(
pCheckEx¥
);

1161 
	}
}

1167 
	$sqlôe3AddCﬁœãTy≥
(
P¨£
 *
pP¨£
, c⁄° *
zTy≥
, 
nTy≥
){

1168 
TabÀ
 *
p
;

1169 
i
;

1171 if–(
p
 = 
pP¨£
->
pNewTabÀ
)==0 ) ;

1172 
i
 = 
p
->
nCﬁ
-1;

1174 if–
	`sqlôe3LoˇãCﬁlSeq
(
pP¨£
, 
zTy≥
, 
nTy≥
) ){

1175 
Index
 *
pIdx
;

1176 
p
->
aCﬁ
[
i
].
zCﬁl
 = 
	`sqlôeSåNDup
(
zTy≥
, 
nTy≥
);

1182 
pIdx
=
p
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
){

1183 
	`as£π
–
pIdx
->
nCﬁumn
==1 );

1184 if–
pIdx
->
aiCﬁumn
[0]==
i
 ){

1185 
pIdx
->
azCﬁl
[0] = 
p
->
aCﬁ
[
i
].
zCﬁl
;

1189 
	}
}

1205 
CﬁlSeq
 *
	$sqlôe3LoˇãCﬁlSeq
(
P¨£
 *
pP¨£
, c⁄° *
zName
, 
nName
){

1206 
sqlôe3
 *
db
 = 
pP¨£
->db;

1207 
u8
 
íc
 = 
	`ENC
(
db
);

1208 
u8
 
öôbusy
 = 
db
->
öô
.
busy
;

1209 
CﬁlSeq
 *
pCﬁl
;

1211 
pCﬁl
 = 
	`sqlôe3FödCﬁlSeq
(
db
, 
íc
, 
zName
, 
nName
, 
öôbusy
);

1212 if–!
öôbusy
 && (!
pCﬁl
 || !pCﬁl->
xCmp
) ){

1213 
pCﬁl
 = 
	`sqlôe3GëCﬁlSeq
(
db
,ÖCﬁl, 
zName
, 
nName
);

1214 if–!
pCﬁl
 ){

1215 if–
nName
<0 ){

1216 
nName
 = 
	`°æí
(
zName
);

1218 
	`sqlôe3Eº‹Msg
(
pP¨£
, "nÿsuch cﬁœti⁄ sequí˚: %.*s", 
nName
, 
zName
);

1219 
pCﬁl
 = 0;

1223  
pCﬁl
;

1224 
	}
}

1243 
	$sqlôe3Ch™geCookõ
(
sqlôe3
 *
db
, 
Vdbe
 *
v
, 
iDb
){

1244 
	`sqlôe3VdbeAddOp
(
v
, 
OP_I¡egî
, 
db
->
aDb
[
iDb
].
pSchema
->
schema_cookõ
+1, 0);

1245 
	`sqlôe3VdbeAddOp
(
v
, 
OP_SëCookõ
, 
iDb
, 0);

1246 
	}
}

1256 
	$idítLígth
(c⁄° *
z
){

1257 
n
;

1258 
n
=0; *
z
;Ç++, z++){

1259 if–*
z
=='"' ){ 
n
++; }

1261  
n
 + 2;

1262 
	}
}

1268 
	$idítPut
(*
z
, *
pIdx
, *
zSig√dIdít
){

1269 *
zIdít
 = (*)
zSig√dIdít
;

1270 
i
, 
j
, 
√edQuŸe
;

1271 
i
 = *
pIdx
;

1272 
j
=0; 
zIdít
[j]; j++){

1273 if–!
	`iß um
(
zIdít
[
j
]) && zIdent[j]!='_' ) ;

1275 
√edQuŸe
 = 
zIdít
[
j
]!=0 || 
	`isdigô
(zIdent[0])

1276 || 
	`sqlôe3Keyw‹dCode
(
zIdít
, 
j
)!=
TK_ID
;

1277 if–
√edQuŸe
 ) 
z
[
i
++] = '"';

1278 
j
=0; 
zIdít
[j]; j++){

1279 
z
[
i
++] = 
zIdít
[
j
];

1280 if–
zIdít
[
j
]=='"' ) 
z
[
i
++] = '"';

1282 if–
√edQuŸe
 ) 
z
[
i
++] = '"';

1283 
z
[
i
] = 0;

1284 *
pIdx
 = 
i
;

1285 
	}
}

1292 *
	$¸óãTabÀStmt
(
TabÀ
 *
p
, 
isTemp
){

1293 
i
, 
k
, 
n
;

1294 *
zStmt
;

1295 *
zSï
, *
zSï2
, *
zEnd
, *
z
;

1296 
Cﬁumn
 *
pCﬁ
;

1297 
n
 = 0;

1298 
pCﬁ
 = 
p
->
aCﬁ
, 
i
=0; i<p->
nCﬁ
; i++,ÖCol++){

1299 
n
 +
	`idítLígth
(
pCﬁ
->
zName
);

1300 
z
 = 
pCﬁ
->
zTy≥
;

1301 if–
z
 ){

1302 
n
 +(
	`°æí
(
z
) + 1);

1305 
n
 +
	`idítLígth
(
p
->
zName
);

1306 if–
n
<50 ){

1307 
zSï
 = "";

1308 
zSï2
 = ",";

1309 
zEnd
 = ")";

1311 
zSï
 = "\n ";

1312 
zSï2
 = ",\n ";

1313 
zEnd
 = "\n)";

1315 
n
 +35 + 6*
p
->
nCﬁ
;

1316 
zStmt
 = 
	`sqlôeMÆlocRaw
–
n
 );

1317 if–
zStmt
==0 )  0;

1318 
	`°r˝y
(
zStmt
, !
OMIT_TEMPDB
&&
isTemp
 ? "CREATE TEMP TABLE ":"CREATE TABLE ");

1319 
k
 = 
	`°æí
(
zStmt
);

1320 
	`idítPut
(
zStmt
, &
k
, 
p
->
zName
);

1321 
zStmt
[
k
++] = '(';

1322 
pCﬁ
=
p
->
aCﬁ
, 
i
=0; i<p->
nCﬁ
; i++,ÖCol++){

1323 
	`°r˝y
(&
zStmt
[
k
], 
zSï
);

1324 
k
 +
	`°æí
(&
zStmt
[k]);

1325 
zSï
 = 
zSï2
;

1326 
	`idítPut
(
zStmt
, &
k
, 
pCﬁ
->
zName
);

1327 if–(
z
 = 
pCﬁ
->
zTy≥
)!=0 ){

1328 
zStmt
[
k
++] = ' ';

1329 
	`°r˝y
(&
zStmt
[
k
], 
z
);

1330 
k
 +
	`°æí
(
z
);

1333 
	`°r˝y
(&
zStmt
[
k
], 
zEnd
);

1334  
zStmt
;

1335 
	}
}

1357 
	$sqlôe3EndTabÀ
(

1358 
P¨£
 *
pP¨£
,

1359 
Tokí
 *
pC⁄s
,

1360 
Tokí
 *
pEnd
,

1361 
Sñe˘
 *
pSñe˘


1363 
TabÀ
 *
p
;

1364 
sqlôe3
 *
db
 = 
pP¨£
->db;

1365 
iDb
;

1367 if–(
pEnd
==0 && 
pSñe˘
==0Ë|| 
pP¨£
->
nEº
 || 
	`sqlôe3MÆlocFaûed
() ) {

1370 
p
 = 
pP¨£
->
pNewTabÀ
;

1371 if–
p
==0 ) ;

1373 
	`as£π
–!
db
->
öô
.
busy
 || !
pSñe˘
 );

1375 
iDb
 = 
	`sqlôe3SchemaToIndex
(
pP¨£
->
db
, 
p
->
pSchema
);

1377 #i‚de‡
SQLITE_OMIT_CHECK


1380 if–
p
->
pCheck
 ){

1381 
SrcLi°
 
sSrc
;

1382 
NameC⁄ãxt
 
sNC
;

1384 
	`mem£t
(&
sNC
, 0, (sNC));

1385 
	`mem£t
(&
sSrc
, 0, (sSrc));

1386 
sSrc
.
nSrc
 = 1;

1387 
sSrc
.
a
[0].
zName
 = 
p
->zName;

1388 
sSrc
.
a
[0].
pTab
 = 
p
;

1389 
sSrc
.
a
[0].
iCurs‹
 = -1;

1390 
sNC
.
pP¨£
 =ÖParse;

1391 
sNC
.
pSrcLi°
 = &
sSrc
;

1392 
sNC
.
isCheck
 = 1;

1393 if–
	`sqlôe3Ex¥ResﬁveNames
(&
sNC
, 
p
->
pCheck
) ){

1405 if–
db
->
öô
.
busy
 ){

1406 
p
->
äum
 = 
db
->
öô
.
√wTnum
;

1416 if–!
db
->
öô
.
busy
 ){

1417 
n
;

1418 
Vdbe
 *
v
;

1419 *
zTy≥
;

1420 *
zTy≥2
;

1421 *
zStmt
;

1423 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

1424 if–
v
==0 ) ;

1426 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Clo£
, 0, 0);

1432 if–
p
->
pSñe˘
==0 ){

1434 
zTy≥
 = "table";

1435 
zTy≥2
 = "TABLE";

1436 #i‚de‡
SQLITE_OMIT_VIEW


1439 
zTy≥
 = "view";

1440 
zTy≥2
 = "VIEW";

1457 if–
pSñe˘
 ){

1458 
TabÀ
 *
pSñTab
;

1459 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Dup
, 0, 0);

1460 
	`sqlôe3VdbeAddOp
(
v
, 
OP_I¡egî
, 
iDb
, 0);

1461 
	`sqlôe3VdbeAddOp
(
v
, 
OP_O≥nWrôe
, 1, 0);

1462 
pP¨£
->
nTab
 = 2;

1463 
	`sqlôe3Sñe˘
(
pP¨£
, 
pSñe˘
, 
SRT_TabÀ
, 1, 0, 0, 0, 0);

1464 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Clo£
, 1, 0);

1465 if–
pP¨£
->
nEº
==0 ){

1466 
pSñTab
 = 
	`sqlôe3Resu…SëOfSñe˘
(
pP¨£
, 0, 
pSñe˘
);

1467 if–
pSñTab
==0 ) ;

1468 
	`as£π
–
p
->
aCﬁ
==0 );

1469 
p
->
nCﬁ
 = 
pSñTab
->nCol;

1470 
p
->
aCﬁ
 = 
pSñTab
->aCol;

1471 
pSñTab
->
nCﬁ
 = 0;

1472 
pSñTab
->
aCﬁ
 = 0;

1473 
	`sqlôe3DñëeTabÀ
(0, 
pSñTab
);

1478 if–
pSñe˘
 ){

1479 
zStmt
 = 
	`¸óãTabÀStmt
(
p
,Ö->
pSchema
==
pP¨£
->
db
->
aDb
[1].pSchema);

1481 
n
 = 
pEnd
->
z
 - 
pP¨£
->
sNameTokí
.z + 1;

1482 
zStmt
 = 
	`sqlôe3MPrötf
("CREATE %†%.*s", 
zTy≥2
, 
n
, 
pP¨£
->
sNameTokí
.
z
);

1491 
	`sqlôe3Ne°edP¨£
(
pP¨£
,

1495 
db
->
aDb
[
iDb
].
zName
, 
	`SCHEMA_TABLE
(iDb),

1496 
zTy≥
,

1497 
p
->
zName
,

1498 
p
->
zName
,

1499 
zStmt


1501 
	`sqlôeFªe
(
zStmt
);

1502 
	`sqlôe3Ch™geCookõ
(
db
, 
v
, 
iDb
);

1504 #i‚de‡
SQLITE_OMIT_AUTOINCREMENT


1508 if–
p
->
autoInc
 ){

1509 
Db
 *
pDb
 = &
db
->
aDb
[
iDb
];

1510 if–
pDb
->
pSchema
->
pSeqTab
==0 ){

1511 
	`sqlôe3Ne°edP¨£
(
pP¨£
,

1513 
pDb
->
zName


1520 
	`sqlôe3VdbeOp3
(
v
, 
OP_P¨£Schema
, 
iDb
, 0,

1521 
	`sqlôe3MPrötf
("tbl_«me='%q'",
p
->
zName
), 
P3_DYNAMIC
);

1527 if–
db
->
öô
.
busy
 && 
pP¨£
->
nEº
==0 ){

1528 
TabÀ
 *
pOld
;

1529 
FKey
 *
pFKey
;

1530 
Schema
 *
pSchema
 = 
p
->pSchema;

1531 
pOld
 = 
	`sqlôe3HashIn£π
(&
pSchema
->
tblHash
, 
p
->
zName
, 
	`°æí
(p->zName)+1,p);

1532 if–
pOld
 ){

1533 
	`as£π
–
p
==
pOld
 );

1536 #i‚de‡
SQLITE_OMIT_FOREIGN_KEY


1537 
pFKey
=
p
->pFKey;ÖFKey;ÖFKeyıFKey->
pNextFrom
){

1538 
nTo
 = 
	`°æí
(
pFKey
->
zTo
) + 1;

1539 
pFKey
->
pNextTo
 = 
	`sqlôe3HashFöd
(&
pSchema
->
aFKey
,ÖFKey->
zTo
, 
nTo
);

1540 
	`sqlôe3HashIn£π
(&
pSchema
->
aFKey
, 
pFKey
->
zTo
, 
nTo
,ÖFKey);

1543 
pP¨£
->
pNewTabÀ
 = 0;

1544 
db
->
nTabÀ
++;

1545 
db
->
Êags
 |
SQLITE_I¡înCh™ges
;

1547 #i‚de‡
SQLITE_OMIT_ALTERTABLE


1548 if–!
p
->
pSñe˘
 ){

1549 c⁄° *
zName
 = (c⁄° *)
pP¨£
->
sNameTokí
.
z
;

1550 
nName
;

1551 
	`as£π
–!
pSñe˘
 && 
pC⁄s
 && 
pEnd
 );

1552 if–
pC⁄s
->
z
==0 ){

1553 
pC⁄s
 = 
pEnd
;

1555 
nName
 = (c⁄° *)
pC⁄s
->
z
 - 
zName
;

1556 
p
->
addCﬁOff£t
 = 13 + 
	`sqlôe3utf8Ch¨Lí
(
zName
, 
nName
);

1560 
	}
}

1562 #i‚de‡
SQLITE_OMIT_VIEW


1566 
	$sqlôe3Cª©eVõw
(

1567 
P¨£
 *
pP¨£
,

1568 
Tokí
 *
pBegö
,

1569 
Tokí
 *
pName1
,

1570 
Tokí
 *
pName2
,

1571 
Sñe˘
 *
pSñe˘
,

1572 
isTemp


1574 
TabÀ
 *
p
;

1575 
n
;

1576 c⁄° *
z
;

1577 
Tokí
 
sEnd
;

1578 
DbFixî
 
sFix
;

1579 
Tokí
 *
pName
;

1580 
iDb
;

1582 if–
pP¨£
->
nV¨
>0 ){

1583 
	`sqlôe3Eº‹Msg
(
pP¨£
, "parametersáreÇotállowed in views");

1584 
	`sqlôe3Sñe˘Dñëe
(
pSñe˘
);

1587 
	`sqlôe3SèπTabÀ
(
pP¨£
, 
pBegö
, 
pName1
, 
pName2
, 
isTemp
, 1, 0);

1588 
p
 = 
pP¨£
->
pNewTabÀ
;

1589 if–
p
==0 || 
pP¨£
->
nEº
 ){

1590 
	`sqlôe3Sñe˘Dñëe
(
pSñe˘
);

1593 
	`sqlôe3TwoP¨tName
(
pP¨£
, 
pName1
, 
pName2
, &
pName
);

1594 
iDb
 = 
	`sqlôe3SchemaToIndex
(
pP¨£
->
db
, 
p
->
pSchema
);

1595 if–
	`sqlôe3FixInô
(&
sFix
, 
pP¨£
, 
iDb
, "võw", 
pName
)

1596 && 
	`sqlôe3FixSñe˘
(&
sFix
, 
pSñe˘
)

1598 
	`sqlôe3Sñe˘Dñëe
(
pSñe˘
);

1607 
p
->
pSñe˘
 = 
	`sqlôe3Sñe˘Dup
(pSelect);

1608 
	`sqlôe3Sñe˘Dñëe
(
pSñe˘
);

1609 if–
	`sqlôe3MÆlocFaûed
() ){

1612 if–!
pP¨£
->
db
->
öô
.
busy
 ){

1613 
	`sqlôe3VõwGëCﬁumnNames
(
pP¨£
, 
p
);

1619 
sEnd
 = 
pP¨£
->
sLa°Tokí
;

1620 if–
sEnd
.
z
[0]!=0 && sEnd.z[0]!=';' ){

1621 
sEnd
.
z
 +sEnd.
n
;

1623 
sEnd
.
n
 = 0;

1624 
n
 = 
sEnd
.
z
 - 
pBegö
->z;

1625 
z
 = (c⁄° *)
pBegö
->z;

1626  
n
>0 && (
z
[n-1]==';' || 
	`is•a˚
(z[n-1])) ){Ç--; }

1627 
sEnd
.
z
 = &z[
n
-1];

1628 
sEnd
.
n
 = 1;

1631 
	`sqlôe3EndTabÀ
(
pP¨£
, 0, &
sEnd
, 0);

1633 
	}
}

1636 #i‚de‡
SQLITE_OMIT_VIEW


1642 
	$sqlôe3VõwGëCﬁumnNames
(
P¨£
 *
pP¨£
, 
TabÀ
 *
pTabÀ
){

1643 
TabÀ
 *
pSñTab
;

1644 
Sñe˘
 *
pSñ
;

1645 
nEº
 = 0;

1646 
n
;

1648 
	`as£π
–
pTabÀ
 );

1653 if–
pTabÀ
->
nCﬁ
>0 )  0;

1665 if–
pTabÀ
->
nCﬁ
<0 ){

1666 
	`sqlôe3Eº‹Msg
(
pP¨£
, "võw %†i†cúcuœæy deföed", 
pTabÀ
->
zName
);

1669 
	`as£π
–
pTabÀ
->
nCﬁ
>=0 );

1678 
	`as£π
–
pTabÀ
->
pSñe˘
 );

1679 
pSñ
 = 
	`sqlôe3Sñe˘Dup
(
pTabÀ
->
pSñe˘
);

1680 if–
pSñ
 ){

1681 
n
 = 
pP¨£
->
nTab
;

1682 
	`sqlôe3SrcLi°AssignCurs‹s
(
pP¨£
, 
pSñ
->
pSrc
);

1683 
pTabÀ
->
nCﬁ
 = -1;

1684 
pSñTab
 = 
	`sqlôe3Resu…SëOfSñe˘
(
pP¨£
, 0, 
pSñ
);

1685 
pP¨£
->
nTab
 = 
n
;

1686 if–
pSñTab
 ){

1687 
	`as£π
–
pTabÀ
->
aCﬁ
==0 );

1688 
pTabÀ
->
nCﬁ
 = 
pSñTab
->nCol;

1689 
pTabÀ
->
aCﬁ
 = 
pSñTab
->aCol;

1690 
pSñTab
->
nCﬁ
 = 0;

1691 
pSñTab
->
aCﬁ
 = 0;

1692 
	`sqlôe3DñëeTabÀ
(0, 
pSñTab
);

1693 
pTabÀ
->
pSchema
->
Êags
 |
DB_Uƒe£tVõws
;

1695 
pTabÀ
->
nCﬁ
 = 0;

1696 
nEº
++;

1698 
	`sqlôe3Sñe˘Dñëe
(
pSñ
);

1700 
nEº
++;

1702  
nEº
;

1703 
	}
}

1706 #i‚de‡
SQLITE_OMIT_VIEW


1710 
	$sqlôeVõwRe£tAŒ
(
sqlôe3
 *
db
, 
idx
){

1711 
HashEÀm
 *
i
;

1712 if–!
	`DbHasPr›îty
(
db
, 
idx
, 
DB_Uƒe£tVõws
) ) ;

1713 
i
=
	`sqlôeHashFú°
(&
db
->
aDb
[
idx
].
pSchema
->
tblHash
); i;i=
	`sqlôeHashNext
(i)){

1714 
TabÀ
 *
pTab
 = 
	`sqlôeHashD©a
(
i
);

1715 if–
pTab
->
pSñe˘
 ){

1716 
	`sqlôeRe£tCﬁumnNames
(
pTab
);

1719 
	`DbCÀ¨Pr›îty
(
db
, 
idx
, 
DB_Uƒe£tVõws
);

1720 
	}
}

1722 
	#sqlôeVõwRe£tAŒ
(
A
,
B
)

	)

1731 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


1732 
	$sqlôe3RoŸPageMoved
(
Db
 *
pDb
, 
iFrom
, 
iTo
){

1733 
HashEÀm
 *
pEÀm
;

1734 
Hash
 *
pHash
;

1736 
pHash
 = &
pDb
->
pSchema
->
tblHash
;

1737 
pEÀm
=
	`sqlôeHashFú°
(
pHash
);ÖEÀm;ÖEÀm=
	`sqlôeHashNext
(pElem)){

1738 
TabÀ
 *
pTab
 = 
	`sqlôeHashD©a
(
pEÀm
);

1739 if–
pTab
->
äum
==
iFrom
 ){

1740 
pTab
->
äum
 = 
iTo
;

1744 
pHash
 = &
pDb
->
pSchema
->
idxHash
;

1745 
pEÀm
=
	`sqlôeHashFú°
(
pHash
);ÖEÀm;ÖEÀm=
	`sqlôeHashNext
(pElem)){

1746 
Index
 *
pIdx
 = 
	`sqlôeHashD©a
(
pEÀm
);

1747 if–
pIdx
->
äum
==
iFrom
 ){

1748 
pIdx
->
äum
 = 
iTo
;

1752 
	`as£π
(0);

1753 
	}
}

1762 
	$de°royRoŸPage
(
P¨£
 *
pP¨£
, 
iTabÀ
, 
iDb
){

1763 
Vdbe
 *
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

1764 
	`sqlôe3VdbeAddOp
(
v
, 
OP_De°roy
, 
iTabÀ
, 
iDb
);

1765 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


1774 
	`sqlôe3Ne°edP¨£
(
pP¨£
,

1776 
pP¨£
->
db
->
aDb
[
iDb
].
zName
, 
	`SCHEMA_TABLE
(iDb), 
iTabÀ
);

1778 
	}
}

1786 
	$de°royTabÀ
(
P¨£
 *
pP¨£
, 
TabÀ
 *
pTab
){

1787 #ifde‡
SQLITE_OMIT_AUTOVACUUM


1788 
Index
 *
pIdx
;

1789 
iDb
 = 
	`sqlôe3SchemaToIndex
(
pP¨£
->
db
, 
pTab
->
pSchema
);

1790 
	`de°royRoŸPage
(
pP¨£
, 
pTab
->
äum
, 
iDb
);

1791 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
){

1792 
	`de°royRoŸPage
(
pP¨£
, 
pIdx
->
äum
, 
iDb
);

1811 
iTab
 = 
pTab
->
äum
;

1812 
iDe°royed
 = 0;

1815 
Index
 *
pIdx
;

1816 
iL¨ge°
 = 0;

1818 if–
iDe°royed
==0 || 
iTab
<iDestroyed ){

1819 
iL¨ge°
 = 
iTab
;

1821 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
){

1822 
iIdx
 = 
pIdx
->
äum
;

1823 
	`as£π
–
pIdx
->
pSchema
==
pTab
->pSchema );

1824 if–(
iDe°royed
==0 || (
iIdx
<iDe°royed)Ë&& iIdx>
iL¨ge°
 ){

1825 
iL¨ge°
 = 
iIdx
;

1828 if–
iL¨ge°
==0 ){

1831 
iDb
 = 
	`sqlôe3SchemaToIndex
(
pP¨£
->
db
, 
pTab
->
pSchema
);

1832 
	`de°royRoŸPage
(
pP¨£
, 
iL¨ge°
, 
iDb
);

1833 
iDe°royed
 = 
iL¨ge°
;

1837 
	}
}

1843 
	$sqlôe3Dr›TabÀ
(
P¨£
 *
pP¨£
, 
SrcLi°
 *
pName
, 
isVõw
, 
noEº
){

1844 
TabÀ
 *
pTab
;

1845 
Vdbe
 *
v
;

1846 
sqlôe3
 *
db
 = 
pP¨£
->db;

1847 
iDb
;

1849 if–
pP¨£
->
nEº
 || 
	`sqlôe3MÆlocFaûed
() ){

1850 
exô_dr›_èbÀ
;

1852 
	`as£π
–
pName
->
nSrc
==1 );

1853 
pTab
 = 
	`sqlôe3LoˇãTabÀ
(
pP¨£
, 
pName
->
a
[0].
zName
,ÖName->a[0].
zD©aba£
);

1855 if–
pTab
==0 ){

1856 if–
noEº
 ){

1857 
	`sqlôe3Eº‹CÀ¨
(
pP¨£
);

1859 
exô_dr›_èbÀ
;

1861 
iDb
 = 
	`sqlôe3SchemaToIndex
(
db
, 
pTab
->
pSchema
);

1862 
	`as£π
–
iDb
>=0 && iDb<
db
->
nDb
 );

1863 #i‚de‡
SQLITE_OMIT_AUTHORIZATION


1865 
code
;

1866 c⁄° *
zTab
 = 
	`SCHEMA_TABLE
(
iDb
);

1867 c⁄° *
zDb
 = 
db
->
aDb
[
iDb
].
zName
;

1868 if–
	`sqlôe3AuthCheck
(
pP¨£
, 
SQLITE_DELETE
, 
zTab
, 0, 
zDb
)){

1869 
exô_dr›_èbÀ
;

1871 if–
isVõw
 ){

1872 if–!
OMIT_TEMPDB
 && 
iDb
==1 ){

1873 
code
 = 
SQLITE_DROP_TEMP_VIEW
;

1875 
code
 = 
SQLITE_DROP_VIEW
;

1878 if–!
OMIT_TEMPDB
 && 
iDb
==1 ){

1879 
code
 = 
SQLITE_DROP_TEMP_TABLE
;

1881 
code
 = 
SQLITE_DROP_TABLE
;

1884 if–
	`sqlôe3AuthCheck
(
pP¨£
, 
code
, 
pTab
->
zName
, 0, 
zDb
) ){

1885 
exô_dr›_èbÀ
;

1887 if–
	`sqlôe3AuthCheck
(
pP¨£
, 
SQLITE_DELETE
, 
pTab
->
zName
, 0, 
zDb
) ){

1888 
exô_dr›_èbÀ
;

1892 if–
pTab
->
ªadO∆y
 ||ÖTab==
db
->
aDb
[
iDb
].
pSchema
->
pSeqTab
 ){

1893 
	`sqlôe3Eº‹Msg
(
pP¨£
, "èbÀ %†mayÇŸ bêdr›≥d", 
pTab
->
zName
);

1894 
exô_dr›_èbÀ
;

1897 #i‚de‡
SQLITE_OMIT_VIEW


1901 if–
isVõw
 && 
pTab
->
pSñe˘
==0 ){

1902 
	`sqlôe3Eº‹Msg
(
pP¨£
, "u£ DROP TABLEÅÿdñëêèbÀ %s", 
pTab
->
zName
);

1903 
exô_dr›_èbÀ
;

1905 if–!
isVõw
 && 
pTab
->
pSñe˘
 ){

1906 
	`sqlôe3Eº‹Msg
(
pP¨£
, "u£ DROP VIEWÅÿdñëêvõw %s", 
pTab
->
zName
);

1907 
exô_dr›_èbÀ
;

1914 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

1915 if–
v
 ){

1916 
Triggî
 *
pTriggî
;

1917 
Db
 *
pDb
 = &
db
->
aDb
[
iDb
];

1918 
	`sqlôe3BegöWrôeO≥øti⁄
(
pP¨£
, 0, 
iDb
);

1924 
pTriggî
 = 
pTab
->pTrigger;

1925  
pTriggî
 ){

1926 
	`as£π
–
pTriggî
->
pSchema
==
pTab
->pSchema ||

1927 
pTriggî
->
pSchema
==
db
->
aDb
[1].pSchema );

1928 
	`sqlôe3Dr›TriggîPå
(
pP¨£
, 
pTriggî
, 1);

1929 
pTriggî
 =ÖTriggî->
pNext
;

1932 #i‚de‡
SQLITE_OMIT_AUTOINCREMENT


1938 if–
pTab
->
autoInc
 ){

1939 
	`sqlôe3Ne°edP¨£
(
pP¨£
,

1941 
pDb
->
zName
, 
pTab
->zName

1953 
	`sqlôe3Ne°edP¨£
(
pP¨£
,

1955 
pDb
->
zName
, 
	`SCHEMA_TABLE
(
iDb
), 
pTab
->zName);

1956 if–!
isVõw
 ){

1957 
	`de°royTabÀ
(
pP¨£
, 
pTab
);

1963 
	`sqlôe3VdbeOp3
(
v
, 
OP_Dr›TabÀ
, 
iDb
, 0, 
pTab
->
zName
, 0);

1964 
	`sqlôe3Ch™geCookõ
(
db
, 
v
, 
iDb
);

1966 
	`sqlôeVõwRe£tAŒ
(
db
, 
iDb
);

1968 
exô_dr›_èbÀ
:

1969 
	`sqlôe3SrcLi°Dñëe
(
pName
);

1970 
	}
}

1990 
	$sqlôe3Cª©eF‹eignKey
(

1991 
P¨£
 *
pP¨£
,

1992 
Ex¥Li°
 *
pFromCﬁ
,

1993 
Tokí
 *
pTo
,

1994 
Ex¥Li°
 *
pToCﬁ
,

1995 
Êags


1997 #i‚de‡
SQLITE_OMIT_FOREIGN_KEY


1998 
FKey
 *
pFKey
 = 0;

1999 
TabÀ
 *
p
 = 
pP¨£
->
pNewTabÀ
;

2000 
nByã
;

2001 
i
;

2002 
nCﬁ
;

2003 *
z
;

2005 
	`as£π
–
pTo
!=0 );

2006 if–
p
==0 || 
pP¨£
->
nEº
 ) 
fk_íd
;

2007 if–
pFromCﬁ
==0 ){

2008 
iCﬁ
 = 
p
->
nCﬁ
-1;

2009 if–
iCﬁ
<0 ) 
fk_íd
;

2010 if–
pToCﬁ
 &&ÖToCﬁ->
nEx¥
!=1 ){

2011 
	`sqlôe3Eº‹Msg
(
pP¨£
, "foreign key on %s"

2013 
p
->
aCﬁ
[
iCﬁ
].
zName
, 
pTo
);

2014 
fk_íd
;

2016 
nCﬁ
 = 1;

2017 }if–
pToCﬁ
 &&ÖToCﬁ->
nEx¥
!=
pFromCﬁ
->nExpr ){

2018 
	`sqlôe3Eº‹Msg
(
pP¨£
,

2021 
fk_íd
;

2023 
nCﬁ
 = 
pFromCﬁ
->
nEx¥
;

2025 
nByã
 = (*
pFKey
Ë+ 
nCﬁ
*’FKey->
aCﬁ
[0]Ë+ 
pTo
->
n
 + 1;

2026 if–
pToCﬁ
 ){

2027 
i
=0; i<
pToCﬁ
->
nEx¥
; i++){

2028 
nByã
 +
	`°æí
(
pToCﬁ
->
a
[
i
].
zName
) + 1;

2031 
pFKey
 = 
	`sqlôeMÆloc
–
nByã
 );

2032 if–
pFKey
==0 ) 
fk_íd
;

2033 
pFKey
->
pFrom
 = 
p
;

2034 
pFKey
->
pNextFrom
 = 
p
->pFKey;

2035 
z
 = (*)&
pFKey
[1];

2036 
pFKey
->
aCﬁ
 = (
sCﬁM≠
*)
z
;

2037 
z
 +(
sCﬁM≠
)*
nCﬁ
;

2038 
pFKey
->
zTo
 = 
z
;

2039 
	`mem˝y
(
z
, 
pTo
->z,ÖTo->
n
);

2040 
z
[
pTo
->
n
] = 0;

2041 
z
 +
pTo
->
n
+1;

2042 
pFKey
->
pNextTo
 = 0;

2043 
pFKey
->
nCﬁ
 =ÇCol;

2044 if–
pFromCﬁ
==0 ){

2045 
pFKey
->
aCﬁ
[0].
iFrom
 = 
p
->
nCﬁ
-1;

2047 
i
=0; i<
nCﬁ
; i++){

2048 
j
;

2049 
j
=0; j<
p
->
nCﬁ
; j++){

2050 if–
	`sqlôe3SåICmp
(
p
->
aCﬁ
[
j
].
zName
, 
pFromCﬁ
->
a
[
i
].zName)==0 ){

2051 
pFKey
->
aCﬁ
[
i
].
iFrom
 = 
j
;

2055 if–
j
>=
p
->
nCﬁ
 ){

2056 
	`sqlôe3Eº‹Msg
(
pP¨£
,

2058 
pFromCﬁ
->
a
[
i
].
zName
);

2059 
fk_íd
;

2063 if–
pToCﬁ
 ){

2064 
i
=0; i<
nCﬁ
; i++){

2065 
n
 = 
	`°æí
(
pToCﬁ
->
a
[
i
].
zName
);

2066 
pFKey
->
aCﬁ
[
i
].
zCﬁ
 = 
z
;

2067 
	`mem˝y
(
z
, 
pToCﬁ
->
a
[
i
].
zName
, 
n
);

2068 
z
[
n
] = 0;

2069 
z
 +
n
+1;

2072 
pFKey
->
isDe„ºed
 = 0;

2073 
pFKey
->
dñëeC⁄f
 = 
Êags
 & 0xff;

2074 
pFKey
->
upd©eC⁄f
 = (
Êags
 >> 8 ) & 0xff;

2075 
pFKey
->
ö£πC⁄f
 = (
Êags
 >> 16 ) & 0xff;

2079 
p
->
pFKey
 =ÖFKey;

2080 
pFKey
 = 0;

2082 
fk_íd
:

2083 
	`sqlôeFªe
(
pFKey
);

2085 
	`sqlôe3Ex¥Li°Dñëe
(
pFromCﬁ
);

2086 
	`sqlôe3Ex¥Li°Dñëe
(
pToCﬁ
);

2087 
	}
}

2096 
	$sqlôe3De„rF‹eignKey
(
P¨£
 *
pP¨£
, 
isDe„ºed
){

2097 #i‚de‡
SQLITE_OMIT_FOREIGN_KEY


2098 
TabÀ
 *
pTab
;

2099 
FKey
 *
pFKey
;

2100 if–(
pTab
 = 
pP¨£
->
pNewTabÀ
)==0 || (
pFKey
 =ÖTab->pFKey)==0 ) ;

2101 
pFKey
->
isDe„ºed
 = isDeferred;

2103 
	}
}

2116 
	$sqlôe3RefûlIndex
(
P¨£
 *
pP¨£
, 
Index
 *
pIndex
, 
memRoŸPage
){

2117 
TabÀ
 *
pTab
 = 
pIndex
->
pTabÀ
;

2118 
iTab
 = 
pP¨£
->
nTab
;

2119 
iIdx
 = 
pP¨£
->
nTab
+1;

2120 
addr1
;

2121 
äum
;

2122 
Vdbe
 *
v
;

2123 
KeyInfo
 *
pKey
;

2124 
iDb
 = 
	`sqlôe3SchemaToIndex
(
pP¨£
->
db
, 
pIndex
->
pSchema
);

2126 #i‚de‡
SQLITE_OMIT_AUTHORIZATION


2127 if–
	`sqlôe3AuthCheck
(
pP¨£
, 
SQLITE_REINDEX
, 
pIndex
->
zName
, 0,

2128 
pP¨£
->
db
->
aDb
[
iDb
].
zName
 ) ){

2134 
	`sqlôe3TabÀLock
(
pP¨£
, 
iDb
, 
pTab
->
äum
, 1,ÖTab->
zName
);

2136 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

2137 if–
v
==0 ) ;

2138 if–
memRoŸPage
>=0 ){

2139 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemLﬂd
, 
memRoŸPage
, 0);

2140 
äum
 = 0;

2142 
äum
 = 
pIndex
->tnum;

2143 
	`sqlôe3VdbeAddOp
(
v
, 
OP_CÀ¨
, 
äum
, 
iDb
);

2145 
	`sqlôe3VdbeAddOp
(
v
, 
OP_I¡egî
, 
iDb
, 0);

2146 
pKey
 = 
	`sqlôe3IndexKeyöfo
(
pP¨£
, 
pIndex
);

2147 
	`sqlôe3VdbeOp3
(
v
, 
OP_O≥nWrôe
, 
iIdx
, 
äum
, (*)
pKey
, 
P3_KEYINFO_HANDOFF
);

2148 
	`sqlôe3O≥nTabÀ
(
pP¨£
, 
iTab
, 
iDb
, 
pTab
, 
OP_O≥nRód
);

2149 
addr1
 = 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Rewöd
, 
iTab
, 0);

2150 
	`sqlôe3Gíî©eIndexKey
(
v
, 
pIndex
, 
iTab
);

2151 if–
pIndex
->
⁄Eº‹
!=
OE_N⁄e
 ){

2152 
cuøddr
 = 
	`sqlôe3VdbeCuºítAddr
(
v
);

2153 
addr2
 = 
cuøddr
+4;

2154 
	`sqlôe3VdbeCh™geP2
(
v
, 
cuøddr
-1, 
addr2
);

2155 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Rowid
, 
iTab
, 0);

2156 
	`sqlôe3VdbeAddOp
(
v
, 
OP_AddImm
, 1, 0);

2157 
	`sqlôe3VdbeAddOp
(
v
, 
OP_IsUnique
, 
iIdx
, 
addr2
);

2158 
	`sqlôe3VdbeOp3
(
v
, 
OP_HÆt
, 
SQLITE_CONSTRAINT
, 
OE_Ab‹t
,

2159 "ödexed cﬁumn†¨ênŸ unique", 
P3_STATIC
);

2160 
	`as£π
–
addr2
==
	`sqlôe3VdbeCuºítAddr
(
v
) );

2162 
	`sqlôe3VdbeAddOp
(
v
, 
OP_IdxIn£π
, 
iIdx
, 0);

2163 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Next
, 
iTab
, 
addr1
+1);

2164 
	`sqlôe3VdbeJumpHîe
(
v
, 
addr1
);

2165 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Clo£
, 
iTab
, 0);

2166 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Clo£
, 
iIdx
, 0);

2167 
	}
}

2181 
	$sqlôe3Cª©eIndex
(

2182 
P¨£
 *
pP¨£
,

2183 
Tokí
 *
pName1
,

2184 
Tokí
 *
pName2
,

2185 
SrcLi°
 *
pTblName
,

2186 
Ex¥Li°
 *
pLi°
,

2187 
⁄Eº‹
,

2188 
Tokí
 *
pSèπ
,

2189 
Tokí
 *
pEnd
,

2190 
s‹tOrdî
,

2191 
ifNŸExi°


2193 
TabÀ
 *
pTab
 = 0;

2194 
Index
 *
pIndex
 = 0;

2195 *
zName
 = 0;

2196 
nName
;

2197 
i
, 
j
;

2198 
Tokí
 
nuŒId
;

2199 
DbFixî
 
sFix
;

2200 
s‹tOrdîMask
;

2201 
sqlôe3
 *
db
 = 
pP¨£
->db;

2202 
Db
 *
pDb
;

2203 
iDb
;

2204 
Tokí
 *
pName
 = 0;

2205 
Ex¥Li°_ôem
 *
pLi°Iãm
;

2206 
nCﬁ
;

2207 
nExåa
 = 0;

2208 *
zExåa
;

2210 if–
pP¨£
->
nEº
 || 
	`sqlôe3MÆlocFaûed
() ){

2211 
exô_¸óã_ödex
;

2217 if–
pTblName
!=0 ){

2223 
	`as£π
–
pName1
 && 
pName2
 );

2224 
iDb
 = 
	`sqlôe3TwoP¨tName
(
pP¨£
, 
pName1
, 
pName2
, &
pName
);

2225 if–
iDb
<0 ) 
exô_¸óã_ödex
;

2227 #i‚de‡
SQLITE_OMIT_TEMPDB


2231 
pTab
 = 
	`sqlôe3SrcLi°Lookup
(
pP¨£
, 
pTblName
);

2232 if–
pName2
 &&ÖName2->
n
==0 && 
pTab
 &&ÖTab->
pSchema
==
db
->
aDb
[1].pSchema ){

2233 
iDb
 = 1;

2237 if–
	`sqlôe3FixInô
(&
sFix
, 
pP¨£
, 
iDb
, "ödex", 
pName
) &&

2238 
	`sqlôe3FixSrcLi°
(&
sFix
, 
pTblName
)

2242 
	`as£π
(0);

2244 
pTab
 = 
	`sqlôe3LoˇãTabÀ
(
pP¨£
, 
pTblName
->
a
[0].
zName
,

2245 
pTblName
->
a
[0].
zD©aba£
);

2246 if–!
pTab
 ) 
exô_¸óã_ödex
;

2247 
	`as£π
–
db
->
aDb
[
iDb
].
pSchema
==
pTab
->pSchema );

2249 
	`as£π
–
pName
==0 );

2250 
pTab
 = 
pP¨£
->
pNewTabÀ
;

2251 if–!
pTab
 ) 
exô_¸óã_ödex
;

2252 
iDb
 = 
	`sqlôe3SchemaToIndex
(
db
, 
pTab
->
pSchema
);

2254 
pDb
 = &
db
->
aDb
[
iDb
];

2256 if–
pTab
==0 || 
pP¨£
->
nEº
 ) 
exô_¸óã_ödex
;

2257 if–
pTab
->
ªadO∆y
 ){

2258 
	`sqlôe3Eº‹Msg
(
pP¨£
, "èbÀ %†mayÇŸ bêödexed", 
pTab
->
zName
);

2259 
exô_¸óã_ödex
;

2261 #i‚de‡
SQLITE_OMIT_VIEW


2262 if–
pTab
->
pSñe˘
 ){

2263 
	`sqlôe3Eº‹Msg
(
pP¨£
, "views mayÇot be indexed");

2264 
exô_¸óã_ödex
;

2281 if–
pName
 ){

2282 
zName
 = 
	`sqlôe3NameFromTokí
(
pName
);

2283 if–
SQLITE_OK
!=
	`sqlôe3RódSchema
(
pP¨£
ËË
exô_¸óã_ödex
;

2284 if–
zName
==0 ) 
exô_¸óã_ödex
;

2285 if–
SQLITE_OK
!=
	`sqlôe3CheckObje˘Name
(
pP¨£
, 
zName
) ){

2286 
exô_¸óã_ödex
;

2288 if–!
db
->
öô
.
busy
 ){

2289 if–
SQLITE_OK
!=
	`sqlôe3RódSchema
(
pP¨£
ËË
exô_¸óã_ödex
;

2290 if–
	`sqlôe3FödIndex
(
db
, 
zName
, 
pDb
->zName)!=0 ){

2291 if–!
ifNŸExi°
 ){

2292 
	`sqlôe3Eº‹Msg
(
pP¨£
, "ödex %†ÆªadyÉxi°s", 
zName
);

2294 
exô_¸óã_ödex
;

2296 if–
	`sqlôe3FödTabÀ
(
db
, 
zName
, 0)!=0 ){

2297 
	`sqlôe3Eº‹Msg
(
pP¨£
, "thîêi†ÆªadyáÅabÀÇamed %s", 
zName
);

2298 
exô_¸óã_ödex
;

2302 
zBuf
[30];

2303 
n
;

2304 
Index
 *
pLo›
;

2305 
pLo›
=
pTab
->
pIndex
, 
n
=1;ÖLo›;ÖLo›ıLo›->
pNext
,Ç++){}

2306 
	`•rötf
(
zBuf
,"_%d",
n
);

2307 
zName
 = 0;

2308 
	`sqlôe3SëSåög
(&
zName
, "sqlôe_autoödex_", 
pTab
->zName, 
zBuf
, (*)0);

2309 if–
zName
==0 ) 
exô_¸óã_ödex
;

2314 #i‚de‡
SQLITE_OMIT_AUTHORIZATION


2316 c⁄° *
zDb
 = 
pDb
->
zName
;

2317 if–
	`sqlôe3AuthCheck
(
pP¨£
, 
SQLITE_INSERT
, 
	`SCHEMA_TABLE
(
iDb
), 0, 
zDb
) ){

2318 
exô_¸óã_ödex
;

2320 
i
 = 
SQLITE_CREATE_INDEX
;

2321 if–!
OMIT_TEMPDB
 && 
iDb
==1 ) 
i
 = 
SQLITE_CREATE_TEMP_INDEX
;

2322 if–
	`sqlôe3AuthCheck
(
pP¨£
, 
i
, 
zName
, 
pTab
->zName, 
zDb
) ){

2323 
exô_¸óã_ödex
;

2332 if–
pLi°
==0 ){

2333 
nuŒId
.
z
 = (
u8
*)
pTab
->
aCﬁ
[pTab->
nCﬁ
-1].
zName
;

2334 
nuŒId
.
n
 = 
	`°æí
((*ÍuŒId.
z
);

2335 
pLi°
 = 
	`sqlôe3Ex¥Li°Aµíd
(0, 0, &
nuŒId
);

2336 if–
pLi°
==0 ) 
exô_¸óã_ödex
;

2337 
pLi°
->
a
[0].
s‹tOrdî
 = sortOrder;

2343 
i
=0; i<
pLi°
->
nEx¥
; i++){

2344 
Ex¥
 *
pEx¥
 = 
pLi°
->
a
[
i
].pExpr;

2345 if–
pEx¥
 ){

2346 
nExåa
 +(1 + 
	`°æí
(
pEx¥
->
pCﬁl
->
zName
));

2353 
nName
 = 
	`°æí
(
zName
);

2354 
nCﬁ
 = 
pLi°
->
nEx¥
;

2355 
pIndex
 = 
	`sqlôeMÆloc
(

2356 (
Index
) +

2357 ()*
nCﬁ
 +

2358 ()*(
nCﬁ
+1) +

2359 (*)*
nCﬁ
 +

2360 (
u8
)*
nCﬁ
 +

2361 
nName
 + 1 +

2362 
nExåa


2364 if–
	`sqlôe3MÆlocFaûed
(ËË
exô_¸óã_ödex
;

2365 
pIndex
->
aiCﬁumn
 = (*)(&pIndex[1]);

2366 
pIndex
->
aiRowE°
 = (*)(&pIndex->
aiCﬁumn
[
nCﬁ
]);

2367 
pIndex
->
azCﬁl
 = (**)(&pIndex->
aiRowE°
[
nCﬁ
+1]);

2368 
pIndex
->
aS‹tOrdî
 = (
u8
 *)(&pIndex->
azCﬁl
[
nCﬁ
]);

2369 
pIndex
->
zName
 = (*)(&pIndex->
aS‹tOrdî
[
nCﬁ
]);

2370 
zExåa
 = (*)(&
pIndex
->
zName
[
nName
+1]);

2371 
	`°r˝y
(
pIndex
->
zName
, zName);

2372 
pIndex
->
pTabÀ
 = 
pTab
;

2373 
pIndex
->
nCﬁumn
 = 
pLi°
->
nEx¥
;

2374 
pIndex
->
⁄Eº‹
 = onError;

2375 
pIndex
->
autoIndex
 = 
pName
==0;

2376 
pIndex
->
pSchema
 = 
db
->
aDb
[
iDb
].pSchema;

2380 if–
pDb
->
pSchema
->
fûe_f‹m©
>=4 ){

2381 
s‹tOrdîMask
 = -1;

2383 
s‹tOrdîMask
 = 0;

2390 
i
=0, 
pLi°Iãm
=
pLi°
->
a
; i<pLi°->
nEx¥
; i++,ÖListItem++){

2391 c⁄° *
zCﬁName
 = 
pLi°Iãm
->
zName
;

2392 
Cﬁumn
 *
pTabCﬁ
;

2393 
ªque°edS‹tOrdî
;

2394 *
zCﬁl
;

2396 
j
=0, 
pTabCﬁ
=
pTab
->
aCﬁ
; j<pTab->
nCﬁ
; j++,ÖTabCol++){

2397 if–
	`sqlôe3SåICmp
(
zCﬁName
, 
pTabCﬁ
->
zName
)==0 ) ;

2399 if–
j
>=
pTab
->
nCﬁ
 ){

2400 
	`sqlôe3Eº‹Msg
(
pP¨£
, "table %s hasÇo columnÇamed %s",

2401 
pTab
->
zName
, 
zCﬁName
);

2402 
exô_¸óã_ödex
;

2404 
pIndex
->
aiCﬁumn
[
i
] = 
j
;

2405 if–
pLi°Iãm
->
pEx¥
 ){

2406 
	`as£π
–
pLi°Iãm
->
pEx¥
->
pCﬁl
 );

2407 
zCﬁl
 = 
zExåa
;

2408 
	`°r˝y
(
zExåa
, 
pLi°Iãm
->
pEx¥
->
pCﬁl
->
zName
);

2409 
zExåa
 +(
	`°æí
(
zCﬁl
) + 1);

2411 
zCﬁl
 = 
pTab
->
aCﬁ
[
j
].zColl;

2412 if–!
zCﬁl
 ){

2413 
zCﬁl
 = 
db
->
pDÊtCﬁl
->
zName
;

2416 if–!
db
->
öô
.
busy
 && !
	`sqlôe3LoˇãCﬁlSeq
(
pP¨£
, 
zCﬁl
, -1) ){

2417 
exô_¸óã_ödex
;

2419 
pIndex
->
azCﬁl
[
i
] = 
zCﬁl
;

2420 
ªque°edS‹tOrdî
 = 
pLi°Iãm
->
s‹tOrdî
 & 
s‹tOrdîMask
;

2421 
pIndex
->
aS‹tOrdî
[
i
] = 
ªque°edS‹tOrdî
;

2423 
	`sqlôe3DeÁu…RowE°
(
pIndex
);

2425 if–
pTab
==
pP¨£
->
pNewTabÀ
 ){

2439 
Index
 *
pIdx
;

2440 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
){

2441 
k
;

2442 
	`as£π
–
pIdx
->
⁄Eº‹
!=
OE_N⁄e
 );

2443 
	`as£π
–
pIdx
->
autoIndex
 );

2444 
	`as£π
–
pIndex
->
⁄Eº‹
!=
OE_N⁄e
 );

2446 if–
pIdx
->
nCﬁumn
!=
pIndex
->nColumn ) ;

2447 
k
=0; k<
pIdx
->
nCﬁumn
; k++){

2448 c⁄° *
z1
 = 
pIdx
->
azCﬁl
[
k
];

2449 c⁄° *
z2
 = 
pIndex
->
azCﬁl
[
k
];

2450 if–
pIdx
->
aiCﬁumn
[
k
]!=
pIndex
->aiColumn[k] ) ;

2451 if–
pIdx
->
aS‹tOrdî
[
k
]!=
pIndex
->aSortOrder[k] ) ;

2452 if–
z1
!=
z2
 && 
	`sqlôe3SåICmp
(z1, z2) ) ;

2454 if–
k
==
pIdx
->
nCﬁumn
 ){

2455 if–
pIdx
->
⁄Eº‹
!=
pIndex
->onError ){

2463 if–!(
pIdx
->
⁄Eº‹
==
OE_DeÁu…
 || 
pIndex
->onError==OE_Default) ){

2464 
	`sqlôe3Eº‹Msg
(
pP¨£
,

2467 if–
pIdx
->
⁄Eº‹
==
OE_DeÁu…
 ){

2468 
pIdx
->
⁄Eº‹
 = 
pIndex
->onError;

2471 
exô_¸óã_ödex
;

2479 if–
db
->
öô
.
busy
 ){

2480 
Index
 *
p
;

2481 
p
 = 
	`sqlôe3HashIn£π
(&
pIndex
->
pSchema
->
idxHash
,

2482 
pIndex
->
zName
, 
	`°æí
(pIndex->zName)+1,ÖIndex);

2483 if–
p
 ){

2484 
	`as£π
–
p
==
pIndex
 );

2485 
exô_¸óã_ödex
;

2487 
db
->
Êags
 |
SQLITE_I¡înCh™ges
;

2488 if–
pTblName
!=0 ){

2489 
pIndex
->
äum
 = 
db
->
öô
.
√wTnum
;

2508 if–
db
->
öô
.
busy
==0 ){

2509 
Vdbe
 *
v
;

2510 *
zStmt
;

2511 
iMem
 = 
pP¨£
->
nMem
++;

2513 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

2514 if–
v
==0 ) 
exô_¸óã_ödex
;

2519 
	`sqlôe3BegöWrôeO≥øti⁄
(
pP¨£
, 1, 
iDb
);

2520 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Cª©eIndex
, 
iDb
, 0);

2521 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemSt‹e
, 
iMem
, 0);

2526 if–
pSèπ
 && 
pEnd
 ){

2528 
zStmt
 = 
	`sqlôe3MPrötf
("CREATE%s INDEX %.*s",

2529 
⁄Eº‹
==
OE_N⁄e
 ? "" : " UNIQUE",

2530 
pEnd
->
z
 - 
pName
->z + 1,

2531 
pName
->
z
);

2535 
zStmt
 = 0;

2540 
	`sqlôe3Ne°edP¨£
(
pP¨£
,

2542 
db
->
aDb
[
iDb
].
zName
, 
	`SCHEMA_TABLE
(iDb),

2543 
pIndex
->
zName
,

2544 
pTab
->
zName
,

2545 
zStmt


2547 
	`sqlôe3VdbeAddOp
(
v
, 
OP_P›
, 1, 0);

2548 
	`sqlôeFªe
(
zStmt
);

2553 if–
pTblName
 ){

2554 
	`sqlôe3RefûlIndex
(
pP¨£
, 
pIndex
, 
iMem
);

2555 
	`sqlôe3Ch™geCookõ
(
db
, 
v
, 
iDb
);

2556 
	`sqlôe3VdbeOp3
(
v
, 
OP_P¨£Schema
, 
iDb
, 0,

2557 
	`sqlôe3MPrötf
("«me='%q'", 
pIndex
->
zName
), 
P3_DYNAMIC
);

2558 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Expúe
, 0, 0);

2567 if–
db
->
öô
.
busy
 || 
pTblName
==0 ){

2568 if–
⁄Eº‹
!=
OE_Rïœ˚
 || 
pTab
->
pIndex
==0

2569 || 
pTab
->
pIndex
->
⁄Eº‹
==
OE_Rïœ˚
){

2570 
pIndex
->
pNext
 = 
pTab
->pIndex;

2571 
pTab
->
pIndex
 =ÖIndex;

2573 
Index
 *
pOthî
 = 
pTab
->
pIndex
;

2574  
pOthî
->
pNext
 &&ÖOthî->pNext->
⁄Eº‹
!=
OE_Rïœ˚
 ){

2575 
pOthî
 =ÖOthî->
pNext
;

2577 
pIndex
->
pNext
 = 
pOthî
->pNext;

2578 
pOthî
->
pNext
 = 
pIndex
;

2580 
pIndex
 = 0;

2584 
exô_¸óã_ödex
:

2585 if–
pIndex
 ){

2586 
	`‰ìIndex
(
pIndex
);

2588 
	`sqlôe3Ex¥Li°Dñëe
(
pLi°
);

2589 
	`sqlôe3SrcLi°Dñëe
(
pTblName
);

2590 
	`sqlôeFªe
(
zName
);

2592 
	}
}

2598 
	$sqlôe3MöimumFûeF‹m©
(
P¨£
 *
pP¨£
, 
iDb
, 
möF‹m©
){

2599 
Vdbe
 *
v
;

2600 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

2601 if–
v
 ){

2602 
	`sqlôe3VdbeAddOp
(
v
, 
OP_RódCookõ
, 
iDb
, 1);

2603 
	`sqlôe3VdbeAddOp
(
v
, 
OP_I¡egî
, 
möF‹m©
, 0);

2604 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Ge
, 0, 
	`sqlôe3VdbeCuºítAddr
(v)+3);

2605 
	`sqlôe3VdbeAddOp
(
v
, 
OP_I¡egî
, 
möF‹m©
, 0);

2606 
	`sqlôe3VdbeAddOp
(
v
, 
OP_SëCookõ
, 
iDb
, 1);

2608 
	}
}

2628 
	$sqlôe3DeÁu…RowE°
(
Index
 *
pIdx
){

2629 *
a
 = 
pIdx
->
aiRowE°
;

2630 
i
;

2631 
	`as£π
–
a
!=0 );

2632 
a
[0] = 1000000;

2633 
i
=
pIdx
->
nCﬁumn
; i>=1; i--){

2634 
a
[
i
] = 10;

2636 if–
pIdx
->
⁄Eº‹
!=
OE_N⁄e
 ){

2637 
a
[
pIdx
->
nCﬁumn
] = 1;

2639 
	}
}

2645 
	$sqlôe3Dr›Index
(
P¨£
 *
pP¨£
, 
SrcLi°
 *
pName
, 
ifExi°s
){

2646 
Index
 *
pIndex
;

2647 
Vdbe
 *
v
;

2648 
sqlôe3
 *
db
 = 
pP¨£
->db;

2649 
iDb
;

2651 if–
pP¨£
->
nEº
 || 
	`sqlôe3MÆlocFaûed
() ){

2652 
exô_dr›_ödex
;

2654 
	`as£π
–
pName
->
nSrc
==1 );

2655 if–
SQLITE_OK
!=
	`sqlôe3RódSchema
(
pP¨£
) ){

2656 
exô_dr›_ödex
;

2658 
pIndex
 = 
	`sqlôe3FödIndex
(
db
, 
pName
->
a
[0].
zName
,ÖName->a[0].
zD©aba£
);

2659 if–
pIndex
==0 ){

2660 if–!
ifExi°s
 ){

2661 
	`sqlôe3Eº‹Msg
(
pP¨£
, "nÿsuch index: %S", 
pName
, 0);

2663 
pP¨£
->
checkSchema
 = 1;

2664 
exô_dr›_ödex
;

2666 if–
pIndex
->
autoIndex
 ){

2667 
	`sqlôe3Eº‹Msg
(
pP¨£
, "indexássociated with UNIQUE "

2669 
exô_dr›_ödex
;

2671 
iDb
 = 
	`sqlôe3SchemaToIndex
(
db
, 
pIndex
->
pSchema
);

2672 #i‚de‡
SQLITE_OMIT_AUTHORIZATION


2674 
code
 = 
SQLITE_DROP_INDEX
;

2675 
TabÀ
 *
pTab
 = 
pIndex
->
pTabÀ
;

2676 c⁄° *
zDb
 = 
db
->
aDb
[
iDb
].
zName
;

2677 c⁄° *
zTab
 = 
	`SCHEMA_TABLE
(
iDb
);

2678 if–
	`sqlôe3AuthCheck
(
pP¨£
, 
SQLITE_DELETE
, 
zTab
, 0, 
zDb
) ){

2679 
exô_dr›_ödex
;

2681 if–!
OMIT_TEMPDB
 && 
iDb
 ) 
code
 = 
SQLITE_DROP_TEMP_INDEX
;

2682 if–
	`sqlôe3AuthCheck
(
pP¨£
, 
code
, 
pIndex
->
zName
, 
pTab
->zName, 
zDb
) ){

2683 
exô_dr›_ödex
;

2689 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

2690 if–
v
 ){

2691 
	`sqlôe3Ne°edP¨£
(
pP¨£
,

2693 
db
->
aDb
[
iDb
].
zName
, 
	`SCHEMA_TABLE
(iDb),

2694 
pIndex
->
zName


2696 
	`sqlôe3Ch™geCookõ
(
db
, 
v
, 
iDb
);

2697 
	`de°royRoŸPage
(
pP¨£
, 
pIndex
->
äum
, 
iDb
);

2698 
	`sqlôe3VdbeOp3
(
v
, 
OP_Dr›Index
, 
iDb
, 0, 
pIndex
->
zName
, 0);

2701 
exô_dr›_ödex
:

2702 
	`sqlôe3SrcLi°Dñëe
(
pName
);

2703 
	}
}

2727 
	$sqlôe3AºayAŒoˇã
(**
µAºay
, 
szE¡ry
, 
öôSize
){

2728 *
p
;

2729 *
™
 = (*)&
µAºay
[1];

2730 if–
™
[0]>=an[1] ){

2731 *
pNew
;

2732 
√wSize
;

2733 
√wSize
 = 
™
[1]*2 + 
öôSize
;

2734 
pNew
 = 
	`sqlôeRóŒoc
(*
µAºay
, 
√wSize
*
szE¡ry
);

2735 if–
pNew
==0 ){

2738 
™
[1] = 
√wSize
;

2739 *
µAºay
 = 
pNew
;

2741 
p
 = *
µAºay
;

2742 
	`mem£t
(&
p
[
™
[0]*
szE¡ry
], 0, szEntry);

2743  
™
[0]++;

2744 
	}
}

2752 
IdLi°
 *
	$sqlôe3IdLi°Aµíd
(
IdLi°
 *
pLi°
, 
Tokí
 *
pTokí
){

2753 
i
;

2754 if–
pLi°
==0 ){

2755 
pLi°
 = 
	`sqlôeMÆloc
–(
IdLi°
) );

2756 if–
pLi°
==0 )  0;

2757 
pLi°
->
nAŒoc
 = 0;

2759 
i
 = 
	`sqlôe3AºayAŒoˇã
((**)&
pLi°
->
a
, (pList->a[0]), 5);

2760 if–
i
<0 ){

2761 
	`sqlôe3IdLi°Dñëe
(
pLi°
);

2764 
pLi°
->
a
[
i
].
zName
 = 
	`sqlôe3NameFromTokí
(
pTokí
);

2765  
pLi°
;

2766 
	}
}

2771 
	$sqlôe3IdLi°Dñëe
(
IdLi°
 *
pLi°
){

2772 
i
;

2773 if–
pLi°
==0 ) ;

2774 
i
=0; i<
pLi°
->
nId
; i++){

2775 
	`sqlôeFªe
(
pLi°
->
a
[
i
].
zName
);

2777 
	`sqlôeFªe
(
pLi°
->
a
);

2778 
	`sqlôeFªe
(
pLi°
);

2779 
	}
}

2785 
	$sqlôe3IdLi°Index
(
IdLi°
 *
pLi°
, c⁄° *
zName
){

2786 
i
;

2787 if–
pLi°
==0 )  -1;

2788 
i
=0; i<
pLi°
->
nId
; i++){

2789 if–
	`sqlôe3SåICmp
(
pLi°
->
a
[
i
].
zName
, zName)==0 )  i;

2792 
	}
}

2819 
SrcLi°
 *
	$sqlôe3SrcLi°Aµíd
(
SrcLi°
 *
pLi°
, 
Tokí
 *
pTabÀ
, Tokí *
pD©aba£
){

2820 
SrcLi°_ôem
 *
pIãm
;

2821 if–
pLi°
==0 ){

2822 
pLi°
 = 
	`sqlôeMÆloc
–(
SrcLi°
) );

2823 if–
pLi°
==0 )  0;

2824 
pLi°
->
nAŒoc
 = 1;

2826 if–
pLi°
->
nSrc
>ıLi°->
nAŒoc
 ){

2827 
SrcLi°
 *
pNew
;

2828 
pLi°
->
nAŒoc
 *= 2;

2829 
pNew
 = 
	`sqlôeRóŒoc
(
pLi°
,

2830 (*
pLi°
Ë+ (pLi°->
nAŒoc
-1)*’Li°->
a
[0]) );

2831 if–
pNew
==0 ){

2832 
	`sqlôe3SrcLi°Dñëe
(
pLi°
);

2835 
pLi°
 = 
pNew
;

2837 
pIãm
 = &
pLi°
->
a
[pLi°->
nSrc
];

2838 
	`mem£t
(
pIãm
, 0, (
pLi°
->
a
[0]));

2839 if–
pD©aba£
 &&ÖD©aba£->
z
==0 ){

2840 
pD©aba£
 = 0;

2842 if–
pD©aba£
 && 
pTabÀ
 ){

2843 
Tokí
 *
pTemp
 = 
pD©aba£
;

2844 
pD©aba£
 = 
pTabÀ
;

2845 
pTabÀ
 = 
pTemp
;

2847 
pIãm
->
zName
 = 
	`sqlôe3NameFromTokí
(
pTabÀ
);

2848 
pIãm
->
zD©aba£
 = 
	`sqlôe3NameFromTokí
(
pD©aba£
);

2849 
pIãm
->
iCurs‹
 = -1;

2850 
pLi°
->
nSrc
++;

2851  
pLi°
;

2852 
	}
}

2857 
	$sqlôe3SrcLi°AssignCurs‹s
(
P¨£
 *
pP¨£
, 
SrcLi°
 *
pLi°
){

2858 
i
;

2859 
SrcLi°_ôem
 *
pIãm
;

2860 
	`as£π
(
pLi°
 || 
	`sqlôe3MÆlocFaûed
() );

2861 if–
pLi°
 ){

2862 
i
=0, 
pIãm
=
pLi°
->
a
; i<pLi°->
nSrc
; i++,ÖItem++){

2863 if–
pIãm
->
iCurs‹
>=0 ) ;

2864 
pIãm
->
iCurs‹
 = 
pP¨£
->
nTab
++;

2865 if–
pIãm
->
pSñe˘
 ){

2866 
	`sqlôe3SrcLi°AssignCurs‹s
(
pP¨£
, 
pIãm
->
pSñe˘
->
pSrc
);

2870 
	}
}

2875 
	$sqlôe3SrcLi°AddAlüs
(
SrcLi°
 *
pLi°
, 
Tokí
 *
pTokí
){

2876 if–
pLi°
 &&ÖLi°->
nSrc
>0 ){

2877 
pLi°
->
a
[pLi°->
nSrc
-1].
zAlüs
 = 
	`sqlôe3NameFromTokí
(
pTokí
);

2879 
	}
}

2884 
	$sqlôe3SrcLi°Dñëe
(
SrcLi°
 *
pLi°
){

2885 
i
;

2886 
SrcLi°_ôem
 *
pIãm
;

2887 if–
pLi°
==0 ) ;

2888 
pIãm
=
pLi°
->
a
, 
i
=0; i<pLi°->
nSrc
; i++,ÖItem++){

2889 
	`sqlôeFªe
(
pIãm
->
zD©aba£
);

2890 
	`sqlôeFªe
(
pIãm
->
zName
);

2891 
	`sqlôeFªe
(
pIãm
->
zAlüs
);

2892 
	`sqlôe3DñëeTabÀ
(0, 
pIãm
->
pTab
);

2893 
	`sqlôe3Sñe˘Dñëe
(
pIãm
->
pSñe˘
);

2894 
	`sqlôe3Ex¥Dñëe
(
pIãm
->
pOn
);

2895 
	`sqlôe3IdLi°Dñëe
(
pIãm
->
pUsög
);

2897 
	`sqlôeFªe
(
pLi°
);

2898 
	}
}

2903 
	$sqlôe3BegöTønß˘i⁄
(
P¨£
 *
pP¨£
, 
ty≥
){

2904 
sqlôe3
 *
db
;

2905 
Vdbe
 *
v
;

2906 
i
;

2908 if–
pP¨£
==0 || (
db
ıP¨£->db)==0 || db->
aDb
[0].
pBt
==0 ) ;

2909 if–
pP¨£
->
nEº
 || 
	`sqlôe3MÆlocFaûed
() ) ;

2910 if–
	`sqlôe3AuthCheck
(
pP¨£
, 
SQLITE_TRANSACTION
, "BEGIN", 0, 0) ) ;

2912 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

2913 if–!
v
 ) ;

2914 if–
ty≥
!=
TK_DEFERRED
 ){

2915 
i
=0; i<
db
->
nDb
; i++){

2916 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Tønß˘i⁄
, 
i
, (
ty≥
==
TK_EXCLUSIVE
)+1);

2919 
	`sqlôe3VdbeAddOp
(
v
, 
OP_AutoCommô
, 0, 0);

2920 
	}
}

2925 
	$sqlôe3CommôTønß˘i⁄
(
P¨£
 *
pP¨£
){

2926 
sqlôe3
 *
db
;

2927 
Vdbe
 *
v
;

2929 if–
pP¨£
==0 || (
db
ıP¨£->db)==0 || db->
aDb
[0].
pBt
==0 ) ;

2930 if–
pP¨£
->
nEº
 || 
	`sqlôe3MÆlocFaûed
() ) ;

2931 if–
	`sqlôe3AuthCheck
(
pP¨£
, 
SQLITE_TRANSACTION
, "COMMIT", 0, 0) ) ;

2933 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

2934 if–
v
 ){

2935 
	`sqlôe3VdbeAddOp
(
v
, 
OP_AutoCommô
, 1, 0);

2937 
	}
}

2942 
	$sqlôe3RﬁlbackTønß˘i⁄
(
P¨£
 *
pP¨£
){

2943 
sqlôe3
 *
db
;

2944 
Vdbe
 *
v
;

2946 if–
pP¨£
==0 || (
db
ıP¨£->db)==0 || db->
aDb
[0].
pBt
==0 ) ;

2947 if–
pP¨£
->
nEº
 || 
	`sqlôe3MÆlocFaûed
() ) ;

2948 if–
	`sqlôe3AuthCheck
(
pP¨£
, 
SQLITE_TRANSACTION
, "ROLLBACK", 0, 0) ) ;

2950 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

2951 if–
v
 ){

2952 
	`sqlôe3VdbeAddOp
(
v
, 
OP_AutoCommô
, 1, 1);

2954 
	}
}

2960 
	$sqlôe3O≥nTempD©aba£
(
P¨£
 *
pP¨£
){

2961 
sqlôe3
 *
db
 = 
pP¨£
->db;

2962 if–
db
->
aDb
[1].
pBt
==0 && !
pP¨£
->
ex∂aö
 ){

2963 
rc
 = 
	`sqlôe3BåìFa˘‹y
(
db
, 0, 0, 
MAX_PAGES
, &db->
aDb
[1].
pBt
);

2964 if–
rc
!=
SQLITE_OK
 ){

2965 
	`sqlôe3Eº‹Msg
(
pP¨£
, "unableÅo openáÅemporary database "

2967 
pP¨£
->
rc
 =Ñc;

2970 if–
db
->
Êags
 & !db->
autoCommô
 ){

2971 
rc
 = 
	`sqlôe3BåìBegöTøns
(
db
->
aDb
[1].
pBt
, 1);

2972 if–
rc
!=
SQLITE_OK
 ){

2973 
	`sqlôe3Eº‹Msg
(
pP¨£
, "unableÅo getá writeÜock on "

2975 
pP¨£
->
rc
 =Ñc;

2979 
	`as£π
–
db
->
aDb
[1].
pSchema
 );

2982 
	}
}

3006 
	$sqlôe3CodeVîifySchema
(
P¨£
 *
pP¨£
, 
iDb
){

3007 
sqlôe3
 *
db
;

3008 
Vdbe
 *
v
;

3009 
mask
;

3011 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

3012 if–
v
==0 ) ;

3013 
db
 = 
pP¨£
->db;

3014 if–
pP¨£
->
cookõGŸo
==0 ){

3015 
pP¨£
->
cookõGŸo
 = 
	`sqlôe3VdbeAddOp
(
v
, 
OP_GŸo
, 0, 0)+1;

3017 if–
iDb
>=0 ){

3018 
	`as£π
–
iDb
<
db
->
nDb
 );

3019 
	`as£π
–
db
->
aDb
[
iDb
].
pBt
!=0 || iDb==1 );

3020 
	`as£π
–
iDb
<32 );

3021 
mask
 = 1<<
iDb
;

3022 if–(
pP¨£
->
cookõMask
 & 
mask
)==0 ){

3023 
pP¨£
->
cookõMask
 |
mask
;

3024 
pP¨£
->
cookõVÆue
[
iDb
] = 
db
->
aDb
[iDb].
pSchema
->
schema_cookõ
;

3025 if–!
OMIT_TEMPDB
 && 
iDb
==1 ){

3026 
	`sqlôe3O≥nTempD©aba£
(
pP¨£
);

3030 
	}
}

3050 
	$sqlôe3BegöWrôeO≥øti⁄
(
P¨£
 *
pP¨£
, 
£tSèãmít
, 
iDb
){

3051 
Vdbe
 *
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

3052 if–
v
==0 ) ;

3053 
	`sqlôe3CodeVîifySchema
(
pP¨£
, 
iDb
);

3054 
pP¨£
->
wrôeMask
 |1<<
iDb
;

3055 if–
£tSèãmít
 && 
pP¨£
->
√°ed
==0 ){

3056 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Sèãmít
, 
iDb
, 0);

3058 if–(
OMIT_TEMPDB
 || 
iDb
!=1Ë&& 
pP¨£
->
db
->
aDb
[1].
pBt
!=0 ){

3059 
	`sqlôe3BegöWrôeO≥øti⁄
(
pP¨£
, 
£tSèãmít
, 1);

3061 
	}
}

3067 #i‚de‡
SQLITE_OMIT_REINDEX


3068 
	$cﬁœti⁄M©ch
(c⁄° *
zCﬁl
, 
Index
 *
pIndex
){

3069 
i
;

3070 
i
=0; i<
pIndex
->
nCﬁumn
; i++){

3071 c⁄° *
z
 = 
pIndex
->
azCﬁl
[
i
];

3072 if–
z
==
zCﬁl
 || (z && zCﬁ»&& 0==
	`sqlôe3SåICmp
(z, zColl)) ){

3077 
	}
}

3084 #i‚de‡
SQLITE_OMIT_REINDEX


3085 
	$ªödexTabÀ
(
P¨£
 *
pP¨£
, 
TabÀ
 *
pTab
, c⁄° *
zCﬁl
){

3086 
Index
 *
pIndex
;

3088 
pIndex
=
pTab
->pIndex;ÖIndex;ÖIndexıIndex->
pNext
){

3089 if–
zCﬁl
==0 || 
	`cﬁœti⁄M©ch
(zCﬁl, 
pIndex
) ){

3090 
iDb
 = 
	`sqlôe3SchemaToIndex
(
pP¨£
->
db
, 
pTab
->
pSchema
);

3091 
	`sqlôe3BegöWrôeO≥øti⁄
(
pP¨£
, 0, 
iDb
);

3092 
	`sqlôe3RefûlIndex
(
pP¨£
, 
pIndex
, -1);

3095 
	}
}

3103 #i‚de‡
SQLITE_OMIT_REINDEX


3104 
	$ªödexD©aba£s
(
P¨£
 *
pP¨£
, c⁄° *
zCﬁl
){

3105 
Db
 *
pDb
;

3106 
iDb
;

3107 
sqlôe3
 *
db
 = 
pP¨£
->db;

3108 
HashEÀm
 *
k
;

3109 
TabÀ
 *
pTab
;

3111 
iDb
=0, 
pDb
=
db
->
aDb
; iDb<db->
nDb
; iDb++,ÖDb++){

3112 if–
pDb
==0 ) ;

3113 
k
=
	`sqlôeHashFú°
(&
pDb
->
pSchema
->
tblHash
); k; k=
	`sqlôeHashNext
(k)){

3114 
pTab
 = (
TabÀ
*)
	`sqlôeHashD©a
(
k
);

3115 
	`ªödexTabÀ
(
pP¨£
, 
pTab
, 
zCﬁl
);

3118 
	}
}

3134 #i‚de‡
SQLITE_OMIT_REINDEX


3135 
	$sqlôe3Reödex
(
P¨£
 *
pP¨£
, 
Tokí
 *
pName1
, Tokí *
pName2
){

3136 
CﬁlSeq
 *
pCﬁl
;

3137 *
z
;

3138 c⁄° *
zDb
;

3139 
TabÀ
 *
pTab
;

3140 
Index
 *
pIndex
;

3141 
iDb
;

3142 
sqlôe3
 *
db
 = 
pP¨£
->db;

3143 
Tokí
 *
pObjName
;

3147 if–
SQLITE_OK
!=
	`sqlôe3RódSchema
(
pP¨£
) ){

3151 if–
pName1
==0 ||ÖName1->
z
==0 ){

3152 
	`ªödexD©aba£s
(
pP¨£
, 0);

3154 }if–
pName2
==0 ||ÖName2->
z
==0 ){

3155 
	`as£π
–
pName1
->
z
 );

3156 
pCﬁl
 = 
	`sqlôe3FödCﬁlSeq
(
db
, 
	`ENC
(db), (*)
pName1
->
z
,ÖName1->
n
, 0);

3157 if–
pCﬁl
 ){

3158 *
zCﬁl
 = 
	`sqlôeSåNDup
((c⁄° *)
pName1
->
z
,ÖName1->
n
);

3159 if–
zCﬁl
 ){

3160 
	`ªödexD©aba£s
(
pP¨£
, 
zCﬁl
);

3161 
	`sqlôeFªe
(
zCﬁl
);

3166 
iDb
 = 
	`sqlôe3TwoP¨tName
(
pP¨£
, 
pName1
, 
pName2
, &
pObjName
);

3167 if–
iDb
<0 ) ;

3168 
z
 = 
	`sqlôe3NameFromTokí
(
pObjName
);

3169 
zDb
 = 
db
->
aDb
[
iDb
].
zName
;

3170 
pTab
 = 
	`sqlôe3FödTabÀ
(
db
, 
z
, 
zDb
);

3171 if–
pTab
 ){

3172 
	`ªödexTabÀ
(
pP¨£
, 
pTab
, 0);

3173 
	`sqlôeFªe
(
z
);

3176 
pIndex
 = 
	`sqlôe3FödIndex
(
db
, 
z
, 
zDb
);

3177 
	`sqlôeFªe
(
z
);

3178 if–
pIndex
 ){

3179 
	`sqlôe3BegöWrôeO≥øti⁄
(
pP¨£
, 0, 
iDb
);

3180 
	`sqlôe3RefûlIndex
(
pP¨£
, 
pIndex
, -1);

3183 
	`sqlôe3Eº‹Msg
(
pP¨£
, "unableÅo identifyÅhe objectÅo beÑeindexed");

3184 
	}
}

3197 
KeyInfo
 *
	$sqlôe3IndexKeyöfo
(
P¨£
 *
pP¨£
, 
Index
 *
pIdx
){

3198 
i
;

3199 
nCﬁ
 = 
pIdx
->
nCﬁumn
;

3200 
nByãs
 = (
KeyInfo
Ë+ (
nCﬁ
-1)*(
CﬁlSeq
*) +ÇCol;

3201 
KeyInfo
 *
pKey
 = (KeyInfÿ*)
	`sqlôeMÆloc
(
nByãs
);

3203 if–
pKey
 ){

3204 
pKey
->
aS‹tOrdî
 = (
u8
 *)&’Key->
aCﬁl
[
nCﬁ
]);

3205 
	`as£π
–&
pKey
->
aS‹tOrdî
[
nCﬁ
]==&(((
u8
 *ÌKey)[
nByãs
]) );

3206 
i
=0; i<
nCﬁ
; i++){

3207 *
zCﬁl
 = 
pIdx
->
azCﬁl
[
i
];

3208 
	`as£π
–
zCﬁl
 );

3209 
pKey
->
aCﬁl
[
i
] = 
	`sqlôe3LoˇãCﬁlSeq
(
pP¨£
, 
zCﬁl
, -1);

3210 
pKey
->
aS‹tOrdî
[
i
] = 
pIdx
->aSortOrder[i];

3212 
pKey
->
nFõld
 = 
nCﬁ
;

3215 if–
pP¨£
->
nEº
 ){

3216 
	`sqlôeFªe
(
pKey
);

3217 
pKey
 = 0;

3219  
pKey
;

3220 
	}
}

	@callback.c

19 
	~"sqlôeI¡.h
"

26 
	$ˇŒCﬁlNìded
(
sqlôe3
 *
db
, c⁄° *
zName
, 
nName
){

27 
	`as£π
–!
db
->
xCﬁlNìded
 || !db->
xCﬁlNìded16
 );

28 if–
nName
<0 )ÇNamê
	`°æí
(
zName
);

29 if–
db
->
xCﬁlNìded
 ){

30 *
zExã∫Æ
 = 
	`sqlôeSåNDup
(
zName
, 
nName
);

31 if–!
zExã∫Æ
 ) ;

32 
db
->
	`xCﬁlNìded
(db->
pCﬁlNìdedArg
, db, ()
	`ENC
(db), 
zExã∫Æ
);

33 
	`sqlôeFªe
(
zExã∫Æ
);

35 #i‚de‡
SQLITE_OMIT_UTF16


36 if–
db
->
xCﬁlNìded16
 ){

37 c⁄° *
zExã∫Æ
;

38 
sqlôe3_vÆue
 *
pTmp
 = 
	`sqlôe3VÆueNew
();

39 
	`sqlôe3VÆueSëSå
(
pTmp
, 
nName
, 
zName
, 
SQLITE_UTF8
, 
SQLITE_STATIC
);

40 
zExã∫Æ
 = 
	`sqlôe3VÆueText
(
pTmp
, 
SQLITE_UTF16NATIVE
);

41 if–
zExã∫Æ
 ){

42 
db
->
	`xCﬁlNìded16
(db->
pCﬁlNìdedArg
, db, ()
	`ENC
(db), 
zExã∫Æ
);

44 
	`sqlôe3VÆueFªe
(
pTmp
);

47 
	}
}

56 
	$sy¡hCﬁlSeq
(
sqlôe3
 *
db
, 
CﬁlSeq
 *
pCﬁl
){

57 
CﬁlSeq
 *
pCﬁl2
;

58 *
z
 = 
pCﬁl
->
zName
;

59 
n
 = 
	`°æí
(
z
);

60 
i
;

61 c⁄° 
u8
 
aEnc
[] = { 
SQLITE_UTF16BE
, 
SQLITE_UTF16LE
, 
SQLITE_UTF8
 };

62 
i
=0; i<3; i++){

63 
pCﬁl2
 = 
	`sqlôe3FödCﬁlSeq
(
db
, 
aEnc
[
i
], 
z
, 
n
, 0);

64 if–
pCﬁl2
->
xCmp
!=0 ){

65 
	`mem˝y
(
pCﬁl
, 
pCﬁl2
, (
CﬁlSeq
));

66  
SQLITE_OK
;

69  
SQLITE_ERROR
;

70 
	}
}

85 
CﬁlSeq
 *
	$sqlôe3GëCﬁlSeq
(

86 
sqlôe3
* 
db
,

87 
CﬁlSeq
 *
pCﬁl
,

88 c⁄° *
zName
,

89 
nName


91 
CﬁlSeq
 *
p
;

93 
p
 = 
pCﬁl
;

94 if–!
p
 ){

95 
p
 = 
	`sqlôe3FödCﬁlSeq
(
db
, 
	`ENC
(db), 
zName
, 
nName
, 0);

97 if–!
p
 || !p->
xCmp
 ){

101 
	`ˇŒCﬁlNìded
(
db
, 
zName
, 
nName
);

102 
p
 = 
	`sqlôe3FödCﬁlSeq
(
db
, 
	`ENC
(db), 
zName
, 
nName
, 0);

104 if–
p
 && !p->
xCmp
 && 
	`sy¡hCﬁlSeq
(
db
,Ö) ){

105 
p
 = 0;

107 
	`as£π
–!
p
 ||Ö->
xCmp
 );

108  
p
;

109 
	}
}

122 
	$sqlôe3CheckCﬁlSeq
(
P¨£
 *
pP¨£
, 
CﬁlSeq
 *
pCﬁl
){

123 if–
pCﬁl
 ){

124 c⁄° *
zName
 = 
pCﬁl
->zName;

125 
CﬁlSeq
 *
p
 = 
	`sqlôe3GëCﬁlSeq
(
pP¨£
->
db
, 
pCﬁl
, 
zName
, -1);

126 if–!
p
 ){

127 if–
pP¨£
->
nEº
==0 ){

128 
	`sqlôe3Eº‹Msg
(
pP¨£
, "nÿsuch cﬁœti⁄ sequí˚: %s", 
zName
);

130 
pP¨£
->
nEº
++;

131  
SQLITE_ERROR
;

133 
	`as£π
–
p
==
pCﬁl
 );

135  
SQLITE_OK
;

136 
	}
}

153 
CﬁlSeq
 *
	$födCﬁlSeqE¡ry
(

154 
sqlôe3
 *
db
,

155 c⁄° *
zName
,

156 
nName
,

157 
¸óã


159 
CﬁlSeq
 *
pCﬁl
;

160 if–
nName
<0 )ÇNamê
	`°æí
(
zName
);

161 
pCﬁl
 = 
	`sqlôe3HashFöd
(&
db
->
aCﬁlSeq
, 
zName
, 
nName
);

163 if–0==
pCﬁl
 && 
¸óã
 ){

164 
pCﬁl
 = 
	`sqlôeMÆloc
–3*(*pCﬁlË+ 
nName
 + 1 );

165 if–
pCﬁl
 ){

166 
CﬁlSeq
 *
pDñ
 = 0;

167 
pCﬁl
[0].
zName
 = (*)&pColl[3];

168 
pCﬁl
[0].
íc
 = 
SQLITE_UTF8
;

169 
pCﬁl
[1].
zName
 = (*)&pColl[3];

170 
pCﬁl
[1].
íc
 = 
SQLITE_UTF16LE
;

171 
pCﬁl
[2].
zName
 = (*)&pColl[3];

172 
pCﬁl
[2].
íc
 = 
SQLITE_UTF16BE
;

173 
	`mem˝y
(
pCﬁl
[0].
zName
, zName, 
nName
);

174 
pCﬁl
[0].
zName
[
nName
] = 0;

175 
pDñ
 = 
	`sqlôe3HashIn£π
(&
db
->
aCﬁlSeq
, 
pCﬁl
[0].
zName
, 
nName
,ÖColl);

181 
	`as£π
–!
pDñ
 ||

182 (
	`sqlôe3MÆlocFaûed
(Ë&& 
pDñ
==
pCﬁl
) );

183 
	`sqlôeFªe
(
pDñ
);

186  
pCﬁl
;

187 
	}
}

197 
CﬁlSeq
 *
	$sqlôe3FödCﬁlSeq
(

198 
sqlôe3
 *
db
,

199 
u8
 
íc
,

200 c⁄° *
zName
,

201 
nName
,

202 
¸óã


204 
CﬁlSeq
 *
pCﬁl
;

205 if–
zName
 ){

206 
pCﬁl
 = 
	`födCﬁlSeqE¡ry
(
db
, 
zName
, 
nName
, 
¸óã
);

208 
pCﬁl
 = 
db
->
pDÊtCﬁl
;

210 
	`as£π
–
SQLITE_UTF8
==1 && 
SQLITE_UTF16LE
==2 && 
SQLITE_UTF16BE
==3 );

211 
	`as£π
–
íc
>=
SQLITE_UTF8
 &&Énc<=
SQLITE_UTF16BE
 );

212 if–
pCﬁl
 )ÖCﬁ»+
íc
-1;

213  
pCﬁl
;

214 
	}
}

236 
FuncDef
 *
	$sqlôe3FödFun˘i⁄
(

237 
sqlôe3
 *
db
,

238 c⁄° *
zName
,

239 
nName
,

240 
nArg
,

241 
u8
 
íc
,

242 
¸óãFœg


244 
FuncDef
 *
p
;

245 
FuncDef
 *
pFú°
;

246 
FuncDef
 *
pBe°
 = 0;

247 
be°m©ch
 = 0;

250 
	`as£π
–
íc
==
SQLITE_UTF8
 ||Énc==
SQLITE_UTF16LE
 ||Énc==
SQLITE_UTF16BE
 );

251 if–
nArg
<-1 )ÇArg = -1;

253 
pFú°
 = (
FuncDef
*)
	`sqlôe3HashFöd
(&
db
->
aFunc
, 
zName
, 
nName
);

254 
p
=
pFú°
;Ö;Öı->
pNext
){

273 if–
p
->
nArg
==-1 ||Ö->nArg==nArg ||ÇArg==-1 ){

274 
m©ch
 = 1;

275 if–
p
->
nArg
==nArg ||ÇArg==-1 ){

276 
m©ch
 = 4;

278 if–
íc
==
p
->
iPªfEnc
 ){

279 
m©ch
 += 2;

281 if–(
íc
==
SQLITE_UTF16LE
 && 
p
->
iPªfEnc
==
SQLITE_UTF16BE
) ||

282 (
íc
==
SQLITE_UTF16BE
 && 
p
->
iPªfEnc
==
SQLITE_UTF16LE
) ){

283 
m©ch
 += 1;

286 if–
m©ch
>
be°m©ch
 ){

287 
pBe°
 = 
p
;

288 
be°m©ch
 = 
m©ch
;

297 if–
¸óãFœg
 && 
be°m©ch
<6 &&

298 (
pBe°
 = 
	`sqlôeMÆloc
((*pBe°)+
nName
))!=0 ){

299 
pBe°
->
nArg
 =ÇArg;

300 
pBe°
->
pNext
 = 
pFú°
;

301 
pBe°
->
iPªfEnc
 = 
íc
;

302 
	`mem˝y
(
pBe°
->
zName
, zName, 
nName
);

303 
pBe°
->
zName
[
nName
] = 0;

304 if–
pBe°
==
	`sqlôe3HashIn£π
(&
db
->
aFunc
,pBe°->
zName
,
nName
,(*)pBest) ){

305 
	`sqlôeFªe
(
pBe°
);

310 if–
pBe°
 && (pBe°->
xSãp
 ||ÖBe°->
xFunc
 || 
¸óãFœg
) ){

311  
pBe°
;

314 
	}
}

	@complete.c

21 
	~"sqlôeI¡.h
"

22 #i‚de‡
SQLITE_OMIT_COMPLETE


27 c⁄° 
sqlôe3IsIdCh¨
[];

28 
	#IdCh¨
(
C
Ë(((
c
=C)&0x80)!=0 || (c>0x1‡&& 
sqlôe3IsIdCh¨
[c-0x20]))

	)

35 
	#tkSEMI
 0

	)

36 
	#tkWS
 1

	)

37 
	#tkOTHER
 2

	)

38 
	#tkEXPLAIN
 3

	)

39 
	#tkCREATE
 4

	)

40 
	#tkTEMP
 5

	)

41 
	#tkTRIGGER
 6

	)

42 
	#tkEND
 7

	)

94 
	$sqlôe3_com∂ëe
(c⁄° *
zSql
){

95 
u8
 
°©e
 = 0;

96 
u8
 
tokí
;

98 #i‚de‡
SQLITE_OMIT_TRIGGER


102 c⁄° 
u8
 
å™s
[7][8] = {

117 c⁄° 
u8
 
å™s
[2][3] = {

125  *
zSql
 ){

126  *
zSql
 ){

128 
tokí
 = 
tkSEMI
;

136 
tokí
 = 
tkWS
;

140 if–
zSql
[1]!='*' ){

141 
tokí
 = 
tkOTHER
;

144 
zSql
 += 2;

145  
zSql
[0] && (zSql[0]!='*' || zSql[1]!='/') ){ zSql++; }

146 if–
zSql
[0]==0 )  0;

147 
zSql
++;

148 
tokí
 = 
tkWS
;

152 if–
zSql
[1]!='-' ){

153 
tokí
 = 
tkOTHER
;

156  *
zSql
 && *zSql!='\n' ){ zSql++; }

157 if–*
zSql
==0 )  
°©e
==0;

158 
tokí
 = 
tkWS
;

162 
zSql
++;

163  *
zSql
 && *zSql!=']' ){ zSql++; }

164 if–*
zSql
==0 )  0;

165 
tokí
 = 
tkOTHER
;

171 
c
 = *
zSql
;

172 
zSql
++;

173  *
zSql
 && *zSql!=
c
 ){ zSql++; }

174 if–*
zSql
==0 )  0;

175 
tokí
 = 
tkOTHER
;

179 
c
;

180 if–
	`IdCh¨
((
u8
)*
zSql
) ){

182 
nId
;

183 
nId
=1; 
	`IdCh¨
(
zSql
[nId]);ÇId++){}

184 #ifde‡
SQLITE_OMIT_TRIGGER


185 
tokí
 = 
tkOTHER
;

187  *
zSql
 ){

189 if–
nId
==6 && 
	`sqlôe3SåNICmp
(
zSql
, "create", 6)==0 ){

190 
tokí
 = 
tkCREATE
;

192 
tokí
 = 
tkOTHER
;

197 if–
nId
==7 && 
	`sqlôe3SåNICmp
(
zSql
, "trigger", 7)==0 ){

198 
tokí
 = 
tkTRIGGER
;

199 }if–
nId
==4 && 
	`sqlôe3SåNICmp
(
zSql
, "temp", 4)==0 ){

200 
tokí
 = 
tkTEMP
;

201 }if–
nId
==9 && 
	`sqlôe3SåNICmp
(
zSql
, "temporary", 9)==0 ){

202 
tokí
 = 
tkTEMP
;

204 
tokí
 = 
tkOTHER
;

209 if–
nId
==3 && 
	`sqlôe3SåNICmp
(
zSql
, "end", 3)==0 ){

210 
tokí
 = 
tkEND
;

212 #i‚de‡
SQLITE_OMIT_EXPLAIN


213 if–
nId
==7 && 
	`sqlôe3SåNICmp
(
zSql
, "explain", 7)==0 ){

214 
tokí
 = 
tkEXPLAIN
;

218 
tokí
 = 
tkOTHER
;

223 
tokí
 = 
tkOTHER
;

228 
zSql
 +
nId
-1;

231 
tokí
 = 
tkOTHER
;

236 
°©e
 = 
å™s
[°©e][
tokí
];

237 
zSql
++;

239  
°©e
==0;

240 
	}
}

242 #i‚de‡
SQLITE_OMIT_UTF16


248 
	$sqlôe3_com∂ëe16
(c⁄° *
zSql
){

249 
sqlôe3_vÆue
 *
pVÆ
;

250 c⁄° *
zSql8
;

251 
rc
 = 0;

253 
pVÆ
 = 
	`sqlôe3VÆueNew
();

254 
	`sqlôe3VÆueSëSå
(
pVÆ
, -1, 
zSql
, 
SQLITE_UTF16NATIVE
, 
SQLITE_STATIC
);

255 
zSql8
 = 
	`sqlôe3VÆueText
(
pVÆ
, 
SQLITE_UTF8
);

256 if–
zSql8
 ){

257 
rc
 = 
	`sqlôe3_com∂ëe
(
zSql8
);

259 
	`sqlôe3VÆueFªe
(
pVÆ
);

260  
	`sqlôe3ApiExô
(0, 
rc
);

261 
	}
}

	@date.c

50 
	~"sqlôeI¡.h
"

51 
	~"os.h
"

52 
	~<˘y≥.h
>

53 
	~<°dlib.h
>

54 
	~<as£π.h
>

55 
	~<time.h
>

57 #i‚de‡
SQLITE_OMIT_DATETIME_FUNCS


62 
D©eTime
 
	tD©eTime
;

63 
	sD©eTime
 {

64 
	mrJD
;

65 
	mY
, 
	mM
, 
	mD
;

66 
	mh
, 
	mm
;

67 
	mtz
;

68 
	ms
;

69 
	mvÆidYMD
;

70 
	mvÆidHMS
;

71 
	mvÆidJD
;

72 
	mvÆidTZ
;

89 
	$gëDigôs
(c⁄° *
zD©e
, ...){

90 
va_li°
 
≠
;

91 
vÆ
;

92 
N
;

93 
mö
;

94 
max
;

95 
√xtC
;

96 *
pVÆ
;

97 
˙t
 = 0;

98 
	`va_°¨t
(
≠
, 
zD©e
);

100 
N
 = 
	`va_¨g
(
≠
, );

101 
mö
 = 
	`va_¨g
(
≠
, );

102 
max
 = 
	`va_¨g
(
≠
, );

103 
√xtC
 = 
	`va_¨g
(
≠
, );

104 
pVÆ
 = 
	`va_¨g
(
≠
, *);

105 
vÆ
 = 0;

106  
N
-- ){

107 if–!
	`isdigô
(*(
u8
*)
zD©e
) ){

108 
íd_gëDigôs
;

110 
vÆ
 = vÆ*10 + *
zD©e
 - '0';

111 
zD©e
++;

113 if–
vÆ
<
mö
 || vÆ>
max
 || (
√xtC
!=0 &&ÇextC!=*
zD©e
) ){

114 
íd_gëDigôs
;

116 *
pVÆ
 = 
vÆ
;

117 
zD©e
++;

118 
˙t
++;

119 } 
√xtC
 );

120 
íd_gëDigôs
:

121 
	`va_íd
(
≠
);

122  
˙t
;

123 
	}
}

129 
	#gëVÆue
 
sqlôe3AtoF


	)

143 
	$∑r£Timez⁄e
(c⁄° *
zD©e
, 
D©eTime
 *
p
){

144 
sgn
 = 0;

145 
nHr
, 
nMn
;

146  
	`is•a˚
(*(
u8
*)
zD©e
) ){ zDate++; }

147 
p
->
tz
 = 0;

148 if–*
zD©e
=='-' ){

149 
sgn
 = -1;

150 }if–*
zD©e
=='+' ){

151 
sgn
 = +1;

153  *
zD©e
!=0;

155 
zD©e
++;

156 if–
	`gëDigôs
(
zD©e
, 2, 0, 14, ':', &
nHr
, 2, 0, 59, 0, &
nMn
)!=2 ){

159 
zD©e
 += 5;

160 
p
->
tz
 = 
sgn
*(
nMn
 + 
nHr
*60);

161  
	`is•a˚
(*(
u8
*)
zD©e
) ){ zDate++; }

162  *
zD©e
!=0;

163 
	}
}

172 
	$∑r£HhMmSs
(c⁄° *
zD©e
, 
D©eTime
 *
p
){

173 
h
, 
m
, 
s
;

174 
ms
 = 0.0;

175 if–
	`gëDigôs
(
zD©e
, 2, 0, 24, ':', &
h
, 2, 0, 59, 0, &
m
)!=2 ){

178 
zD©e
 += 5;

179 if–*
zD©e
==':' ){

180 
zD©e
++;

181 if–
	`gëDigôs
(
zD©e
, 2, 0, 59, 0, &
s
)!=1 ){

184 
zD©e
 += 2;

185 if–*
zD©e
=='.' && 
	`isdigô
((
u8
)zDate[1]) ){

186 
rSˇÀ
 = 1.0;

187 
zD©e
++;

188  
	`isdigô
(*(
u8
*)
zD©e
) ){

189 
ms
 = ms*10.0 + *
zD©e
 - '0';

190 
rSˇÀ
 *= 10.0;

191 
zD©e
++;

193 
ms
 /
rSˇÀ
;

196 
s
 = 0;

198 
p
->
vÆidJD
 = 0;

199 
p
->
vÆidHMS
 = 1;

200 
p
->
h
 = h;

201 
p
->
m
 = m;

202 
p
->
s
 = s + 
ms
;

203 if–
	`∑r£Timez⁄e
(
zD©e
, 
p
) )  1;

204 
p
->
vÆidTZ
 =Ö->
tz
!=0;

206 
	}
}

214 
	$compuãJD
(
D©eTime
 *
p
){

215 
Y
, 
M
, 
D
, 
A
, 
B
, 
X1
, 
X2
;

217 if–
p
->
vÆidJD
 ) ;

218 if–
p
->
vÆidYMD
 ){

219 
Y
 = 
p
->Y;

220 
M
 = 
p
->M;

221 
D
 = 
p
->D;

223 
Y
 = 2000;

224 
M
 = 1;

225 
D
 = 1;

227 if–
M
<=2 ){

228 
Y
--;

229 
M
 += 12;

231 
A
 = 
Y
/100;

232 
B
 = 2 - 
A
 + (A/4);

233 
X1
 = 365.25*(
Y
+4716);

234 
X2
 = 30.6001*(
M
+1);

235 
p
->
rJD
 = 
X1
 + 
X2
 + 
D
 + 
B
 - 1524.5;

236 
p
->
vÆidJD
 = 1;

237 
p
->
vÆidYMD
 = 0;

238 if–
p
->
vÆidHMS
 ){

239 
p
->
rJD
 +’->
h
*3600.0 +Ö->
m
*60.0 +Ö->
s
)/86400.0;

240 if–
p
->
vÆidTZ
 ){

241 
p
->
rJD
 -p->
tz
*60/86400.0;

242 
p
->
vÆidHMS
 = 0;

243 
p
->
vÆidTZ
 = 0;

246 
	}
}

260 
	$∑r£YyyyMmDd
(c⁄° *
zD©e
, 
D©eTime
 *
p
){

261 
Y
, 
M
, 
D
, 
√g
;

263 if–
zD©e
[0]=='-' ){

264 
zD©e
++;

265 
√g
 = 1;

267 
√g
 = 0;

269 if–
	`gëDigôs
(
zD©e
,4,0,9999,'-',&
Y
,2,1,12,'-',&
M
,2,1,31,0,&
D
)!=3 ){

272 
zD©e
 += 10;

273  
	`is•a˚
(*(
u8
*)
zD©e
) || 'T'==*(u8*)zDate ){ zDate++; }

274 if–
	`∑r£HhMmSs
(
zD©e
, 
p
)==0 ){

276 }if–*
zD©e
==0 ){

277 
p
->
vÆidHMS
 = 0;

281 
p
->
vÆidJD
 = 0;

282 
p
->
vÆidYMD
 = 1;

283 
p
->
Y
 = 
√g
 ? -Y : Y;

284 
p
->
M
 = M;

285 
p
->
D
 = D;

286 if–
p
->
vÆidTZ
 ){

287 
	`compuãJD
(
p
);

290 
	}
}

308 
	$∑r£D©eOrTime
(c⁄° *
zD©e
, 
D©eTime
 *
p
){

309 
	`mem£t
(
p
, 0, (*p));

310 if–
	`∑r£YyyyMmDd
(
zD©e
,
p
)==0 ){

312 }if–
	`∑r£HhMmSs
(
zD©e
, 
p
)==0 ){

314 }if–
	`sqlôe3SåICmp
(
zD©e
,"now")==0){

315 
r
;

316 
	`sqlôe3OsCuºítTime
(&
r
);

317 
p
->
rJD
 = 
r
;

318 
p
->
vÆidJD
 = 1;

320 }if–
	`sqlôe3IsNumbî
(
zD©e
, 0, 
SQLITE_UTF8
) ){

321 
	`gëVÆue
(
zD©e
, &
p
->
rJD
);

322 
p
->
vÆidJD
 = 1;

326 
	}
}

331 
	$compuãYMD
(
D©eTime
 *
p
){

332 
Z
, 
A
, 
B
, 
C
, 
D
, 
E
, 
X1
;

333 if–
p
->
vÆidYMD
 ) ;

334 if–!
p
->
vÆidJD
 ){

335 
p
->
Y
 = 2000;

336 
p
->
M
 = 1;

337 
p
->
D
 = 1;

339 
Z
 = 
p
->
rJD
 + 0.5;

340 
A
 = (
Z
 - 1867216.25)/36524.25;

341 
A
 = 
Z
 + 1 + A - (A/4);

342 
B
 = 
A
 + 1524;

343 
C
 = (
B
 - 122.1)/365.25;

344 
D
 = 365.25*
C
;

345 
E
 = (
B
-
D
)/30.6001;

346 
X1
 = 30.6001*
E
;

347 
p
->
D
 = 
B
 - D - 
X1
;

348 
p
->
M
 = 
E
<14 ? E-1 : E-13;

349 
p
->
Y
 =Ö->
M
>2 ? 
C
 - 4716 : C - 4715;

351 
p
->
vÆidYMD
 = 1;

352 
	}
}

357 
	$compuãHMS
(
D©eTime
 *
p
){

358 
Z
, 
s
;

359 if–
p
->
vÆidHMS
 ) ;

360 
Z
 = 
p
->
rJD
 + 0.5;

361 
s
 = (
p
->
rJD
 + 0.5 - 
Z
)*86400000.0 + 0.5;

362 
p
->
s
 = 0.001*s;

363 
s
 = 
p
->s;

364 
p
->
s
 -= s;

365 
p
->
h
 = 
s
/3600;

366 
s
 -
p
->
h
*3600;

367 
p
->
m
 = 
s
/60;

368 
p
->
s
 +†-Ö->
m
*60;

369 
p
->
vÆidHMS
 = 1;

370 
	}
}

375 
	$compuãYMD_HMS
(
D©eTime
 *
p
){

376 
	`compuãYMD
(
p
);

377 
	`compuãHMS
(
p
);

378 
	}
}

383 
	$˛órYMD_HMS_TZ
(
D©eTime
 *
p
){

384 
p
->
vÆidYMD
 = 0;

385 
p
->
vÆidHMS
 = 0;

386 
p
->
vÆidTZ
 = 0;

387 
	}
}

393 
	$loˇ…imeOff£t
(
D©eTime
 *
p
){

394 
D©eTime
 
x
, 
y
;

395 
time_t
 
t
;

396 
tm
 *
pTm
;

397 
x
 = *
p
;

398 
	`compuãYMD_HMS
(&
x
);

399 if–
x
.
Y
<1971 || x.Y>=2038 ){

400 
x
.
Y
 = 2000;

401 
x
.
M
 = 1;

402 
x
.
D
 = 1;

403 
x
.
h
 = 0;

404 
x
.
m
 = 0;

405 
x
.
s
 = 0.0;

407 
s
 = 
x
.s + 0.5;

408 
x
.
s
 = s;

410 
x
.
tz
 = 0;

411 
x
.
vÆidJD
 = 0;

412 
	`compuãJD
(&
x
);

413 
t
 = (
x
.
rJD
-2440587.5)*86400.0 + 0.5;

414 
	`sqlôe3OsE¡îMuãx
();

415 
pTm
 = 
	`loˇ…ime
(&
t
);

416 
y
.
Y
 = 
pTm
->
tm_yór
 + 1900;

417 
y
.
M
 = 
pTm
->
tm_m⁄
 + 1;

418 
y
.
D
 = 
pTm
->
tm_mday
;

419 
y
.
h
 = 
pTm
->
tm_hour
;

420 
y
.
m
 = 
pTm
->
tm_mö
;

421 
y
.
s
 = 
pTm
->
tm_£c
;

422 
	`sqlôe3OsLóveMuãx
();

423 
y
.
vÆidYMD
 = 1;

424 
y
.
vÆidHMS
 = 1;

425 
y
.
vÆidJD
 = 0;

426 
y
.
vÆidTZ
 = 0;

427 
	`compuãJD
(&
y
);

428  
y
.
rJD
 - 
x
.rJD;

429 
	}
}

452 
	$∑r£Modifõr
(c⁄° *
zMod
, 
D©eTime
 *
p
){

453 
rc
 = 1;

454 
n
;

455 
r
;

456 *
z
, 
zBuf
[30];

457 
z
 = 
zBuf
;

458 
n
=0;Ç<(
zBuf
)-1 && 
zMod
[n];Ç++){

459 
z
[
n
] = 
	`tﬁowî
(
zMod
[n]);

461 
z
[
n
] = 0;

462  
z
[0] ){

469 if–
	`°rcmp
(
z
, "localtime")==0 ){

470 
	`compuãJD
(
p
);

471 
p
->
rJD
 +
	`loˇ…imeOff£t
(p);

472 
	`˛órYMD_HMS_TZ
(
p
);

473 
rc
 = 0;

484 if–
	`°rcmp
(
z
, "unixïoch")==0 && 
p
->
vÆidJD
 ){

485 
p
->
rJD
 =Ö->rJD/86400.0 + 2440587.5;

486 
	`˛órYMD_HMS_TZ
(
p
);

487 
rc
 = 0;

488 }if–
	`°rcmp
(
z
, "utc")==0 ){

489 
c1
;

490 
	`compuãJD
(
p
);

491 
c1
 = 
	`loˇ…imeOff£t
(
p
);

492 
p
->
rJD
 -
c1
;

493 
	`˛órYMD_HMS_TZ
(
p
);

494 
p
->
rJD
 +
c1
 - 
	`loˇ…imeOff£t
(p);

495 
rc
 = 0;

507 if–
	`°∫cmp
(
z
, "wìkday ", 8)==0 && 
	`gëVÆue
(&z[8],&
r
)>0

508 && (
n
=
r
)==r &&Ç>=0 &&Ñ<7 ){

509 
Z
;

510 
	`compuãYMD_HMS
(
p
);

511 
p
->
vÆidTZ
 = 0;

512 
p
->
vÆidJD
 = 0;

513 
	`compuãJD
(
p
);

514 
Z
 = 
p
->
rJD
 + 1.5;

515 
Z
 %= 7;

516 if–
Z
>
n
 ) Z -= 7;

517 
p
->
rJD
 +
n
 - 
Z
;

518 
	`˛órYMD_HMS_TZ
(
p
);

519 
rc
 = 0;

530 if–
	`°∫cmp
(
z
, "start of ", 9)!=0 ) ;

531 
z
 += 9;

532 
	`compuãYMD
(
p
);

533 
p
->
vÆidHMS
 = 1;

534 
p
->
h
 =Ö->
m
 = 0;

535 
p
->
s
 = 0.0;

536 
p
->
vÆidTZ
 = 0;

537 
p
->
vÆidJD
 = 0;

538 if–
	`°rcmp
(
z
,"month")==0 ){

539 
p
->
D
 = 1;

540 
rc
 = 0;

541 }if–
	`°rcmp
(
z
,"year")==0 ){

542 
	`compuãYMD
(
p
);

543 
p
->
M
 = 1;

544 
p
->
D
 = 1;

545 
rc
 = 0;

546 }if–
	`°rcmp
(
z
,"day")==0 ){

547 
rc
 = 0;

563 
n
 = 
	`gëVÆue
(
z
, &
r
);

564 if–
n
<=0 ) ;

565 if–
z
[
n
]==':' ){

571 c⁄° *
z2
 = 
z
;

572 
D©eTime
 
tx
;

573 
day
;

574 if–!
	`isdigô
(*(
u8
*)
z2
) ) z2++;

575 
	`mem£t
(&
tx
, 0, (tx));

576 if–
	`∑r£HhMmSs
(
z2
, &
tx
) ) ;

577 
	`compuãJD
(&
tx
);

578 
tx
.
rJD
 -= 0.5;

579 
day
 = ()
tx
.
rJD
;

580 
tx
.
rJD
 -
day
;

581 if–
z
[0]=='-' ) 
tx
.
rJD
 = -tx.rJD;

582 
	`compuãJD
(
p
);

583 
	`˛órYMD_HMS_TZ
(
p
);

584 
p
->
rJD
 +
tx
.rJD;

585 
rc
 = 0;

588 
z
 +
n
;

589  
	`is•a˚
(*(
u8
*)
z
) ) z++;

590 
n
 = 
	`°æí
(
z
);

591 if–
n
>10 ||Ç<3 ) ;

592 if–
z
[
n
-1]=='s' ){ z[n-1] = 0;Ç--; }

593 
	`compuãJD
(
p
);

594 
rc
 = 0;

595 if–
n
==3 && 
	`°rcmp
(
z
,"day")==0 ){

596 
p
->
rJD
 +
r
;

597 }if–
n
==4 && 
	`°rcmp
(
z
,"hour")==0 ){

598 
p
->
rJD
 +
r
/24.0;

599 }if–
n
==6 && 
	`°rcmp
(
z
,"minute")==0 ){

600 
p
->
rJD
 +
r
/(24.0*60.0);

601 }if–
n
==6 && 
	`°rcmp
(
z
,"second")==0 ){

602 
p
->
rJD
 +
r
/(24.0*60.0*60.0);

603 }if–
n
==5 && 
	`°rcmp
(
z
,"month")==0 ){

604 
x
, 
y
;

605 
	`compuãYMD_HMS
(
p
);

606 
p
->
M
 +
r
;

607 
x
 = 
p
->
M
>0 ? (p->M-1)/12 : (p->M-12)/12;

608 
p
->
Y
 +
x
;

609 
p
->
M
 -
x
*12;

610 
p
->
vÆidJD
 = 0;

611 
	`compuãJD
(
p
);

612 
y
 = 
r
;

613 if–
y
!=
r
 ){

614 
p
->
rJD
 +(
r
 - 
y
)*30.0;

616 }if–
n
==4 && 
	`°rcmp
(
z
,"year")==0 ){

617 
	`compuãYMD_HMS
(
p
);

618 
p
->
Y
 +
r
;

619 
p
->
vÆidJD
 = 0;

620 
	`compuãJD
(
p
);

622 
rc
 = 1;

624 
	`˛órYMD_HMS_TZ
(
p
);

631  
rc
;

632 
	}
}

640 
	$isD©e
(
¨gc
, 
sqlôe3_vÆue
 **
¨gv
, 
D©eTime
 *
p
){

641 
i
;

642 if–
¨gc
==0 )  1;

643 if–
SQLITE_NULL
==
	`sqlôe3_vÆue_ty≥
(
¨gv
[0]) ||

644 
	`∑r£D©eOrTime
((*)
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]), 
p
) )  1;

645 
i
=1; i<
¨gc
; i++){

646 if–
SQLITE_NULL
==
	`sqlôe3_vÆue_ty≥
(
¨gv
[
i
]) ||

647 
	`∑r£Modifõr
((*)
	`sqlôe3_vÆue_ãxt
(
¨gv
[
i
]), 
p
) )  1;

650 
	}
}

663 
	$julündayFunc
(

664 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

665 
¨gc
,

666 
sqlôe3_vÆue
 **
¨gv


668 
D©eTime
 
x
;

669 if–
	`isD©e
(
¨gc
, 
¨gv
, &
x
)==0 ){

670 
	`compuãJD
(&
x
);

671 
	`sqlôe3_ªsu…_doubÀ
(
c⁄ãxt
, 
x
.
rJD
);

673 
	}
}

680 
	$d©ëimeFunc
(

681 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

682 
¨gc
,

683 
sqlôe3_vÆue
 **
¨gv


685 
D©eTime
 
x
;

686 if–
	`isD©e
(
¨gc
, 
¨gv
, &
x
)==0 ){

687 
zBuf
[100];

688 
	`compuãYMD_HMS
(&
x
);

689 
	`•rötf
(
zBuf
, "%04d-%02d-%02d %02d:%02d:%02d",
x
.
Y
, x.
M
, x.
D
, x.
h
, x.
m
,

690 ()(
x
.
s
));

691 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, 
zBuf
, -1, 
SQLITE_TRANSIENT
);

693 
	}
}

700 
	$timeFunc
(

701 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

702 
¨gc
,

703 
sqlôe3_vÆue
 **
¨gv


705 
D©eTime
 
x
;

706 if–
	`isD©e
(
¨gc
, 
¨gv
, &
x
)==0 ){

707 
zBuf
[100];

708 
	`compuãHMS
(&
x
);

709 
	`•rötf
(
zBuf
, "%02d:%02d:%02d", 
x
.
h
, x.
m
, ()x.
s
);

710 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, 
zBuf
, -1, 
SQLITE_TRANSIENT
);

712 
	}
}

719 
	$d©eFunc
(

720 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

721 
¨gc
,

722 
sqlôe3_vÆue
 **
¨gv


724 
D©eTime
 
x
;

725 if–
	`isD©e
(
¨gc
, 
¨gv
, &
x
)==0 ){

726 
zBuf
[100];

727 
	`compuãYMD
(&
x
);

728 
	`•rötf
(
zBuf
, "%04d-%02d-%02d", 
x
.
Y
, x.
M
, x.
D
);

729 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, 
zBuf
, -1, 
SQLITE_TRANSIENT
);

731 
	}
}

752 
	$°r·imeFunc
(

753 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

754 
¨gc
,

755 
sqlôe3_vÆue
 **
¨gv


757 
D©eTime
 
x
;

758 
n
, 
i
, 
j
;

759 *
z
;

760 c⁄° *
zFmt
 = (c⁄° *)
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]);

761 
zBuf
[100];

762 if–
zFmt
==0 || 
	`isD©e
(
¨gc
-1, 
¨gv
+1, &
x
) ) ;

763 
i
=0, 
n
=1; 
zFmt
[i]; i++,Ç++){

764 if–
zFmt
[
i
]=='%' ){

765  
zFmt
[
i
+1] ){

772 
n
++;

778 
n
 += 8;

781 
n
 += 3;

784 
n
 += 8;

788 
n
 += 50;

793 
i
++;

796 if–
n
<(
zBuf
) ){

797 
z
 = 
zBuf
;

799 
z
 = 
	`sqlôeMÆloc
–
n
 );

800 if–
z
==0 ) ;

802 
	`compuãJD
(&
x
);

803 
	`compuãYMD_HMS
(&
x
);

804 
i
=
j
=0; 
zFmt
[i]; i++){

805 if–
zFmt
[
i
]!='%' ){

806 
z
[
j
++] = 
zFmt
[
i
];

808 
i
++;

809  
zFmt
[
i
] ){

810 'd': 
	`•rötf
(&
z
[
j
],"%02d",
x
.
D
); j+=2; ;

812 
s
 = 
x
.s;

813 
ms
 = (
x
.
s
 - s)*1000.0;

814 
	`•rötf
(&
z
[
j
],"%02d.%03d",
s
,
ms
);

815 
j
 +
	`°æí
(&
z
[j]);

818 'H': 
	`•rötf
(&
z
[
j
],"%02d",
x
.
h
); j+=2; ;

821 
nDay
;

822 
D©eTime
 
y
 = 
x
;

823 
y
.
vÆidJD
 = 0;

824 
y
.
M
 = 1;

825 
y
.
D
 = 1;

826 
	`compuãJD
(&
y
);

827 
nDay
 = 
x
.
rJD
 - 
y
.rJD;

828 if–
zFmt
[
i
]=='W' ){

829 
wd
;

830 
wd
 = (()(
x
.
rJD
+0.5)) % 7;

831 
	`•rötf
(&
z
[
j
],"%02d",(
nDay
+7-
wd
)/7);

832 
j
 += 2;

834 
	`•rötf
(&
z
[
j
],"%03d",
nDay
+1);

835 
j
 += 3;

839 'J': 
	`•rötf
(&
z
[
j
],"%.16g",
x
.
rJD
); j+=
	`°æí
(&z[j]); ;

840 'm': 
	`•rötf
(&
z
[
j
],"%02d",
x
.
M
); j+=2; ;

841 'M': 
	`•rötf
(&
z
[
j
],"%02d",
x
.
m
); j+=2; ;

843 
	`•rötf
(&
z
[
j
],"%d",()((
x
.
rJD
-2440587.5)*86400.0 + 0.5));

844 
j
 +
	`°æí
(&
z
[j]);

847 'S': 
	`•rötf
(&
z
[
j
],"%02d",()(
x
.
s
+0.5)); j+=2; ;

848 'w': 
z
[
j
++] = ((()(
x
.
rJD
+1.5)) % 7) + '0'; ;

849 'Y': 
	`•rötf
(&
z
[
j
],"%04d",
x
.
Y
); j+=
	`°æí
(&z[j]); ;

850 '%': 
z
[
j
++] = '%'; ;

854 
z
[
j
] = 0;

855 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, 
z
, -1, 
SQLITE_TRANSIENT
);

856 if–
z
!=
zBuf
 ){

857 
	`sqlôeFªe
(
z
);

859 
	}
}

866 
	$˘imeFunc
(

867 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

868 
¨gc
,

869 
sqlôe3_vÆue
 **
¨gv


871 
sqlôe3_vÆue
 *
pVÆ
 = 
	`sqlôe3VÆueNew
();

872 if–
pVÆ
 ){

873 
	`sqlôe3VÆueSëSå
(
pVÆ
, -1, "now", 
SQLITE_UTF8
, 
SQLITE_STATIC
);

874 
	`timeFunc
(
c⁄ãxt
, 1, &
pVÆ
);

875 
	`sqlôe3VÆueFªe
(
pVÆ
);

877 
	}
}

884 
	$cd©eFunc
(

885 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

886 
¨gc
,

887 
sqlôe3_vÆue
 **
¨gv


889 
sqlôe3_vÆue
 *
pVÆ
 = 
	`sqlôe3VÆueNew
();

890 if–
pVÆ
 ){

891 
	`sqlôe3VÆueSëSå
(
pVÆ
, -1, "now", 
SQLITE_UTF8
, 
SQLITE_STATIC
);

892 
	`d©eFunc
(
c⁄ãxt
, 1, &
pVÆ
);

893 
	`sqlôe3VÆueFªe
(
pVÆ
);

895 
	}
}

902 
	$˘ime°ampFunc
(

903 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

904 
¨gc
,

905 
sqlôe3_vÆue
 **
¨gv


907 
sqlôe3_vÆue
 *
pVÆ
 = 
	`sqlôe3VÆueNew
();

908 if–
pVÆ
 ){

909 
	`sqlôe3VÆueSëSå
(
pVÆ
, -1, "now", 
SQLITE_UTF8
, 
SQLITE_STATIC
);

910 
	`d©ëimeFunc
(
c⁄ãxt
, 1, &
pVÆ
);

911 
	`sqlôe3VÆueFªe
(
pVÆ
);

913 
	}
}

916 #ifde‡
SQLITE_OMIT_DATETIME_FUNCS


928 
	$cuºítTimeFunc
(

929 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

930 
¨gc
,

931 
sqlôe3_vÆue
 **
¨gv


933 
time_t
 
t
;

934 *
zF‹m©
 = (*)
	`sqlôe3_u£r_d©a
(
c⁄ãxt
);

935 
zBuf
[20];

937 
	`time
(&
t
);

938 #ifde‡
SQLITE_TEST


940 
sqlôe3_cuºít_time
;

941 if–
sqlôe3_cuºít_time
 ){

942 
t
 = 
sqlôe3_cuºít_time
;

947 
	`sqlôe3OsE¡îMuãx
();

948 
	`°r·ime
(
zBuf
, 20, 
zF‹m©
, 
	`gmtime
(&
t
));

949 
	`sqlôe3OsLóveMuãx
();

951 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, 
zBuf
, -1, 
SQLITE_TRANSIENT
);

952 
	}
}

960 
	$sqlôe3Regi°îD©eTimeFun˘i⁄s
(
sqlôe3
 *
db
){

961 #i‚de‡
SQLITE_OMIT_DATETIME_FUNCS


963 *
zName
;

964 
nArg
;

965 (*
xFunc
)(
sqlôe3_c⁄ãxt
*,,
sqlôe3_vÆue
**);

966 } 
aFuncs
[] = {

967 { "julünday", -1, 
julündayFunc
 },

968 { "d©e", -1, 
d©eFunc
 },

969 { "time", -1, 
timeFunc
 },

970 { "d©ëime", -1, 
d©ëimeFunc
 },

971 { "°r·ime", -1, 
°r·imeFunc
 },

972 { "cuºít_time", 0, 
˘imeFunc
 },

973 { "cuºít_time°amp", 0, 
˘ime°ampFunc
 },

974 { "cuºít_d©e", 0, 
cd©eFunc
 },

976 
i
;

978 
i
=0; i<(
aFuncs
)/(aFuncs[0]); i++){

979 
	`sqlôe3Cª©eFunc
(
db
, 
aFuncs
[
i
].
zName
,áFuncs[i].
nArg
,

980 
SQLITE_UTF8
, 0, 
aFuncs
[
i
].
xFunc
, 0, 0);

984 *
zName
;

985 *
zF‹m©
;

986 } 
aFuncs
[] = {

991 
i
;

993 
i
=0; i<(
aFuncs
)/(aFuncs[0]); i++){

994 
	`sqlôe3Cª©eFunc
(
db
, 
aFuncs
[
i
].
zName
, 0, 
SQLITE_UTF8
,

995 
aFuncs
[
i
].
zF‹m©
, 
cuºítTimeFunc
, 0, 0);

998 
	}
}

	@delete.c

17 
	~"sqlôeI¡.h
"

24 
TabÀ
 *
	$sqlôe3SrcLi°Lookup
(
P¨£
 *
pP¨£
, 
SrcLi°
 *
pSrc
){

25 
TabÀ
 *
pTab
 = 0;

26 
i
;

27 
SrcLi°_ôem
 *
pIãm
;

28 
i
=0, 
pIãm
=
pSrc
->
a
; i<pSrc->
nSrc
; i++,ÖItem++){

29 
pTab
 = 
	`sqlôe3LoˇãTabÀ
(
pP¨£
, 
pIãm
->
zName
,ÖIãm->
zD©aba£
);

30 
	`sqlôe3DñëeTabÀ
(
pP¨£
->
db
, 
pIãm
->
pTab
);

31 
pIãm
->
pTab
 =ÖTab;

32 if–
pTab
 ){

33 
pTab
->
nRef
++;

36  
pTab
;

37 
	}
}

44 
	$sqlôe3IsRódO∆y
(
P¨£
 *
pP¨£
, 
TabÀ
 *
pTab
, 
võwOk
){

45 if–
pTab
->
ªadO∆y
 && (
pP¨£
->
db
->
Êags
 & 
SQLITE_WrôeSchema
)==0

46 && 
pP¨£
->
√°ed
==0 ){

47 
	`sqlôe3Eº‹Msg
(
pP¨£
, "èbÀ %†mayÇŸ bêmodifõd", 
pTab
->
zName
);

50 #i‚de‡
SQLITE_OMIT_VIEW


51 if–!
võwOk
 && 
pTab
->
pSñe˘
 ){

52 
	`sqlôe3Eº‹Msg
(
pP¨£
,"ˇ¬Ÿ modify %†beˇu£ iài†®võw",
pTab
->
zName
);

57 
	}
}

62 
	$sqlôe3O≥nTabÀ
(

63 
P¨£
 *
p
,

64 
iCur
,

65 
iDb
,

66 
TabÀ
 *
pTab
,

67 
›code


69 
Vdbe
 *
v
 = 
	`sqlôe3GëVdbe
(
p
);

70 
	`as£π
–
›code
==
OP_O≥nWrôe
 || opcode==
OP_O≥nRód
 );

71 
	`sqlôe3TabÀLock
(
p
, 
iDb
, 
pTab
->
äum
, (
›code
==
OP_O≥nWrôe
),ÖTab->
zName
);

72 
	`sqlôe3VdbeAddOp
(
v
, 
OP_I¡egî
, 
iDb
, 0);

73 
	`VdbeCommít
((
v
, "# %s", 
pTab
->
zName
));

74 
	`sqlôe3VdbeAddOp
(
v
, 
›code
, 
iCur
, 
pTab
->
äum
);

75 
	`sqlôe3VdbeAddOp
(
v
, 
OP_SëNumCﬁumns
, 
iCur
, 
pTab
->
nCﬁ
);

76 
	}
}

86 
	$sqlôe3DñëeFrom
(

87 
P¨£
 *
pP¨£
,

88 
SrcLi°
 *
pTabLi°
,

89 
Ex¥
 *
pWhîe


91 
Vdbe
 *
v
;

92 
TabÀ
 *
pTab
;

93 c⁄° *
zDb
;

94 
íd
, 
addr
 = 0;

95 
i
;

96 
WhîeInfo
 *
pWInfo
;

97 
Index
 *
pIdx
;

98 
iCur
;

99 
sqlôe3
 *
db
;

100 
AuthC⁄ãxt
 
sC⁄ãxt
;

101 
ﬁdIdx
 = -1;

102 
NameC⁄ãxt
 
sNC
;

103 
iDb
;

105 #i‚de‡
SQLITE_OMIT_TRIGGER


106 
isVõw
;

107 
åiggîs_exi°
 = 0;

110 
sC⁄ãxt
.
pP¨£
 = 0;

111 if–
pP¨£
->
nEº
 || 
	`sqlôe3MÆlocFaûed
() ){

112 
dñëe_‰om_˛ónup
;

114 
db
 = 
pP¨£
->db;

115 
	`as£π
–
pTabLi°
->
nSrc
==1 );

122 
pTab
 = 
	`sqlôe3SrcLi°Lookup
(
pP¨£
, 
pTabLi°
);

123 if–
pTab
==0 ) 
dñëe_‰om_˛ónup
;

128 #i‚de‡
SQLITE_OMIT_TRIGGER


129 
åiggîs_exi°
 = 
	`sqlôe3TriggîsExi°
(
pP¨£
, 
pTab
, 
TK_DELETE
, 0);

130 
isVõw
 = 
pTab
->
pSñe˘
!=0;

132 
	#åiggîs_exi°
 0

	)

133 
	#isVõw
 0

	)

135 #ifde‡
SQLITE_OMIT_VIEW


136 #unde‡
isVõw


137 
	#isVõw
 0

	)

140 if–
	`sqlôe3IsRódO∆y
(
pP¨£
, 
pTab
, 
åiggîs_exi°
) ){

141 
dñëe_‰om_˛ónup
;

143 
iDb
 = 
	`sqlôe3SchemaToIndex
(
db
, 
pTab
->
pSchema
);

144 
	`as£π
–
iDb
<
db
->
nDb
 );

145 
zDb
 = 
db
->
aDb
[
iDb
].
zName
;

146 if–
	`sqlôe3AuthCheck
(
pP¨£
, 
SQLITE_DELETE
, 
pTab
->
zName
, 0, 
zDb
) ){

147 
dñëe_‰om_˛ónup
;

152 if–
isVõw
 && 
	`sqlôe3VõwGëCﬁumnNames
(
pP¨£
, 
pTab
) ){

153 
dñëe_‰om_˛ónup
;

158 if–
åiggîs_exi°
 ){

159 
ﬁdIdx
 = 
pP¨£
->
nTab
++;

164 
	`as£π
–
pTabLi°
->
nSrc
==1 );

165 
iCur
 = 
pTabLi°
->
a
[0].
iCurs‹
 = 
pP¨£
->
nTab
++;

166 
	`mem£t
(&
sNC
, 0, (sNC));

167 
sNC
.
pP¨£
 =ÖParse;

168 
sNC
.
pSrcLi°
 = 
pTabLi°
;

169 if–
	`sqlôe3Ex¥ResﬁveNames
(&
sNC
, 
pWhîe
) ){

170 
dñëe_‰om_˛ónup
;

175 if–
isVõw
 ){

176 
	`sqlôe3AuthC⁄ãxtPush
(
pP¨£
, &
sC⁄ãxt
, 
pTab
->
zName
);

181 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

182 if–
v
==0 ){

183 
dñëe_‰om_˛ónup
;

185 if–
pP¨£
->
√°ed
==0 ) 
	`sqlôe3VdbeCou¡Ch™ges
(
v
);

186 
	`sqlôe3BegöWrôeO≥øti⁄
(
pP¨£
, 
åiggîs_exi°
, 
iDb
);

191 if–
isVõw
 ){

192 
Sñe˘
 *
pVõw
 = 
	`sqlôe3Sñe˘Dup
(
pTab
->
pSñe˘
);

193 
	`sqlôe3Sñe˘
(
pP¨£
, 
pVõw
, 
SRT_VútuÆTab
, 
iCur
, 0, 0, 0, 0);

194 
	`sqlôe3Sñe˘Dñëe
(
pVõw
);

200 if–
db
->
Êags
 & 
SQLITE_Cou¡Rows
 ){

201 
	`sqlôe3VdbeAddOp
(
v
, 
OP_I¡egî
, 0, 0);

208 if–
pWhîe
==0 && !
åiggîs_exi°
 ){

209 if–
db
->
Êags
 & 
SQLITE_Cou¡Rows
 ){

212 
ídOfLo›
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

213 
addr2
;

214 if–!
isVõw
 ){

215 
	`sqlôe3O≥nTabÀ
(
pP¨£
, 
iCur
, 
iDb
, 
pTab
, 
OP_O≥nRód
);

217 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Rewöd
, 
iCur
, 
	`sqlôe3VdbeCuºítAddr
(v)+2);

218 
addr2
 = 
	`sqlôe3VdbeAddOp
(
v
, 
OP_AddImm
, 1, 0);

219 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Next
, 
iCur
, 
addr2
);

220 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
ídOfLo›
);

221 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Clo£
, 
iCur
, 0);

223 if–!
isVõw
 ){

224 
	`sqlôe3VdbeAddOp
(
v
, 
OP_CÀ¨
, 
pTab
->
äum
, 
iDb
);

225 if–!
pP¨£
->
√°ed
 ){

226 
	`sqlôe3VdbeCh™geP3
(
v
, -1, 
pTab
->
zName
, 
P3_STATIC
);

228 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
){

229 
	`as£π
–
pIdx
->
pSchema
==
pTab
->pSchema );

230 
	`sqlôe3VdbeAddOp
(
v
, 
OP_CÀ¨
, 
pIdx
->
äum
, 
iDb
);

241 
pWInfo
 = 
	`sqlôe3WhîeBegö
(
pP¨£
, 
pTabLi°
, 
pWhîe
, 0);

242 if–
pWInfo
==0 ) 
dñëe_‰om_˛ónup
;

246 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Rowid
, 
iCur
, 0);

247 
	`sqlôe3VdbeAddOp
(
v
, 
OP_FifoWrôe
, 0, 0);

248 if–
db
->
Êags
 & 
SQLITE_Cou¡Rows
 ){

249 
	`sqlôe3VdbeAddOp
(
v
, 
OP_AddImm
, 1, 0);

254 
	`sqlôe3WhîeEnd
(
pWInfo
);

258 if–
åiggîs_exi°
 ){

259 
	`sqlôe3VdbeAddOp
(
v
, 
OP_O≥nP£udo
, 
ﬁdIdx
, 0);

260 
	`sqlôe3VdbeAddOp
(
v
, 
OP_SëNumCﬁumns
, 
ﬁdIdx
, 
pTab
->
nCﬁ
);

267 
íd
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

272 if–
åiggîs_exi°
 ){

273 
addr
 = 
	`sqlôe3VdbeAddOp
(
v
, 
OP_FifoRód
, 0, 
íd
);

274 if–!
isVõw
 ){

275 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Dup
, 0, 0);

276 
	`sqlôe3O≥nTabÀ
(
pP¨£
, 
iCur
, 
iDb
, 
pTab
, 
OP_O≥nRód
);

278 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MoveGe
, 
iCur
, 0);

279 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Rowid
, 
iCur
, 0);

280 
	`sqlôe3VdbeAddOp
(
v
, 
OP_RowD©a
, 
iCur
, 0);

281 
	`sqlôe3VdbeAddOp
(
v
, 
OP_In£π
, 
ﬁdIdx
, 0);

282 if–!
isVõw
 ){

283 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Clo£
, 
iCur
, 0);

286 ()
	`sqlôe3CodeRowTriggî
(
pP¨£
, 
TK_DELETE
, 0, 
TRIGGER_BEFORE
, 
pTab
,

287 -1, 
ﬁdIdx
, (
pP¨£
->
åigSèck
)?pP¨£->åigSèck->
‹c⁄f
:
OE_DeÁu…
,

288 
addr
);

291 if–!
isVõw
 ){

298 
	`sqlôe3O≥nTabÀAndIndi˚s
(
pP¨£
, 
pTab
, 
iCur
, 
OP_O≥nWrôe
);

302 if–!
åiggîs_exi°
 ){

303 
addr
 = 
	`sqlôe3VdbeAddOp
(
v
, 
OP_FifoRód
, 0, 
íd
);

307 
	`sqlôe3Gíî©eRowDñëe
(
db
, 
v
, 
pTab
, 
iCur
, 
pP¨£
->
√°ed
==0);

313 if–
åiggîs_exi°
 ){

314 if–!
isVõw
 ){

315 
i
=1, 
pIdx
=
pTab
->
pIndex
;ÖIdx; i++,ÖIdxıIdx->
pNext
){

316 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Clo£
, 
iCur
 + 
i
, 
pIdx
->
äum
);

318 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Clo£
, 
iCur
, 0);

320 ()
	`sqlôe3CodeRowTriggî
(
pP¨£
, 
TK_DELETE
, 0, 
TRIGGER_AFTER
, 
pTab
, -1,

321 
ﬁdIdx
, (
pP¨£
->
åigSèck
)?pP¨£->åigSèck->
‹c⁄f
:
OE_DeÁu…
,

322 
addr
);

326 
	`sqlôe3VdbeAddOp
(
v
, 
OP_GŸo
, 0, 
addr
);

327 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
íd
);

330 if–!
åiggîs_exi°
 ){

331 
i
=1, 
pIdx
=
pTab
->
pIndex
;ÖIdx; i++,ÖIdxıIdx->
pNext
){

332 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Clo£
, 
iCur
 + 
i
, 
pIdx
->
äum
);

334 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Clo£
, 
iCur
, 0);

343 if–
db
->
Êags
 & 
SQLITE_Cou¡Rows
 && 
pP¨£
->
√°ed
==0 && !pP¨£->
åigSèck
 ){

344 
	`sqlôe3VdbeAddOp
(
v
, 
OP_CÆlback
, 1, 0);

345 
	`sqlôe3VdbeSëNumCﬁs
(
v
, 1);

346 
	`sqlôe3VdbeSëCﬁName
(
v
, 0, "row†dñëed", 
P3_STATIC
);

349 
dñëe_‰om_˛ónup
:

350 
	`sqlôe3AuthC⁄ãxtP›
(&
sC⁄ãxt
);

351 
	`sqlôe3SrcLi°Dñëe
(
pTabLi°
);

352 
	`sqlôe3Ex¥Dñëe
(
pWhîe
);

354 
	}
}

376 
	$sqlôe3Gíî©eRowDñëe
(

377 
sqlôe3
 *
db
,

378 
Vdbe
 *
v
,

379 
TabÀ
 *
pTab
,

380 
iCur
,

381 
cou¡


383 
addr
;

384 
addr
 = 
	`sqlôe3VdbeAddOp
(
v
, 
OP_NŸExi°s
, 
iCur
, 0);

385 
	`sqlôe3Gíî©eRowIndexDñëe
(
db
, 
v
, 
pTab
, 
iCur
, 0);

386 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Dñëe
, 
iCur
, (
cou¡
?
OPFLAG_NCHANGE
:0));

387 if–
cou¡
 ){

388 
	`sqlôe3VdbeCh™geP3
(
v
, -1, 
pTab
->
zName
, 
P3_STATIC
);

390 
	`sqlôe3VdbeJumpHîe
(
v
, 
addr
);

391 
	}
}

409 
	$sqlôe3Gíî©eRowIndexDñëe
(

410 
sqlôe3
 *
db
,

411 
Vdbe
 *
v
,

412 
TabÀ
 *
pTab
,

413 
iCur
,

414 *
aIdxU£d


416 
i
;

417 
Index
 *
pIdx
;

419 
i
=1, 
pIdx
=
pTab
->
pIndex
;ÖIdx; i++,ÖIdxıIdx->
pNext
){

420 if–
aIdxU£d
!=0 &&áIdxU£d[
i
-1]==0 ) ;

421 
	`sqlôe3Gíî©eIndexKey
(
v
, 
pIdx
, 
iCur
);

422 
	`sqlôe3VdbeAddOp
(
v
, 
OP_IdxDñëe
, 
iCur
+
i
, 0);

424 
	}
}

432 
	$sqlôe3Gíî©eIndexKey
(

433 
Vdbe
 *
v
,

434 
Index
 *
pIdx
,

435 
iCur


437 
j
;

438 
TabÀ
 *
pTab
 = 
pIdx
->
pTabÀ
;

440 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Rowid
, 
iCur
, 0);

441 
j
=0; j<
pIdx
->
nCﬁumn
; j++){

442 
idx
 = 
pIdx
->
aiCﬁumn
[
j
];

443 if–
idx
==
pTab
->
iPKey
 ){

444 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Dup
, 
j
, 0);

446 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Cﬁumn
, 
iCur
, 
idx
);

447 
	`sqlôe3CﬁumnDeÁu…
(
v
, 
pTab
, 
idx
);

450 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MakeIdxRec
, 
pIdx
->
nCﬁumn
, 0);

451 
	`sqlôe3IndexAfföôySå
(
v
, 
pIdx
);

452 
	}
}

	@experimental.c

17 
	~"sqlôeI¡.h
"

18 
	~"os.h
"

23 
	$sqlôe3_˛ór_bödögs
(
sqlôe3_°mt
 *
pStmt
){

24 
i
;

25 
rc
 = 
SQLITE_OK
;

26 
i
=1; 
rc
==
SQLITE_OK
 && i<=
	`sqlôe3_böd_∑ømëî_cou¡
(
pStmt
); i++){

27 
rc
 = 
	`sqlôe3_böd_nuŒ
(
pStmt
, 
i
);

29  
rc
;

30 
	}
}

35 
	$sqlôe3_¶ìp
(
ms
){

36  
	`sqlôe3OsSÀï
(
ms
);

37 
	}
}

	@expr.c

17 
	~"sqlôeI¡.h
"

18 
	~<˘y≥.h
>

36 
	$sqlôe3Ex¥Afföôy
(
Ex¥
 *
pEx¥
){

37 
›
 = 
pEx¥
->op;

38 if–
›
==
TK_AS
 ){

39  
	`sqlôe3Ex¥Afföôy
(
pEx¥
->
pLe·
);

41 if–
›
==
TK_SELECT
 ){

42  
	`sqlôe3Ex¥Afföôy
(
pEx¥
->
pSñe˘
->
pELi°
->
a
[0].pExpr);

44 #i‚de‡
SQLITE_OMIT_CAST


45 if–
›
==
TK_CAST
 ){

46  
	`sqlôe3AfföôyTy≥
(&
pEx¥
->
tokí
);

49  
pEx¥
->
afföôy
;

50 
	}
}

56 
CﬁlSeq
 *
	$sqlôe3Ex¥CﬁlSeq
(
P¨£
 *
pP¨£
, 
Ex¥
 *
pEx¥
){

57 
CﬁlSeq
 *
pCﬁl
 = 0;

58 if–
pEx¥
 ){

59 
pCﬁl
 = 
pEx¥
->pColl;

60 if–(
pEx¥
->
›
==
TK_AS
 ||ÖEx¥->›==
TK_CAST
Ë&& !
pCﬁl
 ){

61  
	`sqlôe3Ex¥CﬁlSeq
(
pP¨£
, 
pEx¥
->
pLe·
);

64 if–
	`sqlôe3CheckCﬁlSeq
(
pP¨£
, 
pCﬁl
) ){

65 
pCﬁl
 = 0;

67  
pCﬁl
;

68 
	}
}

75 
	$sqlôe3Com∑ªAfföôy
(
Ex¥
 *
pEx¥
, 
aff2
){

76 
aff1
 = 
	`sqlôe3Ex¥Afföôy
(
pEx¥
);

77 if–
aff1
 && 
aff2
 ){

81 if–
	`sqlôe3IsNumîicAfföôy
(
aff1
Ë|| sqlôe3IsNumîicAfföôy(
aff2
) ){

82  
SQLITE_AFF_NUMERIC
;

84  
SQLITE_AFF_NONE
;

86 }if–!
aff1
 && !
aff2
 ){

90  
SQLITE_AFF_NONE
;

93 
	`as£π
–
aff1
==0 || 
aff2
==0 );

94  (
aff1
 + 
aff2
);

96 
	}
}

102 
	$com∑ris⁄Afföôy
(
Ex¥
 *
pEx¥
){

103 
aff
;

104 
	`as£π
–
pEx¥
->
›
==
TK_EQ
 ||ÖEx¥->›==
TK_IN
 ||ÖEx¥->›==
TK_LT
 ||

105 
pEx¥
->
›
==
TK_GT
 ||ÖEx¥->›==
TK_GE
 ||ÖEx¥->›==
TK_LE
 ||

106 
pEx¥
->
›
==
TK_NE
 );

107 
	`as£π
–
pEx¥
->
pLe·
 );

108 
aff
 = 
	`sqlôe3Ex¥Afföôy
(
pEx¥
->
pLe·
);

109 if–
pEx¥
->
pRight
 ){

110 
aff
 = 
	`sqlôe3Com∑ªAfföôy
(
pEx¥
->
pRight
,áff);

112 if–
pEx¥
->
pSñe˘
 ){

113 
aff
 = 
	`sqlôe3Com∑ªAfföôy
(
pEx¥
->
pSñe˘
->
pELi°
->
a
[0].pExpr,áff);

115 if–!
aff
 ){

116 
aff
 = 
SQLITE_AFF_NUMERIC
;

118  
aff
;

119 
	}
}

127 
	$sqlôe3IndexAfföôyOk
(
Ex¥
 *
pEx¥
, 
idx_afföôy
){

128 
aff
 = 
	`com∑ris⁄Afföôy
(
pEx¥
);

129  
aff
 ){

130 
SQLITE_AFF_NONE
:

132 
SQLITE_AFF_TEXT
:

133  
idx_afföôy
==
SQLITE_AFF_TEXT
;

135  
	`sqlôe3IsNumîicAfföôy
(
idx_afföôy
);

137 
	}
}

146 
	$bö¨yCom∑ªP1
(
Ex¥
 *
pEx¥1
, Ex¥ *
pEx¥2
, 
jumpIfNuŒ
){

147 
aff
 = 
	`sqlôe3Ex¥Afföôy
(
pEx¥2
);

148  (()
	`sqlôe3Com∑ªAfföôy
(
pEx¥1
, 
aff
))+(
jumpIfNuŒ
?0x100:0);

149 
	}
}

160 
CﬁlSeq
* 
	$bö¨yCom∑ªCﬁlSeq
(
P¨£
 *
pP¨£
, 
Ex¥
 *
pLe·
, Ex¥ *
pRight
){

161 
CﬁlSeq
 *
pCﬁl
 = 
	`sqlôe3Ex¥CﬁlSeq
(
pP¨£
, 
pLe·
);

162 if–!
pCﬁl
 ){

163 
pCﬁl
 = 
	`sqlôe3Ex¥CﬁlSeq
(
pP¨£
, 
pRight
);

165  
pCﬁl
;

166 
	}
}

171 
	$codeCom∑ª
(

172 
P¨£
 *
pP¨£
,

173 
Ex¥
 *
pLe·
,

174 
Ex¥
 *
pRight
,

175 
›code
,

176 
de°
,

177 
jumpIfNuŒ


179 
p1
 = 
	`bö¨yCom∑ªP1
(
pLe·
, 
pRight
, 
jumpIfNuŒ
);

180 
CﬁlSeq
 *
p3
 = 
	`bö¨yCom∑ªCﬁlSeq
(
pP¨£
, 
pLe·
, 
pRight
);

181  
	`sqlôe3VdbeOp3
(
pP¨£
->
pVdbe
, 
›code
, 
p1
, 
de°
, (*)
p3
, 
P3_COLLSEQ
);

182 
	}
}

189 
Ex¥
 *
	$sqlôe3Ex¥
(
›
, 
Ex¥
 *
pLe·
, Ex¥ *
pRight
, c⁄° 
Tokí
 *
pTokí
){

190 
Ex¥
 *
pNew
;

191 
pNew
 = 
	`sqlôeMÆloc
–(
Ex¥
) );

192 if–
pNew
==0 ){

197 
	`sqlôe3Ex¥Dñëe
(
pLe·
);

198 
	`sqlôe3Ex¥Dñëe
(
pRight
);

201 
pNew
->
›
 = op;

202 
pNew
->
pLe·
 =ÖLeft;

203 
pNew
->
pRight
 =ÖRight;

204 
pNew
->
iAgg
 = -1;

205 if–
pTokí
 ){

206 
	`as£π
–
pTokí
->
dyn
==0 );

207 
pNew
->
•™
 =ÖNew->
tokí
 = *
pTokí
;

208 }if–
pLe·
 && 
pRight
 ){

209 
	`sqlôe3Ex¥S∑n
(
pNew
, &
pLe·
->
•™
, &
pRight
->span);

211  
pNew
;

212 
	}
}

225 
Ex¥
 *
	$sqlôe3Regi°îEx¥
(
P¨£
 *
pP¨£
, 
Tokí
 *
pTokí
){

226 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

227 
Ex¥
 *
p
;

228 
dïth
;

229 if–
pP¨£
->
√°ed
==0 ){

230 
	`sqlôe3Eº‹Msg
(
pP¨£
, "√¨ \"%T\": sy¡axÉº‹", 
pTokí
);

233 if–
v
==0 )  0;

234 
p
 = 
	`sqlôe3Ex¥
(
TK_REGISTER
, 0, 0, 
pTokí
);

235 if–
p
==0 ){

238 
dïth
 = 
	`©oi
((*)&
pTokí
->
z
[1]);

239 
p
->
iTabÀ
 = 
pP¨£
->
nMem
++;

240 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Dup
, 
dïth
, 0);

241 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemSt‹e
, 
p
->
iTabÀ
, 1);

242  
p
;

243 
	}
}

249 
Ex¥
 *
	$sqlôe3Ex¥And
(
Ex¥
 *
pLe·
, Ex¥ *
pRight
){

250 if–
pLe·
==0 ){

251  
pRight
;

252 }if–
pRight
==0 ){

253  
pLe·
;

255  
	`sqlôe3Ex¥
(
TK_AND
, 
pLe·
, 
pRight
, 0);

257 
	}
}

263 
	$sqlôe3Ex¥S∑n
(
Ex¥
 *
pEx¥
, 
Tokí
 *
pLe·
, Tokí *
pRight
){

264 
	`as£π
–
pRight
!=0 );

265 
	`as£π
–
pLe·
!=0 );

266 if–!
	`sqlôe3MÆlocFaûed
(Ë&& 
pRight
->
z
 && 
pLe·
->z ){

267 
	`as£π
–
pLe·
->
dyn
==0 ||ÖLe·->
z
[pLe·->
n
]==0 );

268 if–
pLe·
->
dyn
==0 && 
pRight
->dyn==0 ){

269 
pEx¥
->
•™
.
z
 = 
pLe·
->z;

270 
pEx¥
->
•™
.
n
 = 
pRight
->¿+ (pRight->
z
 - 
pLe·
->z);

272 
pEx¥
->
•™
.
z
 = 0;

275 
	}
}

281 
Ex¥
 *
	$sqlôe3Ex¥Fun˘i⁄
(
Ex¥Li°
 *
pLi°
, 
Tokí
 *
pTokí
){

282 
Ex¥
 *
pNew
;

283 
	`as£π
–
pTokí
 );

284 
pNew
 = 
	`sqlôeMÆloc
–(
Ex¥
) );

285 if–
pNew
==0 ){

286 
	`sqlôe3Ex¥Li°Dñëe
(
pLi°
);

289 
pNew
->
›
 = 
TK_FUNCTION
;

290 
pNew
->
pLi°
 =ÖList;

291 
	`as£π
–
pTokí
->
dyn
==0 );

292 
pNew
->
tokí
 = *
pTokí
;

293 
pNew
->
•™
 =ÖNew->
tokí
;

294  
pNew
;

295 
	}
}

313 
	$sqlôe3Ex¥AssignV¨Numbî
(
P¨£
 *
pP¨£
, 
Ex¥
 *
pEx¥
){

314 
Tokí
 *
pTokí
;

315 if–
pEx¥
==0 ) ;

316 
pTokí
 = &
pEx¥
->
tokí
;

317 
	`as£π
–
pTokí
->
n
>=1 );

318 
	`as£π
–
pTokí
->
z
!=0 );

319 
	`as£π
–
pTokí
->
z
[0]!=0 );

320 if–
pTokí
->
n
==1 ){

322 
pEx¥
->
iTabÀ
 = ++
pP¨£
->
nV¨
;

323 }if–
pTokí
->
z
[0]=='?' ){

326 
i
;

327 
pEx¥
->
iTabÀ
 = 
i
 = 
	`©oi
((*)&
pTokí
->
z
[1]);

328 if–
i
<1 || i>
SQLITE_MAX_VARIABLE_NUMBER
 ){

329 
	`sqlôe3Eº‹Msg
(
pP¨£
, "variableÇumber must be between ?1ánd ?%d",

330 
SQLITE_MAX_VARIABLE_NUMBER
);

332 if–
i
>
pP¨£
->
nV¨
 ){

333 
pP¨£
->
nV¨
 = 
i
;

340 
i
, 
n
;

341 
n
 = 
pTokí
->n;

342 
i
=0; i<
pP¨£
->
nV¨Ex¥
; i++){

343 
Ex¥
 *
pE
;

344 if–(
pE
 = 
pP¨£
->
≠V¨Ex¥
[
i
])!=0

345 && 
pE
->
tokí
.
n
==n

346 && 
	`memcmp
(
pE
->
tokí
.
z
, 
pTokí
->z, 
n
)==0 ){

347 
pEx¥
->
iTabÀ
 = 
pE
->iTable;

351 if–
i
>=
pP¨£
->
nV¨Ex¥
 ){

352 
pEx¥
->
iTabÀ
 = ++
pP¨£
->
nV¨
;

353 if–
pP¨£
->
nV¨Ex¥
>ıP¨£->
nV¨Ex¥AŒoc
-1 ){

354 
pP¨£
->
nV¨Ex¥AŒoc
 +=ÖParse->nVarExprAlloc + 10;

355 
	`sqlôeRóŒocOrFªe
((**)&
pP¨£
->
≠V¨Ex¥
,

356 
pP¨£
->
nV¨Ex¥AŒoc
*’P¨£->
≠V¨Ex¥
[0]) );

358 if–!
	`sqlôe3MÆlocFaûed
() ){

359 
	`as£π
–
pP¨£
->
≠V¨Ex¥
!=0 );

360 
pP¨£
->
≠V¨Ex¥
[pP¨£->
nV¨Ex¥
++] = 
pEx¥
;

364 
	}
}

369 
	$sqlôe3Ex¥Dñëe
(
Ex¥
 *
p
){

370 if–
p
==0 ) ;

371 if–
p
->
•™
.
dyn
 ) 
	`sqlôeFªe
((*Ì->•™.
z
);

372 if–
p
->
tokí
.
dyn
 ) 
	`sqlôeFªe
((*Ì->tokí.
z
);

373 
	`sqlôe3Ex¥Dñëe
(
p
->
pLe·
);

374 
	`sqlôe3Ex¥Dñëe
(
p
->
pRight
);

375 
	`sqlôe3Ex¥Li°Dñëe
(
p
->
pLi°
);

376 
	`sqlôe3Sñe˘Dñëe
(
p
->
pSñe˘
);

377 
	`sqlôeFªe
(
p
);

378 
	}
}

384 
	$sqlôe3DequŸeEx¥
(
Ex¥
 *
p
){

385 if–
	`Ex¥HasAnyPr›îty
(
p
, 
EP_DequŸed
) ){

388 
	`Ex¥SëPr›îty
(
p
, 
EP_DequŸed
);

389 if–
p
->
tokí
.
dyn
==0 ){

390 
	`sqlôe3TokíC›y
(&
p
->
tokí
, &p->token);

392 
	`sqlôe3DequŸe
((*)
p
->
tokí
.
z
);

393 
	}
}

408 
Ex¥
 *
	$sqlôe3Ex¥Dup
(
Ex¥
 *
p
){

409 
Ex¥
 *
pNew
;

410 if–
p
==0 )  0;

411 
pNew
 = 
	`sqlôeMÆlocRaw
–(*
p
) );

412 if–
pNew
==0 )  0;

413 
	`mem˝y
(
pNew
, 
p
, (*pNew));

414 if–
p
->
tokí
.
z
!=0 ){

415 
pNew
->
tokí
.
z
 = (
u8
*)
	`sqlôeSåNDup
((*)
p
->tokí.z,Ö->tokí.
n
);

416 
pNew
->
tokí
.
dyn
 = 1;

418 
	`as£π
–
pNew
->
tokí
.
z
==0 );

420 
pNew
->
•™
.
z
 = 0;

421 
pNew
->
pLe·
 = 
	`sqlôe3Ex¥Dup
(
p
->pLeft);

422 
pNew
->
pRight
 = 
	`sqlôe3Ex¥Dup
(
p
->pRight);

423 
pNew
->
pLi°
 = 
	`sqlôe3Ex¥Li°Dup
(
p
->pList);

424 
pNew
->
pSñe˘
 = 
	`sqlôe3Sñe˘Dup
(
p
->pSelect);

425 
pNew
->
pTab
 = 
p
->pTab;

426  
pNew
;

427 
	}
}

428 
	$sqlôe3TokíC›y
(
Tokí
 *
pTo
, Tokí *
pFrom
){

429 if–
pTo
->
dyn
 ) 
	`sqlôeFªe
((*ÌTo->
z
);

430 if–
pFrom
->
z
 ){

431 
pTo
->
n
 = 
pFrom
->n;

432 
pTo
->
z
 = (
u8
*)
	`sqlôeSåNDup
((*)
pFrom
->z,ÖFrom->
n
);

433 
pTo
->
dyn
 = 1;

435 
pTo
->
z
 = 0;

437 
	}
}

438 
Ex¥Li°
 *
	$sqlôe3Ex¥Li°Dup
(
Ex¥Li°
 *
p
){

439 
Ex¥Li°
 *
pNew
;

440 
Ex¥Li°_ôem
 *
pIãm
, *
pOldIãm
;

441 
i
;

442 if–
p
==0 )  0;

443 
pNew
 = 
	`sqlôeMÆloc
( (*pNew) );

444 if–
pNew
==0 )  0;

445 
pNew
->
nEx¥
 =ÖNew->
nAŒoc
 = 
p
->nExpr;

446 
pNew
->
a
 = 
pIãm
 = 
	`sqlôeMÆloc
–
p
->
nEx¥
*(p->a[0]) );

447 if–
pIãm
==0 ){

448 
	`sqlôeFªe
(
pNew
);

451 
pOldIãm
 = 
p
->
a
;

452 
i
=0; i<
p
->
nEx¥
; i++, 
pIãm
++, 
pOldIãm
++){

453 
Ex¥
 *
pNewEx¥
, *
pOldEx¥
;

454 
pIãm
->
pEx¥
 = 
pNewEx¥
 = 
	`sqlôe3Ex¥Dup
(
pOldEx¥
 = 
pOldIãm
->pExpr);

455 if–
pOldEx¥
->
•™
.
z
!=0 && 
pNewEx¥
 ){

459 
	`sqlôe3TokíC›y
(&
pNewEx¥
->
•™
, &
pOldEx¥
->span);

461 
	`as£π
–
pNewEx¥
==0 ||ÖNewEx¥->
•™
.
z
!=0

462 || 
pOldEx¥
->
•™
.
z
==0

463 || 
	`sqlôe3MÆlocFaûed
() );

464 
pIãm
->
zName
 = 
	`sqlôeSåDup
(
pOldIãm
->zName);

465 
pIãm
->
s‹tOrdî
 = 
pOldIãm
->sortOrder;

466 
pIãm
->
isAgg
 = 
pOldIãm
->isAgg;

467 
pIãm
->
d⁄e
 = 0;

469  
pNew
;

470 
	}
}

478 #i‡!
deföed
(
SQLITE_OMIT_VIEW
Ë|| !deföed(
SQLITE_OMIT_TRIGGER
) \

479 || !
	$deföed
(
SQLITE_OMIT_SUBQUERY
)

480 
SrcLi°
 *
	$sqlôe3SrcLi°Dup
(
SrcLi°
 *
p
){

481 
SrcLi°
 *
pNew
;

482 
i
;

483 
nByã
;

484 if–
p
==0 )  0;

485 
nByã
 = (*
p
Ë+ (p->
nSrc
>0 ? ’->
a
[0]) * (p->nSrc-1) : 0);

486 
pNew
 = 
	`sqlôeMÆlocRaw
–
nByã
 );

487 if–
pNew
==0 )  0;

488 
pNew
->
nSrc
 =ÖNew->
nAŒoc
 = 
p
->nSrc;

489 
i
=0; i<
p
->
nSrc
; i++){

490 
SrcLi°_ôem
 *
pNewIãm
 = &
pNew
->
a
[
i
];

491 
SrcLi°_ôem
 *
pOldIãm
 = &
p
->
a
[
i
];

492 
TabÀ
 *
pTab
;

493 
pNewIãm
->
zD©aba£
 = 
	`sqlôeSåDup
(
pOldIãm
->zDatabase);

494 
pNewIãm
->
zName
 = 
	`sqlôeSåDup
(
pOldIãm
->zName);

495 
pNewIãm
->
zAlüs
 = 
	`sqlôeSåDup
(
pOldIãm
->zAlias);

496 
pNewIãm
->
joöty≥
 = 
pOldIãm
->jointype;

497 
pNewIãm
->
iCurs‹
 = 
pOldIãm
->iCursor;

498 
pTab
 = 
pNewIãm
->pTab = 
pOldIãm
->pTab;

499 if–
pTab
 ){

500 
pTab
->
nRef
++;

502 
pNewIãm
->
pSñe˘
 = 
	`sqlôe3Sñe˘Dup
(
pOldIãm
->pSelect);

503 
pNewIãm
->
pOn
 = 
	`sqlôe3Ex¥Dup
(
pOldIãm
->pOn);

504 
pNewIãm
->
pUsög
 = 
	`sqlôe3IdLi°Dup
(
pOldIãm
->pUsing);

505 
pNewIãm
->
cﬁU£d
 = 
pOldIãm
->colUsed;

507  
pNew
;

508 
	}
}

509 
IdLi°
 *
	$sqlôe3IdLi°Dup
(
IdLi°
 *
p
){

510 
IdLi°
 *
pNew
;

511 
i
;

512 if–
p
==0 )  0;

513 
pNew
 = 
	`sqlôeMÆlocRaw
( (*pNew) );

514 if–
pNew
==0 )  0;

515 
pNew
->
nId
 =ÖNew->
nAŒoc
 = 
p
->nId;

516 
pNew
->
a
 = 
	`sqlôeMÆlocRaw
–
p
->
nId
*(p->a[0]) );

517 if–
pNew
->
a
==0 ){

518 
	`sqlôeFªe
(
pNew
);

521 
i
=0; i<
p
->
nId
; i++){

522 
IdLi°_ôem
 *
pNewIãm
 = &
pNew
->
a
[
i
];

523 
IdLi°_ôem
 *
pOldIãm
 = &
p
->
a
[
i
];

524 
pNewIãm
->
zName
 = 
	`sqlôeSåDup
(
pOldIãm
->zName);

525 
pNewIãm
->
idx
 = 
pOldIãm
->idx;

527  
pNew
;

528 
	}
}

529 
Sñe˘
 *
	$sqlôe3Sñe˘Dup
(
Sñe˘
 *
p
){

530 
Sñe˘
 *
pNew
;

531 if–
p
==0 )  0;

532 
pNew
 = 
	`sqlôeMÆlocRaw
–(*
p
) );

533 if–
pNew
==0 )  0;

534 
pNew
->
isDi°ö˘
 = 
p
->isDistinct;

535 
pNew
->
pELi°
 = 
	`sqlôe3Ex¥Li°Dup
(
p
->pEList);

536 
pNew
->
pSrc
 = 
	`sqlôe3SrcLi°Dup
(
p
->pSrc);

537 
pNew
->
pWhîe
 = 
	`sqlôe3Ex¥Dup
(
p
->pWhere);

538 
pNew
->
pGroupBy
 = 
	`sqlôe3Ex¥Li°Dup
(
p
->pGroupBy);

539 
pNew
->
pHavög
 = 
	`sqlôe3Ex¥Dup
(
p
->pHaving);

540 
pNew
->
pOrdîBy
 = 
	`sqlôe3Ex¥Li°Dup
(
p
->pOrderBy);

541 
pNew
->
›
 = 
p
->op;

542 
pNew
->
pPri‹
 = 
	`sqlôe3Sñe˘Dup
(
p
->pPrior);

543 
pNew
->
pLimô
 = 
	`sqlôe3Ex¥Dup
(
p
->pLimit);

544 
pNew
->
pOff£t
 = 
	`sqlôe3Ex¥Dup
(
p
->pOffset);

545 
pNew
->
iLimô
 = -1;

546 
pNew
->
iOff£t
 = -1;

547 
pNew
->
isResﬁved
 = 
p
->isResolved;

548 
pNew
->
isAgg
 = 
p
->isAgg;

549 
pNew
->
u£sVút
 = 0;

550 
pNew
->
dißŒowOrdîBy
 = 0;

551 
pNew
->
pRightmo°
 = 0;

552 
pNew
->
addrO≥nVút
[0] = -1;

553 
pNew
->
addrO≥nVút
[1] = -1;

554 
pNew
->
addrO≥nVút
[2] = -1;

555  
pNew
;

556 
	}
}

558 
Sñe˘
 *
	$sqlôe3Sñe˘Dup
(
Sñe˘
 *
p
){

559 
	`as£π
–
p
==0 );

561 
	}
}

569 
Ex¥Li°
 *
	$sqlôe3Ex¥Li°Aµíd
(
Ex¥Li°
 *
pLi°
, 
Ex¥
 *
pEx¥
, 
Tokí
 *
pName
){

570 if–
pLi°
==0 ){

571 
pLi°
 = 
	`sqlôeMÆloc
–(
Ex¥Li°
) );

572 if–
pLi°
==0 ){

573 
no_mem
;

575 
	`as£π
–
pLi°
->
nAŒoc
==0 );

577 if–
pLi°
->
nAŒoc
<ıLi°->
nEx¥
 ){

578 
Ex¥Li°_ôem
 *
a
;

579 
n
 = 
pLi°
->
nAŒoc
*2 + 4;

580 
a
 = 
	`sqlôeRóŒoc
(
pLi°
->a, 
n
*(pList->a[0]));

581 if–
a
==0 ){

582 
no_mem
;

584 
pLi°
->
a
 =á;

585 
pLi°
->
nAŒoc
 = 
n
;

587 
	`as£π
–
pLi°
->
a
!=0 );

588 if–
pEx¥
 || 
pName
 ){

589 
Ex¥Li°_ôem
 *
pIãm
 = &
pLi°
->
a
[pLi°->
nEx¥
++];

590 
	`mem£t
(
pIãm
, 0, (*pItem));

591 
pIãm
->
zName
 = 
	`sqlôe3NameFromTokí
(
pName
);

592 
pIãm
->
pEx¥
 =ÖExpr;

594  
pLi°
;

596 
no_mem
:

598 
	`sqlôe3Ex¥Dñëe
(
pEx¥
);

599 
	`sqlôe3Ex¥Li°Dñëe
(
pLi°
);

601 
	}
}

606 
	$sqlôe3Ex¥Li°Dñëe
(
Ex¥Li°
 *
pLi°
){

607 
i
;

608 
Ex¥Li°_ôem
 *
pIãm
;

609 if–
pLi°
==0 ) ;

610 
	`as£π
–
pLi°
->
a
!=0 || (pLi°->
nEx¥
==0 &&ÖLi°->
nAŒoc
==0) );

611 
	`as£π
–
pLi°
->
nEx¥
<ıLi°->
nAŒoc
 );

612 
pIãm
=
pLi°
->
a
, 
i
=0; i<pLi°->
nEx¥
; i++,ÖItem++){

613 
	`sqlôe3Ex¥Dñëe
(
pIãm
->
pEx¥
);

614 
	`sqlôeFªe
(
pIãm
->
zName
);

616 
	`sqlôeFªe
(
pLi°
->
a
);

617 
	`sqlôeFªe
(
pLi°
);

618 
	}
}

633 
wÆkEx¥Li°
(
Ex¥Li°
 *, (*)(*, 
Ex¥
*), *);

634 
	`wÆkEx¥Tªe
(
Ex¥
 *
pEx¥
, (*
xFunc
)(*,Ex¥*), *
pArg
){

635 
rc
;

636 if–
pEx¥
==0 )  0;

637 
rc
 = (*
xFunc
)(
pArg
, 
pEx¥
);

638 if–
rc
==0 ){

639 if–
	`wÆkEx¥Tªe
(
pEx¥
->
pLe·
, 
xFunc
, 
pArg
) )  1;

640 if–
	`wÆkEx¥Tªe
(
pEx¥
->
pRight
, 
xFunc
, 
pArg
) )  1;

641 if–
	`wÆkEx¥Li°
(
pEx¥
->
pLi°
, 
xFunc
, 
pArg
) )  1;

643  
rc
>1;

644 
	}
}

649 
wÆkEx¥Li°
(
Ex¥Li°
 *
p
, (*
xFunc
)(*, 
Ex¥
*), *
pArg
){

650 
i
;

651 
Ex¥Li°_ôem
 *
pIãm
;

652 if–!
p
 )  0;

653 
i
=
p
->
nEx¥
, 
pIãm
ı->
a
; i>0; i--,ÖItem++){

654 if–
	`wÆkEx¥Tªe
(
pIãm
->
pEx¥
, 
xFunc
, 
pArg
) )  1;

657 
	}
}

664 
wÆkSñe˘Ex¥
(
Sñe˘
 *
p
, (*
xFunc
)(*, 
Ex¥
*), *
pArg
){

665 
	`wÆkEx¥Li°
(
p
->
pELi°
, 
xFunc
, 
pArg
);

666 
	`wÆkEx¥Tªe
(
p
->
pWhîe
, 
xFunc
, 
pArg
);

667 
	`wÆkEx¥Li°
(
p
->
pGroupBy
, 
xFunc
, 
pArg
);

668 
	`wÆkEx¥Tªe
(
p
->
pHavög
, 
xFunc
, 
pArg
);

669 
	`wÆkEx¥Li°
(
p
->
pOrdîBy
, 
xFunc
, 
pArg
);

671 
	}
}

687 
	$ex¥NodeIsC⁄°™t
(*
pArg
, 
Ex¥
 *
pEx¥
){

688  
pEx¥
->
›
 ){

691 
TK_FUNCTION
:

692 if–*((*)
pArg
)==2 )  0;

694 
TK_ID
:

695 
TK_COLUMN
:

696 
TK_DOT
:

697 
TK_AGG_FUNCTION
:

698 
TK_AGG_COLUMN
:

699 #i‚de‡
SQLITE_OMIT_SUBQUERY


700 
TK_SELECT
:

701 
TK_EXISTS
:

703 *((*)
pArg
) = 0;

705 
TK_IN
:

706 if–
pEx¥
->
pSñe˘
 ){

707 *((*)
pArg
) = 0;

713 
	}
}

723 
	$sqlôe3Ex¥IsC⁄°™t
(
Ex¥
 *
p
){

724 
isC⁄°
 = 1;

725 
	`wÆkEx¥Tªe
(
p
, 
ex¥NodeIsC⁄°™t
, &
isC⁄°
);

726  
isC⁄°
;

727 
	}
}

738 
	$sqlôe3Ex¥IsC⁄°™tOrFun˘i⁄
(
Ex¥
 *
p
){

739 
isC⁄°
 = 2;

740 
	`wÆkEx¥Tªe
(
p
, 
ex¥NodeIsC⁄°™t
, &
isC⁄°
);

741  
isC⁄°
!=0;

742 
	}
}

750 
	$sqlôe3Ex¥IsI¡egî
(
Ex¥
 *
p
, *
pVÆue
){

751  
p
->
›
 ){

752 
TK_INTEGER
: {

753 if–
	`sqlôe3GëI¡32
((*)
p
->
tokí
.
z
, 
pVÆue
) ){

758 
TK_UPLUS
: {

759  
	`sqlôe3Ex¥IsI¡egî
(
p
->
pLe·
, 
pVÆue
);

761 
TK_UMINUS
: {

762 
v
;

763 if–
	`sqlôe3Ex¥IsI¡egî
(
p
->
pLe·
, &
v
) ){

764 *
pVÆue
 = -
v
;

772 
	}
}

777 
	$sqlôe3IsRowid
(c⁄° *
z
){

778 if–
	`sqlôe3SåICmp
(
z
, "_ROWID_")==0 )  1;

779 if–
	`sqlôe3SåICmp
(
z
, "ROWID")==0 )  1;

780 if–
	`sqlôe3SåICmp
(
z
, "OID")==0 )  1;

782 
	}
}

809 
	$lookupName
(

810 
P¨£
 *
pP¨£
,

811 
Tokí
 *
pDbTokí
,

812 
Tokí
 *
pTabÀTokí
,

813 
Tokí
 *
pCﬁumnTokí
,

814 
NameC⁄ãxt
 *
pNC
,

815 
Ex¥
 *
pEx¥


817 *
zDb
 = 0;

818 *
zTab
 = 0;

819 *
zCﬁ
 = 0;

820 
i
, 
j
;

821 
˙t
 = 0;

822 
˙tTab
 = 0;

823 
sqlôe3
 *
db
 = 
pP¨£
->db;

824 
SrcLi°_ôem
 *
pIãm
;

825 
SrcLi°_ôem
 *
pM©ch
 = 0;

826 
NameC⁄ãxt
 *
pT›NC
 = 
pNC
;

828 
	`as£π
–
pCﬁumnTokí
 &&ÖCﬁumnTokí->
z
 );

829 
zDb
 = 
	`sqlôe3NameFromTokí
(
pDbTokí
);

830 
zTab
 = 
	`sqlôe3NameFromTokí
(
pTabÀTokí
);

831 
zCﬁ
 = 
	`sqlôe3NameFromTokí
(
pCﬁumnTokí
);

832 if–
	`sqlôe3MÆlocFaûed
() ){

833 
looku≤ame_íd
;

836 
pEx¥
->
iTabÀ
 = -1;

837  
pNC
 && 
˙t
==0 ){

838 
Ex¥Li°
 *
pELi°
;

839 
SrcLi°
 *
pSrcLi°
 = 
pNC
->pSrcList;

841 if–
pSrcLi°
 ){

842 
i
=0, 
pIãm
=
pSrcLi°
->
a
; i<pSrcLi°->
nSrc
; i++,ÖItem++){

843 
TabÀ
 *
pTab
 = 
pIãm
->pTab;

844 
iDb
 = 
	`sqlôe3SchemaToIndex
(
db
, 
pTab
->
pSchema
);

845 
Cﬁumn
 *
pCﬁ
;

847 if–
pTab
==0 ) ;

848 
	`as£π
–
pTab
->
nCﬁ
>0 );

849 if–
zTab
 ){

850 if–
pIãm
->
zAlüs
 ){

851 *
zTabName
 = 
pIãm
->
zAlüs
;

852 if–
	`sqlôe3SåICmp
(
zTabName
, 
zTab
)!=0 ) ;

854 *
zTabName
 = 
pTab
->
zName
;

855 if–
zTabName
==0 || 
	`sqlôe3SåICmp
(zTabName, 
zTab
)!=0 ) ;

856 if–
zDb
!=0 && 
	`sqlôe3SåICmp
(
db
->
aDb
[
iDb
].
zName
, zDb)!=0 ){

861 if–0==(
˙tTab
++) ){

862 
pEx¥
->
iTabÀ
 = 
pIãm
->
iCurs‹
;

863 
pEx¥
->
pSchema
 = 
pTab
->pSchema;

864 
pM©ch
 = 
pIãm
;

866 
j
=0, 
pCﬁ
=
pTab
->
aCﬁ
; j<pTab->
nCﬁ
; j++,ÖCol++){

867 if–
	`sqlôe3SåICmp
(
pCﬁ
->
zName
, 
zCﬁ
)==0 ){

868 c⁄° *
zCﬁl
 = 
pTab
->
aCﬁ
[
j
].zColl;

869 
IdLi°
 *
pUsög
;

870 
˙t
++;

871 
pEx¥
->
iTabÀ
 = 
pIãm
->
iCurs‹
;

872 
pM©ch
 = 
pIãm
;

873 
pEx¥
->
pSchema
 = 
pTab
->pSchema;

875 
pEx¥
->
iCﬁumn
 = 
j
==
pTab
->
iPKey
 ? -1 : j;

876 
pEx¥
->
afföôy
 = 
pTab
->
aCﬁ
[
j
].affinity;

877 
pEx¥
->
pCﬁl
 = 
	`sqlôe3FödCﬁlSeq
(
db
, 
	`ENC
(db), 
zCﬁl
,-1, 0);

878 if–
pIãm
->
joöty≥
 & 
JT_NATURAL
 ){

881 
pIãm
++;

882 
i
++;

884 if–(
pUsög
 = 
pIãm
->pUsing)!=0 ){

888 
k
;

889 
k
=0; k<
pUsög
->
nId
; k++){

890 if–
	`sqlôe3SåICmp
(
pUsög
->
a
[
k
].
zName
, 
zCﬁ
)==0 ){

891 
pIãm
++;

892 
i
++;

903 #i‚de‡
SQLITE_OMIT_TRIGGER


907 if–
zDb
==0 && 
zTab
!=0 && 
˙t
==0 && 
pP¨£
->
åigSèck
!=0 ){

908 
TriggîSèck
 *
pTriggîSèck
 = 
pP¨£
->
åigSèck
;

909 
TabÀ
 *
pTab
 = 0;

910 if–
pTriggîSèck
->
√wIdx
 !-1 && 
	`sqlôe3SåICmp
("√w", 
zTab
) == 0 ){

911 
pEx¥
->
iTabÀ
 = 
pTriggîSèck
->
√wIdx
;

912 
	`as£π
–
pTriggîSèck
->
pTab
 );

913 
pTab
 = 
pTriggîSèck
->pTab;

914 }if–
pTriggîSèck
->
ﬁdIdx
 !-1 && 
	`sqlôe3SåICmp
("ﬁd", 
zTab
)==0 ){

915 
pEx¥
->
iTabÀ
 = 
pTriggîSèck
->
ﬁdIdx
;

916 
	`as£π
–
pTriggîSèck
->
pTab
 );

917 
pTab
 = 
pTriggîSèck
->pTab;

920 if–
pTab
 ){

921 
iCﬁ
;

922 
Cﬁumn
 *
pCﬁ
 = 
pTab
->
aCﬁ
;

924 
pEx¥
->
pSchema
 = 
pTab
->pSchema;

925 
˙tTab
++;

926 
iCﬁ
=0; iCﬁ < 
pTab
->
nCﬁ
; iCﬁ++, 
pCﬁ
++) {

927 if–
	`sqlôe3SåICmp
(
pCﬁ
->
zName
, 
zCﬁ
)==0 ){

928 c⁄° *
zCﬁl
 = 
pTab
->
aCﬁ
[
iCﬁ
].zColl;

929 
˙t
++;

930 
pEx¥
->
iCﬁumn
 = 
iCﬁ
==
pTab
->
iPKey
 ? -1 : iCol;

931 
pEx¥
->
afföôy
 = 
pTab
->
aCﬁ
[
iCﬁ
].affinity;

932 
pEx¥
->
pCﬁl
 = 
	`sqlôe3FödCﬁlSeq
(
db
, 
	`ENC
(db), 
zCﬁl
,-1, 0);

933 
pEx¥
->
pTab
 =ÖTab;

944 if–
˙t
==0 && 
˙tTab
==1 && 
	`sqlôe3IsRowid
(
zCﬁ
) ){

945 
˙t
 = 1;

946 
pEx¥
->
iCﬁumn
 = -1;

947 
pEx¥
->
afföôy
 = 
SQLITE_AFF_INTEGER
;

962 if–
˙t
==0 && (
pELi°
 = 
pNC
->pELi°)!=0 && 
zTab
==0 ){

963 
j
=0; j<
pELi°
->
nEx¥
; j++){

964 *
zAs
 = 
pELi°
->
a
[
j
].
zName
;

965 if–
zAs
!=0 && 
	`sqlôe3SåICmp
(zAs, 
zCﬁ
)==0 ){

966 
	`as£π
–
pEx¥
->
pLe·
==0 &&ÖEx¥->
pRight
==0 );

967 
pEx¥
->
›
 = 
TK_AS
;

968 
pEx¥
->
iCﬁumn
 = 
j
;

969 
pEx¥
->
pLe·
 = 
	`sqlôe3Ex¥Dup
(
pELi°
->
a
[
j
].pExpr);

970 
˙t
 = 1;

971 
	`as£π
–
zTab
==0 && 
zDb
==0 );

972 
looku≤ame_íd_2
;

980 if–
˙t
==0 ){

981 
pNC
 =ÖNC->
pNext
;

995 if–
˙t
==0 && 
zTab
==0 && 
pCﬁumnTokí
->
z
[0]=='"' ){

996 
	`sqlôeFªe
(
zCﬁ
);

1004 if–
˙t
!=1 ){

1005 *
z
 = 0;

1006 *
zEº
;

1007 
zEº
 = 
˙t
==0 ? "no such column: %s" : "ambiguous columnÇame: %s";

1008 if–
zDb
 ){

1009 
	`sqlôe3SëSåög
(&
z
, 
zDb
, ".", 
zTab
, ".", 
zCﬁ
, (*)0);

1010 }if–
zTab
 ){

1011 
	`sqlôe3SëSåög
(&
z
, 
zTab
, ".", 
zCﬁ
, (*)0);

1013 
z
 = 
	`sqlôeSåDup
(
zCﬁ
);

1015 
	`sqlôe3Eº‹Msg
(
pP¨£
, 
zEº
, 
z
);

1016 
	`sqlôeFªe
(
z
);

1017 
pT›NC
->
nEº
++;

1026 if–
pEx¥
->
iCﬁumn
>=0 && 
pM©ch
!=0 ){

1027 
n
 = 
pEx¥
->
iCﬁumn
;

1028 if–
n
>=(
Bômask
)*8 ){

1029 
n
 = (
Bômask
)*8-1;

1031 
	`as£π
–
pM©ch
->
iCurs‹
==
pEx¥
->
iTabÀ
 );

1032 
pM©ch
->
cﬁU£d
 |1<<
n
;

1035 
looku≤ame_íd
:

1038 
	`sqlôeFªe
(
zDb
);

1039 
	`sqlôeFªe
(
zTab
);

1040 
	`sqlôe3Ex¥Dñëe
(
pEx¥
->
pLe·
);

1041 
pEx¥
->
pLe·
 = 0;

1042 
	`sqlôe3Ex¥Dñëe
(
pEx¥
->
pRight
);

1043 
pEx¥
->
pRight
 = 0;

1044 
pEx¥
->
›
 = 
TK_COLUMN
;

1045 
looku≤ame_íd_2
:

1046 
	`sqlôeFªe
(
zCﬁ
);

1047 if–
˙t
==1 ){

1048 
	`as£π
–
pNC
!=0 );

1049 
	`sqlôe3AuthRód
(
pP¨£
, 
pEx¥
, 
pNC
->
pSrcLi°
);

1050 if–
pM©ch
 && !pM©ch->
pSñe˘
 ){

1051 
pEx¥
->
pTab
 = 
pM©ch
->pTab;

1056 
	`as£π
–
pT›NC
!=0 );

1057 
pT›NC
->
nRef
++;

1058 if–
pT›NC
==
pNC
 ) ;

1059 
pT›NC
 =ÖT›NC->
pNext
;

1065 
	}
}

1078 
	$«meResﬁvîSãp
(*
pArg
, 
Ex¥
 *
pEx¥
){

1079 
NameC⁄ãxt
 *
pNC
 = (NameC⁄ãxt*)
pArg
;

1080 
P¨£
 *
pP¨£
;

1082 if–
pEx¥
==0 )  1;

1083 
	`as£π
–
pNC
!=0 );

1084 
pP¨£
 = 
pNC
->pParse;

1086 if–
	`Ex¥HasAnyPr›îty
(
pEx¥
, 
EP_Resﬁved
) )  1;

1087 
	`Ex¥SëPr›îty
(
pEx¥
, 
EP_Resﬁved
);

1088 #i‚de‡
NDEBUG


1089 if–
pNC
->
pSrcLi°
 &&ÖNC->pSrcLi°->
nAŒoc
>0 ){

1090 
SrcLi°
 *
pSrcLi°
 = 
pNC
->pSrcList;

1091 
i
;

1092 
i
=0; i<
pNC
->
pSrcLi°
->
nSrc
; i++){

1093 
	`as£π
–
pSrcLi°
->
a
[
i
].
iCurs‹
>=0 &&ÖSrcLi°->a[i].iCurs‹<
pP¨£
->
nTab
);

1097  
pEx¥
->
›
 ){

1102 
TK_STRING
: {

1103 if–
pEx¥
->
tokí
.
z
[0]=='\'' ) ;

1108 
TK_ID
: {

1109 
	`lookupName
(
pP¨£
, 0, 0, &
pEx¥
->
tokí
, 
pNC
,ÖExpr);

1116 
TK_DOT
: {

1117 
Tokí
 *
pCﬁumn
;

1118 
Tokí
 *
pTabÀ
;

1119 
Tokí
 *
pDb
;

1120 
Ex¥
 *
pRight
;

1123 
pRight
 = 
pEx¥
->pRight;

1124 if–
pRight
->
›
==
TK_ID
 ){

1125 
pDb
 = 0;

1126 
pTabÀ
 = &
pEx¥
->
pLe·
->
tokí
;

1127 
pCﬁumn
 = &
pRight
->
tokí
;

1129 
	`as£π
–
pRight
->
›
==
TK_DOT
 );

1130 
pDb
 = &
pEx¥
->
pLe·
->
tokí
;

1131 
pTabÀ
 = &
pRight
->
pLe·
->
tokí
;

1132 
pCﬁumn
 = &
pRight
->pRight->
tokí
;

1134 
	`lookupName
(
pP¨£
, 
pDb
, 
pTabÀ
, 
pCﬁumn
, 
pNC
, 
pEx¥
);

1140 
TK_CONST_FUNC
:

1141 
TK_FUNCTION
: {

1142 
Ex¥Li°
 *
pLi°
 = 
pEx¥
->pList;

1143 
n
 = 
pLi°
 ?ÖLi°->
nEx¥
 : 0;

1144 
no_such_func
 = 0;

1145 
wr⁄g_num_¨gs
 = 0;

1146 
is_agg
 = 0;

1147 
i
;

1148 
nId
;

1149 c⁄° *
zId
;

1150 
FuncDef
 *
pDef
;

1151 
íc
 = 
	`ENC
(
pP¨£
->
db
);

1153 
zId
 = (*)
pEx¥
->
tokí
.
z
;

1154 
nId
 = 
pEx¥
->
tokí
.
n
;

1155 
pDef
 = 
	`sqlôe3FödFun˘i⁄
(
pP¨£
->
db
, 
zId
, 
nId
, 
n
, 
íc
, 0);

1156 if–
pDef
==0 ){

1157 
pDef
 = 
	`sqlôe3FödFun˘i⁄
(
pP¨£
->
db
, 
zId
, 
nId
, -1, 
íc
, 0);

1158 if–
pDef
==0 ){

1159 
no_such_func
 = 1;

1161 
wr⁄g_num_¨gs
 = 1;

1164 
is_agg
 = 
pDef
->
xFunc
==0;

1166 if–
is_agg
 && !
pNC
->
ÆlowAgg
 ){

1167 
	`sqlôe3Eº‹Msg
(
pP¨£
, "misu£ o‡aggªg©êfun˘i⁄ %.*s()", 
nId
,
zId
);

1168 
pNC
->
nEº
++;

1169 
is_agg
 = 0;

1170 }if–
no_such_func
 ){

1171 
	`sqlôe3Eº‹Msg
(
pP¨£
, "nÿsuch fun˘i⁄: %.*s", 
nId
, 
zId
);

1172 
pNC
->
nEº
++;

1173 }if–
wr⁄g_num_¨gs
 ){

1174 
	`sqlôe3Eº‹Msg
(
pP¨£
,"wrongÇumber ofárgumentsÅo function %.*s()",

1175 
nId
, 
zId
);

1176 
pNC
->
nEº
++;

1178 if–
is_agg
 ){

1179 
pEx¥
->
›
 = 
TK_AGG_FUNCTION
;

1180 
pNC
->
hasAgg
 = 1;

1182 if–
is_agg
 ) 
pNC
->
ÆlowAgg
 = 0;

1183 
i
=0; 
pNC
->
nEº
==0 && i<
n
; i++){

1184 
	`wÆkEx¥Tªe
(
pLi°
->
a
[
i
].
pEx¥
, 
«meResﬁvîSãp
, 
pNC
);

1186 if–
is_agg
 ) 
pNC
->
ÆlowAgg
 = 1;

1190  
is_agg
;

1192 #i‚de‡
SQLITE_OMIT_SUBQUERY


1193 
TK_SELECT
:

1194 
TK_EXISTS
:

1196 
TK_IN
: {

1197 if–
pEx¥
->
pSñe˘
 ){

1198 
nRef
 = 
pNC
->nRef;

1199 #i‚de‡
SQLITE_OMIT_CHECK


1200 if–
pNC
->
isCheck
 ){

1201 
	`sqlôe3Eº‹Msg
(
pP¨£
,"subqueriesÖrohibited in CHECK constraints");

1204 
	`sqlôe3Sñe˘Resﬁve
(
pP¨£
, 
pEx¥
->
pSñe˘
, 
pNC
);

1205 
	`as£π
–
pNC
->
nRef
>=nRef );

1206 if–
nRef
!=
pNC
->nRef ){

1207 
	`Ex¥SëPr›îty
(
pEx¥
, 
EP_V¨Sñe˘
);

1212 #i‚de‡
SQLITE_OMIT_CHECK


1213 
TK_VARIABLE
: {

1214 if–
pNC
->
isCheck
 ){

1215 
	`sqlôe3Eº‹Msg
(
pP¨£
,"parametersÖrohibited in CHECK constraints");

1222 
	}
}

1245 
	$sqlôe3Ex¥ResﬁveNames
(

1246 
NameC⁄ãxt
 *
pNC
,

1247 
Ex¥
 *
pEx¥


1249 
ßvedHasAgg
;

1250 if–
pEx¥
==0 )  0;

1251 
ßvedHasAgg
 = 
pNC
->
hasAgg
;

1252 
pNC
->
hasAgg
 = 0;

1253 
	`wÆkEx¥Tªe
(
pEx¥
, 
«meResﬁvîSãp
, 
pNC
);

1254 if–
pNC
->
nEº
>0 ){

1255 
	`Ex¥SëPr›îty
(
pEx¥
, 
EP_Eº‹
);

1257 if–
pNC
->
hasAgg
 ){

1258 
	`Ex¥SëPr›îty
(
pEx¥
, 
EP_Agg
);

1259 }if–
ßvedHasAgg
 ){

1260 
pNC
->
hasAgg
 = 1;

1262  
	`Ex¥HasPr›îty
(
pEx¥
, 
EP_Eº‹
);

1263 
	}
}

1269 
QuîyCodî
 
	tQuîyCodî
;

1270 
	sQuîyCodî
 {

1271 
P¨£
 *
	mpP¨£
;

1272 
NameC⁄ãxt
 *
	mpNC
;

1288 #i‚de‡
SQLITE_OMIT_SUBQUERY


1289 
	$sqlôe3CodeSub£À˘
(
P¨£
 *
pP¨£
, 
Ex¥
 *
pEx¥
){

1290 
ã°Addr
 = 0;

1291 
Vdbe
 *
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

1292 if–
v
==0 ) ;

1304 if–!
	`Ex¥HasAnyPr›îty
(
pEx¥
, 
EP_V¨Sñe˘
Ë&& !
pP¨£
->
åigSèck
 ){

1305 
mem
 = 
pP¨£
->
nMem
++;

1306 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemLﬂd
, 
mem
, 0);

1307 
ã°Addr
 = 
	`sqlôe3VdbeAddOp
(
v
, 
OP_If
, 0, 0);

1308 
	`as£π
–
ã°Addr
>0 || 
	`sqlôe3MÆlocFaûed
() );

1309 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemI¡
, 1, 
mem
);

1312  
pEx¥
->
›
 ){

1313 
TK_IN
: {

1314 
afföôy
;

1315 
KeyInfo
 
keyInfo
;

1316 
addr
;

1318 
afföôy
 = 
	`sqlôe3Ex¥Afföôy
(
pEx¥
->
pLe·
);

1333 
pEx¥
->
iTabÀ
 = 
pP¨£
->
nTab
++;

1334 
addr
 = 
	`sqlôe3VdbeAddOp
(
v
, 
OP_O≥nVútuÆ
, 
pEx¥
->
iTabÀ
, 0);

1335 
	`mem£t
(&
keyInfo
, 0, (keyInfo));

1336 
keyInfo
.
nFõld
 = 1;

1337 
	`sqlôe3VdbeAddOp
(
v
, 
OP_SëNumCﬁumns
, 
pEx¥
->
iTabÀ
, 1);

1339 if–
pEx¥
->
pSñe˘
 ){

1345 
iP¨m
 = 
pEx¥
->
iTabÀ
 + ((()
afföôy
)<<16);

1346 
Ex¥Li°
 *
pELi°
;

1347 
	`as£π
–(
pEx¥
->
iTabÀ
&0x0000FFFF)==pExpr->iTable );

1348 
	`sqlôe3Sñe˘
(
pP¨£
, 
pEx¥
->
pSñe˘
, 
SRT_Së
, 
iP¨m
, 0, 0, 0, 0);

1349 
pELi°
 = 
pEx¥
->
pSñe˘
->pEList;

1350 if–
pELi°
 &&ÖELi°->
nEx¥
>0 ){

1351 
keyInfo
.
aCﬁl
[0] = 
	`bö¨yCom∑ªCﬁlSeq
(
pP¨£
, 
pEx¥
->
pLe·
,

1352 
pELi°
->
a
[0].
pEx¥
);

1354 }if–
pEx¥
->
pLi°
 ){

1362 
i
;

1363 
Ex¥Li°
 *
pLi°
 = 
pEx¥
->pList;

1364 
Ex¥Li°_ôem
 *
pIãm
;

1366 if–!
afföôy
 ){

1367 
afföôy
 = 
SQLITE_AFF_NUMERIC
;

1369 
keyInfo
.
aCﬁl
[0] = 
pEx¥
->
pLe·
->
pCﬁl
;

1372 
i
=
pLi°
->
nEx¥
, 
pIãm
ıLi°->
a
; i>0; i--,ÖItem++){

1373 
Ex¥
 *
pE2
 = 
pIãm
->
pEx¥
;

1380 if–
ã°Addr
>0 && !
	`sqlôe3Ex¥IsC⁄°™t
(
pE2
) ){

1381 
VdbeOp
 *
aOp
 = 
	`sqlôe3VdbeGëOp
(
v
, 
ã°Addr
-1);

1382 
j
;

1383 
j
=0; j<3; j++){

1384 
aOp
[
j
].
›code
 = 
OP_No›
;

1386 
ã°Addr
 = 0;

1390 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pE2
);

1391 
	`sqlôe3VdbeOp3
(
v
, 
OP_MakeRec‹d
, 1, 0, &
afföôy
, 1);

1392 
	`sqlôe3VdbeAddOp
(
v
, 
OP_IdxIn£π
, 
pEx¥
->
iTabÀ
, 0);

1395 
	`sqlôe3VdbeCh™geP3
(
v
, 
addr
, (*)&
keyInfo
, 
P3_KEYINFO
);

1399 
TK_EXISTS
:

1400 
TK_SELECT
: {

1405 c⁄° 
Tokí
 
⁄e
 = { (
u8
*)"1", 0, 1 };

1406 
Sñe˘
 *
pSñ
;

1407 
iMem
;

1408 
s›
;

1410 
pEx¥
->
iCﬁumn
 = 
iMem
 = 
pP¨£
->
nMem
++;

1411 
pSñ
 = 
pEx¥
->
pSñe˘
;

1412 if–
pEx¥
->
›
==
TK_SELECT
 ){

1413 
s›
 = 
SRT_Mem
;

1414 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemNuŒ
, 
iMem
, 0);

1415 
	`VdbeCommít
((
v
, "# Init subqueryÑesult"));

1417 
s›
 = 
SRT_Exi°s
;

1418 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemI¡
, 0, 
iMem
);

1419 
	`VdbeCommít
((
v
, "# Init EXISTSÑesult"));

1421 
	`sqlôe3Ex¥Dñëe
(
pSñ
->
pLimô
);

1422 
pSñ
->
pLimô
 = 
	`sqlôe3Ex¥
(
TK_INTEGER
, 0, 0, &
⁄e
);

1423 
	`sqlôe3Sñe˘
(
pP¨£
, 
pSñ
, 
s›
, 
iMem
, 0, 0, 0, 0);

1428 if–
ã°Addr
 ){

1429 
	`sqlôe3VdbeJumpHîe
(
v
, 
ã°Addr
);

1432 
	}
}

1439 
	$codeI¡egî
(
Vdbe
 *
v
, c⁄° *
z
, 
n
){

1440 
i
;

1441 if–
	`sqlôe3GëI¡32
(
z
, &
i
) ){

1442 
	`sqlôe3VdbeAddOp
(
v
, 
OP_I¡egî
, 
i
, 0);

1443 }if–
	`sqlôe3FôsIn64Bôs
(
z
) ){

1444 
	`sqlôe3VdbeOp3
(
v
, 
OP_I¡64
, 0, 0, 
z
, 
n
);

1446 
	`sqlôe3VdbeOp3
(
v
, 
OP_Ról
, 0, 0, 
z
, 
n
);

1448 
	}
}

1460 
	$sqlôe3Ex¥Code
(
P¨£
 *
pP¨£
, 
Ex¥
 *
pEx¥
){

1461 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

1462 
›
;

1463 
°ackChng
 = 1;

1465 if–
v
==0 ) ;

1466 if–
pEx¥
==0 ){

1467 
	`sqlôe3VdbeAddOp
(
v
, 
OP_NuŒ
, 0, 0);

1470 
›
 = 
pEx¥
->op;

1471  
›
 ){

1472 
TK_AGG_COLUMN
: {

1473 
AggInfo
 *
pAggInfo
 = 
pEx¥
->pAggInfo;

1474 
AggInfo_cﬁ
 *
pCﬁ
 = &
pAggInfo
->
aCﬁ
[
pEx¥
->
iAgg
];

1475 if–!
pAggInfo
->
dúe˘Mode
 ){

1476 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemLﬂd
, 
pCﬁ
->
iMem
, 0);

1478 }if–
pAggInfo
->
u£S‹tögIdx
 ){

1479 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Cﬁumn
, 
pAggInfo
->
s‹tögIdx
,

1480 
pCﬁ
->
iS‹ãrCﬁumn
);

1485 
TK_COLUMN
: {

1486 if–
pEx¥
->
iTabÀ
<0 ){

1488 
	`as£π
–
pP¨£
->
ckOff£t
>0 );

1489 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Dup
, 
pP¨£
->
ckOff£t
-
pEx¥
->
iCﬁumn
-1, 1);

1490 }if–
pEx¥
->
iCﬁumn
>=0 ){

1491 
TabÀ
 *
pTab
 = 
pEx¥
->pTab;

1492 
iCﬁ
 = 
pEx¥
->
iCﬁumn
;

1493 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Cﬁumn
, 
pEx¥
->
iTabÀ
, 
iCﬁ
);

1494 
	`sqlôe3CﬁumnDeÁu…
(
v
, 
pTab
, 
iCﬁ
);

1495 #i‚de‡
SQLITE_OMIT_FLOATING_POINT


1496 if–
pTab
 &&ÖTab->
aCﬁ
[
iCﬁ
].
afföôy
==
SQLITE_AFF_REAL
 ){

1497 
	`sqlôe3VdbeAddOp
(
v
, 
OP_RólAfföôy
, 0, 0);

1501 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Rowid
, 
pEx¥
->
iTabÀ
, 0);

1505 
TK_INTEGER
: {

1506 
	`codeI¡egî
(
v
, (*)
pEx¥
->
tokí
.
z
,ÖEx¥->tokí.
n
);

1509 
TK_FLOAT
:

1510 
TK_STRING
: {

1511 
	`as£π
–
TK_FLOAT
==
OP_Ról
 );

1512 
	`as£π
–
TK_STRING
==
OP_Såög8
 );

1513 
	`sqlôe3DequŸeEx¥
(
pEx¥
);

1514 
	`sqlôe3VdbeOp3
(
v
, 
›
, 0, 0, (*)
pEx¥
->
tokí
.
z
,ÖEx¥->tokí.
n
);

1517 
TK_NULL
: {

1518 
	`sqlôe3VdbeAddOp
(
v
, 
OP_NuŒ
, 0, 0);

1521 #i‚de‡
SQLITE_OMIT_BLOB_LITERAL


1522 
TK_BLOB
: {

1523 
n
;

1524 c⁄° *
z
;

1525 
	`as£π
–
TK_BLOB
==
OP_HexBlob
 );

1526 
n
 = 
pEx¥
->
tokí
.n - 3;

1527 
z
 = (*)
pEx¥
->
tokí
.z + 2;

1528 
	`as£π
–
n
>=0 );

1529 if–
n
==0 ){

1530 
z
 = "";

1532 
	`sqlôe3VdbeOp3
(
v
, 
›
, 0, 0, 
z
, 
n
);

1536 
TK_VARIABLE
: {

1537 
	`sqlôe3VdbeAddOp
(
v
, 
OP_V¨übÀ
, 
pEx¥
->
iTabÀ
, 0);

1538 if–
pEx¥
->
tokí
.
n
>1 ){

1539 
	`sqlôe3VdbeCh™geP3
(
v
, -1, (*)
pEx¥
->
tokí
.
z
,ÖEx¥->tokí.
n
);

1543 
TK_REGISTER
: {

1544 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemLﬂd
, 
pEx¥
->
iTabÀ
, 0);

1547 #i‚de‡
SQLITE_OMIT_CAST


1548 
TK_CAST
: {

1550 
aff
, 
to_›
;

1551 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pEx¥
->
pLe·
);

1552 
aff
 = 
	`sqlôe3AfföôyTy≥
(&
pEx¥
->
tokí
);

1553 
to_›
 = 
aff
 - 
SQLITE_AFF_TEXT
 + 
OP_ToText
;

1554 
	`as£π
–
to_›
==
OP_ToText
 || 
aff
!=
SQLITE_AFF_TEXT
 );

1555 
	`as£π
–
to_›
==
OP_ToBlob
 || 
aff
!=
SQLITE_AFF_NONE
 );

1556 
	`as£π
–
to_›
==
OP_ToNumîic
 || 
aff
!=
SQLITE_AFF_NUMERIC
 );

1557 
	`as£π
–
to_›
==
OP_ToI¡
 || 
aff
!=
SQLITE_AFF_INTEGER
 );

1558 
	`as£π
–
to_›
==
OP_ToRól
 || 
aff
!=
SQLITE_AFF_REAL
 );

1559 
	`sqlôe3VdbeAddOp
(
v
, 
to_›
, 0, 0);

1560 
°ackChng
 = 0;

1564 
TK_LT
:

1565 
TK_LE
:

1566 
TK_GT
:

1567 
TK_GE
:

1568 
TK_NE
:

1569 
TK_EQ
: {

1570 
	`as£π
–
TK_LT
==
OP_Lt
 );

1571 
	`as£π
–
TK_LE
==
OP_Le
 );

1572 
	`as£π
–
TK_GT
==
OP_Gt
 );

1573 
	`as£π
–
TK_GE
==
OP_Ge
 );

1574 
	`as£π
–
TK_EQ
==
OP_Eq
 );

1575 
	`as£π
–
TK_NE
==
OP_Ne
 );

1576 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pEx¥
->
pLe·
);

1577 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pEx¥
->
pRight
);

1578 
	`codeCom∑ª
(
pP¨£
, 
pEx¥
->
pLe·
,ÖEx¥->
pRight
, 
›
, 0, 0);

1579 
°ackChng
 = -1;

1582 
TK_AND
:

1583 
TK_OR
:

1584 
TK_PLUS
:

1585 
TK_STAR
:

1586 
TK_MINUS
:

1587 
TK_REM
:

1588 
TK_BITAND
:

1589 
TK_BITOR
:

1590 
TK_SLASH
:

1591 
TK_LSHIFT
:

1592 
TK_RSHIFT
:

1593 
TK_CONCAT
: {

1594 
	`as£π
–
TK_AND
==
OP_And
 );

1595 
	`as£π
–
TK_OR
==
OP_Or
 );

1596 
	`as£π
–
TK_PLUS
==
OP_Add
 );

1597 
	`as£π
–
TK_MINUS
==
OP_Subåa˘
 );

1598 
	`as£π
–
TK_REM
==
OP_Remaödî
 );

1599 
	`as£π
–
TK_BITAND
==
OP_BôAnd
 );

1600 
	`as£π
–
TK_BITOR
==
OP_BôOr
 );

1601 
	`as£π
–
TK_SLASH
==
OP_Divide
 );

1602 
	`as£π
–
TK_LSHIFT
==
OP_Shi·Le·
 );

1603 
	`as£π
–
TK_RSHIFT
==
OP_Shi·Right
 );

1604 
	`as£π
–
TK_CONCAT
==
OP_C⁄ˇt
 );

1605 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pEx¥
->
pLe·
);

1606 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pEx¥
->
pRight
);

1607 
	`sqlôe3VdbeAddOp
(
v
, 
›
, 0, 0);

1608 
°ackChng
 = -1;

1611 
TK_UMINUS
: {

1612 
Ex¥
 *
pLe·
 = 
pEx¥
->pLeft;

1613 
	`as£π
–
pLe·
 );

1614 if–
pLe·
->
›
==
TK_FLOAT
 ||ÖLe·->›==
TK_INTEGER
 ){

1615 
Tokí
 *
p
 = &
pLe·
->
tokí
;

1616 *
z
 = 
	`sqlôe3MPrötf
("-%.*s", 
p
->
n
,Ö->z);

1617 if–
pLe·
->
›
==
TK_FLOAT
 ){

1618 
	`sqlôe3VdbeOp3
(
v
, 
OP_Ról
, 0, 0, 
z
, 
p
->
n
+1);

1620 
	`codeI¡egî
(
v
, 
z
, 
p
->
n
+1);

1622 
	`sqlôeFªe
(
z
);

1627 
TK_BITNOT
:

1628 
TK_NOT
: {

1629 
	`as£π
–
TK_BITNOT
==
OP_BôNŸ
 );

1630 
	`as£π
–
TK_NOT
==
OP_NŸ
 );

1631 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pEx¥
->
pLe·
);

1632 
	`sqlôe3VdbeAddOp
(
v
, 
›
, 0, 0);

1633 
°ackChng
 = 0;

1636 
TK_ISNULL
:

1637 
TK_NOTNULL
: {

1638 
de°
;

1639 
	`as£π
–
TK_ISNULL
==
OP_IsNuŒ
 );

1640 
	`as£π
–
TK_NOTNULL
==
OP_NŸNuŒ
 );

1641 
	`sqlôe3VdbeAddOp
(
v
, 
OP_I¡egî
, 1, 0);

1642 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pEx¥
->
pLe·
);

1643 
de°
 = 
	`sqlôe3VdbeCuºítAddr
(
v
) + 2;

1644 
	`sqlôe3VdbeAddOp
(
v
, 
›
, 1, 
de°
);

1645 
	`sqlôe3VdbeAddOp
(
v
, 
OP_AddImm
, -1, 0);

1646 
°ackChng
 = 0;

1649 
TK_AGG_FUNCTION
: {

1650 
AggInfo
 *
pInfo
 = 
pEx¥
->
pAggInfo
;

1651 if–
pInfo
==0 ){

1652 
	`sqlôe3Eº‹Msg
(
pP¨£
, "misuse ofággregate: %T",

1653 &
pEx¥
->
•™
);

1655 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemLﬂd
, 
pInfo
->
aFunc
[
pEx¥
->
iAgg
].
iMem
, 0);

1659 
TK_CONST_FUNC
:

1660 
TK_FUNCTION
: {

1661 
Ex¥Li°
 *
pLi°
 = 
pEx¥
->pList;

1662 
nEx¥
 = 
pLi°
 ?ÖList->nExpr : 0;

1663 
FuncDef
 *
pDef
;

1664 
nId
;

1665 c⁄° *
zId
;

1666 
c⁄°Mask
 = 0;

1667 
i
;

1668 
u8
 
íc
 = 
	`ENC
(
pP¨£
->
db
);

1669 
CﬁlSeq
 *
pCﬁl
 = 0;

1670 
zId
 = (*)
pEx¥
->
tokí
.
z
;

1671 
nId
 = 
pEx¥
->
tokí
.
n
;

1672 
pDef
 = 
	`sqlôe3FödFun˘i⁄
(
pP¨£
->
db
, 
zId
, 
nId
, 
nEx¥
, 
íc
, 0);

1673 
	`as£π
–
pDef
!=0 );

1674 
nEx¥
 = 
	`sqlôe3Ex¥CodeEx¥Li°
(
pP¨£
, 
pLi°
);

1675 
i
=0; i<
nEx¥
 && i<32; i++){

1676 if–
	`sqlôe3Ex¥IsC⁄°™t
(
pLi°
->
a
[
i
].
pEx¥
) ){

1677 
c⁄°Mask
 |(1<<
i
);

1679 if–
pDef
->
√edCﬁlSeq
 && !
pCﬁl
 ){

1680 
pCﬁl
 = 
	`sqlôe3Ex¥CﬁlSeq
(
pP¨£
, 
pLi°
->
a
[
i
].
pEx¥
);

1683 if–
pDef
->
√edCﬁlSeq
 ){

1684 if–!
pCﬁl
 )ÖCﬁ»
pP¨£
->
db
->
pDÊtCﬁl
;

1685 
	`sqlôe3VdbeOp3
(
v
, 
OP_CﬁlSeq
, 0, 0, (*)
pCﬁl
, 
P3_COLLSEQ
);

1687 
	`sqlôe3VdbeOp3
(
v
, 
OP_Fun˘i⁄
, 
c⁄°Mask
, 
nEx¥
, (*)
pDef
, 
P3_FUNCDEF
);

1688 
°ackChng
 = 1-
nEx¥
;

1691 #i‚de‡
SQLITE_OMIT_SUBQUERY


1692 
TK_EXISTS
:

1693 
TK_SELECT
: {

1694 
	`sqlôe3CodeSub£À˘
(
pP¨£
, 
pEx¥
);

1695 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemLﬂd
, 
pEx¥
->
iCﬁumn
, 0);

1696 
	`VdbeCommít
((
v
, "#Üoad subqueryÑesult"));

1699 
TK_IN
: {

1700 
addr
;

1701 
afföôy
;

1702 
ckOff£t
 = 
pP¨£
->ckOffset;

1703 
	`sqlôe3CodeSub£À˘
(
pP¨£
, 
pEx¥
);

1709 
afföôy
 = 
	`com∑ris⁄Afföôy
(
pEx¥
);

1711 
	`sqlôe3VdbeAddOp
(
v
, 
OP_I¡egî
, 1, 0);

1712 
pP¨£
->
ckOff£t
 = ckOffset+1;

1717 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pEx¥
->
pLe·
);

1718 
addr
 = 
	`sqlôe3VdbeCuºítAddr
(
v
);

1719 
	`sqlôe3VdbeAddOp
(
v
, 
OP_NŸNuŒ
, -1, 
addr
+4);

1720 
	`sqlôe3VdbeAddOp
(
v
, 
OP_P›
, 2, 0);

1721 
	`sqlôe3VdbeAddOp
(
v
, 
OP_NuŒ
, 0, 0);

1722 
	`sqlôe3VdbeAddOp
(
v
, 
OP_GŸo
, 0, 
addr
+7);

1723 
	`sqlôe3VdbeOp3
(
v
, 
OP_MakeRec‹d
, 1, 0, &
afföôy
, 1);

1724 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Found
, 
pEx¥
->
iTabÀ
, 
addr
+7);

1725 
	`sqlôe3VdbeAddOp
(
v
, 
OP_AddImm
, -1, 0);

1730 
TK_BETWEEN
: {

1731 
Ex¥
 *
pLe·
 = 
pEx¥
->pLeft;

1732 
Ex¥Li°_ôem
 *
pLIãm
 = 
pEx¥
->
pLi°
->
a
;

1733 
Ex¥
 *
pRight
 = 
pLIãm
->
pEx¥
;

1734 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pLe·
);

1735 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Dup
, 0, 0);

1736 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pRight
);

1737 
	`codeCom∑ª
(
pP¨£
, 
pLe·
, 
pRight
, 
OP_Ge
, 0, 0);

1738 
	`sqlôe3VdbeAddOp
(
v
, 
OP_PuŒ
, 1, 0);

1739 
pLIãm
++;

1740 
pRight
 = 
pLIãm
->
pEx¥
;

1741 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pRight
);

1742 
	`codeCom∑ª
(
pP¨£
, 
pLe·
, 
pRight
, 
OP_Le
, 0, 0);

1743 
	`sqlôe3VdbeAddOp
(
v
, 
OP_And
, 0, 0);

1746 
TK_UPLUS
:

1747 
TK_AS
: {

1748 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pEx¥
->
pLe·
);

1749 
°ackChng
 = 0;

1752 
TK_CASE
: {

1753 
ex¥_íd_œbñ
;

1754 
jumpIn°
;

1755 
nEx¥
;

1756 
i
;

1757 
Ex¥Li°
 *
pELi°
;

1758 
Ex¥Li°_ôem
 *
aLi°ñem
;

1760 
	`as£π
(
pEx¥
->
pLi°
);

1761 
	`as£π
((
pEx¥
->
pLi°
->
nEx¥
 % 2) == 0);

1762 
	`as£π
(
pEx¥
->
pLi°
->
nEx¥
 > 0);

1763 
pELi°
 = 
pEx¥
->
pLi°
;

1764 
aLi°ñem
 = 
pELi°
->
a
;

1765 
nEx¥
 = 
pELi°
->nExpr;

1766 
ex¥_íd_œbñ
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

1767 if–
pEx¥
->
pLe·
 ){

1768 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pEx¥
->
pLe·
);

1770 
i
=0; i<
nEx¥
; i=i+2){

1771 
	`sqlôe3Ex¥Code
(
pP¨£
, 
aLi°ñem
[
i
].
pEx¥
);

1772 if–
pEx¥
->
pLe·
 ){

1773 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Dup
, 1, 1);

1774 
jumpIn°
 = 
	`codeCom∑ª
(
pP¨£
, 
pEx¥
->
pLe·
, 
aLi°ñem
[
i
].pExpr,

1775 
OP_Ne
, 0, 1);

1776 
	`sqlôe3VdbeAddOp
(
v
, 
OP_P›
, 1, 0);

1778 
jumpIn°
 = 
	`sqlôe3VdbeAddOp
(
v
, 
OP_IfNŸ
, 1, 0);

1780 
	`sqlôe3Ex¥Code
(
pP¨£
, 
aLi°ñem
[
i
+1].
pEx¥
);

1781 
	`sqlôe3VdbeAddOp
(
v
, 
OP_GŸo
, 0, 
ex¥_íd_œbñ
);

1782 
	`sqlôe3VdbeJumpHîe
(
v
, 
jumpIn°
);

1784 if–
pEx¥
->
pLe·
 ){

1785 
	`sqlôe3VdbeAddOp
(
v
, 
OP_P›
, 1, 0);

1787 if–
pEx¥
->
pRight
 ){

1788 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pEx¥
->
pRight
);

1790 
	`sqlôe3VdbeAddOp
(
v
, 
OP_NuŒ
, 0, 0);

1792 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
ex¥_íd_œbñ
);

1795 #i‚de‡
SQLITE_OMIT_TRIGGER


1796 
TK_RAISE
: {

1797 if–!
pP¨£
->
åigSèck
 ){

1798 
	`sqlôe3Eº‹Msg
(
pP¨£
,

1802 if–
pEx¥
->
iCﬁumn
!=
OE_Ign‹e
 ){

1803 
	`as£π
–
pEx¥
->
iCﬁumn
==
OE_Rﬁlback
 ||

1804 
pEx¥
->
iCﬁumn
 =
OE_Ab‹t
 ||

1805 
pEx¥
->
iCﬁumn
 =
OE_Faû
 );

1806 
	`sqlôe3DequŸeEx¥
(
pEx¥
);

1807 
	`sqlôe3VdbeOp3
(
v
, 
OP_HÆt
, 
SQLITE_CONSTRAINT
, 
pEx¥
->
iCﬁumn
,

1808 (*)
pEx¥
->
tokí
.
z
,ÖEx¥->tokí.
n
);

1810 
	`as£π
–
pEx¥
->
iCﬁumn
 =
OE_Ign‹e
 );

1811 
	`sqlôe3VdbeAddOp
(
v
, 
OP_C⁄ãxtP›
, 0, 0);

1812 
	`sqlôe3VdbeAddOp
(
v
, 
OP_GŸo
, 0, 
pP¨£
->
åigSèck
->
ign‹eJump
);

1813 
	`VdbeCommít
((
v
, "#Ñaise(IGNORE)"));

1815 
°ackChng
 = 0;

1821 if–
pP¨£
->
ckOff£t
 ){

1822 
pP¨£
->
ckOff£t
 +
°ackChng
;

1823 
	`as£π
–
pP¨£
->
ckOff£t
 );

1825 
	}
}

1827 #i‚de‡
SQLITE_OMIT_TRIGGER


1838 
	$sqlôe3Ex¥CodeAndCache
(
P¨£
 *
pP¨£
, 
Ex¥
 *
pEx¥
){

1839 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

1840 
iMem
;

1841 
addr1
, 
addr2
;

1842 if–
v
==0 ) ;

1843 
addr1
 = 
	`sqlôe3VdbeCuºítAddr
(
v
);

1844 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pEx¥
);

1845 
addr2
 = 
	`sqlôe3VdbeCuºítAddr
(
v
);

1846 if–
addr2
>
addr1
+1 || 
	`sqlôe3VdbeGëOp
(
v
,áddr1)->
›code
==
OP_Fun˘i⁄
 ){

1847 
iMem
 = 
pEx¥
->
iTabÀ
 = 
pP¨£
->
nMem
++;

1848 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemSt‹e
, 
iMem
, 0);

1849 
pEx¥
->
›
 = 
TK_REGISTER
;

1851 
	}
}

1860 
	$sqlôe3Ex¥CodeEx¥Li°
(

1861 
P¨£
 *
pP¨£
,

1862 
Ex¥Li°
 *
pLi°


1864 
Ex¥Li°_ôem
 *
pIãm
;

1865 
i
, 
n
;

1866 if–
pLi°
==0 )  0;

1867 
n
 = 
pLi°
->
nEx¥
;

1868 
pIãm
=
pLi°
->
a
, 
i
=
n
; i>0; i--,ÖItem++){

1869 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pIãm
->
pEx¥
);

1871  
n
;

1872 
	}
}

1888 
	$sqlôe3Ex¥IfTrue
(
P¨£
 *
pP¨£
, 
Ex¥
 *
pEx¥
, 
de°
, 
jumpIfNuŒ
){

1889 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

1890 
›
 = 0;

1891 
ckOff£t
 = 
pP¨£
->ckOffset;

1892 if–
v
==0 || 
pEx¥
==0 ) ;

1893 
›
 = 
pEx¥
->op;

1894  
›
 ){

1895 
TK_AND
: {

1896 
d2
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

1897 
	`sqlôe3Ex¥IfFÆ£
(
pP¨£
, 
pEx¥
->
pLe·
, 
d2
, !
jumpIfNuŒ
);

1898 
	`sqlôe3Ex¥IfTrue
(
pP¨£
, 
pEx¥
->
pRight
, 
de°
, 
jumpIfNuŒ
);

1899 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
d2
);

1902 
TK_OR
: {

1903 
	`sqlôe3Ex¥IfTrue
(
pP¨£
, 
pEx¥
->
pLe·
, 
de°
, 
jumpIfNuŒ
);

1904 
	`sqlôe3Ex¥IfTrue
(
pP¨£
, 
pEx¥
->
pRight
, 
de°
, 
jumpIfNuŒ
);

1907 
TK_NOT
: {

1908 
	`sqlôe3Ex¥IfFÆ£
(
pP¨£
, 
pEx¥
->
pLe·
, 
de°
, 
jumpIfNuŒ
);

1911 
TK_LT
:

1912 
TK_LE
:

1913 
TK_GT
:

1914 
TK_GE
:

1915 
TK_NE
:

1916 
TK_EQ
: {

1917 
	`as£π
–
TK_LT
==
OP_Lt
 );

1918 
	`as£π
–
TK_LE
==
OP_Le
 );

1919 
	`as£π
–
TK_GT
==
OP_Gt
 );

1920 
	`as£π
–
TK_GE
==
OP_Ge
 );

1921 
	`as£π
–
TK_EQ
==
OP_Eq
 );

1922 
	`as£π
–
TK_NE
==
OP_Ne
 );

1923 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pEx¥
->
pLe·
);

1924 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pEx¥
->
pRight
);

1925 
	`codeCom∑ª
(
pP¨£
, 
pEx¥
->
pLe·
,ÖEx¥->
pRight
, 
›
, 
de°
, 
jumpIfNuŒ
);

1928 
TK_ISNULL
:

1929 
TK_NOTNULL
: {

1930 
	`as£π
–
TK_ISNULL
==
OP_IsNuŒ
 );

1931 
	`as£π
–
TK_NOTNULL
==
OP_NŸNuŒ
 );

1932 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pEx¥
->
pLe·
);

1933 
	`sqlôe3VdbeAddOp
(
v
, 
›
, 1, 
de°
);

1936 
TK_BETWEEN
: {

1943 
addr
;

1944 
Ex¥
 *
pLe·
 = 
pEx¥
->pLeft;

1945 
Ex¥
 *
pRight
 = 
pEx¥
->
pLi°
->
a
[0].pExpr;

1946 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pLe·
);

1947 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Dup
, 0, 0);

1948 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pRight
);

1949 
addr
 = 
	`codeCom∑ª
(
pP¨£
, 
pLe·
, 
pRight
, 
OP_Lt
, 0, !
jumpIfNuŒ
);

1951 
pRight
 = 
pEx¥
->
pLi°
->
a
[1].pExpr;

1952 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pRight
);

1953 
	`codeCom∑ª
(
pP¨£
, 
pLe·
, 
pRight
, 
OP_Le
, 
de°
, 
jumpIfNuŒ
);

1955 
	`sqlôe3VdbeAddOp
(
v
, 
OP_I¡egî
, 0, 0);

1956 
	`sqlôe3VdbeJumpHîe
(
v
, 
addr
);

1957 
	`sqlôe3VdbeAddOp
(
v
, 
OP_P›
, 1, 0);

1961 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pEx¥
);

1962 
	`sqlôe3VdbeAddOp
(
v
, 
OP_If
, 
jumpIfNuŒ
, 
de°
);

1966 
pP¨£
->
ckOff£t
 = ckOffset;

1967 
	}
}

1977 
	$sqlôe3Ex¥IfFÆ£
(
P¨£
 *
pP¨£
, 
Ex¥
 *
pEx¥
, 
de°
, 
jumpIfNuŒ
){

1978 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

1979 
›
 = 0;

1980 
ckOff£t
 = 
pP¨£
->ckOffset;

1981 if–
v
==0 || 
pEx¥
==0 ) ;

2001 
›
 = ((
pEx¥
->›+(
TK_ISNULL
&1))^1)-(TK_ISNULL&1);

2005 
	`as£π
–
pEx¥
->
›
!=
TK_ISNULL
 || op==
OP_NŸNuŒ
 );

2006 
	`as£π
–
pEx¥
->
›
!=
TK_NOTNULL
 || op==
OP_IsNuŒ
 );

2007 
	`as£π
–
pEx¥
->
›
!=
TK_NE
 || op==
OP_Eq
 );

2008 
	`as£π
–
pEx¥
->
›
!=
TK_EQ
 || op==
OP_Ne
 );

2009 
	`as£π
–
pEx¥
->
›
!=
TK_LT
 || op==
OP_Ge
 );

2010 
	`as£π
–
pEx¥
->
›
!=
TK_LE
 || op==
OP_Gt
 );

2011 
	`as£π
–
pEx¥
->
›
!=
TK_GT
 || op==
OP_Le
 );

2012 
	`as£π
–
pEx¥
->
›
!=
TK_GE
 || op==
OP_Lt
 );

2014  
pEx¥
->
›
 ){

2015 
TK_AND
: {

2016 
	`sqlôe3Ex¥IfFÆ£
(
pP¨£
, 
pEx¥
->
pLe·
, 
de°
, 
jumpIfNuŒ
);

2017 
	`sqlôe3Ex¥IfFÆ£
(
pP¨£
, 
pEx¥
->
pRight
, 
de°
, 
jumpIfNuŒ
);

2020 
TK_OR
: {

2021 
d2
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

2022 
	`sqlôe3Ex¥IfTrue
(
pP¨£
, 
pEx¥
->
pLe·
, 
d2
, !
jumpIfNuŒ
);

2023 
	`sqlôe3Ex¥IfFÆ£
(
pP¨£
, 
pEx¥
->
pRight
, 
de°
, 
jumpIfNuŒ
);

2024 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
d2
);

2027 
TK_NOT
: {

2028 
	`sqlôe3Ex¥IfTrue
(
pP¨£
, 
pEx¥
->
pLe·
, 
de°
, 
jumpIfNuŒ
);

2031 
TK_LT
:

2032 
TK_LE
:

2033 
TK_GT
:

2034 
TK_GE
:

2035 
TK_NE
:

2036 
TK_EQ
: {

2037 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pEx¥
->
pLe·
);

2038 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pEx¥
->
pRight
);

2039 
	`codeCom∑ª
(
pP¨£
, 
pEx¥
->
pLe·
,ÖEx¥->
pRight
, 
›
, 
de°
, 
jumpIfNuŒ
);

2042 
TK_ISNULL
:

2043 
TK_NOTNULL
: {

2044 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pEx¥
->
pLe·
);

2045 
	`sqlôe3VdbeAddOp
(
v
, 
›
, 1, 
de°
);

2048 
TK_BETWEEN
: {

2055 
addr
;

2056 
Ex¥
 *
pLe·
 = 
pEx¥
->pLeft;

2057 
Ex¥
 *
pRight
 = 
pEx¥
->
pLi°
->
a
[0].pExpr;

2058 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pLe·
);

2059 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Dup
, 0, 0);

2060 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pRight
);

2061 
addr
 = 
	`sqlôe3VdbeCuºítAddr
(
v
);

2062 
	`codeCom∑ª
(
pP¨£
, 
pLe·
, 
pRight
, 
OP_Ge
, 
addr
+3, !
jumpIfNuŒ
);

2064 
	`sqlôe3VdbeAddOp
(
v
, 
OP_P›
, 1, 0);

2065 
	`sqlôe3VdbeAddOp
(
v
, 
OP_GŸo
, 0, 
de°
);

2066 
pRight
 = 
pEx¥
->
pLi°
->
a
[1].pExpr;

2067 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pRight
);

2068 
	`codeCom∑ª
(
pP¨£
, 
pLe·
, 
pRight
, 
OP_Gt
, 
de°
, 
jumpIfNuŒ
);

2072 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pEx¥
);

2073 
	`sqlôe3VdbeAddOp
(
v
, 
OP_IfNŸ
, 
jumpIfNuŒ
, 
de°
);

2077 
pP¨£
->
ckOff£t
 = ckOffset;

2078 
	}
}

2084 
	$sqlôe3Ex¥Com∑ª
(
Ex¥
 *
pA
, Ex¥ *
pB
){

2085 
i
;

2086 if–
pA
==0||
pB
==0 ){

2087  
pB
==
pA
;

2089 if–
pA
->
›
!=
pB
->op )  0;

2090 if–(
pA
->
Êags
 & 
EP_Di°ö˘
)!=(
pB
->flags & EP_Distinct) )  0;

2091 if–!
	`sqlôe3Ex¥Com∑ª
(
pA
->
pLe·
, 
pB
->pLeft) )  0;

2092 if–!
	`sqlôe3Ex¥Com∑ª
(
pA
->
pRight
, 
pB
->pRight) )  0;

2093 if–
pA
->
pLi°
 ){

2094 if–
pB
->
pLi°
==0 )  0;

2095 if–
pA
->
pLi°
->
nEx¥
!=
pB
->pList->nExpr )  0;

2096 
i
=0; i<
pA
->
pLi°
->
nEx¥
; i++){

2097 if–!
	`sqlôe3Ex¥Com∑ª
(
pA
->
pLi°
->
a
[
i
].
pEx¥
, 
pB
->pList->a[i].pExpr) ){

2101 }if–
pB
->
pLi°
 ){

2104 if–
pA
->
pSñe˘
 || 
pB
->pSelect )  0;

2105 if–
pA
->
iTabÀ
!=
pB
->iTabÀ ||ÖA->
iCﬁumn
!=pB->iColumn )  0;

2106 if–
pA
->
tokí
.
z
 ){

2107 if–
pB
->
tokí
.
z
==0 )  0;

2108 if–
pB
->
tokí
.
n
!=
pA
->token.n )  0;

2109 if–
	`sqlôe3SåNICmp
((*)
pA
->
tokí
.
z
,(*)
pB
->tokí.z,pB->tokí.
n
)!=0 ){

2114 
	}
}

2121 
	$addAggInfoCﬁumn
(
AggInfo
 *
pInfo
){

2122 
i
;

2123 
i
 = 
	`sqlôe3AºayAŒoˇã
((**)&
pInfo
->
aCﬁ
, (pInfo->aCol[0]), 3);

2124 if–
i
<0 ){

2127  
i
;

2128 
	}
}

2134 
	$addAggInfoFunc
(
AggInfo
 *
pInfo
){

2135 
i
;

2136 
i
 = 
	`sqlôe3AºayAŒoˇã
((**)&
pInfo
->
aFunc
, (pInfo->aFunc[0]), 2);

2137 if–
i
<0 ){

2140  
i
;

2141 
	}
}

2150 
	$™ÆyzeAggªg©e
(*
pArg
, 
Ex¥
 *
pEx¥
){

2151 
i
;

2152 
NameC⁄ãxt
 *
pNC
 = (NameC⁄ãxà*)
pArg
;

2153 
P¨£
 *
pP¨£
 = 
pNC
->pParse;

2154 
SrcLi°
 *
pSrcLi°
 = 
pNC
->pSrcList;

2155 
AggInfo
 *
pAggInfo
 = 
pNC
->pAggInfo;

2158  
pEx¥
->
›
 ){

2159 
TK_COLUMN
: {

2162 if–
pSrcLi°
 ){

2163 
SrcLi°_ôem
 *
pIãm
 = 
pSrcLi°
->
a
;

2164 
i
=0; i<
pSrcLi°
->
nSrc
; i++, 
pIãm
++){

2165 
AggInfo_cﬁ
 *
pCﬁ
;

2166 if–
pEx¥
->
iTabÀ
==
pIãm
->
iCurs‹
 ){

2173 
pCﬁ
 = 
pAggInfo
->
aCﬁ
;

2174 
i
=0; i<
pAggInfo
->
nCﬁumn
; i++, 
pCﬁ
++){

2175 if–
pCﬁ
->
iTabÀ
==
pEx¥
->iTable &&

2176 
pCﬁ
->
iCﬁumn
==
pEx¥
->iColumn ){

2180 if–
i
>=
pAggInfo
->
nCﬁumn
 && (ò
	`addAggInfoCﬁumn
(pAggInfo))>=0 ){

2181 
pCﬁ
 = &
pAggInfo
->
aCﬁ
[
i
];

2182 
pCﬁ
->
iTabÀ
 = 
pEx¥
->iTable;

2183 
pCﬁ
->
iCﬁumn
 = 
pEx¥
->iColumn;

2184 
pCﬁ
->
iMem
 = 
pP¨£
->
nMem
++;

2185 
pCﬁ
->
iS‹ãrCﬁumn
 = -1;

2186 
pCﬁ
->
pEx¥
 =ÖExpr;

2187 if–
pAggInfo
->
pGroupBy
 ){

2188 
j
, 
n
;

2189 
Ex¥Li°
 *
pGB
 = 
pAggInfo
->
pGroupBy
;

2190 
Ex¥Li°_ôem
 *
pTîm
 = 
pGB
->
a
;

2191 
n
 = 
pGB
->
nEx¥
;

2192 
j
=0; j<
n
; j++, 
pTîm
++){

2193 
Ex¥
 *
pE
 = 
pTîm
->
pEx¥
;

2194 if–
pE
->
›
==
TK_COLUMN
 &&ÖE->
iTabÀ
==
pEx¥
->iTable &&

2195 
pE
->
iCﬁumn
==
pEx¥
->iColumn ){

2196 
pCﬁ
->
iS‹ãrCﬁumn
 = 
j
;

2201 if–
pCﬁ
->
iS‹ãrCﬁumn
<0 ){

2202 
pCﬁ
->
iS‹ãrCﬁumn
 = 
pAggInfo
->
nS‹tögCﬁumn
++;

2210 
pEx¥
->
pAggInfo
 =ÖAggInfo;

2211 
pEx¥
->
›
 = 
TK_AGG_COLUMN
;

2212 
pEx¥
->
iAgg
 = 
i
;

2219 
TK_AGG_FUNCTION
: {

2222 if–
pNC
->
nDïth
==0 ){

2226 
AggInfo_func
 *
pIãm
 = 
pAggInfo
->
aFunc
;

2227 
i
=0; i<
pAggInfo
->
nFunc
; i++, 
pIãm
++){

2228 if–
	`sqlôe3Ex¥Com∑ª
(
pIãm
->
pEx¥
,ÖExpr) ){

2232 if–
i
>=
pAggInfo
->
nFunc
 ){

2235 
u8
 
íc
 = 
	`ENC
(
pP¨£
->
db
);

2236 
i
 = 
	`addAggInfoFunc
(
pAggInfo
);

2237 if–
i
>=0 ){

2238 
pIãm
 = &
pAggInfo
->
aFunc
[
i
];

2239 
pIãm
->
pEx¥
 =ÖExpr;

2240 
pIãm
->
iMem
 = 
pP¨£
->
nMem
++;

2241 
pIãm
->
pFunc
 = 
	`sqlôe3FödFun˘i⁄
(
pP¨£
->
db
,

2242 (*)
pEx¥
->
tokí
.
z
,ÖEx¥->tokí.
n
,

2243 
pEx¥
->
pLi°
 ?ÖEx¥->pLi°->
nEx¥
 : 0, 
íc
, 0);

2244 if–
pEx¥
->
Êags
 & 
EP_Di°ö˘
 ){

2245 
pIãm
->
iDi°ö˘
 = 
pP¨£
->
nTab
++;

2247 
pIãm
->
iDi°ö˘
 = -1;

2253 
pEx¥
->
iAgg
 = 
i
;

2254 
pEx¥
->
pAggInfo
 =ÖAggInfo;

2264 if–
pEx¥
->
pSñe˘
 ){

2265 
pNC
->
nDïth
++;

2266 
	`wÆkSñe˘Ex¥
(
pEx¥
->
pSñe˘
, 
™ÆyzeAggªg©e
, 
pNC
);

2267 
pNC
->
nDïth
--;

2270 
	}
}

2283 
	$sqlôe3Ex¥A«lyzeAggªg©es
(
NameC⁄ãxt
 *
pNC
, 
Ex¥
 *
pEx¥
){

2284 
nEº
 = 
pNC
->
pP¨£
->nErr;

2285 
	`wÆkEx¥Tªe
(
pEx¥
, 
™ÆyzeAggªg©e
, 
pNC
);

2286  
pNC
->
pP¨£
->
nEº
 -ÇErr;

2287 
	}
}

2295 
	$sqlôe3Ex¥A«lyzeAggLi°
(
NameC⁄ãxt
 *
pNC
, 
Ex¥Li°
 *
pLi°
){

2296 
Ex¥Li°_ôem
 *
pIãm
;

2297 
i
;

2298 
nEº
 = 0;

2299 if–
pLi°
 ){

2300 
pIãm
=
pLi°
->
a
, 
i
=0; 
nEº
==0 && i<pLi°->
nEx¥
; i++,ÖItem++){

2301 
nEº
 +
	`sqlôe3Ex¥A«lyzeAggªg©es
(
pNC
, 
pIãm
->
pEx¥
);

2304  
nEº
;

2305 
	}
}

	@func.c

21 
	~"sqlôeI¡.h
"

22 
	~<˘y≥.h
>

24 
	~<°dlib.h
>

25 
	~<as£π.h
>

26 
	~"vdbeI¡.h
"

27 
	~"os.h
"

32 
CﬁlSeq
 *
	$sqlôe3GëFuncCﬁlSeq
(
sqlôe3_c⁄ãxt
 *
c⁄ãxt
){

33  
c⁄ãxt
->
pCﬁl
;

34 
	}
}

39 
	$mömaxFunc
(

40 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

41 
¨gc
,

42 
sqlôe3_vÆue
 **
¨gv


44 
i
;

45 
mask
;

46 
iBe°
;

47 
CﬁlSeq
 *
pCﬁl
;

49 if–
¨gc
==0 ) ;

50 
mask
 = 
	`sqlôe3_u£r_d©a
(
c⁄ãxt
)==0 ? 0 : -1;

51 
pCﬁl
 = 
	`sqlôe3GëFuncCﬁlSeq
(
c⁄ãxt
);

52 
	`as£π
–
pCﬁl
 );

53 
	`as£π
–
mask
==-1 || mask==0 );

54 
iBe°
 = 0;

55 if–
	`sqlôe3_vÆue_ty≥
(
¨gv
[0])==
SQLITE_NULL
 ) ;

56 
i
=1; i<
¨gc
; i++){

57 if–
	`sqlôe3_vÆue_ty≥
(
¨gv
[
i
])==
SQLITE_NULL
 ) ;

58 if–(
	`sqlôe3MemCom∑ª
(
¨gv
[
iBe°
],árgv[
i
], 
pCﬁl
)^
mask
)>=0 ){

59 
iBe°
 = 
i
;

62 
	`sqlôe3_ªsu…_vÆue
(
c⁄ãxt
, 
¨gv
[
iBe°
]);

63 
	}
}

68 
	$ty≥ofFunc
(

69 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

70 
¨gc
,

71 
sqlôe3_vÆue
 **
¨gv


73 c⁄° *
z
 = 0;

74  
	`sqlôe3_vÆue_ty≥
(
¨gv
[0]) ){

75 
SQLITE_NULL
: 
z
 = "null"; ;

76 
SQLITE_INTEGER
: 
z
 = "integer"; ;

77 
SQLITE_TEXT
: 
z
 = "text"; ;

78 
SQLITE_FLOAT
: 
z
 = "real"; ;

79 
SQLITE_BLOB
: 
z
 = "blob"; ;

81 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, 
z
, -1, 
SQLITE_STATIC
);

82 
	}
}

88 
	$ÀngthFunc
(

89 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

90 
¨gc
,

91 
sqlôe3_vÆue
 **
¨gv


93 
Àn
;

95 
	`as£π
–
¨gc
==1 );

96  
	`sqlôe3_vÆue_ty≥
(
¨gv
[0]) ){

97 
SQLITE_BLOB
:

98 
SQLITE_INTEGER
:

99 
SQLITE_FLOAT
: {

100 
	`sqlôe3_ªsu…_öt
(
c⁄ãxt
, 
	`sqlôe3_vÆue_byãs
(
¨gv
[0]));

103 
SQLITE_TEXT
: {

104 c⁄° *
z
 = 
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]);

105 
Àn
=0; *
z
; z++){ if( (0xc0&*z)!=0x80 )Üen++; }

106 
	`sqlôe3_ªsu…_öt
(
c⁄ãxt
, 
Àn
);

110 
	`sqlôe3_ªsu…_nuŒ
(
c⁄ãxt
);

114 
	}
}

119 
	$absFunc
(
sqlôe3_c⁄ãxt
 *
c⁄ãxt
, 
¨gc
, 
sqlôe3_vÆue
 **
¨gv
){

120 
	`as£π
–
¨gc
==1 );

121  
	`sqlôe3_vÆue_ty≥
(
¨gv
[0]) ){

122 
SQLITE_INTEGER
: {

123 
i64
 
iVÆ
 = 
	`sqlôe3_vÆue_öt64
(
¨gv
[0]);

124 if–
iVÆ
<0 ) iVal = iVal * -1;

125 
	`sqlôe3_ªsu…_öt64
(
c⁄ãxt
, 
iVÆ
);

128 
SQLITE_NULL
: {

129 
	`sqlôe3_ªsu…_nuŒ
(
c⁄ãxt
);

133 
rVÆ
 = 
	`sqlôe3_vÆue_doubÀ
(
¨gv
[0]);

134 if–
rVÆ
<0 )ÑVal =ÑVal * -1.0;

135 
	`sqlôe3_ªsu…_doubÀ
(
c⁄ãxt
, 
rVÆ
);

139 
	}
}

144 
	$sub°rFunc
(

145 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

146 
¨gc
,

147 
sqlôe3_vÆue
 **
¨gv


149 c⁄° *
z
;

150 c⁄° *
z2
;

151 
i
;

152 
p1
, 
p2
, 
Àn
;

154 
	`as£π
–
¨gc
==3 );

155 
z
 = 
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]);

156 if–
z
==0 ) ;

157 
p1
 = 
	`sqlôe3_vÆue_öt
(
¨gv
[1]);

158 
p2
 = 
	`sqlôe3_vÆue_öt
(
¨gv
[2]);

159 
Àn
=0, 
z2
=
z
; *z2; z2++){ if( (0xc0&*z2)!=0x80 )Üen++; }

160 if–
p1
<0 ){

161 
p1
 +
Àn
;

162 if–
p1
<0 ){

163 
p2
 +
p1
;

164 
p1
 = 0;

166 }if–
p1
>0 ){

167 
p1
--;

169 if–
p1
+
p2
>
Àn
 ){

170 
p2
 = 
Àn
-
p1
;

172 
i
=0; i<
p1
 && 
z
[i]; i++){

173 if–(
z
[
i
]&0xc0)==0x80 ) 
p1
++;

175  
z
[
i
] && (z[i]&0xc0)==0x80 ){ i++; 
p1
++; }

176 ; 
i
<
p1
+
p2
 && 
z
[i]; i++){

177 if–(
z
[
i
]&0xc0)==0x80 ) 
p2
++;

179  
z
[
i
] && (z[i]&0xc0)==0x80 ){ i++; 
p2
++; }

180 if–
p2
<0 )Ö2 = 0;

181 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, (*)&
z
[
p1
], 
p2
, 
SQLITE_TRANSIENT
);

182 
	}
}

187 
	$roundFunc
(
sqlôe3_c⁄ãxt
 *
c⁄ãxt
, 
¨gc
, 
sqlôe3_vÆue
 **
¨gv
){

188 
n
 = 0;

189 
r
;

190 
zBuf
[500];

191 
	`as£π
–
¨gc
==1 ||árgc==2 );

192 if–
¨gc
==2 ){

193 if–
SQLITE_NULL
==
	`sqlôe3_vÆue_ty≥
(
¨gv
[1]) ) ;

194 
n
 = 
	`sqlôe3_vÆue_öt
(
¨gv
[1]);

195 if–
n
>30 )Ç = 30;

196 if–
n
<0 )Ç = 0;

198 if–
SQLITE_NULL
==
	`sqlôe3_vÆue_ty≥
(
¨gv
[0]) ) ;

199 
r
 = 
	`sqlôe3_vÆue_doubÀ
(
¨gv
[0]);

200 
	`sqlôe3_¢¥ötf
((
zBuf
),zBuf,"%.*f",
n
,
r
);

201 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, 
zBuf
, -1, 
SQLITE_TRANSIENT
);

202 
	}
}

207 
	$uµîFunc
(
sqlôe3_c⁄ãxt
 *
c⁄ãxt
, 
¨gc
, 
sqlôe3_vÆue
 **
¨gv
){

208 *
z
;

209 
i
;

210 if–
¨gc
<1 || 
SQLITE_NULL
==
	`sqlôe3_vÆue_ty≥
(
¨gv
[0]) ) ;

211 
z
 = 
	`sqlôeMÆloc
(
	`sqlôe3_vÆue_byãs
(
¨gv
[0])+1);

212 if–
z
==0 ) ;

213 
	`°r˝y
((*)
z
, (*)
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]));

214 
i
=0; 
z
[i]; i++){

215 
z
[
i
] = 
	`touµî
(z[i]);

217 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, (*)
z
, -1, 
SQLITE_TRANSIENT
);

218 
	`sqlôeFªe
(
z
);

219 
	}
}

220 
	$lowîFunc
(
sqlôe3_c⁄ãxt
 *
c⁄ãxt
, 
¨gc
, 
sqlôe3_vÆue
 **
¨gv
){

221 *
z
;

222 
i
;

223 if–
¨gc
<1 || 
SQLITE_NULL
==
	`sqlôe3_vÆue_ty≥
(
¨gv
[0]) ) ;

224 
z
 = 
	`sqlôeMÆloc
(
	`sqlôe3_vÆue_byãs
(
¨gv
[0])+1);

225 if–
z
==0 ) ;

226 
	`°r˝y
((*)
z
, (*)
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]));

227 
i
=0; 
z
[i]; i++){

228 
z
[
i
] = 
	`tﬁowî
(z[i]);

230 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, (*)
z
, -1, 
SQLITE_TRANSIENT
);

231 
	`sqlôeFªe
(
z
);

232 
	}
}

239 
	$i‚uŒFunc
(

240 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

241 
¨gc
,

242 
sqlôe3_vÆue
 **
¨gv


244 
i
;

245 
i
=0; i<
¨gc
; i++){

246 if–
SQLITE_NULL
!=
	`sqlôe3_vÆue_ty≥
(
¨gv
[
i
]) ){

247 
	`sqlôe3_ªsu…_vÆue
(
c⁄ãxt
, 
¨gv
[
i
]);

251 
	}
}

256 
	$øndomFunc
(

257 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

258 
¨gc
,

259 
sqlôe3_vÆue
 **
¨gv


261 
r
;

262 
	`sqlôe3R™dom√ss
((
r
), &r);

263 
	`sqlôe3_ªsu…_öt
(
c⁄ãxt
, 
r
);

264 
	}
}

270 
	$œ°_ö£π_rowid
(

271 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

272 
¨g
,

273 
sqlôe3_vÆue
 **
¨gv


275 
sqlôe3
 *
db
 = 
	`sqlôe3_u£r_d©a
(
c⁄ãxt
);

276 
	`sqlôe3_ªsu…_öt64
(
c⁄ãxt
, 
	`sqlôe3_œ°_ö£π_rowid
(
db
));

277 
	}
}

283 
	$ch™ges
(

284 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

285 
¨g
,

286 
sqlôe3_vÆue
 **
¨gv


288 
sqlôe3
 *
db
 = 
	`sqlôe3_u£r_d©a
(
c⁄ãxt
);

289 
	`sqlôe3_ªsu…_öt
(
c⁄ãxt
, 
	`sqlôe3_ch™ges
(
db
));

290 
	}
}

296 
	$tŸÆ_ch™ges
(

297 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

298 
¨g
,

299 
sqlôe3_vÆue
 **
¨gv


301 
sqlôe3
 *
db
 = 
	`sqlôe3_u£r_d©a
(
c⁄ãxt
);

302 
	`sqlôe3_ªsu…_öt
(
c⁄ãxt
, 
	`sqlôe3_tŸÆ_ch™ges
(
db
));

303 
	}
}

308 
	scom∑ªInfo
 {

309 
u8
 
	mm©chAŒ
;

310 
u8
 
	mm©chO√
;

311 
u8
 
	mm©chSë
;

312 
u8
 
	mnoCa£
;

315 c⁄° 
com∑ªInfo
 
	gglobInfo
 = { '*', '?', '[', 0 };

318 c⁄° 
com∑ªInfo
 
	glikeInfoN‹m
 = { '%', '_', 0, 1 };

321 c⁄° 
com∑ªInfo
 
	glikeInfoA…
 = { '%', '_', 0, 0 };

328 
	#sqlôeNextCh¨
(
X
Ë (0xc0&*++(X))==0x80 ){}

	)

329 
	#sqlôeCh¨VÆ
(
X
Ë
	`sqlôe3RódUtf8
(X)

	)

360 
	$∑âînCom∑ª
(

361 c⁄° 
u8
 *
zP©ã∫
,

362 c⁄° 
u8
 *
zSåög
,

363 c⁄° 
com∑ªInfo
 *
pInfo
,

364 c⁄° 
esc


366 
c
;

367 
övît
;

368 
£í
;

369 
c2
;

370 
u8
 
m©chO√
 = 
pInfo
->matchOne;

371 
u8
 
m©chAŒ
 = 
pInfo
->matchAll;

372 
u8
 
m©chSë
 = 
pInfo
->matchSet;

373 
u8
 
noCa£
 = 
pInfo
->noCase;

374 
¥evEsˇ≥
 = 0;

376  (
c
 = *
zP©ã∫
)!=0 ){

377 if–!
¥evEsˇ≥
 && 
c
==
m©chAŒ
 ){

378  (
c
=
zP©ã∫
[1]Ë=
m©chAŒ
 || c =
m©chO√
 ){

379 if–
c
==
m©chO√
 ){

380 if–*
zSåög
==0 )  0;

381 
	`sqlôeNextCh¨
(
zSåög
);

383 
zP©ã∫
++;

385 if–
c
 && 
esc
 && 
	`sqlôe3RódUtf8
(&
zP©ã∫
[1])==esc ){

386 
u8
 c⁄° *
zTemp
 = &
zP©ã∫
[1];

387 
	`sqlôeNextCh¨
(
zTemp
);

388 
c
 = *
zTemp
;

390 if–
c
==0 )  1;

391 if–
c
==
m©chSë
 ){

392 
	`as£π
–
esc
==0 );

393  *
zSåög
 && 
	`∑âînCom∑ª
(&
zP©ã∫
[1],zSåög,
pInfo
,
esc
)==0 ){

394 
	`sqlôeNextCh¨
(
zSåög
);

396  *
zSåög
!=0;

398  (
c2
 = *
zSåög
)!=0 ){

399 if–
noCa£
 ){

400 
c2
 = 
sqlôe3UµîToLowî
[c2];

401 
c
 = 
sqlôe3UµîToLowî
[c];

402  
c2
 !0 && c2 !
c
 ){ c2 = 
sqlôe3UµîToLowî
[*++
zSåög
]; }

404  
c2
 !0 && c2 !
c
 ){ c2 = *++
zSåög
; }

406 if–
c2
==0 )  0;

407 if–
	`∑âînCom∑ª
(&
zP©ã∫
[1],
zSåög
,
pInfo
,
esc
) )  1;

408 
	`sqlôeNextCh¨
(
zSåög
);

412 }if–!
¥evEsˇ≥
 && 
c
==
m©chO√
 ){

413 if–*
zSåög
==0 )  0;

414 
	`sqlôeNextCh¨
(
zSåög
);

415 
zP©ã∫
++;

416 }if–
c
==
m©chSë
 ){

417 
¥i‹_c
 = 0;

418 
	`as£π
–
esc
==0 );

419 
£í
 = 0;

420 
övît
 = 0;

421 
c
 = 
	`sqlôeCh¨VÆ
(
zSåög
);

422 if–
c
==0 )  0;

423 
c2
 = *++
zP©ã∫
;

424 if–
c2
=='^' ){ 
övît
 = 1; c2 = *++
zP©ã∫
; }

425 if–
c2
==']' ){

426 if–
c
==']' ) 
£í
 = 1;

427 
c2
 = *++
zP©ã∫
;

429  (
c2
 = 
	`sqlôeCh¨VÆ
(
zP©ã∫
))!=0 && c2!=']' ){

430 if–
c2
=='-' && 
zP©ã∫
[1]!=']' && zP©ã∫[1]!=0 && 
¥i‹_c
>0 ){

431 
zP©ã∫
++;

432 
c2
 = 
	`sqlôeCh¨VÆ
(
zP©ã∫
);

433 if–
c
>=
¥i‹_c
 && c<=
c2
 ) 
£í
 = 1;

434 
¥i‹_c
 = 0;

435 }if–
c
==
c2
 ){

436 
£í
 = 1;

437 
¥i‹_c
 = 
c2
;

439 
¥i‹_c
 = 
c2
;

441 
	`sqlôeNextCh¨
(
zP©ã∫
);

443 if–
c2
==0 || (
£í
 ^ 
övît
)==0 )  0;

444 
	`sqlôeNextCh¨
(
zSåög
);

445 
zP©ã∫
++;

446 }if–
esc
 && !
¥evEsˇ≥
 && 
	`sqlôe3RódUtf8
(
zP©ã∫
)==esc){

447 
¥evEsˇ≥
 = 1;

448 
	`sqlôeNextCh¨
(
zP©ã∫
);

450 if–
noCa£
 ){

451 if–
sqlôe3UµîToLowî
[
c
] !sqlôe3UµîToLowî[*
zSåög
] )  0;

453 if–
c
 !*
zSåög
 )  0;

455 
zP©ã∫
++;

456 
zSåög
++;

457 
¥evEsˇ≥
 = 0;

460  *
zSåög
==0;

461 
	}
}

468 #ifde‡
SQLITE_TEST


469 
	gsqlôe3_like_cou¡
 = 0;

485 
	$likeFunc
(

486 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

487 
¨gc
,

488 
sqlôe3_vÆue
 **
¨gv


490 c⁄° *
zA
 = 
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]);

491 c⁄° *
zB
 = 
	`sqlôe3_vÆue_ãxt
(
¨gv
[1]);

492 
esˇ≥
 = 0;

493 if–
¨gc
==3 ){

497 c⁄° *
zEsc
 = 
	`sqlôe3_vÆue_ãxt
(
¨gv
[2]);

498 if–
	`sqlôe3utf8Ch¨Lí
((*)
zEsc
, -1)!=1 ){

499 
	`sqlôe3_ªsu…_îr‹
(
c⁄ãxt
,

503 
esˇ≥
 = 
	`sqlôe3RódUtf8
(
zEsc
);

505 if–
zA
 && 
zB
 ){

506 
com∑ªInfo
 *
pInfo
 = 
	`sqlôe3_u£r_d©a
(
c⁄ãxt
);

507 #ifde‡
SQLITE_TEST


508 
sqlôe3_like_cou¡
++;

510 
	`sqlôe3_ªsu…_öt
(
c⁄ãxt
, 
	`∑âînCom∑ª
(
zA
, 
zB
, 
pInfo
, 
esˇ≥
));

512 
	}
}

519 
	$nuŒifFunc
(

520 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

521 
¨gc
,

522 
sqlôe3_vÆue
 **
¨gv


524 
CﬁlSeq
 *
pCﬁl
 = 
	`sqlôe3GëFuncCﬁlSeq
(
c⁄ãxt
);

525 if–
	`sqlôe3MemCom∑ª
(
¨gv
[0],árgv[1], 
pCﬁl
)!=0 ){

526 
	`sqlôe3_ªsu…_vÆue
(
c⁄ãxt
, 
¨gv
[0]);

528 
	}
}

534 
	$vîsi⁄Func
(

535 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

536 
¨gc
,

537 
sqlôe3_vÆue
 **
¨gv


539 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, 
sqlôe3_vîsi⁄
, -1, 
SQLITE_STATIC
);

540 
	}
}

554 
	$quŸeFunc
(
sqlôe3_c⁄ãxt
 *
c⁄ãxt
, 
¨gc
, 
sqlôe3_vÆue
 **
¨gv
){

555 if–
¨gc
<1 ) ;

556  
	`sqlôe3_vÆue_ty≥
(
¨gv
[0]) ){

557 
SQLITE_NULL
: {

558 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, "NULL", 4, 
SQLITE_STATIC
);

561 
SQLITE_INTEGER
:

562 
SQLITE_FLOAT
: {

563 
	`sqlôe3_ªsu…_vÆue
(
c⁄ãxt
, 
¨gv
[0]);

566 
SQLITE_BLOB
: {

567 c⁄° 
hexdigôs
[] = {

571 *
zText
 = 0;

572 
nBlob
 = 
	`sqlôe3_vÆue_byãs
(
¨gv
[0]);

573 c⁄° *
zBlob
 = 
	`sqlôe3_vÆue_blob
(
¨gv
[0]);

575 
zText
 = (*)
	`sqlôeMÆloc
((2*
nBlob
)+4);

576 if–!
zText
 ){

577 
	`sqlôe3_ªsu…_îr‹
(
c⁄ãxt
, "out of memory", -1);

579 
i
;

580 
i
=0; i<
nBlob
; i++){

581 
zText
[(
i
*2)+2] = 
hexdigôs
[(
zBlob
[i]>>4)&0x0F];

582 
zText
[(
i
*2)+3] = 
hexdigôs
[(
zBlob
[i])&0x0F];

584 
zText
[(
nBlob
*2)+2] = '\'';

585 
zText
[(
nBlob
*2)+3] = '\0';

586 
zText
[0] = 'X';

587 
zText
[1] = '\'';

588 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, 
zText
, -1, 
SQLITE_TRANSIENT
);

589 
	`sqlôeFªe
(
zText
);

593 
SQLITE_TEXT
: {

594 
i
,
j
,
n
;

595 c⁄° *
zArg
 = 
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]);

596 *
z
;

598 
i
=
n
=0; 
zArg
[i]; i++){ if( zArg[i]=='\'' )Ç++; }

599 
z
 = 
	`sqlôeMÆloc
–
i
+
n
+3 );

600 if–
z
==0 ) ;

601 
z
[0] = '\'';

602 
i
=0, 
j
=1; 
zArg
[i]; i++){

603 
z
[
j
++] = 
zArg
[
i
];

604 if–
zArg
[
i
]=='\'' ){

605 
z
[
j
++] = '\'';

608 
z
[
j
++] = '\'';

609 
z
[
j
] = 0;

610 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, 
z
, 
j
, 
SQLITE_TRANSIENT
);

611 
	`sqlôeFªe
(
z
);

614 
	}
}

616 #ifde‡
SQLITE_SOUNDEX


620 
	$soundexFunc
(
sqlôe3_c⁄ãxt
 *
c⁄ãxt
, 
¨gc
, 
sqlôe3_vÆue
 **
¨gv
){

621 
zResu…
[8];

622 c⁄° 
u8
 *
zIn
;

623 
i
, 
j
;

624 c⁄° 
iCode
[] = {

634 
	`as£π
–
¨gc
==1 );

635 
zIn
 = (
u8
*)
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]);

636 
i
=0; 
zIn
[i] && !
	`ißÕha
(zIn[i]); i++){}

637 if–
zIn
[
i
] ){

638 
zResu…
[0] = 
	`touµî
(
zIn
[
i
]);

639 
j
=1; j<4 && 
zIn
[
i
]; i++){

640 
code
 = 
iCode
[
zIn
[
i
]&0x7f];

641 if–
code
>0 ){

642 
zResu…
[
j
++] = 
code
 + '0';

645  
j
<4 ){

646 
zResu…
[
j
++] = '0';

648 
zResu…
[
j
] = 0;

649 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, 
zResu…
, 4, 
SQLITE_TRANSIENT
);

651 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, "?000", 4, 
SQLITE_STATIC
);

653 
	}
}

656 #ifde‡
SQLITE_TEST


661 
	$øndSå
(
sqlôe3_c⁄ãxt
 *
c⁄ãxt
, 
¨gc
, 
sqlôe3_vÆue
 **
¨gv
){

662 c⁄° 
zSrc
[] =

667 
iMö
, 
iMax
, 
n
, 
r
, 
i
;

668 
zBuf
[1000];

669 if–
¨gc
>=1 ){

670 
iMö
 = 
	`sqlôe3_vÆue_öt
(
¨gv
[0]);

671 if–
iMö
<0 ) iMin = 0;

672 if–
iMö
>=(
zBuf
) ) iMin = (zBuf)-1;

674 
iMö
 = 1;

676 if–
¨gc
>=2 ){

677 
iMax
 = 
	`sqlôe3_vÆue_öt
(
¨gv
[1]);

678 if–
iMax
<
iMö
 ) iMax = iMin;

679 if–
iMax
>=(
zBuf
) ) iMax = (zBuf)-1;

681 
iMax
 = 50;

683 
n
 = 
iMö
;

684 if–
iMax
>
iMö
 ){

685 
	`sqlôe3R™dom√ss
((
r
), &r);

686 
r
 &= 0x7fffffff;

687 
n
 +
r
%(
iMax
 + 1 - 
iMö
);

689 
	`as£π
–
n
<(
zBuf
) );

690 
	`sqlôe3R™dom√ss
(
n
, 
zBuf
);

691 
i
=0; i<
n
; i++){

692 
zBuf
[
i
] = 
zSrc
[zBuf[i]%((zSrc)-1)];

694 
zBuf
[
n
] = 0;

695 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, (*)
zBuf
, 
n
, 
SQLITE_TRANSIENT
);

696 
	}
}

699 #ifde‡
SQLITE_TEST


711 
	gã°_de°ru˘‹_cou¡_v¨
 = 0;

712 
	$de°ru˘‹
(*
p
){

713 *
zVÆ
 = (*)
p
;

714 
	`as£π
(
zVÆ
);

715 
zVÆ
--;

716 
	`sqlôeFªe
(
zVÆ
);

717 
ã°_de°ru˘‹_cou¡_v¨
--;

718 
	}
}

719 
	$ã°_de°ru˘‹
(

720 
sqlôe3_c⁄ãxt
 *
pCtx
,

721 
nArg
,

722 
sqlôe3_vÆue
 **
¨gv


724 *
zVÆ
;

725 
Àn
;

726 
sqlôe3
 *
db
 = 
	`sqlôe3_u£r_d©a
(
pCtx
);

728 
ã°_de°ru˘‹_cou¡_v¨
++;

729 
	`as£π
–
nArg
==1 );

730 if–
	`sqlôe3_vÆue_ty≥
(
¨gv
[0])==
SQLITE_NULL
 ) ;

731 
Àn
 = 
	`sqlôe3VÆueByãs
(
¨gv
[0], 
	`ENC
(
db
));

732 
zVÆ
 = 
	`sqlôeMÆloc
(
Àn
+3);

733 
zVÆ
[
Àn
] = 0;

734 
zVÆ
[
Àn
-1] = 0;

735 
	`as£π
–
zVÆ
 );

736 
zVÆ
++;

737 
	`mem˝y
(
zVÆ
, 
	`sqlôe3VÆueText
(
¨gv
[0], 
	`ENC
(
db
)), 
Àn
);

738 if–
	`ENC
(
db
)==
SQLITE_UTF8
 ){

739 
	`sqlôe3_ªsu…_ãxt
(
pCtx
, 
zVÆ
, -1, 
de°ru˘‹
);

740 #i‚de‡
SQLITE_OMIT_UTF16


741 }if–
	`ENC
(
db
)==
SQLITE_UTF16LE
 ){

742 
	`sqlôe3_ªsu…_ãxt16À
(
pCtx
, 
zVÆ
, -1, 
de°ru˘‹
);

744 
	`sqlôe3_ªsu…_ãxt16be
(
pCtx
, 
zVÆ
, -1, 
de°ru˘‹
);

747 
	}
}

748 
	$ã°_de°ru˘‹_cou¡
(

749 
sqlôe3_c⁄ãxt
 *
pCtx
,

750 
nArg
,

751 
sqlôe3_vÆue
 **
¨gv


753 
	`sqlôe3_ªsu…_öt
(
pCtx
, 
ã°_de°ru˘‹_cou¡_v¨
);

754 
	}
}

757 #ifde‡
SQLITE_TEST


769 
	$‰ì_ã°_auxd©a
(*
p
Ë{
	`sqlôeFªe
’);
	}
}

770 
	$ã°_auxd©a
(

771 
sqlôe3_c⁄ãxt
 *
pCtx
,

772 
nArg
,

773 
sqlôe3_vÆue
 **
¨gv


775 
i
;

776 *
zRë
 = 
	`sqlôeMÆloc
(
nArg
*2);

777 if–!
zRë
 ) ;

778 
i
=0; i<
nArg
; i++){

779 c⁄° *
z
 = (*)
	`sqlôe3_vÆue_ãxt
(
¨gv
[
i
]);

780 if–
z
 ){

781 *
zAux
 = 
	`sqlôe3_gë_auxd©a
(
pCtx
, 
i
);

782 if–
zAux
 ){

783 
zRë
[
i
*2] = '1';

784 if–
	`°rcmp
(
zAux
, 
z
) ){

785 
	`sqlôe3_ªsu…_îr‹
(
pCtx
, "Auxilary data corruption", -1);

789 
zRë
[
i
*2] = '0';

790 
zAux
 = 
	`sqlôeSåDup
(
z
);

791 
	`sqlôe3_£t_auxd©a
(
pCtx
, 
i
, 
zAux
, 
‰ì_ã°_auxd©a
);

793 
zRë
[
i
*2+1] = ' ';

796 
	`sqlôe3_ªsu…_ãxt
(
pCtx
, 
zRë
, 2*
nArg
-1, 
‰ì_ã°_auxd©a
);

797 
	}
}

800 #ifde‡
SQLITE_TEST


805 
	$ã°_îr‹
(

806 
sqlôe3_c⁄ãxt
 *
pCtx
,

807 
nArg
,

808 
sqlôe3_vÆue
 **
¨gv


810 
	`sqlôe3_ªsu…_îr‹
(
pCtx
, (*)
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]), 0);

811 
	}
}

818 
SumCtx
 
	tSumCtx
;

819 
	sSumCtx
 {

820 
LONGDOUBLE_TYPE
 
	msum
;

821 
i64
 
	m˙t
;

822 
u8
 
	m≠¥ox
;

843 
	$sumSãp
(
sqlôe3_c⁄ãxt
 *
c⁄ãxt
, 
¨gc
, 
sqlôe3_vÆue
 **
¨gv
){

844 
SumCtx
 *
p
;

845 
ty≥
;

846 
	`as£π
–
¨gc
==1 );

847 
p
 = 
	`sqlôe3_aggªg©e_c⁄ãxt
(
c⁄ãxt
, (*p));

848 
ty≥
 = 
	`sqlôe3_vÆue_numîic_ty≥
(
¨gv
[0]);

849 if–
p
 && 
ty≥
!=
SQLITE_NULL
 ){

850 
p
->
˙t
++;

851 if–
ty≥
==
SQLITE_INTEGER
 ){

852 
p
->
sum
 +
	`sqlôe3_vÆue_öt64
(
¨gv
[0]);

853 if–!
p
->
≠¥ox
 ){

854 
i64
 
iVÆ
;

855 
p
->
≠¥ox
 =Ö->
sum
!=(
LONGDOUBLE_TYPE
)(
iVÆ
 = (
i64
)p->sum);

858 
p
->
sum
 +
	`sqlôe3_vÆue_doubÀ
(
¨gv
[0]);

859 
p
->
≠¥ox
 = 1;

862 
	}
}

863 
	$sumFöÆize
(
sqlôe3_c⁄ãxt
 *
c⁄ãxt
){

864 
SumCtx
 *
p
;

865 
p
 = 
	`sqlôe3_aggªg©e_c⁄ãxt
(
c⁄ãxt
, 0);

866 if–
p
 &&Ö->
˙t
>0 ){

867 if–
p
->
≠¥ox
 ){

868 
	`sqlôe3_ªsu…_doubÀ
(
c⁄ãxt
, 
p
->
sum
);

870 
	`sqlôe3_ªsu…_öt64
(
c⁄ãxt
, (
i64
)
p
->
sum
);

873 
	}
}

874 
	$avgFöÆize
(
sqlôe3_c⁄ãxt
 *
c⁄ãxt
){

875 
SumCtx
 *
p
;

876 
p
 = 
	`sqlôe3_aggªg©e_c⁄ãxt
(
c⁄ãxt
, 0);

877 if–
p
 &&Ö->
˙t
>0 ){

878 
	`sqlôe3_ªsu…_doubÀ
(
c⁄ãxt
, 
p
->
sum
/(Ì->
˙t
);

880 
	}
}

881 
	$tŸÆFöÆize
(
sqlôe3_c⁄ãxt
 *
c⁄ãxt
){

882 
SumCtx
 *
p
;

883 
p
 = 
	`sqlôe3_aggªg©e_c⁄ãxt
(
c⁄ãxt
, 0);

884 
	`sqlôe3_ªsu…_doubÀ
(
c⁄ãxt
, 
p
 ?Ö->
sum
 : 0.0);

885 
	}
}

891 
Cou¡Ctx
 
	tCou¡Ctx
;

892 
	sCou¡Ctx
 {

893 
i64
 
	mn
;

899 
	$cou¡Sãp
(
sqlôe3_c⁄ãxt
 *
c⁄ãxt
, 
¨gc
, 
sqlôe3_vÆue
 **
¨gv
){

900 
Cou¡Ctx
 *
p
;

901 
p
 = 
	`sqlôe3_aggªg©e_c⁄ãxt
(
c⁄ãxt
, (*p));

902 if–(
¨gc
==0 || 
SQLITE_NULL
!=
	`sqlôe3_vÆue_ty≥
(
¨gv
[0])Ë&& 
p
 ){

903 
p
->
n
++;

905 
	}
}

906 
	$cou¡FöÆize
(
sqlôe3_c⁄ãxt
 *
c⁄ãxt
){

907 
Cou¡Ctx
 *
p
;

908 
p
 = 
	`sqlôe3_aggªg©e_c⁄ãxt
(
c⁄ãxt
, 0);

909 
	`sqlôe3_ªsu…_öt64
(
c⁄ãxt
, 
p
 ?Ö->
n
 : 0);

910 
	}
}

915 
	$mömaxSãp
(
sqlôe3_c⁄ãxt
 *
c⁄ãxt
, 
¨gc
, 
sqlôe3_vÆue
 **
¨gv
){

916 
Mem
 *
pArg
 = (Mem *)
¨gv
[0];

917 
Mem
 *
pBe°
;

919 if–
	`sqlôe3_vÆue_ty≥
(
¨gv
[0])==
SQLITE_NULL
 ) ;

920 
pBe°
 = (
Mem
 *)
	`sqlôe3_aggªg©e_c⁄ãxt
(
c⁄ãxt
, (*pBest));

921 if–!
pBe°
 ) ;

923 if–
pBe°
->
Êags
 ){

924 
max
;

925 
cmp
;

926 
CﬁlSeq
 *
pCﬁl
 = 
	`sqlôe3GëFuncCﬁlSeq
(
c⁄ãxt
);

935 
max
 = ((
	`sqlôe3_u£r_d©a
(
c⁄ãxt
)==(*)-1)?1:0);

936 
cmp
 = 
	`sqlôe3MemCom∑ª
(
pBe°
, 
pArg
, 
pCﬁl
);

937 if–(
max
 && 
cmp
<0) || (!max && cmp>0) ){

938 
	`sqlôe3VdbeMemC›y
(
pBe°
, 
pArg
);

941 
	`sqlôe3VdbeMemC›y
(
pBe°
, 
pArg
);

943 
	}
}

944 
	$möMaxFöÆize
(
sqlôe3_c⁄ãxt
 *
c⁄ãxt
){

945 
sqlôe3_vÆue
 *
pRes
;

946 
pRes
 = (
sqlôe3_vÆue
 *)
	`sqlôe3_aggªg©e_c⁄ãxt
(
c⁄ãxt
, 0);

947 if–
pRes
 ){

948 if–
pRes
->
Êags
 ){

949 
	`sqlôe3_ªsu…_vÆue
(
c⁄ãxt
, 
pRes
);

951 
	`sqlôe3VdbeMemRñó£
(
pRes
);

953 
	}
}

961 
	$sqlôe3Regi°îBuûtöFun˘i⁄s
(
sqlôe3
 *
db
){

963 *
zName
;

964 sig√d 
nArg
;

965 
u8
 
¨gTy≥
;

966 
u8
 
eTextRï
;

967 
u8
 
√edCﬁlSeq
;

968 (*
xFunc
)(
sqlôe3_c⁄ãxt
*,,
sqlôe3_vÆue
 **);

969 } 
aFuncs
[] = {

970 { "mö", -1, 0, 
SQLITE_UTF8
, 1, 
mömaxFunc
 },

971 { "mö", 0, 0, 
SQLITE_UTF8
, 1, 0 },

972 { "max", -1, 2, 
SQLITE_UTF8
, 1, 
mömaxFunc
 },

973 { "max", 0, 2, 
SQLITE_UTF8
, 1, 0 },

974 { "ty≥of", 1, 0, 
SQLITE_UTF8
, 0, 
ty≥ofFunc
 },

975 { "Àngth", 1, 0, 
SQLITE_UTF8
, 0, 
ÀngthFunc
 },

976 { "sub°r", 3, 0, 
SQLITE_UTF8
, 0, 
sub°rFunc
 },

977 #i‚de‡
SQLITE_OMIT_UTF16


978 { "sub°r", 3, 0, 
SQLITE_UTF16LE
, 0, 
sqlôe3utf16Sub°r
 },

980 { "abs", 1, 0, 
SQLITE_UTF8
, 0, 
absFunc
 },

981 { "round", 1, 0, 
SQLITE_UTF8
, 0, 
roundFunc
 },

982 { "round", 2, 0, 
SQLITE_UTF8
, 0, 
roundFunc
 },

983 { "uµî", 1, 0, 
SQLITE_UTF8
, 0, 
uµîFunc
 },

984 { "lowî", 1, 0, 
SQLITE_UTF8
, 0, 
lowîFunc
 },

985 { "cﬂÀs˚", -1, 0, 
SQLITE_UTF8
, 0, 
i‚uŒFunc
 },

986 { "cﬂÀs˚", 0, 0, 
SQLITE_UTF8
, 0, 0 },

987 { "cﬂÀs˚", 1, 0, 
SQLITE_UTF8
, 0, 0 },

988 { "i‚uŒ", 2, 0, 
SQLITE_UTF8
, 1, 
i‚uŒFunc
 },

989 { "øndom", -1, 0, 
SQLITE_UTF8
, 0, 
øndomFunc
 },

990 { "nuŒif", 2, 0, 
SQLITE_UTF8
, 1, 
nuŒifFunc
 },

991 { "sqlôe_vîsi⁄", 0, 0, 
SQLITE_UTF8
, 0, 
vîsi⁄Func
},

992 { "quŸe", 1, 0, 
SQLITE_UTF8
, 0, 
quŸeFunc
 },

993 { "œ°_ö£π_rowid", 0, 1, 
SQLITE_UTF8
, 0, 
œ°_ö£π_rowid
 },

994 { "ch™ges", 0, 1, 
SQLITE_UTF8
, 0, 
ch™ges
 },

995 { "tŸÆ_ch™ges", 0, 1, 
SQLITE_UTF8
, 0, 
tŸÆ_ch™ges
 },

996 #ifde‡
SQLITE_SOUNDEX


997 { "soundex", 1, 0, 
SQLITE_UTF8
, 0, 
soundexFunc
},

999 #ifde‡
SQLITE_TEST


1000 { "ønd°r", 2, 0, 
SQLITE_UTF8
, 0, 
øndSå
 },

1001 { "ã°_de°ru˘‹", 1, 1, 
SQLITE_UTF8
, 0, 
ã°_de°ru˘‹
},

1002 { "ã°_de°ru˘‹_cou¡", 0, 0, 
SQLITE_UTF8
, 0, 
ã°_de°ru˘‹_cou¡
},

1003 { "ã°_auxd©a", -1, 0, 
SQLITE_UTF8
, 0, 
ã°_auxd©a
},

1004 { "ã°_îr‹", 1, 0, 
SQLITE_UTF8
, 0, 
ã°_îr‹
},

1008 *
zName
;

1009 sig√d 
nArg
;

1010 
u8
 
¨gTy≥
;

1011 
u8
 
√edCﬁlSeq
;

1012 (*
xSãp
)(
sqlôe3_c⁄ãxt
*,,
sqlôe3_vÆue
**);

1013 (*
xFöÆize
)(
sqlôe3_c⁄ãxt
*);

1014 } 
aAggs
[] = {

1015 { "mö", 1, 0, 1, 
mömaxSãp
, 
möMaxFöÆize
 },

1016 { "max", 1, 2, 1, 
mömaxSãp
, 
möMaxFöÆize
 },

1017 { "sum", 1, 0, 0, 
sumSãp
, 
sumFöÆize
 },

1018 { "tŸÆ", 1, 0, 0, 
sumSãp
, 
tŸÆFöÆize
 },

1019 { "avg", 1, 0, 0, 
sumSãp
, 
avgFöÆize
 },

1020 { "cou¡", 0, 0, 0, 
cou¡Sãp
, 
cou¡FöÆize
 },

1021 { "cou¡", 1, 0, 0, 
cou¡Sãp
, 
cou¡FöÆize
 },

1023 
i
;

1025 
i
=0; i<(
aFuncs
)/(aFuncs[0]); i++){

1026 *
pArg
 = 0;

1027  
aFuncs
[
i
].
¨gTy≥
 ){

1028 1: 
pArg
 = 
db
; ;

1029 2: 
pArg
 = (*)(-1); ;

1031 
	`sqlôe3Cª©eFunc
(
db
, 
aFuncs
[
i
].
zName
,áFuncs[i].
nArg
,

1032 
aFuncs
[
i
].
eTextRï
, 
pArg
,áFuncs[i].
xFunc
, 0, 0);

1033 if–
aFuncs
[
i
].
√edCﬁlSeq
 ){

1034 
FuncDef
 *
pFunc
 = 
	`sqlôe3FödFun˘i⁄
(
db
, 
aFuncs
[
i
].
zName
,

1035 
	`°æí
(
aFuncs
[
i
].
zName
),áFuncs[i].
nArg
,áFuncs[i].
eTextRï
, 0);

1036 if–
pFunc
 && 
aFuncs
[
i
].
√edCﬁlSeq
 ){

1037 
pFunc
->
√edCﬁlSeq
 = 1;

1041 #i‚de‡
SQLITE_OMIT_ALTERTABLE


1042 
	`sqlôe3A…îFun˘i⁄s
(
db
);

1044 #i‚de‡
SQLITE_OMIT_PARSER


1045 
	`sqlôe3AâachFun˘i⁄s
(
db
);

1047 
i
=0; i<(
aAggs
)/(aAggs[0]); i++){

1048 *
pArg
 = 0;

1049  
aAggs
[
i
].
¨gTy≥
 ){

1050 1: 
pArg
 = 
db
; ;

1051 2: 
pArg
 = (*)(-1); ;

1053 
	`sqlôe3Cª©eFunc
(
db
, 
aAggs
[
i
].
zName
,áAggs[i].
nArg
, 
SQLITE_UTF8
,

1054 
pArg
, 0, 
aAggs
[
i
].
xSãp
,áAggs[i].
xFöÆize
);

1055 if–
aAggs
[
i
].
√edCﬁlSeq
 ){

1056 
FuncDef
 *
pFunc
 = 
	`sqlôe3FödFun˘i⁄
–
db
, 
aAggs
[
i
].
zName
,

1057 
	`°æí
(
aAggs
[
i
].
zName
),áAggs[i].
nArg
, 
SQLITE_UTF8
, 0);

1058 if–
pFunc
 && 
aAggs
[
i
].
√edCﬁlSeq
 ){

1059 
pFunc
->
√edCﬁlSeq
 = 1;

1063 
	`sqlôe3Regi°îD©eTimeFun˘i⁄s
(
db
);

1064 #ifde‡
SQLITE_SSE


1065 
	`sqlôe3S£Fun˘i⁄s
(
db
);

1067 #ifde‡
SQLITE_CASE_SENSITIVE_LIKE


1068 
	`sqlôe3Regi°îLikeFun˘i⁄s
(
db
, 1);

1070 
	`sqlôe3Regi°îLikeFun˘i⁄s
(
db
, 0);

1072 
	}
}

1077 
	$£tLikeO±Fœg
(
sqlôe3
 *
db
, c⁄° *
zName
, 
ÊagVÆ
){

1078 
FuncDef
 *
pDef
;

1079 
pDef
 = 
	`sqlôe3FödFun˘i⁄
(
db
, 
zName
, 
	`°æí
(zName), 2, 
SQLITE_UTF8
, 0);

1080 if–
pDef
 ){

1081 
pDef
->
Êags
 = 
ÊagVÆ
;

1083 
	}
}

1090 
	$sqlôe3Regi°îLikeFun˘i⁄s
(
sqlôe3
 *
db
, 
ˇ£Sísôive
){

1091 
com∑ªInfo
 *
pInfo
;

1092 if–
ˇ£Sísôive
 ){

1093 
pInfo
 = (
com∑ªInfo
*)&
likeInfoA…
;

1095 
pInfo
 = (
com∑ªInfo
*)&
likeInfoN‹m
;

1097 
	`sqlôe3Cª©eFunc
(
db
, "like", 2, 
SQLITE_UTF8
, 
pInfo
, 
likeFunc
, 0, 0);

1098 
	`sqlôe3Cª©eFunc
(
db
, "like", 3, 
SQLITE_UTF8
, 
pInfo
, 
likeFunc
, 0, 0);

1099 
	`sqlôe3Cª©eFunc
(
db
, "glob", 2, 
SQLITE_UTF8
,

1100 (
com∑ªInfo
*)&
globInfo
, 
likeFunc
, 0,0);

1101 
	`£tLikeO±Fœg
(
db
, "glob", 
SQLITE_FUNC_LIKE
 | 
SQLITE_FUNC_CASE
);

1102 
	`£tLikeO±Fœg
(
db
, "like",

1103 
ˇ£Sísôive
 ? (
SQLITE_FUNC_LIKE
 | 
SQLITE_FUNC_CASE
) : SQLITE_FUNC_LIKE);

1104 
	}
}

1113 
	$sqlôe3IsLikeFun˘i⁄
(
sqlôe3
 *
db
, 
Ex¥
 *
pEx¥
, *
pIsNoˇ£
, *
aWc
){

1114 
FuncDef
 *
pDef
;

1115 if–
pEx¥
->
›
!=
TK_FUNCTION
 ){

1118 if–
pEx¥
->
pLi°
->
nEx¥
!=2 ){

1121 
pDef
 = 
	`sqlôe3FödFun˘i⁄
(
db
, (*)
pEx¥
->
tokí
.
z
,ÖEx¥->tokí.
n
, 2,

1122 
SQLITE_UTF8
, 0);

1123 if–
pDef
==0 || (pDef->
Êags
 & 
SQLITE_FUNC_LIKE
)==0 ){

1131 
	`mem˝y
(
aWc
, 
pDef
->
pU£rD©a
, 3);

1132 
	`as£π
–(*)&
likeInfoA…
 =(*)&likeInfoA….
m©chAŒ
 );

1133 
	`as£π
–&((*)&
likeInfoA…
)[1] =(*)&likeInfoA….
m©chO√
 );

1134 
	`as£π
–&((*)&
likeInfoA…
)[2] =(*)&likeInfoA….
m©chSë
 );

1135 *
pIsNoˇ£
 = (
pDef
->
Êags
 & 
SQLITE_FUNC_CASE
)==0;

1137 
	}
}

	@hash.c

17 
	~"sqlôeI¡.h
"

18 
	~<as£π.h
>

32 
	$sqlôe3HashInô
(
Hash
 *
pNew
, 
keyCœss
, 
c›yKey
){

33 
	`as£π
–
pNew
!=0 );

34 
	`as£π
–
keyCœss
>=
SQLITE_HASH_STRING
 && keyCœss<=
SQLITE_HASH_BINARY
 );

35 
pNew
->
keyCœss
 = keyClass;

37 if–
keyCœss
==
SQLITE_HASH_POINTER
 || keyCœss==
SQLITE_HASH_INT
 ) 
c›yKey
 = 0;

39 
pNew
->
c›yKey
 = copyKey;

40 
pNew
->
fú°
 = 0;

41 
pNew
->
cou¡
 = 0;

42 
pNew
->
htsize
 = 0;

43 
pNew
->
ht
 = 0;

44 
	}
}

50 
	$sqlôe3HashCÀ¨
(
Hash
 *
pH
){

51 
HashEÀm
 *
ñem
;

53 
	`as£π
–
pH
!=0 );

54 
ñem
 = 
pH
->
fú°
;

55 
pH
->
fú°
 = 0;

56 if–
pH
->
ht
 ) 
	`sqlôeFªe
(pH->ht);

57 
pH
->
ht
 = 0;

58 
pH
->
htsize
 = 0;

59  
ñem
 ){

60 
HashEÀm
 *
√xt_ñem
 = 
ñem
->
√xt
;

61 if–
pH
->
c›yKey
 && 
ñem
->
pKey
 ){

62 
	`sqlôeFªe
(
ñem
->
pKey
);

64 
	`sqlôeFªe
(
ñem
);

65 
ñem
 = 
√xt_ñem
;

67 
pH
->
cou¡
 = 0;

68 
	}
}

74 
	$ötHash
(c⁄° *
pKey
, 
nKey
){

75  
nKey
 ^ (nKey<<8) ^ (nKey>>8);

76 
	}
}

77 
	$ötCom∑ª
(c⁄° *
pKey1
, 
n1
, c⁄° *
pKey2
, 
n2
){

78  
n2
 - 
n1
;

79 
	}
}

86 
	$±rHash
(c⁄° *
pKey
, 
nKey
){

87 
u±r
 
x
 = 
	`Addr
(
pKey
);

88  
x
 ^ (x<<8) ^ (x>>8);

89 
	}
}

90 
	$±rCom∑ª
(c⁄° *
pKey1
, 
n1
, c⁄° *
pKey2
, 
n2
){

91 if–
pKey1
==
pKey2
 )  0;

92 if–
pKey1
<
pKey2
 )  -1;

94 
	}
}

100 
	$°rHash
(c⁄° *
pKey
, 
nKey
){

101 c⁄° *
z
 = (c⁄° *)
pKey
;

102 
h
 = 0;

103 if–
nKey
<=0 )ÇKey = 
	`°æí
(
z
);

104  
nKey
 > 0 ){

105 
h
 = (h<<3Ë^ h ^ 
sqlôe3UµîToLowî
[()*
z
++];

106 
nKey
--;

108  
h
 & 0x7fffffff;

109 
	}
}

110 
	$°rCom∑ª
(c⁄° *
pKey1
, 
n1
, c⁄° *
pKey2
, 
n2
){

111 if–
n1
!=
n2
 )  1;

112  
	`sqlôe3SåNICmp
((c⁄° *)
pKey1
,(c⁄° *)
pKey2
,
n1
);

113 
	}
}

118 
	$böHash
(c⁄° *
pKey
, 
nKey
){

119 
h
 = 0;

120 c⁄° *
z
 = (c⁄° *)
pKey
;

121  
nKey
-- > 0 ){

122 
h
 = (h<<3Ë^ h ^ *(
z
++);

124  
h
 & 0x7fffffff;

125 
	}
}

126 
	$böCom∑ª
(c⁄° *
pKey1
, 
n1
, c⁄° *
pKey2
, 
n2
){

127 if–
n1
!=
n2
 )  1;

128  
	`memcmp
(
pKey1
,
pKey2
,
n1
);

129 
	}
}

143 (*
	$hashFun˘i⁄
(
keyCœss
))(const *,){

145  
keyCœss
 ){

146 
SQLITE_HASH_INT
:  &
ötHash
;

147 
SQLITE_HASH_POINTER
:  &
±rHash
;

148 
SQLITE_HASH_STRING
:  &
°rHash
;

149 
SQLITE_HASH_BINARY
:  &
böHash
;;

154 if–
keyCœss
==
SQLITE_HASH_STRING
 ){

155  &
°rHash
;

157 
	`as£π
–
keyCœss
==
SQLITE_HASH_BINARY
 );

158  &
böHash
;

161 
	}
}

169 (*
	$com∑ªFun˘i⁄
(
keyCœss
))(const *,,const *,){

171  
keyCœss
 ){

172 
SQLITE_HASH_INT
:  &
ötCom∑ª
;

173 
SQLITE_HASH_POINTER
:  &
±rCom∑ª
;

174 
SQLITE_HASH_STRING
:  &
°rCom∑ª
;

175 
SQLITE_HASH_BINARY
:  &
böCom∑ª
;

180 if–
keyCœss
==
SQLITE_HASH_STRING
 ){

181  &
°rCom∑ª
;

183 
	`as£π
–
keyCœss
==
SQLITE_HASH_BINARY
 );

184  &
böCom∑ª
;

187 
	}
}

191 
	$ö£πEÀmít
(

192 
Hash
 *
pH
,

193 
_ht
 *
pE¡ry
,

194 
HashEÀm
 *
pNew


196 
HashEÀm
 *
pHód
;

197 
pHód
 = 
pE¡ry
->
chaö
;

198 if–
pHód
 ){

199 
pNew
->
√xt
 = 
pHód
;

200 
pNew
->
¥ev
 = 
pHód
->prev;

201 if–
pHód
->
¥ev
 ){ÖHód->¥ev->
√xt
 = 
pNew
; }

202 { 
pH
->
fú°
 = 
pNew
; }

203 
pHód
->
¥ev
 = 
pNew
;

205 
pNew
->
√xt
 = 
pH
->
fú°
;

206 if–
pH
->
fú°
 ){ÖH->fú°->
¥ev
 = 
pNew
; }

207 
pNew
->
¥ev
 = 0;

208 
pH
->
fú°
 = 
pNew
;

210 
pE¡ry
->
cou¡
++;

211 
pE¡ry
->
chaö
 = 
pNew
;

212 
	}
}

219 
	$ªhash
(
Hash
 *
pH
, 
√w_size
){

220 
_ht
 *
√w_ht
;

221 
HashEÀm
 *
ñem
, *
√xt_ñem
;

222 (*
xHash
)(const *,);

224 
	`as£π
–(
√w_size
 & (new_size-1))==0 );

225 
√w_ht
 = (
_ht
 *)
	`sqlôeMÆloc
–
√w_size
*(_ht) );

226 if–
√w_ht
==0 ) ;

227 if–
pH
->
ht
 ) 
	`sqlôeFªe
(pH->ht);

228 
pH
->
ht
 = 
√w_ht
;

229 
pH
->
htsize
 = 
√w_size
;

230 
xHash
 = 
	`hashFun˘i⁄
(
pH
->
keyCœss
);

231 
ñem
=
pH
->
fú°
,ÖH->fú°=0;ÉÀm;ÉÀm = 
√xt_ñem
){

232 
h
 = (*
xHash
)(
ñem
->
pKey
,ÉÀm->
nKey
Ë& (
√w_size
-1);

233 
√xt_ñem
 = 
ñem
->
√xt
;

234 
	`ö£πEÀmít
(
pH
, &
√w_ht
[
h
], 
ñem
);

236 
	}
}

242 
HashEÀm
 *
	$födEÀmítGivíHash
(

243 c⁄° 
Hash
 *
pH
,

244 c⁄° *
pKey
,

245 
nKey
,

246 
h


248 
HashEÀm
 *
ñem
;

249 
cou¡
;

250 (*
xCom∑ª
)(const *,,const *,);

252 if–
pH
->
ht
 ){

253 
_ht
 *
pE¡ry
 = &
pH
->
ht
[
h
];

254 
ñem
 = 
pE¡ry
->
chaö
;

255 
cou¡
 = 
pE¡ry
->count;

256 
xCom∑ª
 = 
	`com∑ªFun˘i⁄
(
pH
->
keyCœss
);

257  
cou¡
-- && 
ñem
 ){

258 if–(*
xCom∑ª
)(
ñem
->
pKey
,ñem->
nKey
,pKey,nKey)==0 ){

259  
ñem
;

261 
ñem
 =ÉÀm->
√xt
;

265 
	}
}

270 
	$ªmoveEÀmítGivíHash
(

271 
Hash
 *
pH
,

272 
HashEÀm
* 
ñem
,

273 
h


275 
_ht
 *
pE¡ry
;

276 if–
ñem
->
¥ev
 ){

277 
ñem
->
¥ev
->
√xt
 =Élem->next;

279 
pH
->
fú°
 = 
ñem
->
√xt
;

281 if–
ñem
->
√xt
 ){

282 
ñem
->
√xt
->
¥ev
 =Élem->prev;

284 
pE¡ry
 = &
pH
->
ht
[
h
];

285 if–
pE¡ry
->
chaö
==
ñem
 ){

286 
pE¡ry
->
chaö
 = 
ñem
->
√xt
;

288 
pE¡ry
->
cou¡
--;

289 if–
pE¡ry
->
cou¡
<=0 ){

290 
pE¡ry
->
chaö
 = 0;

292 if–
pH
->
c›yKey
 && 
ñem
->
pKey
 ){

293 
	`sqlôeFªe
(
ñem
->
pKey
);

295 
	`sqlôeFªe
–
ñem
 );

296 
pH
->
cou¡
--;

297 if–
pH
->
cou¡
<=0 ){

298 
	`as£π
–
pH
->
fú°
==0 );

299 
	`as£π
–
pH
->
cou¡
==0 );

300 
	`sqlôe3HashCÀ¨
(
pH
);

302 
	}
}

308 *
	$sqlôe3HashFöd
(c⁄° 
Hash
 *
pH
, c⁄° *
pKey
, 
nKey
){

309 
h
;

310 
HashEÀm
 *
ñem
;

311 (*
xHash
)(const *,);

313 if–
pH
==0 ||ÖH->
ht
==0 )  0;

314 
xHash
 = 
	`hashFun˘i⁄
(
pH
->
keyCœss
);

315 
	`as£π
–
xHash
!=0 );

316 
h
 = (*
xHash
)(
pKey
,
nKey
);

317 
	`as£π
–(
pH
->
htsize
 & (pH->htsize-1))==0 );

318 
ñem
 = 
	`födEÀmítGivíHash
(
pH
,
pKey
,
nKey
, 
h
 & (pH->
htsize
-1));

319  
ñem
 ?ÉÀm->
d©a
 : 0;

320 
	}
}

337 *
	$sqlôe3HashIn£π
(
Hash
 *
pH
, c⁄° *
pKey
, 
nKey
, *
d©a
){

338 
høw
;

339 
h
;

340 
HashEÀm
 *
ñem
;

341 
HashEÀm
 *
√w_ñem
;

342 (*
xHash
)(const *,);

344 
	`as£π
–
pH
!=0 );

345 
xHash
 = 
	`hashFun˘i⁄
(
pH
->
keyCœss
);

346 
	`as£π
–
xHash
!=0 );

347 
høw
 = (*
xHash
)(
pKey
, 
nKey
);

348 
	`as£π
–(
pH
->
htsize
 & (pH->htsize-1))==0 );

349 
h
 = 
høw
 & (
pH
->
htsize
-1);

350 
ñem
 = 
	`födEÀmítGivíHash
(
pH
,
pKey
,
nKey
,
h
);

351 if–
ñem
 ){

352 *
ﬁd_d©a
 = 
ñem
->
d©a
;

353 if–
d©a
==0 ){

354 
	`ªmoveEÀmítGivíHash
(
pH
,
ñem
,
h
);

356 
ñem
->
d©a
 = data;

358  
ﬁd_d©a
;

360 if–
d©a
==0 )  0;

361 
√w_ñem
 = (
HashEÀm
*)
	`sqlôeMÆloc
( (HashElem) );

362 if–
√w_ñem
==0 )  
d©a
;

363 if–
pH
->
c›yKey
 && 
pKey
!=0 ){

364 
√w_ñem
->
pKey
 = 
	`sqlôeMÆlocRaw
–
nKey
 );

365 if–
√w_ñem
->
pKey
==0 ){

366 
	`sqlôeFªe
(
√w_ñem
);

367  
d©a
;

369 
	`mem˝y
((*)
√w_ñem
->
pKey
,ÖKey, 
nKey
);

371 
√w_ñem
->
pKey
 = (*)pKey;

373 
√w_ñem
->
nKey
 =ÇKey;

374 
pH
->
cou¡
++;

375 if–
pH
->
htsize
==0 ){

376 
	`ªhash
(
pH
,8);

377 if–
pH
->
htsize
==0 ){

378 
pH
->
cou¡
 = 0;

379 
	`sqlôeFªe
(
√w_ñem
);

380  
d©a
;

383 if–
pH
->
cou¡
 >ÖH->
htsize
 ){

384 
	`ªhash
(
pH
,pH->
htsize
*2);

386 
	`as£π
–
pH
->
htsize
>0 );

387 
	`as£π
–(
pH
->
htsize
 & (pH->htsize-1))==0 );

388 
h
 = 
høw
 & (
pH
->
htsize
-1);

389 
	`ö£πEÀmít
(
pH
, &pH->
ht
[
h
], 
√w_ñem
);

390 
√w_ñem
->
d©a
 = data;

392 
	}
}

	@hash.h

17 #i‚de‡
_SQLITE_HASH_H_


18 
	#_SQLITE_HASH_H_


	)

21 
Hash
 
	tHash
;

22 
HashEÀm
 
	tHashEÀm
;

32 
	sHash
 {

33 
	mkeyCœss
;

34 
	mc›yKey
;

35 
	mcou¡
;

36 
HashEÀm
 *
	mfú°
;

37 
	mhtsize
;

38 
	s_ht
 {

39 
	mcou¡
;

40 
HashEÀm
 *
	mchaö
;

41 } *
	mht
;

50 
	sHashEÀm
 {

51 
HashEÀm
 *
	m√xt
, *
	m¥ev
;

52 *
	md©a
;

53 *
	mpKey
; 
	mnKey
;

75 
	#SQLITE_HASH_STRING
 3

	)

76 
	#SQLITE_HASH_BINARY
 4

	)

81 
sqlôe3HashInô
(
Hash
*, 
keyty≥
, 
c›yKey
);

82 *
sqlôe3HashIn£π
(
Hash
*, c⁄° *
pKey
, 
nKey
, *
pD©a
);

83 *
sqlôe3HashFöd
(c⁄° 
Hash
*, c⁄° *
pKey
, 
nKey
);

84 
sqlôe3HashCÀ¨
(
Hash
*);

98 
	#sqlôeHashFú°
(
H
Ë((H)->
fú°
)

	)

99 
	#sqlôeHashNext
(
E
Ë((E)->
√xt
)

	)

100 
	#sqlôeHashD©a
(
E
Ë((E)->
d©a
)

	)

101 
	#sqlôeHashKey
(
E
Ë((E)->
pKey
)

	)

102 
	#sqlôeHashKeysize
(
E
Ë((E)->
nKey
)

	)

107 
	#sqlôeHashCou¡
(
H
Ë((H)->
cou¡
)

	)

	@insert.c

17 
	~"sqlôeI¡.h
"

32 
	$sqlôe3IndexAfföôySå
(
Vdbe
 *
v
, 
Index
 *
pIdx
){

33 if–!
pIdx
->
zCﬁAff
 ){

42 
n
;

43 
TabÀ
 *
pTab
 = 
pIdx
->
pTabÀ
;

44 
pIdx
->
zCﬁAff
 = (*)
	`sqlôeMÆloc
’Idx->
nCﬁumn
+1);

45 if–!
pIdx
->
zCﬁAff
 ){

48 
n
=0;Ç<
pIdx
->
nCﬁumn
;Ç++){

49 
pIdx
->
zCﬁAff
[
n
] = 
pTab
->
aCﬁ
[pIdx->
aiCﬁumn
[n]].
afföôy
;

51 
pIdx
->
zCﬁAff
[pIdx->
nCﬁumn
] = '\0';

54 
	`sqlôe3VdbeCh™geP3
(
v
, -1, 
pIdx
->
zCﬁAff
, 0);

55 
	}
}

71 
	$sqlôe3TabÀAfföôySå
(
Vdbe
 *
v
, 
TabÀ
 *
pTab
){

79 if–!
pTab
->
zCﬁAff
 ){

80 *
zCﬁAff
;

81 
i
;

83 
zCﬁAff
 = (*)
	`sqlôeMÆloc
(
pTab
->
nCﬁ
+1);

84 if–!
zCﬁAff
 ){

88 
i
=0; i<
pTab
->
nCﬁ
; i++){

89 
zCﬁAff
[
i
] = 
pTab
->
aCﬁ
[i].
afföôy
;

91 
zCﬁAff
[
pTab
->
nCﬁ
] = '\0';

93 
pTab
->
zCﬁAff
 = zColAff;

96 
	`sqlôe3VdbeCh™geP3
(
v
, -1, 
pTab
->
zCﬁAff
, 0);

97 
	}
}

107 
	$£À˘RódsTabÀ
(
Sñe˘
 *
p
, 
Schema
 *
pSchema
, 
iTab
){

108 
i
;

109 
SrcLi°_ôem
 *
pIãm
;

110 if–
p
->
pSrc
==0 )  0;

111 
i
=0, 
pIãm
=
p
->
pSrc
->
a
; i<p->pSrc->
nSrc
; i++,ÖItem++){

112 if–
pIãm
->
pSñe˘
 ){

113 if–
	`£À˘RódsTabÀ
(
pIãm
->
pSñe˘
, 
pSchema
, 
iTab
) )  1;

115 if–
pIãm
->
pTab
->
pSchema
=ıSchem®&&ÖIãm->pTab->
äum
==
iTab
 )  1;

119 
	}
}

188 
	$sqlôe3In£π
(

189 
P¨£
 *
pP¨£
,

190 
SrcLi°
 *
pTabLi°
,

191 
Ex¥Li°
 *
pLi°
,

192 
Sñe˘
 *
pSñe˘
,

193 
IdLi°
 *
pCﬁumn
,

194 
⁄Eº‹


196 
TabÀ
 *
pTab
;

197 *
zTab
;

198 c⁄° *
zDb
;

199 
i
, 
j
, 
idx
;

200 
Vdbe
 *
v
;

201 
Index
 *
pIdx
;

202 
nCﬁumn
;

203 
ba£
 = 0;

204 
iC⁄t
=0,
iBªak
=0;

205 
sqlôe3
 *
db
;

206 
keyCﬁumn
 = -1;

207 
ídOfLo›
;

208 
u£TempTabÀ
 = 0;

209 
§cTab
 = 0;

210 
iSñe˘Lo›
 = 0;

211 
iCÀ™up
 = 0;

212 
iIn£πBlock
 = 0;

213 
iC¡Mem
 = 0;

214 
√wIdx
 = -1;

215 
Db
 *
pDb
;

216 
cou¡îMem
 = 0;

217 
iDb
;

219 #i‚de‡
SQLITE_OMIT_TRIGGER


220 
isVõw
;

221 
åiggîs_exi°
 = 0;

224 #i‚de‡
SQLITE_OMIT_AUTOINCREMENT


225 
cou¡îRowid
 = 0;

228 if–
pP¨£
->
nEº
 || 
	`sqlôe3MÆlocFaûed
() ){

229 
ö£π_˛ónup
;

231 
db
 = 
pP¨£
->db;

235 
	`as£π
–
pTabLi°
->
nSrc
==1 );

236 
zTab
 = 
pTabLi°
->
a
[0].
zName
;

237 if–
zTab
==0 ) 
ö£π_˛ónup
;

238 
pTab
 = 
	`sqlôe3SrcLi°Lookup
(
pP¨£
, 
pTabLi°
);

239 if–
pTab
==0 ){

240 
ö£π_˛ónup
;

242 
iDb
 = 
	`sqlôe3SchemaToIndex
(
db
, 
pTab
->
pSchema
);

243 
	`as£π
–
iDb
<
db
->
nDb
 );

244 
pDb
 = &
db
->
aDb
[
iDb
];

245 
zDb
 = 
pDb
->
zName
;

246 if–
	`sqlôe3AuthCheck
(
pP¨£
, 
SQLITE_INSERT
, 
pTab
->
zName
, 0, 
zDb
) ){

247 
ö£π_˛ónup
;

253 #i‚de‡
SQLITE_OMIT_TRIGGER


254 
åiggîs_exi°
 = 
	`sqlôe3TriggîsExi°
(
pP¨£
, 
pTab
, 
TK_INSERT
, 0);

255 
isVõw
 = 
pTab
->
pSñe˘
!=0;

257 
	#åiggîs_exi°
 0

	)

258 
	#isVõw
 0

	)

260 #ifde‡
SQLITE_OMIT_VIEW


261 #unde‡
isVõw


262 
	#isVõw
 0

	)

269 if–
	`sqlôe3IsRódO∆y
(
pP¨£
, 
pTab
, 
åiggîs_exi°
) ){

270 
ö£π_˛ónup
;

272 if–
pTab
==0 ) 
ö£π_˛ónup
;

276 if–
isVõw
 && 
	`sqlôe3VõwGëCﬁumnNames
(
pP¨£
, 
pTab
) ){

277 
ö£π_˛ónup
;

282 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

283 if–
v
==0 ) 
ö£π_˛ónup
;

284 if–
pP¨£
->
√°ed
==0 ) 
	`sqlôe3VdbeCou¡Ch™ges
(
v
);

285 
	`sqlôe3BegöWrôeO≥øti⁄
(
pP¨£
, 
pSñe˘
 || 
åiggîs_exi°
, 
iDb
);

288 if–
åiggîs_exi°
 ){

289 
√wIdx
 = 
pP¨£
->
nTab
++;

292 #i‚de‡
SQLITE_OMIT_AUTOINCREMENT


298 if–
pTab
->
autoInc
 ){

299 
iCur
 = 
pP¨£
->
nTab
;

300 
addr
 = 
	`sqlôe3VdbeCuºítAddr
(
v
);

301 
cou¡îRowid
 = 
pP¨£
->
nMem
++;

302 
cou¡îMem
 = 
pP¨£
->
nMem
++;

303 
	`sqlôe3O≥nTabÀ
(
pP¨£
, 
iCur
, 
iDb
, 
pDb
->
pSchema
->
pSeqTab
, 
OP_O≥nRód
);

304 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Rewöd
, 
iCur
, 
addr
+13);

305 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Cﬁumn
, 
iCur
, 0);

306 
	`sqlôe3VdbeOp3
(
v
, 
OP_Såög8
, 0, 0, 
pTab
->
zName
, 0);

307 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Ne
, 0x100, 
addr
+12);

308 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Rowid
, 
iCur
, 0);

309 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemSt‹e
, 
cou¡îRowid
, 1);

310 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Cﬁumn
, 
iCur
, 1);

311 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemSt‹e
, 
cou¡îMem
, 1);

312 
	`sqlôe3VdbeAddOp
(
v
, 
OP_GŸo
, 0, 
addr
+13);

313 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Next
, 
iCur
, 
addr
+4);

314 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Clo£
, 
iCur
, 0);

326 if–
pSñe˘
 ){

329 
rc
, 
iInôCode
;

330 
iInôCode
 = 
	`sqlôe3VdbeAddOp
(
v
, 
OP_GŸo
, 0, 0);

331 
iSñe˘Lo›
 = 
	`sqlôe3VdbeCuºítAddr
(
v
);

332 
iIn£πBlock
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

335 
rc
 = 
	`sqlôe3Sñe˘
(
pP¨£
, 
pSñe˘
, 
SRT_Subroutöe
, 
iIn£πBlock
,0,0,0,0);

336 if–
rc
 || 
pP¨£
->
nEº
 || 
	`sqlôe3MÆlocFaûed
() ){

337 
ö£π_˛ónup
;

340 
iCÀ™up
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

341 
	`sqlôe3VdbeAddOp
(
v
, 
OP_GŸo
, 0, 
iCÀ™up
);

342 
	`as£π
–
pSñe˘
->
pELi°
 );

343 
nCﬁumn
 = 
pSñe˘
->
pELi°
->
nEx¥
;

353 if–
åiggîs_exi°
 || 
	`£À˘RódsTabÀ
(
pSñe˘
,
pTab
->
pSchema
,pTab->
äum
) ){

354 
u£TempTabÀ
 = 1;

357 if–
u£TempTabÀ
 ){

361 
§cTab
 = 
pP¨£
->
nTab
++;

362 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
iIn£πBlock
);

363 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MakeRec‹d
, 
nCﬁumn
, 0);

364 
	`sqlôe3VdbeAddOp
(
v
, 
OP_NewRowid
, 
§cTab
, 0);

365 
	`sqlôe3VdbeAddOp
(
v
, 
OP_PuŒ
, 1, 0);

366 
	`sqlôe3VdbeAddOp
(
v
, 
OP_In£π
, 
§cTab
, 0);

367 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Rëu∫
, 0, 0);

373 
	`sqlôe3VdbeJumpHîe
(
v
, 
iInôCode
);

374 
	`sqlôe3VdbeAddOp
(
v
, 
OP_O≥nVútuÆ
, 
§cTab
, 0);

375 
	`sqlôe3VdbeAddOp
(
v
, 
OP_SëNumCﬁumns
, 
§cTab
, 
nCﬁumn
);

376 
	`sqlôe3VdbeAddOp
(
v
, 
OP_GŸo
, 0, 
iSñe˘Lo›
);

377 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
iCÀ™up
);

379 
	`sqlôe3VdbeJumpHîe
(
v
, 
iInôCode
);

385 
NameC⁄ãxt
 
sNC
;

386 
	`mem£t
(&
sNC
, 0, (sNC));

387 
sNC
.
pP¨£
 =ÖParse;

388 
	`as£π
–
pLi°
!=0 );

389 
§cTab
 = -1;

390 
u£TempTabÀ
 = 0;

391 
	`as£π
–
pLi°
 );

392 
nCﬁumn
 = 
pLi°
->
nEx¥
;

393 
i
=0; i<
nCﬁumn
; i++){

394 if–
	`sqlôe3Ex¥ResﬁveNames
(&
sNC
, 
pLi°
->
a
[
i
].
pEx¥
) ){

395 
ö£π_˛ónup
;

403 if–
pCﬁumn
==0 && 
nCﬁumn
!=
pTab
->
nCﬁ
 ){

404 
	`sqlôe3Eº‹Msg
(
pP¨£
,

406 
pTabLi°
, 0, 
pTab
->
nCﬁ
, 
nCﬁumn
);

407 
ö£π_˛ónup
;

409 if–
pCﬁumn
!=0 && 
nCﬁumn
!ıCﬁumn->
nId
 ){

410 
	`sqlôe3Eº‹Msg
(
pP¨£
, "%d vÆue†f‹ %d cﬁumns", 
nCﬁumn
, 
pCﬁumn
->
nId
);

411 
ö£π_˛ónup
;

425 if–
pCﬁumn
 ){

426 
i
=0; i<
pCﬁumn
->
nId
; i++){

427 
pCﬁumn
->
a
[
i
].
idx
 = -1;

429 
i
=0; i<
pCﬁumn
->
nId
; i++){

430 
j
=0; j<
pTab
->
nCﬁ
; j++){

431 if–
	`sqlôe3SåICmp
(
pCﬁumn
->
a
[
i
].
zName
, 
pTab
->
aCﬁ
[
j
].zName)==0 ){

432 
pCﬁumn
->
a
[
i
].
idx
 = 
j
;

433 if–
j
==
pTab
->
iPKey
 ){

434 
keyCﬁumn
 = 
i
;

439 if–
j
>=
pTab
->
nCﬁ
 ){

440 if–
	`sqlôe3IsRowid
(
pCﬁumn
->
a
[
i
].
zName
) ){

441 
keyCﬁumn
 = 
i
;

443 
	`sqlôe3Eº‹Msg
(
pP¨£
, "table %S hasÇo columnÇamed %s",

444 
pTabLi°
, 0, 
pCﬁumn
->
a
[
i
].
zName
);

445 
pP¨£
->
nEº
++;

446 
ö£π_˛ónup
;

456 if–
pCﬁumn
==0 ){

457 
keyCﬁumn
 = 
pTab
->
iPKey
;

462 if–
åiggîs_exi°
 ){

463 
	`sqlôe3VdbeAddOp
(
v
, 
OP_O≥nP£udo
, 
√wIdx
, 0);

464 
	`sqlôe3VdbeAddOp
(
v
, 
OP_SëNumCﬁumns
, 
√wIdx
, 
pTab
->
nCﬁ
);

469 if–
db
->
Êags
 & 
SQLITE_Cou¡Rows
 ){

470 
iC¡Mem
 = 
pP¨£
->
nMem
++;

471 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemI¡
, 0, 
iC¡Mem
);

475 if–!
åiggîs_exi°
 ){

476 
ba£
 = 
pP¨£
->
nTab
;

477 
	`sqlôe3O≥nTabÀAndIndi˚s
(
pP¨£
, 
pTab
, 
ba£
, 
OP_O≥nWrôe
);

485 if–
u£TempTabÀ
 ){

486 
iBªak
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

487 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Rewöd
, 
§cTab
, 
iBªak
);

488 
iC⁄t
 = 
	`sqlôe3VdbeCuºítAddr
(
v
);

489 }if–
pSñe˘
 ){

490 
	`sqlôe3VdbeAddOp
(
v
, 
OP_GŸo
, 0, 
iSñe˘Lo›
);

491 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
iIn£πBlock
);

496 
ídOfLo›
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

497 if–
åiggîs_exi°
 & 
TRIGGER_BEFORE
 ){

505 if–
keyCﬁumn
<0 ){

506 
	`sqlôe3VdbeAddOp
(
v
, 
OP_I¡egî
, -1, 0);

507 }if–
u£TempTabÀ
 ){

508 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Cﬁumn
, 
§cTab
, 
keyCﬁumn
);

510 
	`as£π
–
pSñe˘
==0 );

511 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pLi°
->
a
[
keyCﬁumn
].
pEx¥
);

512 
	`sqlôe3VdbeAddOp
(
v
, 
OP_NŸNuŒ
, -1, 
	`sqlôe3VdbeCuºítAddr
(v)+3);

513 
	`sqlôe3VdbeAddOp
(
v
, 
OP_P›
, 1, 0);

514 
	`sqlôe3VdbeAddOp
(
v
, 
OP_I¡egî
, -1, 0);

515 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Mu°BeI¡
, 0, 0);

520 
i
=0; i<
pTab
->
nCﬁ
; i++){

521 if–
pCﬁumn
==0 ){

522 
j
 = 
i
;

524 
j
=0; j<
pCﬁumn
->
nId
; j++){

525 if–
pCﬁumn
->
a
[
j
].
idx
==
i
 ) ;

528 if–
pCﬁumn
 && 
j
>ıCﬁumn->
nId
 ){

529 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pTab
->
aCﬁ
[
i
].
pDÊt
);

530 }if–
u£TempTabÀ
 ){

531 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Cﬁumn
, 
§cTab
, 
j
);

533 
	`as£π
–
pSñe˘
==0 );

534 
	`sqlôe3Ex¥CodeAndCache
(
pP¨£
, 
pLi°
->
a
[
j
].
pEx¥
);

537 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MakeRec‹d
, 
pTab
->
nCﬁ
, 0);

544 if–!
isVõw
 ){

545 
	`sqlôe3TabÀAfföôySå
(
v
, 
pTab
);

547 
	`sqlôe3VdbeAddOp
(
v
, 
OP_In£π
, 
√wIdx
, 0);

550 if–
	`sqlôe3CodeRowTriggî
(
pP¨£
, 
TK_INSERT
, 0, 
TRIGGER_BEFORE
, 
pTab
,

551 
√wIdx
, -1, 
⁄Eº‹
, 
ídOfLo›
) ){

552 
ö£π_˛ónup
;

559 if–
åiggîs_exi°
 && !
isVõw
 ){

560 
ba£
 = 
pP¨£
->
nTab
;

561 
	`sqlôe3O≥nTabÀAndIndi˚s
(
pP¨£
, 
pTab
, 
ba£
, 
OP_O≥nWrôe
);

569 if–!
isVõw
 ){

570 if–
keyCﬁumn
>=0 ){

571 if–
u£TempTabÀ
 ){

572 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Cﬁumn
, 
§cTab
, 
keyCﬁumn
);

573 }if–
pSñe˘
 ){

574 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Dup
, 
nCﬁumn
 - 
keyCﬁumn
 - 1, 1);

576 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pLi°
->
a
[
keyCﬁumn
].
pEx¥
);

581 
	`sqlôe3VdbeAddOp
(
v
, 
OP_NŸNuŒ
, -1, 
	`sqlôe3VdbeCuºítAddr
(v)+3);

582 
	`sqlôe3VdbeAddOp
(
v
, 
OP_P›
, 1, 0);

583 
	`sqlôe3VdbeAddOp
(
v
, 
OP_NewRowid
, 
ba£
, 
cou¡îMem
);

584 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Mu°BeI¡
, 0, 0);

586 
	`sqlôe3VdbeAddOp
(
v
, 
OP_NewRowid
, 
ba£
, 
cou¡îMem
);

588 #i‚de‡
SQLITE_OMIT_AUTOINCREMENT


589 if–
pTab
->
autoInc
 ){

590 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemMax
, 
cou¡îMem
, 0);

597 
i
=0; i<
pTab
->
nCﬁ
; i++){

598 if–
i
==
pTab
->
iPKey
 ){

603 
	`sqlôe3VdbeAddOp
(
v
, 
OP_NuŒ
, 0, 0);

606 if–
pCﬁumn
==0 ){

607 
j
 = 
i
;

609 
j
=0; j<
pCﬁumn
->
nId
; j++){

610 if–
pCﬁumn
->
a
[
j
].
idx
==
i
 ) ;

613 if–
pCﬁumn
 && 
j
>ıCﬁumn->
nId
 ){

614 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pTab
->
aCﬁ
[
i
].
pDÊt
);

615 }if–
u£TempTabÀ
 ){

616 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Cﬁumn
, 
§cTab
, 
j
);

617 }if–
pSñe˘
 ){

618 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Dup
, 
i
+
nCﬁumn
-
j
, 1);

620 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pLi°
->
a
[
j
].
pEx¥
);

627 
	`sqlôe3Gíî©eC⁄°øötChecks
(
pP¨£
, 
pTab
, 
ba£
, 0, 
keyCﬁumn
>=0,

628 0, 
⁄Eº‹
, 
ídOfLo›
);

629 
	`sqlôe3Com∂ëeIn£πi⁄
(
pP¨£
, 
pTab
, 
ba£
, 0,0,0,

630 (
åiggîs_exi°
 & 
TRIGGER_AFTER
)!=0 ? 
√wIdx
 : -1);

635 if–(
db
->
Êags
 & 
SQLITE_Cou¡Rows
)!=0 ){

636 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemIn¸
, 1, 
iC¡Mem
);

639 if–
åiggîs_exi°
 ){

641 if–!
isVõw
 ){

642 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Clo£
, 
ba£
, 0);

643 
idx
=1, 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
, idx++){

644 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Clo£
, 
idx
+
ba£
, 0);

649 if–
	`sqlôe3CodeRowTriggî
(
pP¨£
, 
TK_INSERT
, 0, 
TRIGGER_AFTER
, 
pTab
,

650 
√wIdx
, -1, 
⁄Eº‹
, 
ídOfLo›
) ){

651 
ö£π_˛ónup
;

657 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
ídOfLo›
);

658 if–
u£TempTabÀ
 ){

659 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Next
, 
§cTab
, 
iC⁄t
);

660 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
iBªak
);

661 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Clo£
, 
§cTab
, 0);

662 }if–
pSñe˘
 ){

663 
	`sqlôe3VdbeAddOp
(
v
, 
OP_P›
, 
nCﬁumn
, 0);

664 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Rëu∫
, 0, 0);

665 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
iCÀ™up
);

668 if–!
åiggîs_exi°
 ){

670 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Clo£
, 
ba£
, 0);

671 
idx
=1, 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
, idx++){

672 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Clo£
, 
idx
+
ba£
, 0);

676 #i‚de‡
SQLITE_OMIT_AUTOINCREMENT


681 if–
pTab
->
autoInc
 ){

682 
iCur
 = 
pP¨£
->
nTab
;

683 
addr
 = 
	`sqlôe3VdbeCuºítAddr
(
v
);

684 
	`sqlôe3O≥nTabÀ
(
pP¨£
, 
iCur
, 
iDb
, 
pDb
->
pSchema
->
pSeqTab
, 
OP_O≥nWrôe
);

685 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemLﬂd
, 
cou¡îRowid
, 0);

686 
	`sqlôe3VdbeAddOp
(
v
, 
OP_NŸNuŒ
, -1, 
addr
+7);

687 
	`sqlôe3VdbeAddOp
(
v
, 
OP_P›
, 1, 0);

688 
	`sqlôe3VdbeAddOp
(
v
, 
OP_NewRowid
, 
iCur
, 0);

689 
	`sqlôe3VdbeOp3
(
v
, 
OP_Såög8
, 0, 0, 
pTab
->
zName
, 0);

690 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemLﬂd
, 
cou¡îMem
, 0);

691 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MakeRec‹d
, 2, 0);

692 
	`sqlôe3VdbeAddOp
(
v
, 
OP_In£π
, 
iCur
, 0);

693 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Clo£
, 
iCur
, 0);

702 if–
db
->
Êags
 & 
SQLITE_Cou¡Rows
 && 
pP¨£
->
√°ed
==0 && !pP¨£->
åigSèck
 ){

703 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemLﬂd
, 
iC¡Mem
, 0);

704 
	`sqlôe3VdbeAddOp
(
v
, 
OP_CÆlback
, 1, 0);

705 
	`sqlôe3VdbeSëNumCﬁs
(
v
, 1);

706 
	`sqlôe3VdbeSëCﬁName
(
v
, 0, "row†ö£πed", 
P3_STATIC
);

709 
ö£π_˛ónup
:

710 
	`sqlôe3SrcLi°Dñëe
(
pTabLi°
);

711 
	`sqlôe3Ex¥Li°Dñëe
(
pLi°
);

712 
	`sqlôe3Sñe˘Dñëe
(
pSñe˘
);

713 
	`sqlôe3IdLi°Dñëe
(
pCﬁumn
);

714 
	}
}

795 
	$sqlôe3Gíî©eC⁄°øötChecks
(

796 
P¨£
 *
pP¨£
,

797 
TabÀ
 *
pTab
,

798 
ba£
,

799 *
aIdxU£d
,

800 
rowidChng
,

801 
isUpd©e
,

802 
ovîrideEº‹
,

803 
ign‹eDe°


805 
i
;

806 
Vdbe
 *
v
;

807 
nCﬁ
;

808 
⁄Eº‹
;

809 
addr
;

810 
exåa
;

811 
iCur
;

812 
Index
 *
pIdx
;

813 
£íRïœ˚
 = 0;

814 
jumpIn°1
=0, 
jumpIn°2
;

815 
hasTwoRowids
 = (
isUpd©e
 && 
rowidChng
);

817 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

818 
	`as£π
–
v
!=0 );

819 
	`as£π
–
pTab
->
pSñe˘
==0 );

820 
nCﬁ
 = 
pTab
->nCol;

824 
i
=0; i<
nCﬁ
; i++){

825 if–
i
==
pTab
->
iPKey
 ){

828 
⁄Eº‹
 = 
pTab
->
aCﬁ
[
i
].
nŸNuŒ
;

829 if–
⁄Eº‹
==
OE_N⁄e
 ) ;

830 if–
ovîrideEº‹
!=
OE_DeÁu…
 ){

831 
⁄Eº‹
 = 
ovîrideEº‹
;

832 }if–
⁄Eº‹
==
OE_DeÁu…
 ){

833 
⁄Eº‹
 = 
OE_Ab‹t
;

835 if–
⁄Eº‹
==
OE_Rïœ˚
 && 
pTab
->
aCﬁ
[
i
].
pDÊt
==0 ){

836 
⁄Eº‹
 = 
OE_Ab‹t
;

838 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Dup
, 
nCﬁ
-1-
i
, 1);

839 
addr
 = 
	`sqlôe3VdbeAddOp
(
v
, 
OP_NŸNuŒ
, 1, 0);

840 
	`as£π
–
⁄Eº‹
==
OE_Rﬁlback
 || onEº‹==
OE_Ab‹t
 || onEº‹==
OE_Faû


841 || 
⁄Eº‹
==
OE_Ign‹e
 || onEº‹==
OE_Rïœ˚
 );

842  
⁄Eº‹
 ){

843 
OE_Rﬁlback
:

844 
OE_Ab‹t
:

845 
OE_Faû
: {

846 *
zMsg
 = 0;

847 
	`sqlôe3VdbeAddOp
(
v
, 
OP_HÆt
, 
SQLITE_CONSTRAINT
, 
⁄Eº‹
);

848 
	`sqlôe3SëSåög
(&
zMsg
, 
pTab
->
zName
, ".",ÖTab->
aCﬁ
[
i
].zName,

850 
	`sqlôe3VdbeCh™geP3
(
v
, -1, 
zMsg
, 
P3_DYNAMIC
);

853 
OE_Ign‹e
: {

854 
	`sqlôe3VdbeAddOp
(
v
, 
OP_P›
, 
nCﬁ
+1+
hasTwoRowids
, 0);

855 
	`sqlôe3VdbeAddOp
(
v
, 
OP_GŸo
, 0, 
ign‹eDe°
);

858 
OE_Rïœ˚
: {

859 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pTab
->
aCﬁ
[
i
].
pDÊt
);

860 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Push
, 
nCﬁ
-
i
, 0);

864 
	`sqlôe3VdbeJumpHîe
(
v
, 
addr
);

869 #i‚de‡
SQLITE_OMIT_CHECK


870 if–
pTab
->
pCheck
 && (
pP¨£
->
db
->
Êags
 & 
SQLITE_Ign‹eChecks
)==0 ){

871 
ÆlOk
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

872 
	`as£π
–
pP¨£
->
ckOff£t
==0 );

873 
pP¨£
->
ckOff£t
 = 
nCﬁ
;

874 
	`sqlôe3Ex¥IfTrue
(
pP¨£
, 
pTab
->
pCheck
, 
ÆlOk
, 1);

875 
	`as£π
–
pP¨£
->
ckOff£t
==
nCﬁ
 );

876 
pP¨£
->
ckOff£t
 = 0;

877 
	`sqlôe3VdbeAddOp
(
v
, 
OP_HÆt
, 
SQLITE_CONSTRAINT
, 
OE_Ab‹t
);

878 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
ÆlOk
);

886 if–
rowidChng
 ){

887 
⁄Eº‹
 = 
pTab
->
keyC⁄f
;

888 if–
ovîrideEº‹
!=
OE_DeÁu…
 ){

889 
⁄Eº‹
 = 
ovîrideEº‹
;

890 }if–
⁄Eº‹
==
OE_DeÁu…
 ){

891 
⁄Eº‹
 = 
OE_Ab‹t
;

894 if–
isUpd©e
 ){

895 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Dup
, 
nCﬁ
+1, 1);

896 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Dup
, 
nCﬁ
+1, 1);

897 
jumpIn°1
 = 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Eq
, 0, 0);

899 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Dup
, 
nCﬁ
, 1);

900 
jumpIn°2
 = 
	`sqlôe3VdbeAddOp
(
v
, 
OP_NŸExi°s
, 
ba£
, 0);

901  
⁄Eº‹
 ){

903 
⁄Eº‹
 = 
OE_Ab‹t
;

906 
OE_Rﬁlback
:

907 
OE_Ab‹t
:

908 
OE_Faû
: {

909 
	`sqlôe3VdbeOp3
(
v
, 
OP_HÆt
, 
SQLITE_CONSTRAINT
, 
⁄Eº‹
,

910 "PRIMARY KEY mu° bêunique", 
P3_STATIC
);

913 
OE_Rïœ˚
: {

914 
	`sqlôe3Gíî©eRowIndexDñëe
(
pP¨£
->
db
, 
v
, 
pTab
, 
ba£
, 0);

915 if–
isUpd©e
 ){

916 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Dup
, 
nCﬁ
+
hasTwoRowids
, 1);

917 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MoveGe
, 
ba£
, 0);

919 
£íRïœ˚
 = 1;

922 
OE_Ign‹e
: {

923 
	`as£π
–
£íRïœ˚
==0 );

924 
	`sqlôe3VdbeAddOp
(
v
, 
OP_P›
, 
nCﬁ
+1+
hasTwoRowids
, 0);

925 
	`sqlôe3VdbeAddOp
(
v
, 
OP_GŸo
, 0, 
ign‹eDe°
);

929 
	`sqlôe3VdbeJumpHîe
(
v
, 
jumpIn°2
);

930 if–
isUpd©e
 ){

931 
	`sqlôe3VdbeJumpHîe
(
v
, 
jumpIn°1
);

932 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Dup
, 
nCﬁ
+1, 1);

933 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MoveGe
, 
ba£
, 0);

941 
exåa
 = -1;

942 
iCur
=0, 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
, iCur++){

943 if–
aIdxU£d
 &&áIdxU£d[
iCur
]==0 ) ;

944 
exåa
++;

947 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Dup
, 
nCﬁ
+
exåa
, 1);

948 
i
=0; i<
pIdx
->
nCﬁumn
; i++){

949 
idx
 = 
pIdx
->
aiCﬁumn
[
i
];

950 if–
idx
==
pTab
->
iPKey
 ){

951 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Dup
, 
i
+
exåa
+
nCﬁ
+1, 1);

953 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Dup
, 
i
+
exåa
+
nCﬁ
-
idx
, 1);

956 
jumpIn°1
 = 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MakeIdxRec
, 
pIdx
->
nCﬁumn
, 0);

957 
	`sqlôe3IndexAfföôySå
(
v
, 
pIdx
);

960 
⁄Eº‹
 = 
pIdx
->onError;

961 if–
⁄Eº‹
==
OE_N⁄e
 ) ;

962 if–
ovîrideEº‹
!=
OE_DeÁu…
 ){

963 
⁄Eº‹
 = 
ovîrideEº‹
;

964 }if–
⁄Eº‹
==
OE_DeÁu…
 ){

965 
⁄Eº‹
 = 
OE_Ab‹t
;

967 if–
£íRïœ˚
 ){

968 if–
⁄Eº‹
==
OE_Ign‹e
 ) onEº‹ = 
OE_Rïœ˚
;

969 if–
⁄Eº‹
==
OE_Faû
 ) onEº‹ = 
OE_Ab‹t
;

974 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Dup
, 
exåa
+
nCﬁ
+1+
hasTwoRowids
, 1);

975 
jumpIn°2
 = 
	`sqlôe3VdbeAddOp
(
v
, 
OP_IsUnique
, 
ba£
+
iCur
+1, 0);

978 
	`as£π
–
⁄Eº‹
==
OE_Rﬁlback
 || onEº‹==
OE_Ab‹t
 || onEº‹==
OE_Faû


979 || 
⁄Eº‹
==
OE_Ign‹e
 || onEº‹==
OE_Rïœ˚
 );

980  
⁄Eº‹
 ){

981 
OE_Rﬁlback
:

982 
OE_Ab‹t
:

983 
OE_Faû
: {

984 
j
, 
n1
, 
n2
;

985 
zEºMsg
[200];

986 
	`°r˝y
(
zEºMsg
, 
pIdx
->
nCﬁumn
>1 ? "columns " : "column ");

987 
n1
 = 
	`°æí
(
zEºMsg
);

988 
j
=0; j<
pIdx
->
nCﬁumn
 && 
n1
<(
zEºMsg
)-30; j++){

989 *
zCﬁ
 = 
pTab
->
aCﬁ
[
pIdx
->
aiCﬁumn
[
j
]].
zName
;

990 
n2
 = 
	`°æí
(
zCﬁ
);

991 if–
j
>0 ){

992 
	`°r˝y
(&
zEºMsg
[
n1
], ", ");

993 
n1
 += 2;

995 if–
n1
+
n2
>(
zEºMsg
)-30 ){

996 
	`°r˝y
(&
zEºMsg
[
n1
], "...");

997 
n1
 += 3;

1000 
	`°r˝y
(&
zEºMsg
[
n1
], 
zCﬁ
);

1001 
n1
 +
n2
;

1004 
	`°r˝y
(&
zEºMsg
[
n1
],

1005 
pIdx
->
nCﬁumn
>1 ? "áreÇot unique" : " isÇot unique");

1006 
	`sqlôe3VdbeOp3
(
v
, 
OP_HÆt
, 
SQLITE_CONSTRAINT
, 
⁄Eº‹
, 
zEºMsg
, 0);

1009 
OE_Ign‹e
: {

1010 
	`as£π
–
£íRïœ˚
==0 );

1011 
	`sqlôe3VdbeAddOp
(
v
, 
OP_P›
, 
nCﬁ
+
exåa
+3+
hasTwoRowids
, 0);

1012 
	`sqlôe3VdbeAddOp
(
v
, 
OP_GŸo
, 0, 
ign‹eDe°
);

1015 
OE_Rïœ˚
: {

1016 
	`sqlôe3Gíî©eRowDñëe
(
pP¨£
->
db
, 
v
, 
pTab
, 
ba£
, 0);

1017 if–
isUpd©e
 ){

1018 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Dup
, 
nCﬁ
+
exåa
+1+
hasTwoRowids
, 1);

1019 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MoveGe
, 
ba£
, 0);

1021 
£íRïœ˚
 = 1;

1025 #i‡
NULL_DISTINCT_FOR_UNIQUE


1026 
	`sqlôe3VdbeJumpHîe
(
v
, 
jumpIn°1
);

1028 
	`sqlôe3VdbeJumpHîe
(
v
, 
jumpIn°2
);

1030 
	}
}

1042 
	$sqlôe3Com∂ëeIn£πi⁄
(

1043 
P¨£
 *
pP¨£
,

1044 
TabÀ
 *
pTab
,

1045 
ba£
,

1046 *
aIdxU£d
,

1047 
rowidChng
,

1048 
isUpd©e
,

1049 
√wIdx


1051 
i
;

1052 
Vdbe
 *
v
;

1053 
nIdx
;

1054 
Index
 *
pIdx
;

1055 
pik_Êags
;

1057 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

1058 
	`as£π
–
v
!=0 );

1059 
	`as£π
–
pTab
->
pSñe˘
==0 );

1060 
nIdx
=0, 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
,ÇIdx++){}

1061 
i
=
nIdx
-1; i>=0; i--){

1062 if–
aIdxU£d
 &&áIdxU£d[
i
]==0 ) ;

1063 
	`sqlôe3VdbeAddOp
(
v
, 
OP_IdxIn£π
, 
ba£
+
i
+1, 0);

1065 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MakeRec‹d
, 
pTab
->
nCﬁ
, 0);

1066 
	`sqlôe3TabÀAfföôySå
(
v
, 
pTab
);

1067 #i‚de‡
SQLITE_OMIT_TRIGGER


1068 if–
√wIdx
>=0 ){

1069 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Dup
, 1, 0);

1070 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Dup
, 1, 0);

1071 
	`sqlôe3VdbeAddOp
(
v
, 
OP_In£π
, 
√wIdx
, 0);

1074 if–
pP¨£
->
√°ed
 ){

1075 
pik_Êags
 = 0;

1077 
pik_Êags
 = 
OPFLAG_NCHANGE
;

1078 
pik_Êags
 |(
isUpd©e
?
OPFLAG_ISUPDATE
:
OPFLAG_LASTROWID
);

1080 
	`sqlôe3VdbeAddOp
(
v
, 
OP_In£π
, 
ba£
, 
pik_Êags
);

1081 if–!
pP¨£
->
√°ed
 ){

1082 
	`sqlôe3VdbeCh™geP3
(
v
, -1, 
pTab
->
zName
, 
P3_STATIC
);

1085 if–
isUpd©e
 && 
rowidChng
 ){

1086 
	`sqlôe3VdbeAddOp
(
v
, 
OP_P›
, 1, 0);

1088 
	}
}

1095 
	$sqlôe3O≥nTabÀAndIndi˚s
(

1096 
P¨£
 *
pP¨£
,

1097 
TabÀ
 *
pTab
,

1098 
ba£
,

1099 
›


1101 
i
;

1102 
iDb
 = 
	`sqlôe3SchemaToIndex
(
pP¨£
->
db
, 
pTab
->
pSchema
);

1103 
Index
 *
pIdx
;

1104 
Vdbe
 *
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

1105 
	`as£π
–
v
!=0 );

1106 
	`sqlôe3O≥nTabÀ
(
pP¨£
, 
ba£
, 
iDb
, 
pTab
, 
›
);

1107 
i
=1, 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
, i++){

1108 
KeyInfo
 *
pKey
 = 
	`sqlôe3IndexKeyöfo
(
pP¨£
, 
pIdx
);

1109 
	`as£π
–
pIdx
->
pSchema
==
pTab
->pSchema );

1110 
	`sqlôe3VdbeAddOp
(
v
, 
OP_I¡egî
, 
iDb
, 0);

1111 
	`VdbeCommít
((
v
, "# %s", 
pIdx
->
zName
));

1112 
	`sqlôe3VdbeOp3
(
v
, 
›
, 
i
+
ba£
, 
pIdx
->
äum
, (*)
pKey
, 
P3_KEYINFO_HANDOFF
);

1114 if–
pP¨£
->
nTab
<=
ba£
+
i
 ){

1115 
pP¨£
->
nTab
 = 
ba£
+
i
;

1117 
	}
}

	@legacy.c

20 
	~"sqlôeI¡.h
"

21 
	~"os.h
"

22 
	~<˘y≥.h
>

34 
	$sqlôe3_exec
(

35 
sqlôe3
 *
db
,

36 c⁄° *
zSql
,

37 
sqlôe3_ˇŒback
 
xCÆlback
,

38 *
pArg
,

39 **
pzEºMsg


41 
rc
 = 
SQLITE_OK
;

42 c⁄° *
zLe·ovî
;

43 
sqlôe3_°mt
 *
pStmt
 = 0;

44 **
azCﬁs
 = 0;

46 
nRëry
 = 0;

47 
nCh™ge
 = 0;

48 
nCÆlback
;

50 if–
zSql
==0 )  
SQLITE_OK
;

51  (
rc
==
SQLITE_OK
 || (rc==
SQLITE_SCHEMA
 && (++
nRëry
)<2)Ë&& 
zSql
[0] ){

52 
nCﬁ
;

53 **
azVÆs
 = 0;

55 
pStmt
 = 0;

56 
rc
 = 
	`sqlôe3_¥ï¨e
(
db
, 
zSql
, -1, &
pStmt
, &
zLe·ovî
);

57 if–
rc
!=
SQLITE_OK
 ){

58 if–
pStmt
 ) 
	`sqlôe3_föÆize
(pStmt);

61 if–!
pStmt
 ){

63 
zSql
 = 
zLe·ovî
;

67 
db
->
nCh™ge
 +=ÇChange;

68 
nCÆlback
 = 0;

70 
nCﬁ
 = 
	`sqlôe3_cﬁumn_cou¡
(
pStmt
);

71 
azCﬁs
 = 
	`sqlôeMÆloc
(2*
nCﬁ
*(const *) + 1);

72 if–
azCﬁs
==0 ){

73 
exec_out
;

77 
i
;

78 
rc
 = 
	`sqlôe3_°ï
(
pStmt
);

81 if–
xCÆlback
 && (
SQLITE_ROW
==
rc
 ||

82 (
SQLITE_DONE
==
rc
 && !
nCÆlback
 && 
db
->
Êags
&
SQLITE_NuŒCÆlback
)) ){

83 if–0==
nCÆlback
 ){

84 
i
=0; i<
nCﬁ
; i++){

85 
azCﬁs
[
i
] = (*)
	`sqlôe3_cﬁumn_«me
(
pStmt
, i);

87 
nCÆlback
++;

89 if–
rc
==
SQLITE_ROW
 ){

90 
azVÆs
 = &
azCﬁs
[
nCﬁ
];

91 
i
=0; i<
nCﬁ
; i++){

92 
azVÆs
[
i
] = (*)
	`sqlôe3_cﬁumn_ãxt
(
pStmt
, i);

95 if–
	`xCÆlback
(
pArg
, 
nCﬁ
, 
azVÆs
, 
azCﬁs
) ){

96 
rc
 = 
SQLITE_ABORT
;

97 
exec_out
;

101 if–
rc
!=
SQLITE_ROW
 ){

102 
rc
 = 
	`sqlôe3_föÆize
(
pStmt
);

103 
pStmt
 = 0;

104 if–
db
->
pVdbe
==0 ){

105 
nCh™ge
 = 
db
->nChange;

107 if–
rc
!=
SQLITE_SCHEMA
 ){

108 
nRëry
 = 0;

109 
zSql
 = 
zLe·ovî
;

110  
	`is•a˚
(()
zSql
[0]) ) zSql++;

116 
	`sqlôeFªe
(
azCﬁs
);

117 
azCﬁs
 = 0;

120 
exec_out
:

121 if–
pStmt
 ) 
	`sqlôe3_föÆize
(pStmt);

122 if–
azCﬁs
 ) 
	`sqlôeFªe
(azCols);

124 
rc
 = 
	`sqlôe3ApiExô
(0,Ñc);

125 if–
rc
!=
SQLITE_OK
 &&Ñc==
	`sqlôe3_îrcode
(
db
Ë&& 
pzEºMsg
 ){

126 *
pzEºMsg
 = 
	`mÆloc
(1+
	`°æí
(
	`sqlôe3_îrmsg
(
db
)));

127 if–*
pzEºMsg
 ){

128 
	`°r˝y
(*
pzEºMsg
, 
	`sqlôe3_îrmsg
(
db
));

130 }if–
pzEºMsg
 ){

131 *
pzEºMsg
 = 0;

134  
rc
;

135 
	}
}

	@main.c

19 
	~"sqlôeI¡.h
"

20 
	~"os.h
"

21 
	~<˘y≥.h
>

27 c⁄° 
	gsqlôe3⁄e
 = 1;

32 c⁄° 
	gsqlôe3_vîsi⁄
[] = 
SQLITE_VERSION
;

33 c⁄° *
	$sqlôe3_libvîsi⁄
(){  
sqlôe3_vîsi⁄
; 
	}
}

34 
	$sqlôe3_libvîsi⁄_numbî
(){  
SQLITE_VERSION_NUMBER
; 
	}
}

40 
	$böCﬁlFunc
(

41 *
NŸU£d
,

42 
nKey1
, c⁄° *
pKey1
,

43 
nKey2
, c⁄° *
pKey2


45 
rc
, 
n
;

46 
n
 = 
nKey1
<
nKey2
 ?ÇKey1 :ÇKey2;

47 
rc
 = 
	`memcmp
(
pKey1
, 
pKey2
, 
n
);

48 if–
rc
==0 ){

49 
rc
 = 
nKey1
 - 
nKey2
;

51  
rc
;

52 
	}
}

63 
	$noˇ£CﬁœtögFunc
(

64 *
NŸU£d
,

65 
nKey1
, c⁄° *
pKey1
,

66 
nKey2
, c⁄° *
pKey2


68 
r
 = 
	`sqlôe3SåNICmp
(

69 (c⁄° *)
pKey1
, (c⁄° *)
pKey2
, (
nKey1
<
nKey2
)?nKey1:nKey2);

70 if–0==
r
 ){

71 
r
 = 
nKey1
-
nKey2
;

73  
r
;

74 
	}
}

79 
sqlôe_öt64
 
	$sqlôe3_œ°_ö£π_rowid
(
sqlôe3
 *
db
){

80  
db
->
œ°Rowid
;

81 
	}
}

86 
	$sqlôe3_ch™ges
(
sqlôe3
 *
db
){

87  
db
->
nCh™ge
;

88 
	}
}

93 
	$sqlôe3_tŸÆ_ch™ges
(
sqlôe3
 *
db
){

94  
db
->
nTŸÆCh™ge
;

95 
	}
}

100 
	$sqlôe3_˛o£
(
sqlôe3
 *
db
){

101 
HashEÀm
 *
i
;

102 
j
;

104 if–!
db
 ){

105  
SQLITE_OK
;

107 if–
	`sqlôe3Sa„tyCheck
(
db
) ){

108  
SQLITE_MISUSE
;

111 #ifde‡
SQLITE_SSE


112 
	`sqlôe3_föÆize
(
db
->
pFëch
);

116 if–
db
->
pVdbe
 ){

117 
	`sqlôe3Eº‹
(
db
, 
SQLITE_BUSY
,

119  
SQLITE_BUSY
;

121 
	`as£π
–!
	`sqlôe3Sa„tyCheck
(
db
) );

128 if–
db
->
magic
!=
SQLITE_MAGIC_CLOSED
 && 
	`sqlôe3Sa„tyOn
(db) ){

130  
SQLITE_ERROR
;

133 
j
=0; j<
db
->
nDb
; j++){

134 
Db
 *
pDb
 = &
db
->
aDb
[
j
];

135 if–
pDb
->
pBt
 ){

136 
	`sqlôe3BåìClo£
(
pDb
->
pBt
);

137 
pDb
->
pBt
 = 0;

138 if–
j
!=1 ){

139 
pDb
->
pSchema
 = 0;

143 
	`sqlôe3Re£tI¡î«lSchema
(
db
, 0);

144 
	`as£π
–
db
->
nDb
<=2 );

145 
	`as£π
–
db
->
aDb
==db->
aDbSètic
 );

146 
i
=
	`sqlôeHashFú°
(&
db
->
aFunc
); i; i=
	`sqlôeHashNext
(i)){

147 
FuncDef
 *
pFunc
, *
pNext
;

148 
pFunc
 = (
FuncDef
*)
	`sqlôeHashD©a
(
i
);ÖFunc;ÖFunc=
pNext
){

149 
pNext
 = 
pFunc
->pNext;

150 
	`sqlôeFªe
(
pFunc
);

154 
i
=
	`sqlôeHashFú°
(&
db
->
aCﬁlSeq
); i; i=
	`sqlôeHashNext
(i)){

155 
CﬁlSeq
 *
pCﬁl
 = (CﬁlSeq *)
	`sqlôeHashD©a
(
i
);

156 
	`sqlôeFªe
(
pCﬁl
);

158 
	`sqlôe3HashCÀ¨
(&
db
->
aCﬁlSeq
);

160 
	`sqlôe3HashCÀ¨
(&
db
->
aFunc
);

161 
	`sqlôe3Eº‹
(
db
, 
SQLITE_OK
, 0);

162 if–
db
->
pEº
 ){

163 
	`sqlôe3VÆueFªe
(
db
->
pEº
);

166 
db
->
magic
 = 
SQLITE_MAGIC_ERROR
;

174 
	`sqlôeFªe
(
db
->
aDb
[1].
pSchema
);

175 
	`sqlôeFªe
(
db
);

176 
	`sqlôe3Rñó£ThªadD©a
();

177  
SQLITE_OK
;

178 
	}
}

183 
	$sqlôe3RﬁlbackAŒ
(
sqlôe3
 *
db
){

184 
i
;

185 
öTøns
 = 0;

186 
i
=0; i<
db
->
nDb
; i++){

187 if–
db
->
aDb
[
i
].
pBt
 ){

188 if–
	`sqlôe3BåìIsInTøns
(
db
->
aDb
[
i
].
pBt
) ){

189 
öTøns
 = 1;

191 
	`sqlôe3BåìRﬁlback
(
db
->
aDb
[
i
].
pBt
);

192 
db
->
aDb
[
i
].
öTøns
 = 0;

195 if–
db
->
Êags
&
SQLITE_I¡înCh™ges
 ){

196 
	`sqlôe3Re£tI¡î«lSchema
(
db
, 0);

200 if–
db
->
xRﬁlbackCÆlback
 && (
öTøns
 || !db->
autoCommô
) ){

201 
db
->
	`xRﬁlbackCÆlback
(db->
pRﬁlbackArg
);

203 
	}
}

209 c⁄° *
	$sqlôe3EºSå
(
rc
){

210 c⁄° *
z
;

211  
rc
 ){

212 
SQLITE_ROW
:

213 
SQLITE_DONE
:

214 
SQLITE_OK
: 
z
 = "notánÉrror"; ;

215 
SQLITE_ERROR
: 
z
 = "SQLÜogicÉrror or missing database"; ;

216 
SQLITE_PERM
: 
z
 = "accessÖermission denied"; ;

217 
SQLITE_ABORT
: 
z
 = "callbackÑequested queryábort"; ;

218 
SQLITE_BUSY
: 
z
 = "database isÜocked"; ;

219 
SQLITE_LOCKED
: 
z
 = "databaseÅable isÜocked"; ;

220 
SQLITE_NOMEM
: 
z
 = "out of memory"; ;

221 
SQLITE_READONLY
: 
z
 = "attemptÅo writeáÑeadonly database"; ;

222 
SQLITE_INTERRUPT
: 
z
 = "interrupted"; ;

223 
SQLITE_IOERR
: 
z
 = "disk I/OÉrror"; ;

224 
SQLITE_CORRUPT
: 
z
 = "database disk image is malformed"; ;

225 
SQLITE_FULL
: 
z
 = "database or disk is full"; ;

226 
SQLITE_CANTOPEN
: 
z
 = "unableÅo open database file"; ;

227 
SQLITE_PROTOCOL
: 
z
 = "databaseÜockingÖrotocol failure"; ;

228 
SQLITE_EMPTY
: 
z
 = "table containsÇo data"; ;

229 
SQLITE_SCHEMA
: 
z
 = "database schema has changed"; ;

230 
SQLITE_CONSTRAINT
: 
z
 = "constraint failed"; ;

231 
SQLITE_MISMATCH
: 
z
 = "datatype mismatch"; ;

232 
SQLITE_MISUSE
: 
z
 = "libraryÑoutine called out of sequence";;

233 
SQLITE_NOLFS
: 
z
 = "kernelÜacksÜarge file support"; ;

234 
SQLITE_AUTH
: 
z
 = "authorization denied"; ;

235 
SQLITE_FORMAT
: 
z
 = "auxiliary database formatÉrror"; ;

236 
SQLITE_RANGE
: 
z
 = "bind or column index out ofÑange"; ;

237 
SQLITE_NOTADB
: 
z
 = "file isÉncrypted or isÇotá database";;

238 : 
z
 = "unknownÉrror"; ;

240  
z
;

241 
	}
}

249 
	$sqlôeDeÁu…BusyCÆlback
(

250 *
±r
,

251 
cou¡


253 #i‡
SQLITE_MIN_SLEEP_MS
==1

254 c⁄° 
u8
 
dñays
[] =

256 c⁄° 
u8
 
tŸÆs
[] =

258 
	#NDELAY
 ((
dñays
)/(dñays[0]))

	)

259 
timeout
 = ((
sqlôe3
 *)
±r
)->
busyTimeout
;

260 
dñay
, 
¥i‹
;

262 
	`as£π
–
cou¡
>=0 );

263 if–
cou¡
 < 
NDELAY
 ){

264 
dñay
 = 
dñays
[
cou¡
];

265 
¥i‹
 = 
tŸÆs
[
cou¡
];

267 
dñay
 = 
dñays
[
NDELAY
-1];

268 
¥i‹
 = 
tŸÆs
[
NDELAY
-1] + 
dñay
*(
cou¡
-(NDELAY-1));

270 if–
¥i‹
 + 
dñay
 > 
timeout
 ){

271 
dñay
 = 
timeout
 - 
¥i‹
;

272 if–
dñay
<=0 )  0;

274 
	`sqlôe3OsSÀï
(
dñay
);

277 
timeout
 = ((
sqlôe3
 *)
±r
)->
busyTimeout
;

278 if–(
cou¡
+1)*1000 > 
timeout
 ){

281 
	`sqlôe3OsSÀï
(1000);

284 
	}
}

293 
	$sqlôe3InvokeBusyH™dÀr
(
BusyH™dÀr
 *
p
){

294 
rc
;

295 if–
p
==0 ||Ö->
xFunc
==0 ||Ö->
nBusy
<0 )  0;

296 
rc
 = 
p
->
	`xFunc
’->
pArg
,Ö->
nBusy
);

297 if–
rc
==0 ){

298 
p
->
nBusy
 = -1;

300 
p
->
nBusy
++;

302  
rc
;

303 
	}
}

309 
sqlôe3_busy_h™dÀr
(

310 
sqlôe3
 *
db
,

311 (*
xBusy
)(*,),

312 *
pArg


314 if–
	`sqlôe3Sa„tyCheck
(
db
) ){

315  
SQLITE_MISUSE
;

317 
db
->
busyH™dÀr
.
xFunc
 = 
xBusy
;

318 
db
->
busyH™dÀr
.
pArg
 =ÖArg;

319 
db
->
busyH™dÀr
.
nBusy
 = 0;

320  
SQLITE_OK
;

321 
	}
}

323 #i‚de‡
SQLITE_OMIT_PROGRESS_CALLBACK


329 
sqlôe3_¥ogªss_h™dÀr
(

330 
sqlôe3
 *
db
,

331 
nOps
,

332 (*
xProgªss
)(*),

333 *
pArg


335 if–!
	`sqlôe3Sa„tyCheck
(
db
) ){

336 if–
nOps
>0 ){

337 
db
->
xProgªss
 = xProgress;

338 
db
->
nProgªssOps
 = 
nOps
;

339 
db
->
pProgªssArg
 = 
pArg
;

341 
db
->
xProgªss
 = 0;

342 
db
->
nProgªssOps
 = 0;

343 
db
->
pProgªssArg
 = 0;

346 
	}
}

354 
	$sqlôe3_busy_timeout
(
sqlôe3
 *
db
, 
ms
){

355 if–
ms
>0 ){

356 
db
->
busyTimeout
 = 
ms
;

357 
	`sqlôe3_busy_h™dÀr
(
db
, 
sqlôeDeÁu…BusyCÆlback
, (*)db);

359 
	`sqlôe3_busy_h™dÀr
(
db
, 0, 0);

361  
SQLITE_OK
;

362 
	}
}

367 
	$sqlôe3_öãºu±
(
sqlôe3
 *
db
){

368 if–!
	`sqlôe3Sa„tyCheck
(
db
) ){

369 
db
->
Êags
 |
SQLITE_I¡îru±
;

371 
	}
}

381 
	$sqlôe3_‰ì
(*
p
){ 
	`‰ì
’); 
	}
}

389 
sqlôe3Cª©eFunc
(

390 
sqlôe3
 *
db
,

391 c⁄° *
zFun˘i⁄Name
,

392 
nArg
,

393 
íc
,

394 *
pU£rD©a
,

395 (*
xFunc
)(
sqlôe3_c⁄ãxt
*,,
sqlôe3_vÆue
 **),

396 (*
xSãp
)(
sqlôe3_c⁄ãxt
*,,
sqlôe3_vÆue
 **),

397 (*
xFöÆ
)(
sqlôe3_c⁄ãxt
*)

399 
FuncDef
 *
p
;

400 
nName
;

402 if–
	`sqlôe3Sa„tyCheck
(
db
) ){

403  
SQLITE_MISUSE
;

405 if–
zFun˘i⁄Name
==0 ||

406 (
xFunc
 && (
xFöÆ
 || 
xSãp
)) ||

407 (!
xFunc
 && (
xFöÆ
 && !
xSãp
)) ||

408 (!
xFunc
 && (!
xFöÆ
 && 
xSãp
)) ||

409 (
nArg
<-1 ||ÇArg>127) ||

410 (255<(
nName
 = 
	`°æí
(
zFun˘i⁄Name
))) ){

411  
SQLITE_ERROR
;

414 #i‚de‡
SQLITE_OMIT_UTF16


422 if–
íc
==
SQLITE_UTF16
 ){

423 
íc
 = 
SQLITE_UTF16NATIVE
;

424 }if–
íc
==
SQLITE_ANY
 ){

425 
rc
;

426 
rc
 = 
	`sqlôe3Cª©eFunc
(
db
, 
zFun˘i⁄Name
, 
nArg
, 
SQLITE_UTF8
,

427 
pU£rD©a
, 
xFunc
, 
xSãp
, 
xFöÆ
);

428 if–
rc
!=
SQLITE_OK
 ) Ñc;

429 
rc
 = 
	`sqlôe3Cª©eFunc
(
db
, 
zFun˘i⁄Name
, 
nArg
, 
SQLITE_UTF16LE
,

430 
pU£rD©a
, 
xFunc
, 
xSãp
, 
xFöÆ
);

431 if–
rc
!=
SQLITE_OK
 ) Ñc;

432 
íc
 = 
SQLITE_UTF16BE
;

435 
íc
 = 
SQLITE_UTF8
;

443 
p
 = 
	`sqlôe3FödFun˘i⁄
(
db
, 
zFun˘i⁄Name
, 
nName
, 
nArg
, 
íc
, 0);

444 if–
p
 &&Ö->
iPªfEnc
==
íc
 &&Ö->
nArg
==nArg ){

445 if–
db
->
a˘iveVdbeC¡
 ){

446 
	`sqlôe3Eº‹
(
db
, 
SQLITE_BUSY
,

448 
	`as£π
–!
	`sqlôe3MÆlocFaûed
() );

449  
SQLITE_BUSY
;

451 
	`sqlôe3ExpúePª∑ªdSèãmíts
(
db
);

455 
p
 = 
	`sqlôe3FödFun˘i⁄
(
db
, 
zFun˘i⁄Name
, 
nName
, 
nArg
, 
íc
, 1);

456 if–
p
 ){

457 
p
->
Êags
 = 0;

458 
p
->
xFunc
 = xFunc;

459 
p
->
xSãp
 = xStep;

460 
p
->
xFöÆize
 = 
xFöÆ
;

461 
p
->
pU£rD©a
 =ÖUserData;

463  
SQLITE_OK
;

464 
	}
}

469 
sqlôe3_¸óã_fun˘i⁄
(

470 
sqlôe3
 *
db
,

471 c⁄° *
zFun˘i⁄Name
,

472 
nArg
,

473 
íc
,

474 *
p
,

475 (*
xFunc
)(
sqlôe3_c⁄ãxt
*,,
sqlôe3_vÆue
 **),

476 (*
xSãp
)(
sqlôe3_c⁄ãxt
*,,
sqlôe3_vÆue
 **),

477 (*
xFöÆ
)(
sqlôe3_c⁄ãxt
*)

479 
rc
;

480 
	`as£π
–!
	`sqlôe3MÆlocFaûed
() );

481 
rc
 = 
	`sqlôe3Cª©eFunc
(
db
, 
zFun˘i⁄Name
, 
nArg
, 
íc
, 
p
, 
xFunc
, 
xSãp
, 
xFöÆ
);

483  
	`sqlôe3ApiExô
(
db
, 
rc
);

484 
	}
}

486 #i‚de‡
SQLITE_OMIT_UTF16


487 
sqlôe3_¸óã_fun˘i⁄16
(

488 
sqlôe3
 *
db
,

489 c⁄° *
zFun˘i⁄Name
,

490 
nArg
,

491 
eTextRï
,

492 *
p
,

493 (*
xFunc
)(
sqlôe3_c⁄ãxt
*,,
sqlôe3_vÆue
**),

494 (*
xSãp
)(
sqlôe3_c⁄ãxt
*,,
sqlôe3_vÆue
**),

495 (*
xFöÆ
)(
sqlôe3_c⁄ãxt
*)

497 
rc
;

498 *
zFunc8
;

499 
	`as£π
–!
	`sqlôe3MÆlocFaûed
() );

501 
zFunc8
 = 
	`sqlôe3utf16to8
(
zFun˘i⁄Name
, -1);

502 
rc
 = 
	`sqlôe3Cª©eFunc
(
db
, 
zFunc8
, 
nArg
, 
eTextRï
, 
p
, 
xFunc
, 
xSãp
, 
xFöÆ
);

503 
	`sqlôeFªe
(
zFunc8
);

505  
	`sqlôe3ApiExô
(
db
, 
rc
);

506 
	}
}

509 #i‚de‡
SQLITE_OMIT_TRACE


518 *
sqlôe3_åa˚
(
sqlôe3
 *
db
, (*
xTø˚
)(*,c⁄° *), *
pArg
){

519 *
pOld
 = 
db
->
pTø˚Arg
;

520 
db
->
xTø˚
 = xTrace;

521 
db
->
pTø˚Arg
 = 
pArg
;

522  
pOld
;

523 
	}
}

532 *
sqlôe3_¥ofûe
(

533 
sqlôe3
 *
db
,

534 (*
xProfûe
)(*,c⁄° *,
sqlôe_uöt64
),

535 *
pArg


537 *
pOld
 = 
db
->
pProfûeArg
;

538 
db
->
xProfûe
 = xProfile;

539 
db
->
pProfûeArg
 = 
pArg
;

540  
pOld
;

541 
	}
}

550 *
sqlôe3_commô_hook
(

551 
sqlôe3
 *
db
,

552 (*
xCÆlback
)(*),

553 *
pArg


555 *
pOld
 = 
db
->
pCommôArg
;

556 
db
->
xCommôCÆlback
 = 
xCÆlback
;

557 
db
->
pCommôArg
 = 
pArg
;

558  
pOld
;

559 
	}
}

565 *
sqlôe3_upd©e_hook
(

566 
sqlôe3
 *
db
,

567 (*
xCÆlback
)(*,,c⁄° *,c⁄° *,
sqlôe_öt64
),

568 *
pArg


570 *
pRë
 = 
db
->
pUpd©eArg
;

571 
db
->
xUpd©eCÆlback
 = 
xCÆlback
;

572 
db
->
pUpd©eArg
 = 
pArg
;

573  
pRë
;

574 
	}
}

580 *
sqlôe3_rﬁlback_hook
(

581 
sqlôe3
 *
db
,

582 (*
xCÆlback
)(*),

583 *
pArg


585 *
pRë
 = 
db
->
pRﬁlbackArg
;

586 
db
->
xRﬁlbackCÆlback
 = 
xCÆlback
;

587 
db
->
pRﬁlbackArg
 = 
pArg
;

588  
pRë
;

589 
	}
}

616 
	$sqlôe3BåìFa˘‹y
(

617 c⁄° 
sqlôe3
 *
db
,

618 c⁄° *
zFûíame
,

619 
omôJou∫Æ
,

620 
nCache
,

621 
Båì
 **
µBåì


623 
båì_Êags
 = 0;

624 
rc
;

626 
	`as£π
–
µBåì
 != 0);

627 if–
omôJou∫Æ
 ){

628 
båì_Êags
 |
BTREE_OMIT_JOURNAL
;

630 if–
db
->
Êags
 & 
SQLITE_NoRódlock
 ){

631 
båì_Êags
 |
BTREE_NO_READLOCK
;

633 if–
zFûíame
==0 ){

634 #i‡
TEMP_STORE
==0

637 #i‚de‡
SQLITE_OMIT_MEMORYDB


638 #i‡
TEMP_STORE
==1

639 if–
db
->
ãmp_°‹e
==2 ) 
zFûíame
 = ":memory:";

641 #i‡
TEMP_STORE
==2

642 if–
db
->
ãmp_°‹e
!=1 ) 
zFûíame
 = ":memory:";

644 #i‡
TEMP_STORE
==3

645 
zFûíame
 = ":memory:";

650 
rc
 = 
	`sqlôe3BåìO≥n
(
zFûíame
, (
sqlôe3
 *)
db
, 
µBåì
, 
båì_Êags
);

651 if–
rc
==
SQLITE_OK
 ){

652 
	`sqlôe3BåìSëBusyH™dÀr
(*
µBåì
, (*)&
db
->
busyH™dÀr
);

653 
	`sqlôe3BåìSëCacheSize
(*
µBåì
, 
nCache
);

655  
rc
;

656 
	}
}

662 c⁄° *
	$sqlôe3_îrmsg
(
sqlôe3
 *
db
){

663 c⁄° *
z
;

664 if–!
db
 || 
	`sqlôe3MÆlocFaûed
() ){

665  
	`sqlôe3EºSå
(
SQLITE_NOMEM
);

667 if–
	`sqlôe3Sa„tyCheck
(
db
Ë|| db->
îrCode
==
SQLITE_MISUSE
 ){

668  
	`sqlôe3EºSå
(
SQLITE_MISUSE
);

670 
z
 = (*)
	`sqlôe3_vÆue_ãxt
(
db
->
pEº
);

671 if–
z
==0 ){

672 
z
 = 
	`sqlôe3EºSå
(
db
->
îrCode
);

674  
z
;

675 
	}
}

677 #i‚de‡
SQLITE_OMIT_UTF16


682 c⁄° *
	$sqlôe3_îrmsg16
(
sqlôe3
 *
db
){

688 c⁄° 
outOfMemBe
[] = {

693 c⁄° 
misu£Be
 [] = {

702 c⁄° *
z
;

703 if–
	`sqlôe3MÆlocFaûed
() ){

704  (*)(&
outOfMemBe
[
SQLITE_UTF16NATIVE
==
SQLITE_UTF16LE
?1:0]);

706 if–
	`sqlôe3Sa„tyCheck
(
db
Ë|| db->
îrCode
==
SQLITE_MISUSE
 ){

707  (*)(&
misu£Be
[
SQLITE_UTF16NATIVE
==
SQLITE_UTF16LE
?1:0]);

709 
z
 = 
	`sqlôe3_vÆue_ãxt16
(
db
->
pEº
);

710 if–
z
==0 ){

711 
	`sqlôe3VÆueSëSå
(
db
->
pEº
, -1, 
	`sqlôe3EºSå
(db->
îrCode
),

712 
SQLITE_UTF8
, 
SQLITE_STATIC
);

713 
z
 = 
	`sqlôe3_vÆue_ãxt16
(
db
->
pEº
);

715 
	`sqlôe3ApiExô
(0, 0);

716  
z
;

717 
	}
}

724 
	$sqlôe3_îrcode
(
sqlôe3
 *
db
){

725 if–!
db
 || 
	`sqlôe3MÆlocFaûed
() ){

726  
SQLITE_NOMEM
;

728 if–
	`sqlôe3Sa„tyCheck
(
db
) ){

729  
SQLITE_MISUSE
;

731  
db
->
îrCode
;

732 
	}
}

738 
¸óãCﬁœti⁄
(

739 
sqlôe3
* 
db
,

740 c⁄° *
zName
,

741 
íc
,

742 * 
pCtx
,

743 (*
xCom∑ª
)(*,,const *,,const *)

745 
CﬁlSeq
 *
pCﬁl
;

747 if–
	`sqlôe3Sa„tyCheck
(
db
) ){

748  
SQLITE_MISUSE
;

755 if–
íc
==
SQLITE_UTF16
 ){

756 
íc
 = 
SQLITE_UTF16NATIVE
;

759 if–
íc
!=
SQLITE_UTF8
 &&Énc!=
SQLITE_UTF16LE
 &&Énc!=
SQLITE_UTF16BE
 ){

760 
	`sqlôe3Eº‹
(
db
, 
SQLITE_ERROR
,

764  
SQLITE_ERROR
;

771 
pCﬁl
 = 
	`sqlôe3FödCﬁlSeq
(
db
, (
u8
)
íc
, 
zName
, 
	`°æí
(zName), 0);

772 if–
pCﬁl
 &&ÖCﬁl->
xCmp
 ){

773 if–
db
->
a˘iveVdbeC¡
 ){

774 
	`sqlôe3Eº‹
(
db
, 
SQLITE_BUSY
,

776  
SQLITE_BUSY
;

778 
	`sqlôe3ExpúePª∑ªdSèãmíts
(
db
);

781 
pCﬁl
 = 
	`sqlôe3FödCﬁlSeq
(
db
, (
u8
)
íc
, 
zName
, 
	`°æí
(zName), 1);

782 if–
pCﬁl
 ){

783 
pCﬁl
->
xCmp
 = 
xCom∑ª
;

784 
pCﬁl
->
pU£r
 = 
pCtx
;

785 
pCﬁl
->
íc
 =Énc;

787 
	`sqlôe3Eº‹
(
db
, 
SQLITE_OK
, 0);

788  
SQLITE_OK
;

789 
	}
}

797 
	$›íD©aba£
(

798 c⁄° *
zFûíame
,

799 
sqlôe3
 **
µDb


801 
sqlôe3
 *
db
;

802 
rc
;

803 
CﬁlSeq
 *
pCﬁl
;

805 
	`as£π
–!
	`sqlôe3MÆlocFaûed
() );

808 
db
 = 
	`sqlôeMÆloc
–(
sqlôe3
) );

809 if–
db
==0 ) 
›ídb_out
;

810 
db
->
¥i‹NewRowid
 = 0;

811 
db
->
magic
 = 
SQLITE_MAGIC_BUSY
;

812 
db
->
nDb
 = 2;

813 
db
->
aDb
 = db->
aDbSètic
;

814 
db
->
autoCommô
 = 1;

815 
db
->
Êags
 |
SQLITE_Sh‹tCﬁNames
;

816 
	`sqlôe3HashInô
(&
db
->
aFunc
, 
SQLITE_HASH_STRING
, 0);

817 
	`sqlôe3HashInô
(&
db
->
aCﬁlSeq
, 
SQLITE_HASH_STRING
, 0);

823 if–
	`¸óãCﬁœti⁄
(
db
, "BINARY", 
SQLITE_UTF8
, 0, 
böCﬁlFunc
) ||

824 
	`¸óãCﬁœti⁄
(
db
, "BINARY", 
SQLITE_UTF16BE
, 0, 
böCﬁlFunc
) ||

825 
	`¸óãCﬁœti⁄
(
db
, "BINARY", 
SQLITE_UTF16LE
, 0, 
böCﬁlFunc
) ||

826 (
db
->
pDÊtCﬁl
 = 
	`sqlôe3FödCﬁlSeq
(db, 
SQLITE_UTF8
, "BINARY", 6, 0))==0

828 
	`as£π
–
	`sqlôe3MÆlocFaûed
() );

829 
db
->
magic
 = 
SQLITE_MAGIC_CLOSED
;

830 
›ídb_out
;

834 
	`¸óãCﬁœti⁄
(
db
, "NOCASE", 
SQLITE_UTF8
, 0, 
noˇ£CﬁœtögFunc
);

837 
db
->
pDÊtCﬁl
->
ty≥
 = 
SQLITE_COLL_BINARY
;

838 
pCﬁl
 = 
	`sqlôe3FödCﬁlSeq
(
db
, 
SQLITE_UTF8
, "NOCASE", 6, 0);

839 if–
pCﬁl
 ){

840 
pCﬁl
->
ty≥
 = 
SQLITE_COLL_NOCASE
;

844 
rc
 = 
	`sqlôe3BåìFa˘‹y
(
db
, 
zFûíame
, 0, 
MAX_PAGES
, &db->
aDb
[0].
pBt
);

845 if–
rc
!=
SQLITE_OK
 ){

846 
	`sqlôe3Eº‹
(
db
, 
rc
, 0);

847 
db
->
magic
 = 
SQLITE_MAGIC_CLOSED
;

848 
›ídb_out
;

850 #i‚de‡
SQLITE_OMIT_PARSER


851 
db
->
aDb
[0].
pSchema
 = 
	`sqlôe3SchemaGë
(db->aDb[0].
pBt
);

852 
db
->
aDb
[1].
pSchema
 = 
	`sqlôe3SchemaGë
(0);

855 if–
db
->
aDb
[0].
pSchema
 ){

856 
	`ENC
(
db
Ë
SQLITE_UTF8
;

862 
db
->
aDb
[0].
zName
 = "main";

863 
db
->
aDb
[0].
ß„ty_Àvñ
 = 3;

864 #i‚de‡
SQLITE_OMIT_TEMPDB


865 
db
->
aDb
[1].
zName
 = "temp";

866 
db
->
aDb
[1].
ß„ty_Àvñ
 = 1;

873 if–!
	`sqlôe3MÆlocFaûed
() ){

874 
	`sqlôe3Regi°îBuûtöFun˘i⁄s
(
db
);

875 
	`sqlôe3Eº‹
(
db
, 
SQLITE_OK
, 0);

877 
db
->
magic
 = 
SQLITE_MAGIC_OPEN
;

879 
›ídb_out
:

880 if–
SQLITE_NOMEM
==(
rc
 = 
	`sqlôe3_îrcode
(
db
)) ){

881 
	`sqlôe3_˛o£
(
db
);

882 
db
 = 0;

884 *
µDb
 = 
db
;

885  
	`sqlôe3ApiExô
(0, 
rc
);

886 
	}
}

891 
	$sqlôe3_›í
(

892 c⁄° *
zFûíame
,

893 
sqlôe3
 **
µDb


895  
	`›íD©aba£
(
zFûíame
, 
µDb
);

896 
	}
}

898 #i‚de‡
SQLITE_OMIT_UTF16


902 
	$sqlôe3_›í16
(

903 c⁄° *
zFûíame
,

904 
sqlôe3
 **
µDb


906 c⁄° *
zFûíame8
;

907 
rc
 = 
SQLITE_OK
;

908 
sqlôe3_vÆue
 *
pVÆ
;

910 
	`as£π
–
zFûíame
 );

911 
	`as£π
–
µDb
 );

912 *
µDb
 = 0;

913 
pVÆ
 = 
	`sqlôe3VÆueNew
();

914 
	`sqlôe3VÆueSëSå
(
pVÆ
, -1, 
zFûíame
, 
SQLITE_UTF16NATIVE
, 
SQLITE_STATIC
);

915 
zFûíame8
 = 
	`sqlôe3VÆueText
(
pVÆ
, 
SQLITE_UTF8
);

916 if–
zFûíame8
 ){

917 
rc
 = 
	`›íD©aba£
(
zFûíame8
, 
µDb
);

918 if–
rc
==
SQLITE_OK
 && *
µDb
 ){

919 
rc
 = 
	`sqlôe3_exec
(*
µDb
, "PRAGMAÉncoding = 'UTF-16'", 0, 0, 0);

920 if–
rc
!=
SQLITE_OK
 ){

921 
	`sqlôe3_˛o£
(*
µDb
);

922 *
µDb
 = 0;

926 
	`sqlôe3VÆueFªe
(
pVÆ
);

928  
	`sqlôe3ApiExô
(0, 
rc
);

929 
	}
}

941 
	$sqlôe3_föÆize
(
sqlôe3_°mt
 *
pStmt
){

942 
rc
;

943 if–
pStmt
==0 ){

944 
rc
 = 
SQLITE_OK
;

946 
rc
 = 
	`sqlôe3VdbeFöÆize
((
Vdbe
*)
pStmt
);

948  
rc
;

949 
	}
}

959 
	$sqlôe3_ª£t
(
sqlôe3_°mt
 *
pStmt
){

960 
rc
;

961 if–
pStmt
==0 ){

962 
rc
 = 
SQLITE_OK
;

964 
rc
 = 
	`sqlôe3VdbeRe£t
((
Vdbe
*)
pStmt
);

965 
	`sqlôe3VdbeMakeRódy
((
Vdbe
*)
pStmt
, -1, 0, 0, 0);

967  
rc
;

968 
	}
}

973 
sqlôe3_¸óã_cﬁœti⁄
(

974 
sqlôe3
* 
db
,

975 c⁄° *
zName
,

976 
íc
,

977 * 
pCtx
,

978 (*
xCom∑ª
)(*,,const *,,const *)

980 
rc
;

981 
	`as£π
–!
	`sqlôe3MÆlocFaûed
() );

982 
rc
 = 
	`¸óãCﬁœti⁄
(
db
, 
zName
, 
íc
, 
pCtx
, 
xCom∑ª
);

983  
	`sqlôe3ApiExô
(
db
, 
rc
);

984 
	}
}

986 #i‚de‡
SQLITE_OMIT_UTF16


990 
sqlôe3_¸óã_cﬁœti⁄16
(

991 
sqlôe3
* 
db
,

992 c⁄° *
zName
,

993 
íc
,

994 * 
pCtx
,

995 (*
xCom∑ª
)(*,,const *,,const *)

997 
rc
 = 
SQLITE_OK
;

998 *
zName8
;

999 
	`as£π
–!
	`sqlôe3MÆlocFaûed
() );

1000 
zName8
 = 
	`sqlôe3utf16to8
(
zName
, -1);

1001 if–
zName8
 ){

1002 
rc
 = 
	`¸óãCﬁœti⁄
(
db
, 
zName8
, 
íc
, 
pCtx
, 
xCom∑ª
);

1003 
	`sqlôeFªe
(
zName8
);

1005  
	`sqlôe3ApiExô
(
db
, 
rc
);

1006 
	}
}

1013 
sqlôe3_cﬁœti⁄_√eded
(

1014 
sqlôe3
 *
db
,

1015 *
pCﬁlNìdedArg
,

1016 (*
xCﬁlNìded
)(*,
sqlôe3
*,
eTextRï
,const *)

1018 if–
	`sqlôe3Sa„tyCheck
(
db
) ){

1019  
SQLITE_MISUSE
;

1021 
db
->
xCﬁlNìded
 = xCollNeeded;

1022 
db
->
xCﬁlNìded16
 = 0;

1023 
db
->
pCﬁlNìdedArg
 =ÖCollNeededArg;

1024  
SQLITE_OK
;

1025 
	}
}

1027 #i‚de‡
SQLITE_OMIT_UTF16


1032 
sqlôe3_cﬁœti⁄_√eded16
(

1033 
sqlôe3
 *
db
,

1034 *
pCﬁlNìdedArg
,

1035 (*
xCﬁlNìded16
)(*,
sqlôe3
*,
eTextRï
,const *)

1037 if–
	`sqlôe3Sa„tyCheck
(
db
) ){

1038  
SQLITE_MISUSE
;

1040 
db
->
xCﬁlNìded
 = 0;

1041 
db
->
xCﬁlNìded16
 = xCollNeeded16;

1042 
db
->
pCﬁlNìdedArg
 =ÖCollNeededArg;

1043  
SQLITE_OK
;

1044 
	}
}

1047 #i‚de‡
SQLITE_OMIT_GLOBALRECOVER


1052 
	$sqlôe3_globÆ_ªcovî
(){

1053  
SQLITE_OK
;

1054 
	}
}

1065 
	$sqlôe3_gë_autocommô
(
sqlôe3
 *
db
){

1066  
db
->
autoCommô
;

1067 
	}
}

1069 #ifde‡
SQLITE_DEBUG


1075 
	$sqlôe3C‹ru±
(){

1076  
SQLITE_CORRUPT
;

1077 
	}
}

1081 #i‚de‡
SQLITE_OMIT_SHARED_CACHE


1089 
	$sqlôe3_íabÀ_sh¨ed_ˇche
(
íabÀ
){

1090 
ThªadD©a
 *
pTd
 = 
	`sqlôe3ThªadD©a
();

1091 if–
pTd
 ){

1097 if–
pTd
->
pBåì
 && !
íabÀ
 ){

1098 
	`as£π
–
pTd
->
u£Sh¨edD©a
 );

1099  
SQLITE_MISUSE
;

1102 
pTd
->
u£Sh¨edD©a
 = 
íabÀ
;

1103 
	`sqlôe3Rñó£ThªadD©a
();

1105  
	`sqlôe3ApiExô
(0, 
SQLITE_OK
);

1106 
	}
}

1113 
	$sqlôe3_thªad_˛ónup
(){

1114 
ThªadD©a
 *
pTd
 = 
	`sqlôe3OsThªadS≥cificD©a
(0);

1115 if–
pTd
 ){

1116 
	`mem£t
(
pTd
, 0, (*pTd));

1117 
	`sqlôe3OsThªadS≥cificD©a
(-1);

1119 
	}
}

1125 #ifde‡
SQLITE_ENABLE_COLUMN_METADATA


1126 
	$sqlôe3_èbÀ_cﬁumn_mëad©a
(

1127 
sqlôe3
 *
db
,

1128 c⁄° *
zDbName
,

1129 c⁄° *
zTabÀName
,

1130 c⁄° *
zCﬁumnName
,

1131 c⁄° **
pzD©aTy≥
,

1132 c⁄° **
pzCﬁlSeq
,

1133 *
pNŸNuŒ
,

1134 *
pPrim¨yKey
,

1135 *
pAutoöc


1137 
rc
;

1138 *
zEºMsg
 = 0;

1139 
TabÀ
 *
pTab
 = 0;

1140 
Cﬁumn
 *
pCﬁ
 = 0;

1141 
iCﬁ
;

1143 c⁄° *
zD©aTy≥
 = 0;

1144 c⁄° *
zCﬁlSeq
 = 0;

1145 
nŸnuŒ
 = 0;

1146 
¥im¨ykey
 = 0;

1147 
autoöc
 = 0;

1150 if–
	`sqlôe3Sa„tyOn
(
db
) ){

1151  
SQLITE_MISUSE
;

1153 
rc
 = 
	`sqlôe3Inô
(
db
, &
zEºMsg
);

1154 if–
SQLITE_OK
!=
rc
 ){

1155 
îr‹_out
;

1159 
pTab
 = 
	`sqlôe3FödTabÀ
(
db
, 
zTabÀName
, 
zDbName
);

1160 if–!
pTab
 ||ÖTab->
pSñe˘
 ){

1161 
pTab
 = 0;

1162 
îr‹_out
;

1166 if–
	`sqlôe3IsRowid
(
zCﬁumnName
) ){

1167 
iCﬁ
 = 
pTab
->
iPKey
;

1168 if–
iCﬁ
>=0 ){

1169 
pCﬁ
 = &
pTab
->
aCﬁ
[
iCﬁ
];

1172 
iCﬁ
=0; iCﬁ<
pTab
->
nCﬁ
; iCol++){

1173 
pCﬁ
 = &
pTab
->
aCﬁ
[
iCﬁ
];

1174 if–0==
	`sqlôe3SåICmp
(
pCﬁ
->
zName
, 
zCﬁumnName
) ){

1178 if–
iCﬁ
==
pTab
->
nCﬁ
 ){

1179 
pTab
 = 0;

1180 
îr‹_out
;

1194 if–
pCﬁ
 ){

1195 
zD©aTy≥
 = 
pCﬁ
->
zTy≥
;

1196 
zCﬁlSeq
 = 
pCﬁ
->
zCﬁl
;

1197 
nŸnuŒ
 = (
pCﬁ
->
nŸNuŒ
?1:0);

1198 
¥im¨ykey
 = (
pCﬁ
->
isPrimKey
?1:0);

1199 
autoöc
 = ((
pTab
->
iPKey
==
iCﬁ
 &&ÖTab->
autoInc
)?1:0);

1201 
zD©aTy≥
 = "INTEGER";

1202 
¥im¨ykey
 = 1;

1204 if–!
zCﬁlSeq
 ){

1205 
zCﬁlSeq
 = "BINARY";

1208 
îr‹_out
:

1209 if–
	`sqlôe3Sa„tyOff
(
db
) ){

1210 
rc
 = 
SQLITE_MISUSE
;

1217 if–
pzD©aTy≥
 ) *pzD©aTy≥ = 
zD©aTy≥
;

1218 if–
pzCﬁlSeq
 ) *pzCﬁlSeq = 
zCﬁlSeq
;

1219 if–
pNŸNuŒ
 ) *pNŸNuŒ = 
nŸnuŒ
;

1220 if–
pPrim¨yKey
 ) *pPrim¨yKey = 
¥im¨ykey
;

1221 if–
pAutoöc
 ) *pAutoö¯
autoöc
;

1223 if–
SQLITE_OK
==
rc
 && !
pTab
 ){

1224 
	`sqlôe3SëSåög
(&
zEºMsg
, "nÿsuchÅabÀ cﬁumn: ", 
zTabÀName
, ".",

1225 
zCﬁumnName
, 0);

1226 
rc
 = 
SQLITE_ERROR
;

1228 
	`sqlôe3Eº‹
(
db
, 
rc
, (
zEºMsg
?"%s":0), zErrMsg);

1229 
	`sqlôeFªe
(
zEºMsg
);

1230  
	`sqlôe3ApiExô
(
db
, 
rc
);

1231 
	}
}

	@md5.c

31 
	~<t˛.h
>

32 
	~<°rög.h
>

33 
	~"sqlôe3.h
"

43 #i‚de‡
uöt32


44 
	#uöt32
 

	)

47 
	sC⁄ãxt
 {

48 
uöt32
 
	mbuf
[4];

49 
uöt32
 
	mbôs
[2];

50 
	mö
[64];

52 
	tMD5C⁄ãxt
[88];

57 
	$byãRevî£
 (*
buf
, 
l⁄gs
){

58 
uöt32
 
t
;

60 
t
 = (
uöt32
)(()
buf
[3]<<8 | buf[2]) << 16 |

61 (()
buf
[1]<<8 | buf[0]);

62 *(
uöt32
 *)
buf
 = 
t
;

63 
buf
 += 4;

64 } --
l⁄gs
);

65 
	}
}

69 
	#F1
(
x
, 
y
, 
z
Ë(z ^ (x & (y ^ z)))

	)

70 
	#F2
(
x
, 
y
, 
z
Ë
	`F1
(z, x, y)

	)

71 
	#F3
(
x
, 
y
, 
z
Ë(x ^ y ^ z)

	)

72 
	#F4
(
x
, 
y
, 
z
Ë(y ^ (x | ~z))

	)

75 
	#MD5STEP
(
f
, 
w
, 
x
, 
y
, 
z
, 
d©a
, 
s
) \

76 –
w
 +
	`f
(
x
, 
y
, 
z
Ë+ 
d©a
, w = w<<
s
 | w>>(32-s), w +x )

	)

83 
	$MD5Tønsf‹m
(
uöt32
 
buf
[4], c⁄° uöt32 
ö
[16]){

84 
uöt32
 
a
, 
b
, 
c
, 
d
;

86 
a
 = 
buf
[0];

87 
b
 = 
buf
[1];

88 
c
 = 
buf
[2];

89 
d
 = 
buf
[3];

91 
	`MD5STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 0]+0xd76aa478, 7);

92 
	`MD5STEP
(
F1
, 
d
, 
a
, 
b
, 
c
, 
ö
[ 1]+0xe8c7b756, 12);

93 
	`MD5STEP
(
F1
, 
c
, 
d
, 
a
, 
b
, 
ö
[ 2]+0x242070db, 17);

94 
	`MD5STEP
(
F1
, 
b
, 
c
, 
d
, 
a
, 
ö
[ 3]+0xc1bdceee, 22);

95 
	`MD5STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 4]+0xf57c0faf, 7);

96 
	`MD5STEP
(
F1
, 
d
, 
a
, 
b
, 
c
, 
ö
[ 5]+0x4787c62a, 12);

97 
	`MD5STEP
(
F1
, 
c
, 
d
, 
a
, 
b
, 
ö
[ 6]+0xa8304613, 17);

98 
	`MD5STEP
(
F1
, 
b
, 
c
, 
d
, 
a
, 
ö
[ 7]+0xfd469501, 22);

99 
	`MD5STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 8]+0x698098d8, 7);

100 
	`MD5STEP
(
F1
, 
d
, 
a
, 
b
, 
c
, 
ö
[ 9]+0x8b44f7af, 12);

101 
	`MD5STEP
(
F1
, 
c
, 
d
, 
a
, 
b
, 
ö
[10]+0xffff5bb1, 17);

102 
	`MD5STEP
(
F1
, 
b
, 
c
, 
d
, 
a
, 
ö
[11]+0x895cd7be, 22);

103 
	`MD5STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
ö
[12]+0x6b901122, 7);

104 
	`MD5STEP
(
F1
, 
d
, 
a
, 
b
, 
c
, 
ö
[13]+0xfd987193, 12);

105 
	`MD5STEP
(
F1
, 
c
, 
d
, 
a
, 
b
, 
ö
[14]+0xa679438e, 17);

106 
	`MD5STEP
(
F1
, 
b
, 
c
, 
d
, 
a
, 
ö
[15]+0x49b40821, 22);

108 
	`MD5STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 1]+0xf61e2562, 5);

109 
	`MD5STEP
(
F2
, 
d
, 
a
, 
b
, 
c
, 
ö
[ 6]+0xc040b340, 9);

110 
	`MD5STEP
(
F2
, 
c
, 
d
, 
a
, 
b
, 
ö
[11]+0x265e5a51, 14);

111 
	`MD5STEP
(
F2
, 
b
, 
c
, 
d
, 
a
, 
ö
[ 0]+0xe9b6c7aa, 20);

112 
	`MD5STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 5]+0xd62f105d, 5);

113 
	`MD5STEP
(
F2
, 
d
, 
a
, 
b
, 
c
, 
ö
[10]+0x02441453, 9);

114 
	`MD5STEP
(
F2
, 
c
, 
d
, 
a
, 
b
, 
ö
[15]+0xd8a1e681, 14);

115 
	`MD5STEP
(
F2
, 
b
, 
c
, 
d
, 
a
, 
ö
[ 4]+0xe7d3fbc8, 20);

116 
	`MD5STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 9]+0x21e1cde6, 5);

117 
	`MD5STEP
(
F2
, 
d
, 
a
, 
b
, 
c
, 
ö
[14]+0xc33707d6, 9);

118 
	`MD5STEP
(
F2
, 
c
, 
d
, 
a
, 
b
, 
ö
[ 3]+0xf4d50d87, 14);

119 
	`MD5STEP
(
F2
, 
b
, 
c
, 
d
, 
a
, 
ö
[ 8]+0x455a14ed, 20);

120 
	`MD5STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
ö
[13]+0xa9e3e905, 5);

121 
	`MD5STEP
(
F2
, 
d
, 
a
, 
b
, 
c
, 
ö
[ 2]+0xfcefa3f8, 9);

122 
	`MD5STEP
(
F2
, 
c
, 
d
, 
a
, 
b
, 
ö
[ 7]+0x676f02d9, 14);

123 
	`MD5STEP
(
F2
, 
b
, 
c
, 
d
, 
a
, 
ö
[12]+0x8d2a4c8a, 20);

125 
	`MD5STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 5]+0xfffa3942, 4);

126 
	`MD5STEP
(
F3
, 
d
, 
a
, 
b
, 
c
, 
ö
[ 8]+0x8771f681, 11);

127 
	`MD5STEP
(
F3
, 
c
, 
d
, 
a
, 
b
, 
ö
[11]+0x6d9d6122, 16);

128 
	`MD5STEP
(
F3
, 
b
, 
c
, 
d
, 
a
, 
ö
[14]+0xfde5380c, 23);

129 
	`MD5STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 1]+0xa4beea44, 4);

130 
	`MD5STEP
(
F3
, 
d
, 
a
, 
b
, 
c
, 
ö
[ 4]+0x4bdecfa9, 11);

131 
	`MD5STEP
(
F3
, 
c
, 
d
, 
a
, 
b
, 
ö
[ 7]+0xf6bb4b60, 16);

132 
	`MD5STEP
(
F3
, 
b
, 
c
, 
d
, 
a
, 
ö
[10]+0xbebfbc70, 23);

133 
	`MD5STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
ö
[13]+0x289b7ec6, 4);

134 
	`MD5STEP
(
F3
, 
d
, 
a
, 
b
, 
c
, 
ö
[ 0]+0xeaa127fa, 11);

135 
	`MD5STEP
(
F3
, 
c
, 
d
, 
a
, 
b
, 
ö
[ 3]+0xd4ef3085, 16);

136 
	`MD5STEP
(
F3
, 
b
, 
c
, 
d
, 
a
, 
ö
[ 6]+0x04881d05, 23);

137 
	`MD5STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 9]+0xd9d4d039, 4);

138 
	`MD5STEP
(
F3
, 
d
, 
a
, 
b
, 
c
, 
ö
[12]+0xe6db99e5, 11);

139 
	`MD5STEP
(
F3
, 
c
, 
d
, 
a
, 
b
, 
ö
[15]+0x1fa27cf8, 16);

140 
	`MD5STEP
(
F3
, 
b
, 
c
, 
d
, 
a
, 
ö
[ 2]+0xc4ac5665, 23);

142 
	`MD5STEP
(
F4
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 0]+0xf4292244, 6);

143 
	`MD5STEP
(
F4
, 
d
, 
a
, 
b
, 
c
, 
ö
[ 7]+0x432aff97, 10);

144 
	`MD5STEP
(
F4
, 
c
, 
d
, 
a
, 
b
, 
ö
[14]+0xab9423a7, 15);

145 
	`MD5STEP
(
F4
, 
b
, 
c
, 
d
, 
a
, 
ö
[ 5]+0xfc93a039, 21);

146 
	`MD5STEP
(
F4
, 
a
, 
b
, 
c
, 
d
, 
ö
[12]+0x655b59c3, 6);

147 
	`MD5STEP
(
F4
, 
d
, 
a
, 
b
, 
c
, 
ö
[ 3]+0x8f0ccc92, 10);

148 
	`MD5STEP
(
F4
, 
c
, 
d
, 
a
, 
b
, 
ö
[10]+0xffeff47d, 15);

149 
	`MD5STEP
(
F4
, 
b
, 
c
, 
d
, 
a
, 
ö
[ 1]+0x85845dd1, 21);

150 
	`MD5STEP
(
F4
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 8]+0x6fa87e4f, 6);

151 
	`MD5STEP
(
F4
, 
d
, 
a
, 
b
, 
c
, 
ö
[15]+0xfe2ce6e0, 10);

152 
	`MD5STEP
(
F4
, 
c
, 
d
, 
a
, 
b
, 
ö
[ 6]+0xa3014314, 15);

153 
	`MD5STEP
(
F4
, 
b
, 
c
, 
d
, 
a
, 
ö
[13]+0x4e0811a1, 21);

154 
	`MD5STEP
(
F4
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 4]+0xf7537e82, 6);

155 
	`MD5STEP
(
F4
, 
d
, 
a
, 
b
, 
c
, 
ö
[11]+0xbd3af235, 10);

156 
	`MD5STEP
(
F4
, 
c
, 
d
, 
a
, 
b
, 
ö
[ 2]+0x2ad7d2bb, 15);

157 
	`MD5STEP
(
F4
, 
b
, 
c
, 
d
, 
a
, 
ö
[ 9]+0xeb86d391, 21);

159 
buf
[0] +
a
;

160 
buf
[1] +
b
;

161 
buf
[2] +
c
;

162 
buf
[3] +
d
;

163 
	}
}

169 
	$MD5Inô
(
MD5C⁄ãxt
 *
pCtx
){

170 
C⁄ãxt
 *
˘x
 = (C⁄ãxà*)
pCtx
;

171 
˘x
->
buf
[0] = 0x67452301;

172 
˘x
->
buf
[1] = 0xefcdab89;

173 
˘x
->
buf
[2] = 0x98badcfe;

174 
˘x
->
buf
[3] = 0x10325476;

175 
˘x
->
bôs
[0] = 0;

176 
˘x
->
bôs
[1] = 0;

177 
	}
}

184 
	$MD5Upd©e
(
MD5C⁄ãxt
 *
pCtx
, c⁄° *
buf
, 
Àn
){

185 
C⁄ãxt
 *
˘x
 = (C⁄ãxà*)
pCtx
;

186 
uöt32
 
t
;

190 
t
 = 
˘x
->
bôs
[0];

191 i‡((
˘x
->
bôs
[0] = 
t
 + ((
uöt32
)
Àn
 << 3)) <Å)

192 
˘x
->
bôs
[1]++;

193 
˘x
->
bôs
[1] +
Àn
 >> 29;

195 
t
 = (t >> 3) & 0x3f;

199 i‡–
t
 ) {

200 *
p
 = (*)
˘x
->
ö
 + 
t
;

202 
t
 = 64-t;

203 i‡(
Àn
 < 
t
) {

204 
	`mem˝y
(
p
, 
buf
, 
Àn
);

207 
	`mem˝y
(
p
, 
buf
, 
t
);

208 
	`byãRevî£
(
˘x
->
ö
, 16);

209 
	`MD5Tønsf‹m
(
˘x
->
buf
, (
uöt32
 *)˘x->
ö
);

210 
buf
 +
t
;

211 
Àn
 -
t
;

216 
Àn
 >= 64) {

217 
	`mem˝y
(
˘x
->
ö
, 
buf
, 64);

218 
	`byãRevî£
(
˘x
->
ö
, 16);

219 
	`MD5Tønsf‹m
(
˘x
->
buf
, (
uöt32
 *)˘x->
ö
);

220 
buf
 += 64;

221 
Àn
 -= 64;

226 
	`mem˝y
(
˘x
->
ö
, 
buf
, 
Àn
);

227 
	}
}

233 
	$MD5FöÆ
(
dige°
[16], 
MD5C⁄ãxt
 *
pCtx
){

234 
C⁄ãxt
 *
˘x
 = (C⁄ãxà*)
pCtx
;

235 
cou¡
;

236 *
p
;

239 
cou¡
 = (
˘x
->
bôs
[0] >> 3) & 0x3F;

243 
p
 = 
˘x
->
ö
 + 
cou¡
;

244 *
p
++ = 0x80;

247 
cou¡
 = 64 - 1 - count;

250 i‡(
cou¡
 < 8) {

252 
	`mem£t
(
p
, 0, 
cou¡
);

253 
	`byãRevî£
(
˘x
->
ö
, 16);

254 
	`MD5Tønsf‹m
(
˘x
->
buf
, (
uöt32
 *)˘x->
ö
);

257 
	`mem£t
(
˘x
->
ö
, 0, 56);

260 
	`mem£t
(
p
, 0, 
cou¡
-8);

262 
	`byãRevî£
(
˘x
->
ö
, 14);

265 ((
uöt32
 *)
˘x
->
ö
)[ 14 ] = ctx->
bôs
[0];

266 ((
uöt32
 *)
˘x
->
ö
)[ 15 ] = ctx->
bôs
[1];

268 
	`MD5Tønsf‹m
(
˘x
->
buf
, (
uöt32
 *)˘x->
ö
);

269 
	`byãRevî£
((*)
˘x
->
buf
, 4);

270 
	`mem˝y
(
dige°
, 
˘x
->
buf
, 16);

271 
	`mem£t
(
˘x
, 0, (ctx));

272 
	}
}

280 
	$Dige°ToBa£16
(*
dige°
, *
zBuf
){

281 c⁄° 
zEncode
[] = "0123456789abcdef";

282 
i
, 
j
;

284 
j
=
i
=0; i<16; i++){

285 
a
 = 
dige°
[
i
];

286 
zBuf
[
j
++] = 
zEncode
[(
a
>>4)&0xf];

287 
zBuf
[
j
++] = 
zEncode
[
a
 & 0xf];

289 
zBuf
[
j
] = 0;

290 
	}
}

296 
	$md5_cmd
(*
cd
, 
T˛_I¡îp
 *
öãΩ
, 
¨gc
, c⁄° **
¨gv
){

297 
MD5C⁄ãxt
 
˘x
;

298 
dige°
[16];

300 if–
¨gc
!=2 ){

301 
	`T˛_AµídResu…
(
öãΩ
,"wr⁄g #árgs: should bê\"", 
¨gv
[0],

303  
TCL_ERROR
;

305 
	`MD5Inô
(&
˘x
);

306 
	`MD5Upd©e
(&
˘x
, (*)
¨gv
[1], ()
	`°æí
(argv[1]));

307 
	`MD5FöÆ
(
dige°
, &
˘x
);

308 
	`Dige°ToBa£16
(
dige°
, 
öãΩ
->
ªsu…
);

309  
TCL_OK
;

310 
	}
}

316 
	$md5fûe_cmd
(*
cd
, 
T˛_I¡îp
*
öãΩ
, 
¨gc
, c⁄° **
¨gv
){

317 
FILE
 *
ö
;

318 
MD5C⁄ãxt
 
˘x
;

319 
dige°
[16];

320 
zBuf
[10240];

322 if–
¨gc
!=2 ){

323 
	`T˛_AµídResu…
(
öãΩ
,"wr⁄g #árgs: should bê\"", 
¨gv
[0],

325  
TCL_ERROR
;

327 
ö
 = 
	`f›í
(
¨gv
[1],"rb");

328 if–
ö
==0 ){

329 
	`T˛_AµídResu…
(
öãΩ
,"u«bÀÅÿ›í fûê\"", 
¨gv
[1],

331  
TCL_ERROR
;

333 
	`MD5Inô
(&
˘x
);

335 
n
;

336 
n
 = 
	`‰ód
(
zBuf
, 1, (zBuf), 
ö
);

337 if–
n
<=0 ) ;

338 
	`MD5Upd©e
(&
˘x
, (*)
zBuf
, ()
n
);

340 
	`f˛o£
(
ö
);

341 
	`MD5FöÆ
(
dige°
, &
˘x
);

342 
	`Dige°ToBa£16
(
dige°
, 
öãΩ
->
ªsu…
);

343  
TCL_OK
;

344 
	}
}

349 
	$Md5_Inô
(
T˛_I¡îp
 *
öãΩ
){

350 
	`T˛_Cª©eComm™d
(
öãΩ
, "md5", (
T˛_CmdProc
*)
md5_cmd
, 0, 0);

351 
	`T˛_Cª©eComm™d
(
öãΩ
, "md5fûe", (
T˛_CmdProc
*)
md5fûe_cmd
, 0, 0);

352  
TCL_OK
;

353 
	}
}

359 
	$md5°ï
(
sqlôe3_c⁄ãxt
 *
c⁄ãxt
, 
¨gc
, 
sqlôe3_vÆue
 **
¨gv
){

360 
MD5C⁄ãxt
 *
p
;

361 
i
;

362 if–
¨gc
<1 ) ;

363 
p
 = 
	`sqlôe3_aggªg©e_c⁄ãxt
(
c⁄ãxt
, (*p));

364 if–
p
==0 ) ;

365 if–
	`sqlôe3_aggªg©e_cou¡
(
c⁄ãxt
)==1 ){

366 
	`MD5Inô
(
p
);

368 
i
=0; i<
¨gc
; i++){

369 c⁄° *
zD©a
 = (*)
	`sqlôe3_vÆue_ãxt
(
¨gv
[
i
]);

370 if–
zD©a
 ){

371 
	`MD5Upd©e
(
p
, (*)
zD©a
, 
	`°æí
(zData));

374 
	}
}

375 
	$md5föÆize
(
sqlôe3_c⁄ãxt
 *
c⁄ãxt
){

376 
MD5C⁄ãxt
 *
p
;

377 
dige°
[16];

378 
zBuf
[33];

379 
p
 = 
	`sqlôe3_aggªg©e_c⁄ãxt
(
c⁄ãxt
, (*p));

380 
	`MD5FöÆ
(
dige°
,
p
);

381 
	`Dige°ToBa£16
(
dige°
, 
zBuf
);

382 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, 
zBuf
, -1, 
SQLITE_TRANSIENT
);

383 
	}
}

384 
	$Md5_Regi°î
(
sqlôe3
 *
db
){

385 
	`sqlôe3_¸óã_fun˘i⁄
(
db
, "md5sum", -1, 
SQLITE_UTF8
, 0, 0,

386 
md5°ï
, 
md5föÆize
);

387 
	}
}

	@os.c

16 
	#_SQLITE_OS_C_
 1

	)

17 
	~"sqlôeI¡.h
"

18 
	~"os.h
"

26 
	$sqlôe3OsClo£
(
OsFûe
 **
pId
){

27 
OsFûe
 *
id
;

28 if–
pId
!=0 && (
id
 = *pId)!=0 ){

29  
id
->
pMëhod
->
	`xClo£
(
pId
);

31  
SQLITE_OK
;

33 
	}
}

34 
	$sqlôe3OsO≥nDúe˘‹y
(
OsFûe
 *
id
, c⁄° *
zName
){

35  
id
->
pMëhod
->
	`xO≥nDúe˘‹y
(id, 
zName
);

36 
	}
}

37 
	$sqlôe3OsRód
(
OsFûe
 *
id
, *
pBuf
, 
amt
){

38  
id
->
pMëhod
->
	`xRód
(id, 
pBuf
, 
amt
);

39 
	}
}

40 
	$sqlôe3OsWrôe
(
OsFûe
 *
id
, c⁄° *
pBuf
, 
amt
){

41  
id
->
pMëhod
->
	`xWrôe
(id, 
pBuf
, 
amt
);

42 
	}
}

43 
	$sqlôe3OsSìk
(
OsFûe
 *
id
, 
i64
 
off£t
){

44  
id
->
pMëhod
->
	`xSìk
(id, 
off£t
);

45 
	}
}

46 
	$sqlôe3OsTrunˇã
(
OsFûe
 *
id
, 
i64
 
size
){

47  
id
->
pMëhod
->
	`xTrunˇã
(id, 
size
);

48 
	}
}

49 
	$sqlôe3OsSync
(
OsFûe
 *
id
, 
fuŒsync
){

50  
id
->
pMëhod
->
	`xSync
(id, 
fuŒsync
);

51 
	}
}

52 
	$sqlôe3OsSëFuŒSync
(
OsFûe
 *
id
, 
vÆue
){

53 
id
->
pMëhod
->
	`xSëFuŒSync
(id, 
vÆue
);

54 
	}
}

55 #i‡
deföed
(
SQLITE_TEST
Ë|| deföed(
SQLITE_DEBUG
)

59 
	$sqlôe3OsFûeH™dÀ
(
OsFûe
 *
id
){

60  
id
->
pMëhod
->
	`xFûeH™dÀ
(id);

61 
	}
}

63 
	$sqlôe3OsFûeSize
(
OsFûe
 *
id
, 
i64
 *
pSize
){

64  
id
->
pMëhod
->
	`xFûeSize
(id, 
pSize
);

65 
	}
}

66 
	$sqlôe3OsLock
(
OsFûe
 *
id
, 
lockTy≥
){

67  
id
->
pMëhod
->
	`xLock
(id, 
lockTy≥
);

68 
	}
}

69 
	$sqlôe3OsU∆ock
(
OsFûe
 *
id
, 
lockTy≥
){

70  
id
->
pMëhod
->
	`xU∆ock
(id, 
lockTy≥
);

71 
	}
}

72 
	$sqlôe3OsLockSèã
(
OsFûe
 *
id
){

73  
id
->
pMëhod
->
	`xLockSèã
(id);

74 
	}
}

75 
	$sqlôe3OsCheckRe£rvedLock
(
OsFûe
 *
id
){

76  
id
->
pMëhod
->
	`xCheckRe£rvedLock
(id);

77 
	}
}

79 #ifde‡
SQLITE_ENABLE_REDEF_IO


89 
sqlôe3OsVtbl
 *
	$sqlôe3_os_swôch
(){

90  &
sqlôe3Os
;

91 
	}
}

	@os.h

17 #i‚de‡
_SQLITE_OS_H_


18 
	#_SQLITE_OS_H_


	)

24 #i‡!
deföed
(
OS_UNIX
Ë&& !deföed(
OS_OTHER
)

25 
	#OS_OTHER
 0

	)

26 #i‚de‡
OS_WIN


27 #i‡
deföed
(
_WIN32
Ë|| deföed(
WIN32
Ë|| deföed(
__CYGWIN__
Ë|| deföed(
__MINGW32__
Ë|| deföed(
__BORLANDC__
)

28 
	#OS_WIN
 1

	)

29 
	#OS_UNIX
 0

	)

31 
	#OS_WIN
 0

	)

32 
	#OS_UNIX
 1

	)

35 
	#OS_UNIX
 0

	)

38 #i‚de‡
OS_WIN


39 
	#OS_WIN
 0

	)

47 #i‡
OS_WIN


48 
	~<wödows.h
>

49 
	#SQLITE_TEMPNAME_SIZE
 (
MAX_PATH
+50)

	)

51 
	#SQLITE_TEMPNAME_SIZE
 200

	)

57 #i‚de‡
SET_FULLSYNC


58 
	#SET_FULLSYNC
(
x
,
y
)

	)

70 #i‚de‡
TEMP_FILE_PREFIX


71 
	#TEMP_FILE_PREFIX
 "sqlôe_"

	)

77 #i‡
OS_UNIX


78 
	#sqlôe3OsO≥nRódWrôe
 
sqlôe3UnixO≥nRódWrôe


	)

79 
	#sqlôe3OsO≥nEx˛usive
 
sqlôe3UnixO≥nEx˛usive


	)

80 
	#sqlôe3OsO≥nRódO∆y
 
sqlôe3UnixO≥nRódO∆y


	)

81 
	#sqlôe3OsDñëe
 
sqlôe3UnixDñëe


	)

82 
	#sqlôe3OsFûeExi°s
 
sqlôe3UnixFûeExi°s


	)

83 
	#sqlôe3OsFuŒP©h«me
 
sqlôe3UnixFuŒP©h«me


	)

84 
	#sqlôe3OsIsDúWrôabÀ
 
sqlôe3UnixIsDúWrôabÀ


	)

85 
	#sqlôe3OsSyncDúe˘‹y
 
sqlôe3UnixSyncDúe˘‹y


	)

86 
	#sqlôe3OsTempFûeName
 
sqlôe3UnixTempFûeName


	)

87 
	#sqlôe3OsR™domSìd
 
sqlôe3UnixR™domSìd


	)

88 
	#sqlôe3OsSÀï
 
sqlôe3UnixSÀï


	)

89 
	#sqlôe3OsCuºítTime
 
sqlôe3UnixCuºítTime


	)

90 
	#sqlôe3OsE¡îMuãx
 
sqlôe3UnixE¡îMuãx


	)

91 
	#sqlôe3OsLóveMuãx
 
sqlôe3UnixLóveMuãx


	)

92 
	#sqlôe3OsInMuãx
 
sqlôe3UnixInMuãx


	)

93 
	#sqlôe3OsThªadS≥cificD©a
 
sqlôe3UnixThªadS≥cificD©a


	)

94 
	#sqlôe3OsMÆloc
 
sqlôe3GíîicMÆloc


	)

95 
	#sqlôe3OsRóŒoc
 
sqlôe3GíîicRóŒoc


	)

96 
	#sqlôe3OsFªe
 
sqlôe3GíîicFªe


	)

97 
	#sqlôe3OsAŒoˇti⁄Size
 
sqlôe3GíîicAŒoˇti⁄Size


	)

99 #i‡
OS_WIN


100 
	#sqlôe3OsO≥nRódWrôe
 
sqlôe3WöO≥nRódWrôe


	)

101 
	#sqlôe3OsO≥nEx˛usive
 
sqlôe3WöO≥nEx˛usive


	)

102 
	#sqlôe3OsO≥nRódO∆y
 
sqlôe3WöO≥nRódO∆y


	)

103 
	#sqlôe3OsDñëe
 
sqlôe3WöDñëe


	)

104 
	#sqlôe3OsFûeExi°s
 
sqlôe3WöFûeExi°s


	)

105 
	#sqlôe3OsFuŒP©h«me
 
sqlôe3WöFuŒP©h«me


	)

106 
	#sqlôe3OsIsDúWrôabÀ
 
sqlôe3WöIsDúWrôabÀ


	)

107 
	#sqlôe3OsSyncDúe˘‹y
 
sqlôe3WöSyncDúe˘‹y


	)

108 
	#sqlôe3OsTempFûeName
 
sqlôe3WöTempFûeName


	)

109 
	#sqlôe3OsR™domSìd
 
sqlôe3WöR™domSìd


	)

110 
	#sqlôe3OsSÀï
 
sqlôe3WöSÀï


	)

111 
	#sqlôe3OsCuºítTime
 
sqlôe3WöCuºítTime


	)

112 
	#sqlôe3OsE¡îMuãx
 
sqlôe3WöE¡îMuãx


	)

113 
	#sqlôe3OsLóveMuãx
 
sqlôe3WöLóveMuãx


	)

114 
	#sqlôe3OsInMuãx
 
sqlôe3WöInMuãx


	)

115 
	#sqlôe3OsThªadS≥cificD©a
 
sqlôe3WöThªadS≥cificD©a


	)

116 
	#sqlôe3OsMÆloc
 
sqlôe3GíîicMÆloc


	)

117 
	#sqlôe3OsRóŒoc
 
sqlôe3GíîicRóŒoc


	)

118 
	#sqlôe3OsFªe
 
sqlôe3GíîicFªe


	)

119 
	#sqlôe3OsAŒoˇti⁄Size
 
sqlôe3GíîicAŒoˇti⁄Size


	)

127 #i‡
OS_OTHER


128 
	~"os_Ÿhî.h
"

136 
OsFûe
 
	tOsFûe
;

137 
IoMëhod
 
	tIoMëhod
;

143 
	sIoMëhod
 {

144 (*
	mxClo£
)(
	mOsFûe
**);

145 (*
	mxO≥nDúe˘‹y
)(
	mOsFûe
*, const *);

146 (*
	mxRód
)(
	mOsFûe
*, *, 
	mamt
);

147 (*
	mxWrôe
)(
	mOsFûe
*, c⁄° *, 
	mamt
);

148 (*
	mxSìk
)(
	mOsFûe
*, 
i64
 
	moff£t
);

149 (*
	mxTrunˇã
)(
	mOsFûe
*, 
i64
 
	msize
);

150 (*
	mxSync
)(
	mOsFûe
*, );

151 (*
	mxSëFuŒSync
)(
OsFûe
 *
	mid
, 
	m£âög
);

152 (*
	mxFûeH™dÀ
)(
OsFûe
 *
	mid
);

153 (*
	mxFûeSize
)(
	mOsFûe
*, 
i64
 *
	mpSize
);

154 (*
	mxLock
)(
	mOsFûe
*, );

155 (*
	mxU∆ock
)(
	mOsFûe
*, );

156 (*
	mxLockSèã
)(
OsFûe
 *
	mid
);

157 (*
	mxCheckRe£rvedLock
)(
OsFûe
 *
	mid
);

168 
	sOsFûe
 {

169 
IoMëhod
 c⁄° *
	mpMëhod
;

189 
	#NO_LOCK
 0

	)

190 
	#SHARED_LOCK
 1

	)

191 
	#RESERVED_LOCK
 2

	)

192 
	#PENDING_LOCK
 3

	)

193 
	#EXCLUSIVE_LOCK
 4

	)

252 #i‚de‡
SQLITE_TEST


253 
	#PENDING_BYTE
 0x40000000

	)

255 
sqlôe3_≥ndög_byã
;

256 
	#PENDING_BYTE
 
sqlôe3_≥ndög_byã


	)

259 
	#RESERVED_BYTE
 (
PENDING_BYTE
+1)

	)

260 
	#SHARED_FIRST
 (
PENDING_BYTE
+2)

	)

261 
	#SHARED_SIZE
 510

	)

266 
sqlôe3OsClo£
(
OsFûe
**);

267 
sqlôe3OsO≥nDúe˘‹y
(
OsFûe
*, const *);

268 
sqlôe3OsRód
(
OsFûe
*, *, 
amt
);

269 
sqlôe3OsWrôe
(
OsFûe
*, c⁄° *, 
amt
);

270 
sqlôe3OsSìk
(
OsFûe
*, 
i64
 
off£t
);

271 
sqlôe3OsTrunˇã
(
OsFûe
*, 
i64
 
size
);

272 
sqlôe3OsSync
(
OsFûe
*, );

273 
sqlôe3OsSëFuŒSync
(
OsFûe
 *
id
, 
£âög
);

274 
sqlôe3OsFûeH™dÀ
(
OsFûe
 *
id
);

275 
sqlôe3OsFûeSize
(
OsFûe
*, 
i64
 *
pSize
);

276 
sqlôe3OsLock
(
OsFûe
*, );

277 
sqlôe3OsU∆ock
(
OsFûe
*, );

278 
sqlôe3OsLockSèã
(
OsFûe
 *
id
);

279 
sqlôe3OsCheckRe£rvedLock
(
OsFûe
 *
id
);

280 
sqlôe3OsO≥nRódWrôe
(c⁄° *, 
OsFûe
**, *);

281 
sqlôe3OsO≥nEx˛usive
(c⁄° *, 
OsFûe
**, );

282 
sqlôe3OsO≥nRódO∆y
(c⁄° *, 
OsFûe
**);

283 
sqlôe3OsDñëe
(const *);

284 
sqlôe3OsFûeExi°s
(const *);

285 *
sqlôe3OsFuŒP©h«me
(const *);

286 
sqlôe3OsIsDúWrôabÀ
(*);

287 
sqlôe3OsSyncDúe˘‹y
(const *);

288 
sqlôe3OsTempFûeName
(*);

289 
sqlôe3OsR™domSìd
(*);

290 
sqlôe3OsSÀï
(
ms
);

291 
sqlôe3OsCuºítTime
(*);

292 
sqlôe3OsE¡îMuãx
();

293 
sqlôe3OsLóveMuãx
();

294 
sqlôe3OsInMuãx
();

295 
ThªadD©a
 *
sqlôe3OsThªadS≥cificD©a
();

296 *
sqlôe3OsMÆloc
();

297 *
sqlôe3OsRóŒoc
(*, );

298 
sqlôe3OsFªe
(*);

299 
sqlôe3OsAŒoˇti⁄Size
(*);

310 #ifde‡
SQLITE_ENABLE_REDEF_IO


319 
	ssqlôe3OsVtbl
 {

320 (*
	mxO≥nRódWrôe
)(c⁄° *, 
	mOsFûe
**, *);

321 (*
	mxO≥nEx˛usive
)(c⁄° *, 
	mOsFûe
**, );

322 (*
	mxO≥nRódO∆y
)(c⁄° *, 
	mOsFûe
**);

324 (*
	mxDñëe
)(const *);

325 (*
	mxFûeExi°s
)(const *);

326 *(*
	mxFuŒP©h«me
)(const *);

327 (*
	mxIsDúWrôabÀ
)(*);

328 (*
	mxSyncDúe˘‹y
)(const *);

329 (*
	mxTempFûeName
)(*);

331 (*
	mxR™domSìd
)(*);

332 (*
	mxSÀï
)(
	mms
);

333 (*
	mxCuºítTime
)(*);

335 (*
	mxE¡îMuãx
)();

336 (*
	mxLóveMuãx
)();

337 (*
	mxInMuãx
)();

338 
	mThªadD©a
 *(*
	mxThªadS≥cificD©a
)();

340 *(*
	mxMÆloc
)();

341 *(*
	mxRóŒoc
)(*, );

342 (*
	mxFªe
)(*);

343 (*
	mxAŒoˇti⁄Size
)(*);

349 #ifde‡
SQLITE_OMIT_DISKIO


350 
	#IF_DISKIO
(
X
Ë0

	)

352 
	#IF_DISKIO
(
X
Ë
	)
X

355 #ifde‡
_SQLITE_OS_C_


359 
sqlôe3OsVtbl
 
	gsqlôe3Os
 = {

360 
IF_DISKIO
–
sqlôe3OsO≥nRódWrôe
 ),

361 
IF_DISKIO
–
sqlôe3OsO≥nEx˛usive
 ),

362 
IF_DISKIO
–
sqlôe3OsO≥nRódO∆y
 ),

363 
IF_DISKIO
–
sqlôe3OsDñëe
 ),

364 
IF_DISKIO
–
sqlôe3OsFûeExi°s
 ),

365 
IF_DISKIO
–
sqlôe3OsFuŒP©h«me
 ),

366 
IF_DISKIO
–
sqlôe3OsIsDúWrôabÀ
 ),

367 
IF_DISKIO
–
sqlôe3OsSyncDúe˘‹y
 ),

368 
IF_DISKIO
–
sqlôe3OsTempFûeName
 ),

369 
sqlôe3OsR™domSìd
,

370 
sqlôe3OsSÀï
,

371 
sqlôe3OsCuºítTime
,

372 
sqlôe3OsE¡îMuãx
,

373 
sqlôe3OsLóveMuãx
,

374 
sqlôe3OsInMuãx
,

375 
sqlôe3OsThªadS≥cificD©a
,

376 
sqlôe3OsMÆloc
,

377 
sqlôe3OsRóŒoc
,

378 
sqlôe3OsFªe
,

379 
sqlôe3OsAŒoˇti⁄Size


385 
sqlôe3OsVtbl
 
sqlôe3Os
;

390 
sqlôe3OsVtbl
 *
sqlôe3_os_swôch
();

397 #unde‡
sqlôe3OsO≥nRódWrôe


398 #unde‡
sqlôe3OsO≥nEx˛usive


399 #unde‡
sqlôe3OsO≥nRódO∆y


400 #unde‡
sqlôe3OsDñëe


401 #unde‡
sqlôe3OsFûeExi°s


402 #unde‡
sqlôe3OsFuŒP©h«me


403 #unde‡
sqlôe3OsIsDúWrôabÀ


404 #unde‡
sqlôe3OsSyncDúe˘‹y


405 #unde‡
sqlôe3OsTempFûeName


406 #unde‡
sqlôe3OsR™domSìd


407 #unde‡
sqlôe3OsSÀï


408 #unde‡
sqlôe3OsCuºítTime


409 #unde‡
sqlôe3OsE¡îMuãx


410 #unde‡
sqlôe3OsLóveMuãx


411 #unde‡
sqlôe3OsInMuãx


412 #unde‡
sqlôe3OsThªadS≥cificD©a


413 #unde‡
sqlôe3OsMÆloc


414 #unde‡
sqlôe3OsRóŒoc


415 #unde‡
sqlôe3OsFªe


416 #unde‡
sqlôe3OsAŒoˇti⁄Size


417 
	#sqlôe3OsO≥nRódWrôe
 
sqlôe3Os
.
xO≥nRódWrôe


	)

418 
	#sqlôe3OsO≥nEx˛usive
 
sqlôe3Os
.
xO≥nEx˛usive


	)

419 
	#sqlôe3OsO≥nRódO∆y
 
sqlôe3Os
.
xO≥nRódO∆y


	)

420 
	#sqlôe3OsDñëe
 
sqlôe3Os
.
xDñëe


	)

421 
	#sqlôe3OsFûeExi°s
 
sqlôe3Os
.
xFûeExi°s


	)

422 
	#sqlôe3OsFuŒP©h«me
 
sqlôe3Os
.
xFuŒP©h«me


	)

423 
	#sqlôe3OsIsDúWrôabÀ
 
sqlôe3Os
.
xIsDúWrôabÀ


	)

424 
	#sqlôe3OsSyncDúe˘‹y
 
sqlôe3Os
.
xSyncDúe˘‹y


	)

425 
	#sqlôe3OsTempFûeName
 
sqlôe3Os
.
xTempFûeName


	)

426 
	#sqlôe3OsR™domSìd
 
sqlôe3Os
.
xR™domSìd


	)

427 
	#sqlôe3OsSÀï
 
sqlôe3Os
.
xSÀï


	)

428 
	#sqlôe3OsCuºítTime
 
sqlôe3Os
.
xCuºítTime


	)

429 
	#sqlôe3OsE¡îMuãx
 
sqlôe3Os
.
xE¡îMuãx


	)

430 
	#sqlôe3OsLóveMuãx
 
sqlôe3Os
.
xLóveMuãx


	)

431 
	#sqlôe3OsInMuãx
 
sqlôe3Os
.
xInMuãx


	)

432 
	#sqlôe3OsThªadS≥cificD©a
 
sqlôe3Os
.
xThªadS≥cificD©a


	)

433 
	#sqlôe3OsMÆloc
 
sqlôe3Os
.
xMÆloc


	)

434 
	#sqlôe3OsRóŒoc
 
sqlôe3Os
.
xRóŒoc


	)

435 
	#sqlôe3OsFªe
 
sqlôe3Os
.
xFªe


	)

436 
	#sqlôe3OsAŒoˇti⁄Size
 
sqlôe3Os
.
xAŒoˇti⁄Size


	)

	@os_common.h

26 #ifde‡
MEMORY_DEBUG


35 #ifde‡
SQLITE_TEST


36 
	gsqlôe3_≥ndög_byã
 = 0x40000000;

39 
	gsqlôe3_os_åa˚
 = 0;

40 #ifde‡
SQLITE_DEBUG


41 
	gœ°_∑ge
 = 0;

42 
	#SEEK
(
X
Ë
œ°_∑ge
=(X)

	)

43 
	#TRACE1
(
X
Ëif–
sqlôe3_os_åa˚
 ) 
	`sqlôe3DebugPrötf
(X)

	)

44 
	#TRACE2
(
X
,
Y
Ëif–
sqlôe3_os_åa˚
 ) 
	`sqlôe3DebugPrötf
(X,Y)

	)

45 
	#TRACE3
(
X
,
Y
,
Z
Ëif–
sqlôe3_os_åa˚
 ) 
	`sqlôe3DebugPrötf
(X,Y,Z)

	)

46 
	#TRACE4
(
X
,
Y
,
Z
,
A
Ëif–
sqlôe3_os_åa˚
 ) 
	`sqlôe3DebugPrötf
(X,Y,Z,A)

	)

47 
	#TRACE5
(
X
,
Y
,
Z
,
A
,
B
Ëif–
sqlôe3_os_åa˚
 ) 
	`sqlôe3DebugPrötf
(X,Y,Z,A,B)

	)

48 
	#TRACE6
(
X
,
Y
,
Z
,
A
,
B
,
C
Ëif(
sqlôe3_os_åa˚
Ë
	`sqlôe3DebugPrötf
(X,Y,Z,A,B,C)

	)

49 
	#TRACE7
(
X
,
Y
,
Z
,
A
,
B
,
C
,
D
) \

50 if(
sqlôe3_os_åa˚
Ë
	`sqlôe3DebugPrötf
(
X
,
Y
,
Z
,
A
,
B
,
C
,
D
)

	)

52 
	#SEEK
(
X
)

	)

53 
	#TRACE1
(
X
)

	)

54 
	#TRACE2
(
X
,
Y
)

	)

55 
	#TRACE3
(
X
,
Y
,
Z
)

	)

56 
	#TRACE4
(
X
,
Y
,
Z
,
A
)

	)

57 
	#TRACE5
(
X
,
Y
,
Z
,
A
,
B
)

	)

58 
	#TRACE6
(
X
,
Y
,
Z
,
A
,
B
,
C
)

	)

59 
	#TRACE7
(
X
,
Y
,
Z
,
A
,
B
,
C
,
D
)

	)

66 #ifde‡
SQLITE_PERFORMANCE_TRACE


67 
__ölöe__
 
	$hwtime
(){

68 
x
;

69 
	`__asm__
("rdtsc\n\t"

71 :"=A" (
x
));

72  
x
;

73 
	}
}

74 
	gg_°¨t
;

75 
	gñ≠£
;

76 
	#TIMER_START
 
g_°¨t
=
	`hwtime
()

	)

77 
	#TIMER_END
 
ñ≠£
=
	`hwtime
()-
g_°¨t


	)

78 
	#TIMER_ELAPSED
 
ñ≠£


	)

80 
	#TIMER_START


	)

81 
	#TIMER_END


	)

82 
	#TIMER_ELAPSED
 0

	)

90 #ifde‡
SQLITE_TEST


91 
	gsqlôe3_io_îr‹_hô
 = 0;

92 
	gsqlôe3_io_îr‹_≥ndög
 = 0;

93 
	gsqlôe3_diskfuŒ_≥ndög
 = 0;

94 
	gsqlôe3_diskfuŒ
 = 0;

95 
	#SimuœãIOEº‹
(
A
) \

96 if–
sqlôe3_io_îr‹_≥ndög
 ) \

97 if–
sqlôe3_io_îr‹_≥ndög
-- =1 ){ 
	`loˇl_i€º
();  
A
; }

	)

98 
	$loˇl_i€º
(){

99 
sqlôe3_io_îr‹_hô
 = 1;

100 
	}
}

101 
	#SimuœãDiskfuŒEº‹
 \

102 if–
sqlôe3_diskfuŒ_≥ndög
 ){ \

103 if–
sqlôe3_diskfuŒ_≥ndög
 == 1 ){ \

104 
	`loˇl_i€º
(); \

105 
sqlôe3_diskfuŒ
 = 1; \

106  
SQLITE_FULL
; \

108 
sqlôe3_diskfuŒ_≥ndög
--; \

110 }

	)

112 
	#SimuœãIOEº‹
(
A
)

	)

113 
	#SimuœãDiskfuŒEº‹


	)

119 #ifde‡
SQLITE_TEST


120 
	gsqlôe3_›í_fûe_cou¡
 = 0;

121 
	#O≥nCou¡î
(
X
Ë
sqlôe3_›í_fûe_cou¡
+=(X)

	)

123 
	#O≥nCou¡î
(
X
)

	)

144 #i‡
deföed
(
SQLITE_ENABLE_MEMORY_MANAGEMENT
Ë|| deföed (
SQLITE_MEMDEBUG
)

145 *
	$sqlôe3GíîicMÆloc
(
n
){

146 *
p
 = (*)
	`mÆloc
(
n
+8);

147 
	`as£π
(
n
>0);

148 
	`as£π
(()<=8);

149 if–
p
 ){

150 *(*)
p
 = 
n
;

151 
p
 += 8;

153  (*)
p
;

154 
	}
}

155 *
	$sqlôe3GíîicRóŒoc
(*
p
, 
n
){

156 *
p2
 = ((*)
p
 - 8);

157 
	`as£π
(
n
>0);

158 
p2
 = (*)
	`ªÆloc
’2, 
n
+8);

159 if–
p2
 ){

160 *(*)
p2
 = 
n
;

161 
p2
 += 8;

163  (*)
p2
;

164 
	}
}

165 
	$sqlôe3GíîicFªe
(*
p
){

166 
	`as£π
(
p
);

167 
	`‰ì
((*)((*)
p
 - 8));

168 
	}
}

169 
	$sqlôe3GíîicAŒoˇti⁄Size
(*
p
){

170  
p
 ? *(*)((*)p - 8) : 0;

171 
	}
}

173 *
	$sqlôe3GíîicMÆloc
(
n
){

174 *
p
 = (*)
	`mÆloc
(
n
);

175  (*)
p
;

176 
	}
}

177 *
	$sqlôe3GíîicRóŒoc
(*
p
, 
n
){

178 
	`as£π
(
n
>0);

179 
p
 = 
	`ªÆloc
’, 
n
);

180  
p
;

181 
	}
}

182 
	$sqlôe3GíîicFªe
(*
p
){

183 
	`as£π
(
p
);

184 
	`‰ì
(
p
);

185 
	}
}

187 
	$sqlôe3GíîicAŒoˇti⁄Size
(*
p
){  0; 
	}
}

	@os_test.c

16 #i‡
OS_TEST


17 
	~"sqlôeI¡.h
"

18 
	~"os.h
"

20 
	#sqlôe3OsO≥nRódWrôe
 
sqlôe3RólO≥nRódWrôe


	)

21 
	#sqlôe3OsO≥nEx˛usive
 
sqlôe3RólO≥nEx˛usive


	)

22 
	#sqlôe3OsO≥nRódO∆y
 
sqlôe3RólO≥nRódO∆y


	)

23 
	#sqlôe3OsO≥nDúe˘‹y
 
sqlôe3RólO≥nDúe˘‹y


	)

24 
	#sqlôe3OsClo£
 
sqlôe3RólClo£


	)

25 
	#sqlôe3OsRód
 
sqlôe3RólRód


	)

26 
	#sqlôe3OsWrôe
 
sqlôe3RólWrôe


	)

27 
	#sqlôe3OsSìk
 
sqlôe3RólSìk


	)

28 
	#sqlôe3OsSync
 
sqlôe3RólSync


	)

29 
	#sqlôe3OsTrunˇã
 
sqlôe3RólTrunˇã


	)

30 
	#sqlôe3OsFûeSize
 
sqlôe3RólFûeSize


	)

31 
	#sqlôe3OsLock
 
sqlôe3RólLock


	)

32 
	#sqlôe3OsU∆ock
 
sqlôe3RólU∆ock


	)

33 
	#sqlôe3OsCheckRe£rvedLock
 
sqlôe3RólCheckRe£rvedLock


	)

35 
	#OsFûe
 
OsRólFûe


	)

36 
	#OS_UNIX
 1

	)

37 
	~"os_unix.c
"

38 #unde‡
OS_UNIX


39 #unde‡
OsFûe


41 #unde‡
sqlôe3OsO≥nRódWrôe


42 #unde‡
sqlôe3OsO≥nEx˛usive


43 #unde‡
sqlôe3OsO≥nRódO∆y


44 #unde‡
sqlôe3OsO≥nDúe˘‹y


45 #unde‡
sqlôe3OsClo£


46 #unde‡
sqlôe3OsRód


47 #unde‡
sqlôe3OsWrôe


48 #unde‡
sqlôe3OsSìk


49 #unde‡
sqlôe3OsSync


50 #unde‡
sqlôe3OsTrunˇã


51 #unde‡
sqlôe3OsFûeSize


52 #unde‡
sqlôe3OsLock


53 #unde‡
sqlôe3OsU∆ock


54 #unde‡
sqlôe3OsCheckRe£rvedLock


56 
	#BLOCKSIZE
 512

	)

57 
	#BLOCK_OFFSET
(
x
Ë((xË* 
BLOCKSIZE
)

	)

71 
	giCøshDñay
 = 0;

72 
	gzCøshFûe
[256];

77 
	$sqlôe3SëCøshP¨ams
(
iDñay
, c⁄° *
zFûe
){

78 
	`sqlôe3OsE¡îMuãx
();

79 
	`as£π
–
	`°æí
(
zFûe
)<256 );

80 
	`°r˝y
(
zCøshFûe
, 
zFûe
);

81 
iCøshDñay
 = 
iDñay
;

82 
	`sqlôe3OsLóveMuãx
();

83 
	}
}

89 
	$¸ashRequúed
(c⁄° *
zP©h
){

90 
r
;

91 
n
;

92 
	`sqlôe3OsE¡îMuãx
();

93 
n
 = 
	`°æí
(
zCøshFûe
);

94 if–
zCøshFûe
[
n
-1]=='*' ){

95 
n
--;

96 }if–
	`°æí
(
zP©h
)>
n
 ){

97 
n
 = 
	`°æí
(
zP©h
);

99 
r
 = 0;

100 if–
iCøshDñay
>0 && 
	`°∫cmp
(
zP©h
, 
zCøshFûe
, 
n
)==0 ){

101 
iCøshDñay
--;

102 if–
iCøshDñay
<=0 ){

103 
r
 = 1;

106 
	`sqlôe3OsLóveMuãx
();

107  
r
;

108 
	}
}

111 
OsTe°Fûe
 *
	gpAŒFûes
 = 0;

116 
	$öôFûe
(
OsFûe
 *
id
, c⁄° *
zName
){

117 
OsTe°Fûe
 *
pFûe
 = (OsTestFile *)

118 
	`sqlôeMÆloc
((
OsTe°Fûe
Ë+ 
	`°æí
(
zName
)+1);

119 
pFûe
->
nMaxWrôe
 = 0;

120 
pFûe
->
nBlk
 = 0;

121 
pFûe
->
≠Blk
 = 0;

122 
pFûe
->
zName
 = (*)(&pFile[1]);

123 
	`°r˝y
(
pFûe
->
zName
, zName);

124 *
id
 = 
pFûe
;

125 
pFûe
->
pNext
 = 
pAŒFûes
;

126 
pAŒFûes
 = 
pFûe
;

127 
	}
}

133 
	$˛o£Fûe
(
OsFûe
 *
id
){

134 
OsTe°Fûe
 *
pFûe
 = *
id
;

135 if–
pFûe
==
pAŒFûes
 ){

136 
pAŒFûes
 = 
pFûe
->
pNext
;

138 
OsTe°Fûe
 *
p
;

139 
p
=
pAŒFûes
;Ö->
pNext
!=
pFûe
;Ö=p->pNext ){

140 
	`as£π
–
p
 );

142 
p
->
pNext
 = 
pFûe
->pNext;

144 
	`sqlôeFªe
(
pFûe
);

145 *
id
 = 0;

146 
	}
}

152 
i64
 
	$osTñl
(
OsTe°Fûe
 *
pFûe
){

153  
	`l£ek
(
pFûe
->
fd
.
h
, 0, 
SEEK_CUR
);

154 
	}
}

159 
	$ˇcheBlock
(
OsTe°Fûe
 *
pFûe
, 
blk
){

160 if–
blk
>=
pFûe
->
nBlk
 ){

161 
n
 = ((
pFûe
->
nBlk
 * 2Ë+ 100 + 
blk
);

163 
pFûe
->
≠Blk
 = (
u8
 **)
	`sqlôeRóŒoc
’Fûe->≠Blk, 
n
 * (u8*));

164 if–!
pFûe
->
≠Blk
 )  
SQLITE_NOMEM
;

165 
	`mem£t
(&
pFûe
->
≠Blk
[pFûe->
nBlk
], 0, (
n
 -ÖFûe->nBlk)*(
u8
*));

166 
pFûe
->
nBlk
 = 
n
;

169 if–!
pFûe
->
≠Blk
[
blk
] ){

170 
i64
 
fûesize
;

171 
rc
;

173 
u8
 *
p
 = 
	`sqlôeMÆloc
(
BLOCKSIZE
);

174 if–!
p
 )  
SQLITE_NOMEM
;

175 
pFûe
->
≠Blk
[
blk
] = 
p
;

177 
rc
 = 
	`sqlôe3RólFûeSize
(&
pFûe
->
fd
, &
fûesize
);

178 if–
rc
!=
SQLITE_OK
 ) Ñc;

180 if–
	`BLOCK_OFFSET
(
blk
)<
fûesize
 ){

181 
Àn
 = 
BLOCKSIZE
;

182 
rc
 = 
	`sqlôe3RólSìk
(&
pFûe
->
fd
, 
blk
*
BLOCKSIZE
);

183 if–
	`BLOCK_OFFSET
(
blk
+1)>
fûesize
 ){

184 
Àn
 = 
fûesize
 - 
	`BLOCK_OFFSET
(
blk
);

186 if–
rc
!=
SQLITE_OK
 ) Ñc;

187 
rc
 = 
	`sqlôe3RólRód
(&
pFûe
->
fd
, 
p
, 
Àn
);

188 if–
rc
!=
SQLITE_OK
 ) Ñc;

192  
SQLITE_OK
;

193 
	}
}

201 
	$wrôeCache2
(
OsTe°Fûe
 *
pFûe
, 
¸ash
){

202 
i
;

203 
nMax
 = 
pFûe
->
nMaxWrôe
;

204 
i64
 
off£t
;

205 
rc
 = 
SQLITE_OK
;

207 
off£t
 = 
	`osTñl
(
pFûe
);

208 
i
=0; i<
pFûe
->
nBlk
; i++){

209 
u8
 *
p
 = 
pFûe
->
≠Blk
[
i
];

210 if–
p
 ){

211 
skù
 = 0;

212 
åash
 = 0;

213 if–
¸ash
 ){

214 
øndom
;

215 
	`sqlôe3R™dom√ss
(1, &
øndom
);

216 if–
øndom
 & 0x01 ){

217 if–
øndom
 & 0x02 ){

218 
åash
 = 1;

219 #ifde‡
TRACE_WRITECACHE


220 
	`¥ötf
("Tøshög block %d o‡%s\n", 
i
, 
pFûe
->
zName
);

223 
skù
 = 1;

224 #ifde‡
TRACE_WRITECACHE


225 
	`¥ötf
("Skùög block %d o‡%s\n", 
i
, 
pFûe
->
zName
);

229 #ifde‡
TRACE_WRITECACHE


230 
	`¥ötf
("Wrôög block %d o‡%s\n", 
i
, 
pFûe
->
zName
);

234 if–
rc
==
SQLITE_OK
 ){

235 
rc
 = 
	`sqlôe3RólSìk
(&
pFûe
->
fd
, 
	`BLOCK_OFFSET
(
i
));

237 if–
rc
==
SQLITE_OK
 && !
skù
 ){

238 
Àn
 = 
BLOCKSIZE
;

239 if–
	`BLOCK_OFFSET
(
i
+1)>
nMax
 ){

240 
Àn
 = 
nMax
-
	`BLOCK_OFFSET
(
i
);

242 if–
Àn
>0 ){

243 if–
åash
 ){

244 
	`sqlôe3R™dom√ss
(
Àn
, 
p
);

246 
rc
 = 
	`sqlôe3RólWrôe
(&
pFûe
->
fd
, 
p
, 
Àn
);

249 
	`sqlôeFªe
(
p
);

252 
	`sqlôeFªe
(
pFûe
->
≠Blk
);

253 
pFûe
->
nBlk
 = 0;

254 
pFûe
->
≠Blk
 = 0;

255 
pFûe
->
nMaxWrôe
 = 0;

257 if–
rc
==
SQLITE_OK
 ){

258 
rc
 = 
	`sqlôe3RólSìk
(&
pFûe
->
fd
, 
off£t
);

260  
rc
;

261 
	}
}

266 
	$wrôeCache
(
OsTe°Fûe
 *
pFûe
){

267 if–
pFûe
->
≠Blk
 ){

268 
c
 = 
	`¸ashRequúed
(
pFûe
->
zName
);

269 if–
c
 ){

270 
OsTe°Fûe
 *
p
;

271 #ifde‡
TRACE_WRITECACHE


272 
	`¥ötf
("\nCøsh durög syn¯o‡%s\n", 
pFûe
->
zName
);

274 
p
=
pAŒFûes
;Ö;Öı->
pNext
){

275 
	`wrôeCache2
(
p
, 1);

277 
	`exô
(-1);

279  
	`wrôeCache2
(
pFûe
, 0);

282  
SQLITE_OK
;

283 
	}
}

288 
	$sqlôe3OsClo£
(
OsFûe
 *
id
){

289 if–!(*
id
ËË 
SQLITE_OK
;

290 if–(*
id
)->
fd
.
isO≥n
 ){

292 
	`wrôeCache
(*
id
);

293 
	`sqlôe3RólClo£
(&(*
id
)->
fd
);

295 
	`˛o£Fûe
(
id
);

296  
SQLITE_OK
;

297 
	}
}

299 
	$sqlôe3OsRód
(
OsFûe
 *
id
, *
pBuf
, 
amt
){

300 
i64
 
off£t
;

301 
i64
 
íd
;

302 
blk
;

303 
i
;

304 
u8
 *
zC§
;

305 
rc
 = 
SQLITE_OK
;

306 
OsTe°Fûe
 *
pFûe
 = *
id
;

308 
off£t
 = 
	`osTñl
(
pFûe
);

309 
íd
 = 
off£t
+
amt
;

310 
blk
 = (
off£t
/
BLOCKSIZE
);

312 
zC§
 = (
u8
 *)
pBuf
;

313 
i
=
blk
; i*
BLOCKSIZE
<
íd
; i++){

314 
off
 = 0;

315 
Àn
 = 0;

318 if–
	`BLOCK_OFFSET
(
i
Ë< 
off£t
 ){

319 
off
 = 
off£t
-
	`BLOCK_OFFSET
(
i
);

321 
Àn
 = 
BLOCKSIZE
 - 
off
;

322 if–
	`BLOCK_OFFSET
(
i
+1Ë> 
íd
 ){

323 
Àn
 =Üí - (
	`BLOCK_OFFSET
(
i
+1)-
íd
);

326 if–
i
<
pFûe
->
nBlk
 &&ÖFûe->
≠Blk
[i]){

327 
u8
 *
pBlk
 = 
pFûe
->
≠Blk
[
i
];

328 
	`mem˝y
(
zC§
, &
pBlk
[
off
], 
Àn
);

330 
rc
 = 
	`sqlôe3RólSìk
(&
pFûe
->
fd
, 
	`BLOCK_OFFSET
(
i
Ë+ 
off
);

331 if–
rc
!=
SQLITE_OK
 ) Ñc;

332 
rc
 = 
	`sqlôe3RólRód
(&
pFûe
->
fd
, 
zC§
, 
Àn
);

333 if–
rc
!=
SQLITE_OK
 ) Ñc;

336 
zC§
 +
Àn
;

338 
	`as£π
–
zC§
==&((
u8
 *)
pBuf
)[
amt
] );

340 
rc
 = 
	`sqlôe3RólSìk
(&
pFûe
->
fd
, 
íd
);

341  
rc
;

342 
	}
}

344 
	$sqlôe3OsWrôe
(
OsFûe
 *
id
, c⁄° *
pBuf
, 
amt
){

345 
i64
 
off£t
;

346 
i64
 
íd
;

347 
blk
;

348 
i
;

349 c⁄° 
u8
 *
zC§
;

350 
rc
 = 
SQLITE_OK
;

351 
OsTe°Fûe
 *
pFûe
 = *
id
;

353 
off£t
 = 
	`osTñl
(
pFûe
);

354 
íd
 = 
off£t
+
amt
;

355 
blk
 = (
off£t
/
BLOCKSIZE
);

357 
zC§
 = (
u8
 *)
pBuf
;

358 
i
=
blk
; i*
BLOCKSIZE
<
íd
; i++){

359 
u8
 *
pBlk
;

360 
off
 = 0;

361 
Àn
 = 0;

364 
rc
 = 
	`ˇcheBlock
(
pFûe
, 
i
);

365 if–
rc
!=
SQLITE_OK
 ) Ñc;

368 
pBlk
 = 
pFûe
->
≠Blk
[
i
];

369 
	`as£π
–
pBlk
 );

371 if–
	`BLOCK_OFFSET
(
i
Ë< 
off£t
 ){

372 
off
 = 
off£t
-
	`BLOCK_OFFSET
(
i
);

374 
Àn
 = 
BLOCKSIZE
 - 
off
;

375 if–
	`BLOCK_OFFSET
(
i
+1Ë> 
íd
 ){

376 
Àn
 =Üí - (
	`BLOCK_OFFSET
(
i
+1)-
íd
);

378 
	`mem˝y
(&
pBlk
[
off
], 
zC§
, 
Àn
);

379 
zC§
 +
Àn
;

381 if–
pFûe
->
nMaxWrôe
<
íd
 ){

382 
pFûe
->
nMaxWrôe
 = 
íd
;

384 
	`as£π
–
zC§
==&((
u8
 *)
pBuf
)[
amt
] );

386 
rc
 = 
	`sqlôe3RólSìk
(&
pFûe
->
fd
, 
íd
);

387  
rc
;

388 
	}
}

394 
	$sqlôe3OsSync
(
OsFûe
 *
id
, 
d©aO∆y
){

395 
rc
;

397 
rc
 = 
	`wrôeCache
(*
id
);

398 if–
rc
!=
SQLITE_OK
 ) Ñc;

399 
rc
 = 
	`sqlôe3RólSync
(&(*
id
)->
fd
, 
d©aO∆y
);

400  
rc
;

401 
	}
}

408 
	$sqlôe3OsTrunˇã
(
OsFûe
 *
id
, 
i64
 
nByã
){

409 (*
id
)->
nMaxWrôe
 = 
nByã
;

410  
	`sqlôe3RólTrunˇã
(&(*
id
)->
fd
, 
nByã
);

411 
	}
}

417 
	$sqlôe3OsFûeSize
(
OsFûe
 *
id
, 
i64
 *
pSize
){

418 
rc
 = 
	`sqlôe3RólFûeSize
(&(*
id
)->
fd
, 
pSize
);

419 if–
rc
==
SQLITE_OK
 && 
pSize
 && *pSize<(*
id
)->
nMaxWrôe
 ){

420 *
pSize
 = (*
id
)->
nMaxWrôe
;

422  
rc
;

423 
	}
}

430 
	$sqlôe3OsO≥nRódWrôe
(c⁄° *
zFûíame
, 
OsFûe
 *
id
, *
pRód⁄ly
){

431 
	`öôFûe
(
id
, 
zFûíame
);

432  
	`sqlôe3RólO≥nRódWrôe
(
zFûíame
, &(*
id
)->
fd
, 
pRód⁄ly
);

433 
	}
}

434 
	$sqlôe3OsO≥nEx˛usive
(c⁄° *
zFûíame
, 
OsFûe
 *
id
, 
dñFœg
){

435 
	`öôFûe
(
id
, 
zFûíame
);

436  
	`sqlôe3RólO≥nEx˛usive
(
zFûíame
, &(*
id
)->
fd
, 
dñFœg
);

437 
	}
}

438 
	$sqlôe3OsO≥nRódO∆y
(c⁄° *
zFûíame
, 
OsFûe
 *
id
){

439 
	`öôFûe
(
id
, 
zFûíame
);

440  
	`sqlôe3RólO≥nRódO∆y
(
zFûíame
, &(*
id
)->
fd
);

441 
	}
}

447 
	$sqlôe3OsSìk
(
OsFûe
 *
id
, 
i64
 
off£t
){

448  
	`sqlôe3RólSìk
(&(*
id
)->
fd
, 
off£t
);

449 
	}
}

450 
	$sqlôe3OsCheckRe£rvedLock
(
OsFûe
 *
id
){

451  
	`sqlôe3RólCheckRe£rvedLock
(&(*
id
)->
fd
);

452 
	}
}

453 
	$sqlôe3OsLock
(
OsFûe
 *
id
, 
lockty≥
){

454  
	`sqlôe3RólLock
(&(*
id
)->
fd
, 
lockty≥
);

455 
	}
}

456 
	$sqlôe3OsU∆ock
(
OsFûe
 *
id
, 
lockty≥
){

457  
	`sqlôe3RólU∆ock
(&(*
id
)->
fd
, 
lockty≥
);

458 
	}
}

459 
	$sqlôe3OsO≥nDúe˘‹y
(c⁄° *
zDú«me
, 
OsFûe
 *
id
){

460  
	`sqlôe3RólO≥nDúe˘‹y
(
zDú«me
, &(*
id
)->
fd
);

461 
	}
}

	@os_test.h

14 #i‚de‡
_SQLITE_OS_TEST_H_


15 
	#_SQLITE_OS_TEST_H_


	)

17 
	#OsFûe
 
OsRólFûe


	)

18 
	#OS_UNIX
 1

	)

19 
	~"os_unix.h
"

20 #unde‡
OS_UNIX


21 #unde‡
OsFûe


22 #unde‡
SET_FULLSYNC


25 
	~"sqlôeI¡.h
"

27 
OsTe°Fûe
* 
	tOsFûe
;

28 
OsTe°Fûe
 
	tOsTe°Fûe
;

29 
	sOsTe°Fûe
 {

30 
u8
 **
	m≠Blk
;

31 
	mnBlk
;

32 
	mnMaxWrôe
;

33 *
	mzName
;

34 
OsRólFûe
 
	mfd
;

35 
OsTe°Fûe
 *
	mpNext
;

38 
sqlôe3SëCøshP¨ams
(
iDñay
, c⁄° *
zFûe
);

	@os_unix.c

15 
	~"sqlôeI¡.h
"

16 
	~"os.h
"

17 
	~<uni°d.h
>

19 #i‡
OS_UNIX


34 #i‚de‡
SQLITE_DISABLE_LFS


35 
	#_LARGE_FILE
 1

	)

36 #i‚de‡
_FILE_OFFSET_BITS


37 
	#_FILE_OFFSET_BITS
 64

	)

39 
	#_LARGEFILE_SOURCE
 1

	)

45 
	~<sys/ty≥s.h
>

46 
	~<sys/°©.h
>

47 
	~<f˙é.h
>

48 
	~<uni°d.h
>

49 
	~<time.h
>

50 
	~<sys/time.h
>

51 
	~<î∫o.h
>

57 #i‡
deföed
(
THREADSAFE
) && THREADSAFE

58 
	~<±hªad.h
>

59 
	#SQLITE_UNIX_THREADS
 1

	)

69 #i‚de‡
SQLITE_DEFAULT_FILE_PERMISSIONS


70 
	#SQLITE_DEFAULT_FILE_PERMISSIONS
 0644

	)

79 
unixFûe
 
	tunixFûe
;

80 
	sunixFûe
 {

81 
IoMëhod
 c⁄° *
	mpMëhod
;

82 
›íC¡
 *
	mpO≥n
;

83 
lockInfo
 *
	mpLock
;

84 
	mh
;

85 
	mlockty≥
;

86 
	misO≥n
;

87 
	mfuŒSync
;

88 
	mdúfd
;

89 #ifde‡
SQLITE_UNIX_THREADS


90 
±hªad_t
 
	mtid
;

99 #ifde‡
SQLITE_CRASH_TEST


100 
sqlôe3CøshTe°E«bÀ
;

101 
sqlôe3CøshO≥nRódWrôe
(c⁄° *, 
OsFûe
**, *);

102 
sqlôe3CøshO≥nEx˛usive
(c⁄° *, 
OsFûe
**, );

103 
sqlôe3CøshO≥nRódO∆y
(c⁄° *, 
OsFûe
**, );

104 
	#CRASH_TEST_OVERRIDE
(
X
,
A
,
B
,
C
) \

105 if(
sqlôe3CøshTe°E«bÀ
){  
	`X
(
A
,
B
,
C
); }

	)

107 
	#CRASH_TEST_OVERRIDE
(
X
,
A
,
B
,
C
Ë

	)

114 
	~"os_comm⁄.h
"

121 #i‚de‡
SQLITE_OMIT_DISKIO


127 #i‚de‡
O_LARGEFILE


128 
	#O_LARGEFILE
 0

	)

130 #ifde‡
SQLITE_DISABLE_LFS


131 #unde‡
O_LARGEFILE


132 
	#O_LARGEFILE
 0

	)

134 #i‚de‡
O_NOFOLLOW


135 
	#O_NOFOLLOW
 0

	)

137 #i‚de‡
O_BINARY


138 
	#O_BINARY
 0

	)

147 #ifde‡
__DJGPP__


148 
	#f˙é
(
A
,
B
,
C
Ë0

	)

155 #ifde‡
SQLITE_UNIX_THREADS


156 
	#thªadid
 
	`±hªad_£lf
()

	)

158 
	#thªadid
 0

	)

177 #i‡
deföed
(
SQLITE_UNIX_THREADS
)

178 
	#SET_THREADID
(
X
Ë(X)->
tid
 = 
	`±hªad_£lf
()

	)

179 
	#CHECK_THREADID
(
X
Ë(
thªadsOvîrideEachOthîsLocks
==0 && \

180 !
	`±hªad_equÆ
((
X
)->
tid
, 
	`±hªad_£lf
()))

	)

182 
	#SET_THREADID
(
X
)

	)

183 
	#CHECK_THREADID
(
X
Ë0

	)

295 
	slockKey
 {

296 
dev_t
 
	mdev
;

297 
öo_t
 
	möo
;

298 #ifde‡
SQLITE_UNIX_THREADS


299 
±hªad_t
 
	mtid
;

312 
	slockInfo
 {

313 
lockKey
 
	mkey
;

314 
	m˙t
;

315 
	mlockty≥
;

316 
	mnRef
;

324 
	s›íKey
 {

325 
dev_t
 
	mdev
;

326 
öo_t
 
	möo
;

336 
	s›íC¡
 {

337 
›íKey
 
	mkey
;

338 
	mnRef
;

339 
	mnLock
;

340 
	mnPídög
;

341 *
	maPídög
;

349 
Hash
 
	glockHash
 = { 
SQLITE_HASH_BINARY
, 0, 0, 0, 0, 0 };

350 
Hash
 
	g›íHash
 = { 
SQLITE_HASH_BINARY
, 0, 0, 0, 0, 0 };

353 #ifde‡
SQLITE_UNIX_THREADS


372 #i‚de‡
SQLITE_THREAD_OVERRIDE_LOCK


373 
	#SQLITE_THREAD_OVERRIDE_LOCK
 -1

	)

375 #ifde‡
SQLITE_TEST


376 
	gthªadsOvîrideEachOthîsLocks
 = 
SQLITE_THREAD_OVERRIDE_LOCK
;

378 
	gthªadsOvîrideEachOthîsLocks
 = 
SQLITE_THREAD_OVERRIDE_LOCK
;

385 
	sthªadTe°D©a
 {

386 
	mfd
;

387 
Êock
 
	mlock
;

388 
	mªsu…
;

391 #ifde‡
SQLITE_LOCK_TRACE


400 
	$lockTø˚
(
fd
, 
›
, 
Êock
 *
p
){

401 *
zOpName
, *
zTy≥
;

402 
s
;

403 
ßvedEºno
;

404 if–
›
==
F_GETLK
 ){

405 
zOpName
 = "GETLK";

406 }if–
›
==
F_SETLK
 ){

407 
zOpName
 = "SETLK";

409 
s
 = 
	`f˙é
(
fd
, 
›
, 
p
);

410 
	`sqlôe3DebugPrötf
("f˙é unknow¿%d %d %d\n", 
fd
, 
›
, 
s
);

411  
s
;

413 if–
p
->
l_ty≥
==
F_RDLCK
 ){

414 
zTy≥
 = "RDLCK";

415 }if–
p
->
l_ty≥
==
F_WRLCK
 ){

416 
zTy≥
 = "WRLCK";

417 }if–
p
->
l_ty≥
==
F_UNLCK
 ){

418 
zTy≥
 = "UNLCK";

420 
	`as£π
( 0 );

422 
	`as£π
–
p
->
l_whí˚
==
SEEK_SET
 );

423 
s
 = 
	`f˙é
(
fd
, 
›
, 
p
);

424 
ßvedEºno
 = 
î∫o
;

425 
	`sqlôe3DebugPrötf
("fcntl %d %d %s %s %d %d %d %d\n",

426 
thªadid
, 
fd
, 
zOpName
, 
zTy≥
, ()
p
->
l_°¨t
, (Ì->
l_Àn
,

427 ()
p
->
l_pid
, 
s
);

428 if–
s
 && 
›
==
F_SETLK
 && (
p
->
l_ty≥
==
F_RDLCK
 ||Ö->l_ty≥==
F_WRLCK
) ){

429 
Êock
 
l2
;

430 
l2
 = *
p
;

431 
	`f˙é
(
fd
, 
F_GETLK
, &
l2
);

432 if–
l2
.
l_ty≥
==
F_RDLCK
 ){

433 
zTy≥
 = "RDLCK";

434 }if–
l2
.
l_ty≥
==
F_WRLCK
 ){

435 
zTy≥
 = "WRLCK";

436 }if–
l2
.
l_ty≥
==
F_UNLCK
 ){

437 
zTy≥
 = "UNLCK";

439 
	`as£π
( 0 );

441 
	`sqlôe3DebugPrötf
("fcntl-failure-reason: %s %d %d %d\n",

442 
zTy≥
, ()
l2
.
l_°¨t
, (Ó2.
l_Àn
, (Ó2.
l_pid
);

444 
î∫o
 = 
ßvedEºno
;

445  
s
;

446 
	}
}

447 
	#f˙é
 
lockTø˚


	)

457 *
	$thªadLockögTe°
(*
pArg
){

458 
thªadTe°D©a
 *
pD©a
 = (thªadTe°D©a*)
pArg
;

459 
pD©a
->
ªsu…
 = 
	`f˙é
’D©a->
fd
, 
F_SETLK
, &pD©a->
lock
);

460  
pArg
;

461 
	}
}

468 
	$ã°ThªadLockögBehavi‹
(
fd_‹ig
){

469 
fd
;

470 
thªadTe°D©a
 
d
[2];

471 
±hªad_t
 
t
[2];

473 
fd
 = 
	`dup
(
fd_‹ig
);

474 if–
fd
<0 ) ;

475 
	`mem£t
(
d
, 0, (d));

476 
d
[0].
fd
 = fd;

477 
d
[0].
lock
.
l_ty≥
 = 
F_RDLCK
;

478 
d
[0].
lock
.
l_Àn
 = 1;

479 
d
[0].
lock
.
l_°¨t
 = 0;

480 
d
[0].
lock
.
l_whí˚
 = 
SEEK_SET
;

481 
d
[1] = d[0];

482 
d
[1].
lock
.
l_ty≥
 = 
F_WRLCK
;

483 
	`±hªad_¸óã
(&
t
[0], 0, 
thªadLockögTe°
, &
d
[0]);

484 
	`±hªad_¸óã
(&
t
[1], 0, 
thªadLockögTe°
, &
d
[1]);

485 
	`±hªad_joö
(
t
[0], 0);

486 
	`±hªad_joö
(
t
[1], 0);

487 
	`˛o£
(
fd
);

488 
thªadsOvîrideEachOthîsLocks
 = 
d
[0].
ªsu…
==0 && d[1].result==0;

489 
	}
}

495 
	$ªÀa£LockInfo
(
lockInfo
 *
pLock
){

496 
	`as£π
–
	`sqlôe3OsInMuãx
(1) );

497 
pLock
->
nRef
--;

498 if–
pLock
->
nRef
==0 ){

499 
	`sqlôe3HashIn£π
(&
lockHash
, &
pLock
->
key
, (pLock->key), 0);

500 
	`sqlôeFªe
(
pLock
);

502 
	}
}

507 
	$ªÀa£O≥nC¡
(
›íC¡
 *
pO≥n
){

508 
	`as£π
–
	`sqlôe3OsInMuãx
(1) );

509 
pO≥n
->
nRef
--;

510 if–
pO≥n
->
nRef
==0 ){

511 
	`sqlôe3HashIn£π
(&
›íHash
, &
pO≥n
->
key
, (pOpen->key), 0);

512 
	`‰ì
(
pO≥n
->
aPídög
);

513 
	`sqlôeFªe
(
pO≥n
);

515 
	}
}

524 
	$födLockInfo
(

525 
fd
,

526 
lockInfo
 **
µLock
,

527 
›íC¡
 **
µO≥n


529 
rc
;

530 
lockKey
 
key1
;

531 
›íKey
 
key2
;

532 
°©
 
°©buf
;

533 
lockInfo
 *
pLock
;

534 
›íC¡
 *
pO≥n
;

535 
rc
 = 
	`f°©
(
fd
, &
°©buf
);

536 if–
rc
!=0 )  1;

538 
	`as£π
–
	`sqlôe3OsInMuãx
(1) );

539 
	`mem£t
(&
key1
, 0, (key1));

540 
key1
.
dev
 = 
°©buf
.
°_dev
;

541 
key1
.
öo
 = 
°©buf
.
°_öo
;

542 #ifde‡
SQLITE_UNIX_THREADS


543 if–
thªadsOvîrideEachOthîsLocks
<0 ){

544 
	`ã°ThªadLockögBehavi‹
(
fd
);

546 
key1
.
tid
 = 
thªadsOvîrideEachOthîsLocks
 ? 0 : 
	`±hªad_£lf
();

548 
	`mem£t
(&
key2
, 0, (key2));

549 
key2
.
dev
 = 
°©buf
.
°_dev
;

550 
key2
.
öo
 = 
°©buf
.
°_öo
;

551 
pLock
 = (
lockInfo
*)
	`sqlôe3HashFöd
(&
lockHash
, &
key1
, (key1));

552 if–
pLock
==0 ){

553 
lockInfo
 *
pOld
;

554 
pLock
 = 
	`sqlôeMÆlocRaw
( (*pLock) );

555 if–
pLock
==0 ){

556 
rc
 = 1;

557 
exô_födlocköfo
;

559 
pLock
->
key
 = 
key1
;

560 
pLock
->
nRef
 = 1;

561 
pLock
->
˙t
 = 0;

562 
pLock
->
lockty≥
 = 0;

563 
pOld
 = 
	`sqlôe3HashIn£π
(&
lockHash
, &
pLock
->
key
, (
key1
),ÖLock);

564 if–
pOld
!=0 ){

565 
	`as£π
–
pOld
==
pLock
 );

566 
	`sqlôeFªe
(
pLock
);

567 
rc
 = 1;

568 
exô_födlocköfo
;

571 
pLock
->
nRef
++;

573 *
µLock
 = 
pLock
;

574 if–
µO≥n
!=0 ){

575 
pO≥n
 = (
›íC¡
*)
	`sqlôe3HashFöd
(&
›íHash
, &
key2
, (key2));

576 if–
pO≥n
==0 ){

577 
›íC¡
 *
pOld
;

578 
pO≥n
 = 
	`sqlôeMÆlocRaw
( (*pOpen) );

579 if–
pO≥n
==0 ){

580 
	`ªÀa£LockInfo
(
pLock
);

581 
rc
 = 1;

582 
exô_födlocköfo
;

584 
pO≥n
->
key
 = 
key2
;

585 
pO≥n
->
nRef
 = 1;

586 
pO≥n
->
nLock
 = 0;

587 
pO≥n
->
nPídög
 = 0;

588 
pO≥n
->
aPídög
 = 0;

589 
pOld
 = 
	`sqlôe3HashIn£π
(&
›íHash
, &
pO≥n
->
key
, (
key2
),ÖOpen);

590 if–
pOld
!=0 ){

591 
	`as£π
–
pOld
==
pO≥n
 );

592 
	`sqlôeFªe
(
pO≥n
);

593 
	`ªÀa£LockInfo
(
pLock
);

594 
rc
 = 1;

595 
exô_födlocköfo
;

598 
pO≥n
->
nRef
++;

600 *
µO≥n
 = 
pO≥n
;

603 
exô_födlocköfo
:

604  
rc
;

605 
	}
}

607 #ifde‡
SQLITE_DEBUG


613 c⁄° *
	$lockty≥Name
(
lockty≥
){

614  
lockty≥
 ){

615 
NO_LOCK
:  "NONE";

616 
SHARED_LOCK
:  "SHARED";

617 
RESERVED_LOCK
:  "RESERVED";

618 
PENDING_LOCK
:  "PENDING";

619 
EXCLUSIVE_LOCK
:  "EXCLUSIVE";

622 
	}
}

638 #ifde‡
SQLITE_UNIX_THREADS


639 
	$å™s„rOw√rshù
(
unixFûe
 *
pFûe
){

640 
rc
;

641 
±hªad_t
 
hSñf
;

642 if–
thªadsOvîrideEachOthîsLocks
 ){

644  
SQLITE_OK
;

646 
hSñf
 = 
	`±hªad_£lf
();

647 if–
	`±hªad_equÆ
(
pFûe
->
tid
, 
hSñf
) ){

649 
	`TRACE1
("No-transfer, sameÅhread\n");

650  
SQLITE_OK
;

652 if–
pFûe
->
lockty≥
!=
NO_LOCK
 ){

654  
SQLITE_MISUSE
;

656 
	`TRACE4
("Tøns„∏ow√rshù o‡%d from %dÅÿ%d\n", 
pFûe
->
h
,pFûe->
tid
,
hSñf
);

657 
pFûe
->
tid
 = 
hSñf
;

658 
	`ªÀa£LockInfo
(
pFûe
->
pLock
);

659 
rc
 = 
	`födLockInfo
(
pFûe
->
h
, &pFûe->
pLock
, 0);

660 
	`TRACE5
("LOCK %d i†now %s(%s,%d)\n", 
pFûe
->
h
,

661 
	`lockty≥Name
(
pFûe
->
lockty≥
),

662 
	`lockty≥Name
(
pFûe
->
pLock
->
lockty≥
),ÖFûe->pLock->
˙t
);

663  
rc
;

664 
	}
}

667 
	#å™s„rOw√rshù
(
X
Ë
SQLITE_OK


	)

673 
	$sqlôe3UnixDñëe
(c⁄° *
zFûíame
){

674 
	`u∆ök
(
zFûíame
);

675  
SQLITE_OK
;

676 
	}
}

681 
	$sqlôe3UnixFûeExi°s
(c⁄° *
zFûíame
){

682  
	`ac˚ss
(
zFûíame
, 0)==0;

683 
	}
}

686 
ÆloˇãUnixFûe
(
unixFûe
 *
pInô
, 
OsFûe
 **
pId
);

701 
	$sqlôe3UnixO≥nRódWrôe
(

702 c⁄° *
zFûíame
,

703 
OsFûe
 **
pId
,

704 *
pRód⁄ly


706 
rc
;

707 
unixFûe
 
f
;

709 
	`CRASH_TEST_OVERRIDE
(
sqlôe3CøshO≥nRódWrôe
, 
zFûíame
, 
pId
, 
pRód⁄ly
);

710 
	`as£π
–0==*
pId
 );

711 
f
.
h
 = 
	`›í
(
zFûíame
, 
O_RDWR
|
O_CREAT
|
O_LARGEFILE
|
O_BINARY
,

712 
SQLITE_DEFAULT_FILE_PERMISSIONS
);

713 if–
f
.
h
<0 ){

714 #ifde‡
EISDIR


715 if–
î∫o
==
EISDIR
 ){

716  
SQLITE_CANTOPEN
;

719 
f
.
h
 = 
	`›í
(
zFûíame
, 
O_RDONLY
|
O_LARGEFILE
|
O_BINARY
);

720 if–
f
.
h
<0 ){

721  
SQLITE_CANTOPEN
;

723 *
pRód⁄ly
 = 1;

725 *
pRód⁄ly
 = 0;

727 
	`sqlôe3OsE¡îMuãx
();

728 
rc
 = 
	`födLockInfo
(
f
.
h
, &f.
pLock
, &f.
pO≥n
);

729 
	`sqlôe3OsLóveMuãx
();

730 if–
rc
 ){

731 
	`˛o£
(
f
.
h
);

732  
SQLITE_NOMEM
;

734 
	`TRACE3
("OPEN %-3d %s\n", 
f
.
h
, 
zFûíame
);

735  
	`ÆloˇãUnixFûe
(&
f
, 
pId
);

736 
	}
}

753 
	$sqlôe3UnixO≥nEx˛usive
(c⁄° *
zFûíame
, 
OsFûe
 **
pId
, 
dñFœg
){

754 
rc
;

755 
unixFûe
 
f
;

757 
	`CRASH_TEST_OVERRIDE
(
sqlôe3CøshO≥nEx˛usive
, 
zFûíame
, 
pId
, 
dñFœg
);

758 
	`as£π
–0==*
pId
 );

759 if–
	`ac˚ss
(
zFûíame
, 0)==0 ){

760  
SQLITE_CANTOPEN
;

762 
f
.
h
 = 
	`›í
(
zFûíame
,

763 
O_RDWR
|
O_CREAT
|
O_EXCL
|
O_NOFOLLOW
|
O_LARGEFILE
|
O_BINARY
,

764 
SQLITE_DEFAULT_FILE_PERMISSIONS
);

765 if–
f
.
h
<0 ){

766  
SQLITE_CANTOPEN
;

768 
	`sqlôe3OsE¡îMuãx
();

769 
rc
 = 
	`födLockInfo
(
f
.
h
, &f.
pLock
, &f.
pO≥n
);

770 
	`sqlôe3OsLóveMuãx
();

771 if–
rc
 ){

772 
	`˛o£
(
f
.
h
);

773 
	`u∆ök
(
zFûíame
);

774  
SQLITE_NOMEM
;

776 if–
dñFœg
 ){

777 
	`u∆ök
(
zFûíame
);

779 
	`TRACE3
("OPEN-EX %-3d %s\n", 
f
.
h
, 
zFûíame
);

780  
	`ÆloˇãUnixFûe
(&
f
, 
pId
);

781 
	}
}

790 
	$sqlôe3UnixO≥nRódO∆y
(c⁄° *
zFûíame
, 
OsFûe
 **
pId
){

791 
rc
;

792 
unixFûe
 
f
;

794 
	`CRASH_TEST_OVERRIDE
(
sqlôe3CøshO≥nRódO∆y
, 
zFûíame
, 
pId
, 0);

795 
	`as£π
–0==*
pId
 );

796 
f
.
h
 = 
	`›í
(
zFûíame
, 
O_RDONLY
|
O_LARGEFILE
|
O_BINARY
);

797 if–
f
.
h
<0 ){

798  
SQLITE_CANTOPEN
;

800 
	`sqlôe3OsE¡îMuãx
();

801 
rc
 = 
	`födLockInfo
(
f
.
h
, &f.
pLock
, &f.
pO≥n
);

802 
	`sqlôe3OsLóveMuãx
();

803 if–
rc
 ){

804 
	`˛o£
(
f
.
h
);

805  
SQLITE_NOMEM
;

807 
	`TRACE3
("OPEN-RO %-3d %s\n", 
f
.
h
, 
zFûíame
);

808  
	`ÆloˇãUnixFûe
(&
f
, 
pId
);

809 
	}
}

827 
	$unixO≥nDúe˘‹y
(

828 
OsFûe
 *
id
,

829 c⁄° *
zDú«me


831 
unixFûe
 *
pFûe
 = (unixFûe*)
id
;

832 if–
pFûe
==0 ){

835  
SQLITE_CANTOPEN
;

837 
	`SET_THREADID
(
pFûe
);

838 
	`as£π
–
pFûe
->
dúfd
<0 );

839 
pFûe
->
dúfd
 = 
	`›í
(
zDú«me
, 
O_RDONLY
|
O_BINARY
, 0);

840 if–
pFûe
->
dúfd
<0 ){

841  
SQLITE_CANTOPEN
;

843 
	`TRACE3
("OPENDIR %-3d %s\n", 
pFûe
->
dúfd
, 
zDú«me
);

844  
SQLITE_OK
;

845 
	}
}

854 *
	gsqlôe3_ãmp_dúe˘‹y
 = 0;

860 
	$sqlôe3UnixTempFûeName
(*
zBuf
){

861 c⁄° *
azDús
[] = {

868 c⁄° 
zCh¨s
[] =

872 
i
, 
j
;

873 
°©
 
buf
;

874 c⁄° *
zDú
 = ".";

875 
azDús
[0] = 
sqlôe3_ãmp_dúe˘‹y
;

876 
i
=0; i<(
azDús
)/(azDirs[0]); i++){

877 if–
azDús
[
i
]==0 ) ;

878 if–
	`°©
(
azDús
[
i
], &
buf
) ) ;

879 if–!
	`S_ISDIR
(
buf
.
°_mode
) ) ;

880 if–
	`ac˚ss
(
azDús
[
i
], 07) ) ;

881 
zDú
 = 
azDús
[
i
];

885 
	`•rötf
(
zBuf
, "%s/"
TEMP_FILE_PREFIX
, 
zDú
);

886 
j
 = 
	`°æí
(
zBuf
);

887 
	`sqlôe3R™dom√ss
(15, &
zBuf
[
j
]);

888 
i
=0; i<15; i++, 
j
++){

889 
zBuf
[
j
] = ()
zCh¨s
[ (()zBuf[j])%((zChars)-1) ];

891 
zBuf
[
j
] = 0;

892 } 
	`ac˚ss
(
zBuf
,0)==0 );

893  
SQLITE_OK
;

894 
	}
}

900 
	$sqlôe3UnixIsDúWrôabÀ
(*
zBuf
){

901 #i‚de‡
SQLITE_OMIT_PAGER_PRAGMAS


902 
°©
 
buf
;

903 if–
zBuf
==0 )  0;

904 if–
zBuf
[0]==0 )  0;

905 if–
	`°©
(
zBuf
, &
buf
) )  0;

906 if–!
	`S_ISDIR
(
buf
.
°_mode
) )  0;

907 if–
	`ac˚ss
(
zBuf
, 07) )  0;

910 
	}
}

917 
	$unixRód
(
OsFûe
 *
id
, *
pBuf
, 
amt
){

918 
gŸ
;

919 
	`as£π
–
id
 );

920 
	`SimuœãIOEº‹
(
SQLITE_IOERR
);

921 
TIMER_START
;

922 
gŸ
 = 
	`ªad
(((
unixFûe
*)
id
)->
h
, 
pBuf
, 
amt
);

923 
TIMER_END
;

924 
	`TRACE5
("READ %-3d %5d %7d %d\n", ((
unixFûe
*)
id
)->
h
, 
gŸ
,

925 
œ°_∑ge
, 
TIMER_ELAPSED
);

926 
	`SEEK
(0);

928 if–
gŸ
==
amt
 ){

929  
SQLITE_OK
;

931  
SQLITE_IOERR
;

933 
	}
}

939 
	$unixWrôe
(
OsFûe
 *
id
, c⁄° *
pBuf
, 
amt
){

940 
wrŸe
 = 0;

941 
	`as£π
–
id
 );

942 
	`as£π
–
amt
>0 );

943 
	`SimuœãIOEº‹
(
SQLITE_IOERR
);

944 
SimuœãDiskfuŒEº‹
;

945 
TIMER_START
;

946  
amt
>0 && (
wrŸe
 = 
	`wrôe
(((
unixFûe
*)
id
)->
h
, 
pBuf
,ámt))>0 ){

947 
amt
 -
wrŸe
;

948 
pBuf
 = &((*ÌBuf)[
wrŸe
];

950 
TIMER_END
;

951 
	`TRACE5
("WRITE %-3d %5d %7d %d\n", ((
unixFûe
*)
id
)->
h
, 
wrŸe
,

952 
œ°_∑ge
, 
TIMER_ELAPSED
);

953 
	`SEEK
(0);

954 if–
amt
>0 ){

955  
SQLITE_FULL
;

957  
SQLITE_OK
;

958 
	}
}

963 
	$unixSìk
(
OsFûe
 *
id
, 
i64
 
off£t
){

964 
	`as£π
–
id
 );

965 
	`SEEK
(
off£t
/1024 + 1);

966 #ifde‡
SQLITE_TEST


967 if–
off£t
 ) 
SimuœãDiskfuŒEº‹


969 
	`l£ek
(((
unixFûe
*)
id
)->
h
, 
off£t
, 
SEEK_SET
);

970  
SQLITE_OK
;

971 
	}
}

973 #ifde‡
SQLITE_TEST


978 
	gsqlôe3_sync_cou¡
 = 0;

979 
	gsqlôe3_fuŒsync_cou¡
 = 0;

986 #i‚de‡
HAVE_FDATASYNC


987 
	#fd©async
 
fsync


	)

1002 
	$fuŒ_fsync
(
fd
, 
fuŒSync
, 
d©aO∆y
){

1003 
rc
;

1009 #ifde‡
SQLITE_TEST


1010 if–
fuŒSync
 ) 
sqlôe3_fuŒsync_cou¡
++;

1011 
sqlôe3_sync_cou¡
++;

1017 #ifde‡
SQLITE_NO_SYNC


1018 
rc
 = 
SQLITE_OK
;

1021 #ifde‡
F_FULLFSYNC


1022 if–
fuŒSync
 ){

1023 
rc
 = 
	`f˙é
(
fd
, 
F_FULLFSYNC
, 0);

1025 
rc
 = 1;

1028 if–
rc
 )Ñ¯
	`fsync
(
fd
);

1031 if–
d©aO∆y
 ){

1032 
rc
 = 
	`fd©async
(
fd
);

1034 
rc
 = 
	`fsync
(
fd
);

1039  
rc
;

1040 
	}
}

1057 
	$unixSync
(
OsFûe
 *
id
, 
d©aO∆y
){

1058 
unixFûe
 *
pFûe
 = (unixFûe*)
id
;

1059 
	`as£π
–
pFûe
 );

1060 
	`SimuœãIOEº‹
(
SQLITE_IOERR
);

1061 
	`TRACE2
("SYNC %-3d\n", 
pFûe
->
h
);

1062 if–
	`fuŒ_fsync
(
pFûe
->
h
,ÖFûe->
fuŒSync
, 
d©aO∆y
) ){

1063  
SQLITE_IOERR
;

1065 if–
pFûe
->
dúfd
>=0 ){

1066 
	`TRACE2
("DIRSYNC %-3d\n", 
pFûe
->
dúfd
);

1067 #i‚de‡
SQLITE_DISABLE_DIRSYNC


1068 if–
	`fuŒ_fsync
(
pFûe
->
dúfd
,ÖFûe->
fuŒSync
, 0) ){

1069  
SQLITE_IOERR
;

1072 
	`˛o£
(
pFûe
->
dúfd
);

1073 
pFûe
->
dúfd
 = -1;

1075  
SQLITE_OK
;

1076 
	}
}

1086 
	$sqlôe3UnixSyncDúe˘‹y
(c⁄° *
zDú«me
){

1087 #ifde‡
SQLITE_DISABLE_DIRSYNC


1088  
SQLITE_OK
;

1090 
fd
;

1091 
r
;

1092 
	`SimuœãIOEº‹
(
SQLITE_IOERR
);

1093 
fd
 = 
	`›í
(
zDú«me
, 
O_RDONLY
|
O_BINARY
, 0);

1094 
	`TRACE3
("DIRSYNC %-3d (%s)\n", 
fd
, 
zDú«me
);

1095 if–
fd
<0 ){

1096  
SQLITE_CANTOPEN
;

1098 
r
 = 
	`fsync
(
fd
);

1099 
	`˛o£
(
fd
);

1100  ((
r
==0)?
SQLITE_OK
:
SQLITE_IOERR
);

1102 
	}
}

1107 
	$unixTrunˇã
(
OsFûe
 *
id
, 
i64
 
nByã
){

1108 
	`as£π
–
id
 );

1109 
	`SimuœãIOEº‹
(
SQLITE_IOERR
);

1110  
	`·runˇã
(((
unixFûe
*)
id
)->
h
, 
nByã
)==0 ? 
SQLITE_OK
 : 
SQLITE_IOERR
;

1111 
	}
}

1116 
	$unixFûeSize
(
OsFûe
 *
id
, 
i64
 *
pSize
){

1117 
°©
 
buf
;

1118 
	`as£π
–
id
 );

1119 
	`SimuœãIOEº‹
(
SQLITE_IOERR
);

1120 if–
	`f°©
(((
unixFûe
*)
id
)->
h
, &
buf
)!=0 ){

1121  
SQLITE_IOERR
;

1123 *
pSize
 = 
buf
.
°_size
;

1124  
SQLITE_OK
;

1125 
	}
}

1133 
	$unixCheckRe£rvedLock
(
OsFûe
 *
id
){

1134 
r
 = 0;

1135 
unixFûe
 *
pFûe
 = (unixFûe*)
id
;

1137 
	`as£π
–
pFûe
 );

1138 
	`sqlôe3OsE¡îMuãx
();

1141 if–
pFûe
->
pLock
->
lockty≥
>
SHARED_LOCK
 ){

1142 
r
 = 1;

1147 if–!
r
 ){

1148 
Êock
 
lock
;

1149 
lock
.
l_whí˚
 = 
SEEK_SET
;

1150 
lock
.
l_°¨t
 = 
RESERVED_BYTE
;

1151 
lock
.
l_Àn
 = 1;

1152 
lock
.
l_ty≥
 = 
F_WRLCK
;

1153 
	`f˙é
(
pFûe
->
h
, 
F_GETLK
, &
lock
);

1154 if–
lock
.
l_ty≥
!=
F_UNLCK
 ){

1155 
r
 = 1;

1159 
	`sqlôe3OsLóveMuãx
();

1160 
	`TRACE3
("TEST WR-LOCK %d %d\n", 
pFûe
->
h
, 
r
);

1162  
r
;

1163 
	}
}

1189 
	$unixLock
(
OsFûe
 *
id
, 
lockty≥
){

1228 
rc
 = 
SQLITE_OK
;

1229 
unixFûe
 *
pFûe
 = (unixFûe*)
id
;

1230 
lockInfo
 *
pLock
 = 
pFûe
->pLock;

1231 
Êock
 
lock
;

1232 
s
;

1234 
	`as£π
–
pFûe
 );

1235 
	`TRACE7
("LOCK %d %†wa†%s(%s,%dËpid=%d\n", 
pFûe
->
h
,

1236 
	`lockty≥Name
(
lockty≥
),Üockty≥Name(
pFûe
->locktype),

1237 
	`lockty≥Name
(
pLock
->
lockty≥
),ÖLock->
˙t
 , 
	`gëpid
());

1243 if–
pFûe
->
lockty≥
>=locktype ){

1244 
	`TRACE3
("LOCK %d %†ok (Æªady hñd)\n", 
pFûe
->
h
,

1245 
	`lockty≥Name
(
lockty≥
));

1246  
SQLITE_OK
;

1251 
	`as£π
–
pFûe
->
lockty≥
!=
NO_LOCK
 ||Üockty≥==
SHARED_LOCK
 );

1252 
	`as£π
–
lockty≥
!=
PENDING_LOCK
 );

1253 
	`as£π
–
lockty≥
!=
RESERVED_LOCK
 || 
pFûe
->lockty≥==
SHARED_LOCK
 );

1257 
	`sqlôe3OsE¡îMuãx
();

1261 
rc
 = 
	`å™s„rOw√rshù
(
pFûe
);

1262 if–
rc
!=
SQLITE_OK
 ){

1263 
	`sqlôe3OsLóveMuãx
();

1264  
rc
;

1266 
pLock
 = 
pFûe
->pLock;

1271 if–(
pFûe
->
lockty≥
!=
pLock
->locktype &&

1272 (
pLock
->
lockty≥
>=
PENDING_LOCK
 ||Üockty≥>
SHARED_LOCK
))

1274 
rc
 = 
SQLITE_BUSY
;

1275 
íd_lock
;

1282 if–
lockty≥
==
SHARED_LOCK
 &&

1283 (
pLock
->
lockty≥
==
SHARED_LOCK
 ||ÖLock->lockty≥==
RESERVED_LOCK
) ){

1284 
	`as£π
–
lockty≥
==
SHARED_LOCK
 );

1285 
	`as£π
–
pFûe
->
lockty≥
==0 );

1286 
	`as£π
–
pLock
->
˙t
>0 );

1287 
pFûe
->
lockty≥
 = 
SHARED_LOCK
;

1288 
pLock
->
˙t
++;

1289 
pFûe
->
pO≥n
->
nLock
++;

1290 
íd_lock
;

1293 
lock
.
l_Àn
 = 1L;

1295 
lock
.
l_whí˚
 = 
SEEK_SET
;

1301 if–
lockty≥
==
SHARED_LOCK


1302 || (
lockty≥
==
EXCLUSIVE_LOCK
 && 
pFûe
->lockty≥<
PENDING_LOCK
)

1304 
lock
.
l_ty≥
 = (
lockty≥
==
SHARED_LOCK
?
F_RDLCK
:
F_WRLCK
);

1305 
lock
.
l_°¨t
 = 
PENDING_BYTE
;

1306 
s
 = 
	`f˙é
(
pFûe
->
h
, 
F_SETLK
, &
lock
);

1307 if–
s
 ){

1308 
rc
 = (
î∫o
==
EINVAL
Ë? 
SQLITE_NOLFS
 : 
SQLITE_BUSY
;

1309 
íd_lock
;

1317 if–
lockty≥
==
SHARED_LOCK
 ){

1318 
	`as£π
–
pLock
->
˙t
==0 );

1319 
	`as£π
–
pLock
->
lockty≥
==0 );

1322 
lock
.
l_°¨t
 = 
SHARED_FIRST
;

1323 
lock
.
l_Àn
 = 
SHARED_SIZE
;

1324 
s
 = 
	`f˙é
(
pFûe
->
h
, 
F_SETLK
, &
lock
);

1327 
lock
.
l_°¨t
 = 
PENDING_BYTE
;

1328 
lock
.
l_Àn
 = 1L;

1329 
lock
.
l_ty≥
 = 
F_UNLCK
;

1330 if–
	`f˙é
(
pFûe
->
h
, 
F_SETLK
, &
lock
)!=0 ){

1331 
rc
 = 
SQLITE_IOERR
;

1332 
íd_lock
;

1334 if–
s
 ){

1335 
rc
 = (
î∫o
==
EINVAL
Ë? 
SQLITE_NOLFS
 : 
SQLITE_BUSY
;

1337 
pFûe
->
lockty≥
 = 
SHARED_LOCK
;

1338 
pFûe
->
pO≥n
->
nLock
++;

1339 
pLock
->
˙t
 = 1;

1341 }if–
lockty≥
==
EXCLUSIVE_LOCK
 && 
pLock
->
˙t
>1 ){

1344 
rc
 = 
SQLITE_BUSY
;

1350 
	`as£π
–0!=
pFûe
->
lockty≥
 );

1351 
lock
.
l_ty≥
 = 
F_WRLCK
;

1352  
lockty≥
 ){

1353 
RESERVED_LOCK
:

1354 
lock
.
l_°¨t
 = 
RESERVED_BYTE
;

1356 
EXCLUSIVE_LOCK
:

1357 
lock
.
l_°¨t
 = 
SHARED_FIRST
;

1358 
lock
.
l_Àn
 = 
SHARED_SIZE
;

1361 
	`as£π
(0);

1363 
s
 = 
	`f˙é
(
pFûe
->
h
, 
F_SETLK
, &
lock
);

1364 if–
s
 ){

1365 
rc
 = (
î∫o
==
EINVAL
Ë? 
SQLITE_NOLFS
 : 
SQLITE_BUSY
;

1369 if–
rc
==
SQLITE_OK
 ){

1370 
pFûe
->
lockty≥
 =Üocktype;

1371 
pLock
->
lockty≥
 =Üocktype;

1372 }if–
lockty≥
==
EXCLUSIVE_LOCK
 ){

1373 
pFûe
->
lockty≥
 = 
PENDING_LOCK
;

1374 
pLock
->
lockty≥
 = 
PENDING_LOCK
;

1377 
íd_lock
:

1378 
	`sqlôe3OsLóveMuãx
();

1379 
	`TRACE4
("LOCK %d %†%s\n", 
pFûe
->
h
, 
	`lockty≥Name
(
lockty≥
),

1380 
rc
==
SQLITE_OK
 ? "ok" : "failed");

1381  
rc
;

1382 
	}
}

1391 
	$unixU∆ock
(
OsFûe
 *
id
, 
lockty≥
){

1392 
lockInfo
 *
pLock
;

1393 
Êock
 
lock
;

1394 
rc
 = 
SQLITE_OK
;

1395 
unixFûe
 *
pFûe
 = (unixFûe*)
id
;

1397 
	`as£π
–
pFûe
 );

1398 
	`TRACE7
("UNLOCK %d %d wa†%d(%d,%dËpid=%d\n", 
pFûe
->
h
, 
lockty≥
,

1399 
pFûe
->
lockty≥
,ÖFûe->
pLock
->lockty≥,ÖFûe->pLock->
˙t
, 
	`gëpid
());

1401 
	`as£π
–
lockty≥
<=
SHARED_LOCK
 );

1402 if–
pFûe
->
lockty≥
<=locktype ){

1403  
SQLITE_OK
;

1405 if–
	`CHECK_THREADID
(
pFûe
) ){

1406  
SQLITE_MISUSE
;

1408 
	`sqlôe3OsE¡îMuãx
();

1409 
pLock
 = 
pFûe
->pLock;

1410 
	`as£π
–
pLock
->
˙t
!=0 );

1411 if–
pFûe
->
lockty≥
>
SHARED_LOCK
 ){

1412 
	`as£π
–
pLock
->
lockty≥
==
pFûe
->locktype );

1413 if–
lockty≥
==
SHARED_LOCK
 ){

1414 
lock
.
l_ty≥
 = 
F_RDLCK
;

1415 
lock
.
l_whí˚
 = 
SEEK_SET
;

1416 
lock
.
l_°¨t
 = 
SHARED_FIRST
;

1417 
lock
.
l_Àn
 = 
SHARED_SIZE
;

1418 if–
	`f˙é
(
pFûe
->
h
, 
F_SETLK
, &
lock
)!=0 ){

1420 
rc
 = 
SQLITE_IOERR
;

1423 
lock
.
l_ty≥
 = 
F_UNLCK
;

1424 
lock
.
l_whí˚
 = 
SEEK_SET
;

1425 
lock
.
l_°¨t
 = 
PENDING_BYTE
;

1426 
lock
.
l_Àn
 = 2L; 
	`as£π
–
PENDING_BYTE
+1==
RESERVED_BYTE
 );

1427 if–
	`f˙é
(
pFûe
->
h
, 
F_SETLK
, &
lock
)==0 ){

1428 
pLock
->
lockty≥
 = 
SHARED_LOCK
;

1430 
rc
 = 
SQLITE_IOERR
;

1433 if–
lockty≥
==
NO_LOCK
 ){

1434 
›íC¡
 *
pO≥n
;

1440 
pLock
->
˙t
--;

1441 if–
pLock
->
˙t
==0 ){

1442 
lock
.
l_ty≥
 = 
F_UNLCK
;

1443 
lock
.
l_whí˚
 = 
SEEK_SET
;

1444 
lock
.
l_°¨t
 =Üock.
l_Àn
 = 0L;

1445 if–
	`f˙é
(
pFûe
->
h
, 
F_SETLK
, &
lock
)==0 ){

1446 
pLock
->
lockty≥
 = 
NO_LOCK
;

1448 
rc
 = 
SQLITE_IOERR
;

1456 
pO≥n
 = 
pFûe
->pOpen;

1457 
pO≥n
->
nLock
--;

1458 
	`as£π
–
pO≥n
->
nLock
>=0 );

1459 if–
pO≥n
->
nLock
==0 &&ÖO≥n->
nPídög
>0 ){

1460 
i
;

1461 
i
=0; i<
pO≥n
->
nPídög
; i++){

1462 
	`˛o£
(
pO≥n
->
aPídög
[
i
]);

1464 
	`‰ì
(
pO≥n
->
aPídög
);

1465 
pO≥n
->
nPídög
 = 0;

1466 
pO≥n
->
aPídög
 = 0;

1469 
	`sqlôe3OsLóveMuãx
();

1470 
pFûe
->
lockty≥
 =Üocktype;

1471  
rc
;

1472 
	}
}

1477 
	$unixClo£
(
OsFûe
 **
pId
){

1478 
unixFûe
 *
id
 = (unixFûe*)*
pId
;

1480 if–!
id
 )  
SQLITE_OK
;

1481 
	`unixU∆ock
(*
pId
, 
NO_LOCK
);

1482 if–
id
->
dúfd
>=0 ) 
	`˛o£
(id->dirfd);

1483 
id
->
dúfd
 = -1;

1484 
	`sqlôe3OsE¡îMuãx
();

1486 if–
id
->
pO≥n
->
nLock
 ){

1492 *
aNew
;

1493 
›íC¡
 *
pO≥n
 = 
id
->pOpen;

1494 
aNew
 = 
	`ªÆloc
–
pO≥n
->
aPídög
, (pO≥n->
nPídög
+1)*() );

1495 if–
aNew
==0 ){

1498 
pO≥n
->
aPídög
 = 
aNew
;

1499 
pO≥n
->
aPídög
[pO≥n->
nPídög
] = 
id
->
h
;

1500 
pO≥n
->
nPídög
++;

1504 
	`˛o£
(
id
->
h
);

1506 
	`ªÀa£LockInfo
(
id
->
pLock
);

1507 
	`ªÀa£O≥nC¡
(
id
->
pO≥n
);

1509 
	`sqlôe3OsLóveMuãx
();

1510 
id
->
isO≥n
 = 0;

1511 
	`TRACE2
("CLOSE %-3d\n", 
id
->
h
);

1512 
	`O≥nCou¡î
(-1);

1513 
	`sqlôeFªe
(
id
);

1514 *
pId
 = 0;

1515  
SQLITE_OK
;

1516 
	}
}

1524 *
	$sqlôe3UnixFuŒP©h«me
(c⁄° *
zRñ©ive
){

1525 *
zFuŒ
 = 0;

1526 if–
zRñ©ive
[0]=='/' ){

1527 
	`sqlôe3SëSåög
(&
zFuŒ
, 
zRñ©ive
, (*)0);

1529 *
zBuf
 = 
	`sqlôeMÆloc
(5000);

1530 if–
zBuf
==0 ){

1533 
zBuf
[0] = 0;

1534 
	`sqlôe3SëSåög
(&
zFuŒ
, 
	`gëcwd
(
zBuf
, 5000), "/", 
zRñ©ive
,

1536 
	`sqlôeFªe
(
zBuf
);

1538  
zFuŒ
;

1539 
	}
}

1544 
	$unixSëFuŒSync
(
OsFûe
 *
id
, 
v
){

1545 ((
unixFûe
*)
id
)->
fuŒSync
 = 
v
;

1546 
	}
}

1551 
	$unixFûeH™dÀ
(
OsFûe
 *
id
){

1552  ((
unixFûe
*)
id
)->
h
;

1553 
	}
}

1559 
	$unixLockSèã
(
OsFûe
 *
id
){

1560  ((
unixFûe
*)
id
)->
lockty≥
;

1561 
	}
}

1567 c⁄° 
IoMëhod
 
	gsqlôe3UnixIoMëhod
 = {

1568 
unixClo£
,

1569 
unixO≥nDúe˘‹y
,

1570 
unixRód
,

1571 
unixWrôe
,

1572 
unixSìk
,

1573 
unixTrunˇã
,

1574 
unixSync
,

1575 
unixSëFuŒSync
,

1576 
unixFûeH™dÀ
,

1577 
unixFûeSize
,

1578 
unixLock
,

1579 
unixU∆ock
,

1580 
unixLockSèã
,

1581 
unixCheckRe£rvedLock
,

1589 
	$ÆloˇãUnixFûe
(
unixFûe
 *
pInô
, 
OsFûe
 **
pId
){

1590 
unixFûe
 *
pNew
;

1591 
pInô
->
dúfd
 = -1;

1592 
pInô
->
fuŒSync
 = 0;

1593 
pInô
->
lockty≥
 = 0;

1594 
	`SET_THREADID
(
pInô
);

1595 
pNew
 = 
	`sqlôeMÆloc
–(
unixFûe
) );

1596 if–
pNew
==0 ){

1597 
	`˛o£
(
pInô
->
h
);

1598 
	`sqlôe3OsE¡îMuãx
();

1599 
	`ªÀa£LockInfo
(
pInô
->
pLock
);

1600 
	`ªÀa£O≥nC¡
(
pInô
->
pO≥n
);

1601 
	`sqlôe3OsLóveMuãx
();

1602 *
pId
 = 0;

1603  
SQLITE_NOMEM
;

1605 *
pNew
 = *
pInô
;

1606 
pNew
->
pMëhod
 = &
sqlôe3UnixIoMëhod
;

1607 *
pId
 = (
OsFûe
*)
pNew
;

1608 
	`O≥nCou¡î
(+1);

1609  
SQLITE_OK
;

1611 
	}
}

1626 
	$sqlôe3UnixR™domSìd
(*
zBuf
){

1639 
	`mem£t
(
zBuf
, 0, 256);

1640 #i‡!
	`deföed
(
SQLITE_TEST
)

1642 
pid
, 
fd
;

1643 
fd
 = 
	`›í
("/dev/uøndom", 
O_RDONLY
);

1644 if–
fd
<0 ){

1645 
time_t
 
t
;

1646 
	`time
(&
t
);

1647 
	`mem˝y
(
zBuf
, &
t
, (t));

1648 
pid
 = 
	`gëpid
();

1649 
	`mem˝y
(&
zBuf
[(
time_t
)], &
pid
, (pid));

1651 
	`ªad
(
fd
, 
zBuf
, 256);

1652 
	`˛o£
(
fd
);

1656  
SQLITE_OK
;

1657 
	}
}

1663 
	$sqlôe3UnixSÀï
(
ms
){

1664 #i‡
	`deföed
(
HAVE_USLEEP
) && HAVE_USLEEP

1665 
	`u¶ìp
(
ms
*1000);

1666  
ms
;

1668 
	`¶ìp
((
ms
+999)/1000);

1669  1000*((
ms
+999)/1000);

1671 
	}
}

1676 
	göMuãx
 = 0;

1677 #ifde‡
SQLITE_UNIX_THREADS


1678 
±hªad_t
 
	gmuãxOw√r
;

1679 
±hªad_muãx_t
 
	gmuãx1
 = 
PTHREAD_MUTEX_INITIALIZER
;

1680 
±hªad_muãx_t
 
	gmuãx2
 = 
PTHREAD_MUTEX_INITIALIZER
;

1693 
	$sqlôe3UnixE¡îMuãx
(){

1694 #ifde‡
SQLITE_UNIX_THREADS


1695 
	`±hªad_muãx_lock
(&
muãx1
);

1696 if–
öMuãx
==0 ){

1697 
	`±hªad_muãx_lock
(&
muãx2
);

1698 
muãxOw√r
 = 
	`±hªad_£lf
();

1700 
	`±hªad_muãx_u∆ock
(&
muãx1
);

1703 
	`¥ötf
("sleeping\n");

1704 
	`¶ìp
(1);

1705 
öMuãx
++;

1706 
	}
}

1707 
	$sqlôe3UnixLóveMuãx
(){

1708 
	`as£π
–
öMuãx
>0 );

1709 #ifde‡
SQLITE_UNIX_THREADS


1710 
	`as£π
–
	`±hªad_equÆ
(
muãxOw√r
, 
	`±hªad_£lf
()) );

1711 
	`±hªad_muãx_lock
(&
muãx1
);

1712 
öMuãx
--;

1713 if–
öMuãx
==0 ){

1714 
	`±hªad_muãx_u∆ock
(&
muãx2
);

1716 
	`±hªad_muãx_u∆ock
(&
muãx1
);

1718 
öMuãx
--;

1720 
	}
}

1729 
	$sqlôe3UnixInMuãx
(
thisThªadO∆y
){

1730 #ifde‡
SQLITE_UNIX_THREADS


1731  
öMuãx
>0 &&

1732 (
thisThªadO∆y
==0 || 
	`±hªad_equÆ
(
muãxOw√r
, 
	`±hªad_£lf
()));

1734  
öMuãx
>0;

1736 
	}
}

1743 #ifde‡
SQLITE_TEST


1744 
	gsqlôe3_tsd_cou¡
 = 0;

1745 #ifde‡
SQLITE_UNIX_THREADS


1746 
±hªad_muãx_t
 
	gtsd_cou¡î_muãx
 = 
PTHREAD_MUTEX_INITIALIZER
;

1747 
	#TSD_COUNTER
(
N
) \

1748 
	`±hªad_muãx_lock
(&
tsd_cou¡î_muãx
); \

1749 
sqlôe3_tsd_cou¡
 +
N
; \

1750 
	`±hªad_muãx_u∆ock
(&
tsd_cou¡î_muãx
);

	)

1752 
	#TSD_COUNTER
(
N
Ë
sqlôe3_tsd_cou¡
 +
	)
N

1755 
	#TSD_COUNTER
(
N
Ë

	)

1772 
ThªadD©a
 *
	$sqlôe3UnixThªadS≥cificD©a
(
ÆloˇãFœg
){

1773 c⁄° 
ThªadD©a
 
zîoD©a
 = {0};

1775 #ifde‡
SQLITE_UNIX_THREADS


1776 
±hªad_key_t
 
key
;

1777 
keyInô
 = 0;

1778 
ThªadD©a
 *
pTsd
;

1780 if–!
keyInô
 ){

1781 
	`sqlôe3OsE¡îMuãx
();

1782 if–!
keyInô
 ){

1783 
rc
;

1784 
rc
 = 
	`±hªad_key_¸óã
(&
key
, 0);

1785 if–
rc
 ){

1786 
	`sqlôe3OsLóveMuãx
();

1789 
keyInô
 = 1;

1791 
	`sqlôe3OsLóveMuãx
();

1794 
pTsd
 = 
	`±hªad_gë•ecific
(
key
);

1795 if–
ÆloˇãFœg
>0 ){

1796 if–
pTsd
==0 ){

1797 if–!
	`sqlôe3Te°MÆlocFaû
() ){

1798 
pTsd
 = 
	`sqlôe3OsMÆloc
((
zîoD©a
));

1800 #ifde‡
SQLITE_MEMDEBUG


1801 
sqlôe3_isFaû
 = 0;

1803 if–
pTsd
 ){

1804 *
pTsd
 = 
zîoD©a
;

1805 
	`±hªad_£t•ecific
(
key
, 
pTsd
);

1806 
	`TSD_COUNTER
(+1);

1809 }if–
pTsd
!=0 && 
ÆloˇãFœg
<0

1810 && 
	`memcmp
(
pTsd
, &
zîoD©a
, (
ThªadD©a
))==0 ){

1811 
	`sqlôe3OsFªe
(
pTsd
);

1812 
	`±hªad_£t•ecific
(
key
, 0);

1813 
	`TSD_COUNTER
(-1);

1814 
pTsd
 = 0;

1816  
pTsd
;

1818 
ThªadD©a
 *
pTsd
 = 0;

1819 if–
ÆloˇãFœg
>0 ){

1820 if–
pTsd
==0 ){

1821 if–!
	`sqlôe3Te°MÆlocFaû
() ){

1822 
pTsd
 = 
	`sqlôe3OsMÆloc
–(
zîoD©a
) );

1824 #ifde‡
SQLITE_MEMDEBUG


1825 
sqlôe3_isFaû
 = 0;

1827 if–
pTsd
 ){

1828 *
pTsd
 = 
zîoD©a
;

1829 
	`TSD_COUNTER
(+1);

1832 }if–
pTsd
!=0 && 
ÆloˇãFœg
<0

1833 && 
	`memcmp
(
pTsd
, &
zîoD©a
, (
ThªadD©a
))==0 ){

1834 
	`sqlôe3OsFªe
(
pTsd
);

1835 
	`TSD_COUNTER
(-1);

1836 
pTsd
 = 0;

1838  
pTsd
;

1840 
	}
}

1846 #ifde‡
SQLITE_TEST


1847 
	gsqlôe3_cuºít_time
 = 0;

1855 
	$sqlôe3UnixCuºítTime
(*
¥Now
){

1856 #ifde‡
NO_GETTOD


1857 
time_t
 
t
;

1858 
	`time
(&
t
);

1859 *
¥Now
 = 
t
/86400.0 + 2440587.5;

1861 
timevÆ
 
sNow
;

1862 
timez⁄e
 
sTz
;

1863 
	`gëtimeofday
(&
sNow
, &
sTz
);

1864 *
¥Now
 = 2440587.5 + 
sNow
.
tv_£c
/86400.0 + sNow.
tv_u£c
/86400000000.0;

1866 #ifde‡
SQLITE_TEST


1867 if–
sqlôe3_cuºít_time
 ){

1868 *
¥Now
 = 
sqlôe3_cuºít_time
/86400.0 + 2440587.5;

1872 
	}
}

	@os_unix.h

15 #i‚de‡
_SQLITE_OS_UNIX_H_


16 
	#_SQLITE_OS_UNIX_H_


	)

38 #i‚de‡
SQLITE_DISABLE_LFS


39 
	#_LARGE_FILE
 1

	)

40 #i‚de‡
_FILE_OFFSET_BITS


41 
	#_FILE_OFFSET_BITS
 64

	)

43 
	#_LARGEFILE_SOURCE
 1

	)

49 
	~<sys/ty≥s.h
>

50 
	~<sys/°©.h
>

51 
	~<f˙é.h
>

52 
	~<uni°d.h
>

60 #i‡
deföed
(
THREADSAFE
) && THREADSAFE

61 
	~<±hªad.h
>

62 
	#SQLITE_UNIX_THREADS
 1

	)

74 
OsFûe
 
	tOsFûe
;

75 
	sOsFûe
 {

76 
Pagî
 *
	mpPagî
;

77 
›íC¡
 *
	mpO≥n
;

78 
lockInfo
 *
	mpLock
;

79 
	mh
;

80 
	mlockty≥
;

81 
	misO≥n
;

82 
	mfuŒSync
;

83 
	mdúfd
;

84 #ifde‡
SQLITE_UNIX_THREADS


85 
±hªad_t
 
	mtid
;

92 
	#SET_FULLSYNC
(
x
,
y
Ë((x).
fuŒSync
 = (y))

	)

97 
	#SQLITE_TEMPNAME_SIZE
 200

	)

102 #i‡
deföed
(
HAVE_USLEEP
) && HAVE_USLEEP

103 
	#SQLITE_MIN_SLEEP_MS
 1

	)

105 
	#SQLITE_MIN_SLEEP_MS
 1000

	)

111 #i‚de‡
SQLITE_DEFAULT_FILE_PERMISSIONS


112 
	#SQLITE_DEFAULT_FILE_PERMISSIONS
 0644

	)

	@os_win.c

15 
	~"sqlôeI¡.h
"

16 
	~"os.h
"

17 #i‡
OS_WIN


19 
	~<wöba£.h
>

21 #ifde‡
__CYGWIN__


22 
	~<sys/cygwö.h
>

28 #i‡
deföed
(
THREADSAFE
) && THREADSAFE

29 
	#SQLITE_W32_THREADS
 1

	)

35 
	~"os_comm⁄.h
"

41 #i‡
deföed
(
_WIN32_WCE
)

42 
	#OS_WINCE
 1

	)

44 
	#OS_WINCE
 0

	)

51 #i‡
OS_WINCE


52 
	swö˚Lock
 {

53 
	mnRódîs
;

54 
BOOL
 
	mbPídög
;

55 
BOOL
 
	mbRe£rved
;

56 
BOOL
 
	mbEx˛usive
;

57 } 
	twö˚Lock
;

64 
wöFûe
 
	twöFûe
;

65 
	swöFûe
 {

66 
IoMëhod
 c⁄° *
	mpMëhod
;

67 
HANDLE
 
	mh
;

68 
	mlockty≥
;

69 
	msh¨edLockByã
;

70 #i‡
OS_WINCE


71 
WCHAR
 *
	mzDñëeOnClo£
;

72 
HANDLE
 
	mhMuãx
;

73 
HANDLE
 
	mhSh¨ed
;

74 
wö˚Lock
 
	mloˇl
;

75 
wö˚Lock
 *
	msh¨ed
;

85 #i‚de‡
SQLITE_OMIT_DISKIO


99 
	gsqlôe3_os_ty≥
 = 0;

112 #i‡
OS_WINCE


113 
	#isNT
(Ë(1)

	)

115 
	$isNT
(){

116 if–
sqlôe3_os_ty≥
==0 ){

117 
OSVERSIONINFO
 
sInfo
;

118 
sInfo
.
dwOSVîsi⁄InfoSize
 = (sInfo);

119 
	`GëVîsi⁄Ex
(&
sInfo
);

120 
sqlôe3_os_ty≥
 = 
sInfo
.
dwPœtf‹mId
==
VER_PLATFORM_WIN32_NT
 ? 2 : 1;

122  
sqlôe3_os_ty≥
==2;

123 
	}
}

130 
WCHAR
 *
	$utf8ToUnicode
(c⁄° *
zFûíame
){

131 
nByã
;

132 
WCHAR
 *
zWideFûíame
;

134 if–!
	`isNT
() ){

137 
nByã
 = 
	`Mu…iByãToWideCh¨
(
CP_UTF8
, 0, 
zFûíame
, -1, 
NULL
, 0)*(
WCHAR
);

138 
zWideFûíame
 = 
	`sqlôeMÆloc
–
nByã
*(zWideFilename[0]) );

139 if–
zWideFûíame
==0 ){

142 
nByã
 = 
	`Mu…iByãToWideCh¨
(
CP_UTF8
, 0, 
zFûíame
, -1, 
zWideFûíame
,ÇByte);

143 if–
nByã
==0 ){

144 
	`sqlôeFªe
(
zWideFûíame
);

145 
zWideFûíame
 = 0;

147  
zWideFûíame
;

148 
	}
}

154 *
	$unicodeToUtf8
(c⁄° 
WCHAR
 *
zWideFûíame
){

155 
nByã
;

156 *
zFûíame
;

158 
nByã
 = 
	`WideCh¨ToMu…iByã
(
CP_UTF8
, 0, 
zWideFûíame
, -1, 0, 0, 0, 0);

159 
zFûíame
 = 
	`sqlôeMÆloc
–
nByã
 );

160 if–
zFûíame
==0 ){

163 
nByã
 = 
	`WideCh¨ToMu…iByã
(
CP_UTF8
, 0, 
zWideFûíame
, -1, 
zFûíame
,ÇByte,

165 if–
nByã
 == 0 ){

166 
	`sqlôeFªe
(
zFûíame
);

167 
zFûíame
 = 0;

169  
zFûíame
;

170 
	}
}

172 #i‡
OS_WINCE


180 
	~<time.h
>

181 
tm
 *
__cde˛
 
	$loˇ…ime
(c⁄° 
time_t
 *
t
)

183 
tm
 
y
;

184 
FILETIME
 
uTm
, 
lTm
;

185 
SYSTEMTIME
 
pTm
;

186 
i64
 
t64
;

187 
t64
 = *
t
;

188 
t64
 = (t64 + 11644473600)*10000000;

189 
uTm
.
dwLowD©eTime
 = 
t64
 & 0xFFFFFFFF;

190 
uTm
.
dwHighD©eTime

t64
 >> 32;

191 
	`FûeTimeToLoˇlFûeTime
(&
uTm
,&
lTm
);

192 
	`FûeTimeToSy°emTime
(&
lTm
,&
pTm
);

193 
y
.
tm_yór
 = 
pTm
.
wYór
 - 1900;

194 
y
.
tm_m⁄
 = 
pTm
.
wM⁄th
 - 1;

195 
y
.
tm_wday
 = 
pTm
.
wDayOfWìk
;

196 
y
.
tm_mday
 = 
pTm
.
wDay
;

197 
y
.
tm_hour
 = 
pTm
.
wHour
;

198 
y
.
tm_mö
 = 
pTm
.
wMöuã
;

199 
y
.
tm_£c
 = 
pTm
.
wSec⁄d
;

200  &
y
;

201 
	}
}

204 
	#GëTempP©hA
(
a
,
b
)

	)

206 
	#LockFûe
(
a
,
b
,
c
,
d
,
e
Ë
	`wö˚LockFûe
(&a, b, c, d,É)

	)

207 
	#U∆ockFûe
(
a
,
b
,
c
,
d
,
e
Ë
	`wö˚U∆ockFûe
(&a, b, c, d,É)

	)

208 
	#LockFûeEx
(
a
,
b
,
c
,
d
,
e
,
f
Ë
	`wö˚LockFûeEx
(&a, b, c, d,É, f)

	)

210 
	#HANDLE_TO_WINFILE
(
a
Ë(
wöFûe
*)&((*Ô)[-
	`off£tof
(wöFûe,
h
)]

	)

215 
	$wö˚MuãxAcquúe
(
HANDLE
 
h
){

216 
DWORD
 
dwEº
;

218 
dwEº
 = 
	`WaôF‹SögÀObje˘
(
h
, 
INFINITE
);

219 } 
dwEº
 !
WAIT_OBJECT_0
 && dwEº !
WAIT_ABANDONED
);

220 
	}
}

224 
	#wö˚MuãxRñó£
(
h
Ë
	`Rñó£Muãx
(h)

	)

230 
BOOL
 
	$wö˚Cª©eLock
(c⁄° *
zFûíame
, 
wöFûe
 *
pFûe
){

231 
WCHAR
 *
zTok
;

232 
WCHAR
 *
zName
 = 
	`utf8ToUnicode
(
zFûíame
);

233 
BOOL
 
bInô
 = 
TRUE
;

236 
	`ZîoMem‹y
(&
pFûe
->
loˇl
, (pFile->local));

240 
zTok
 = 
	`Ch¨LowîW
(
zName
);

241 ;*
zTok
;zTok++){

242 i‡(*
zTok
 == '\\') *zTok = '_';

246 
pFûe
->
hMuãx
 = 
	`Cª©eMuãxW
(
NULL
, 
FALSE
, 
zName
);

247 i‡(!
pFûe
->
hMuãx
){

248 
	`sqlôeFªe
(
zName
);

249  
FALSE
;

253 
	`wö˚MuãxAcquúe
(
pFûe
->
hMuãx
);

259 
	`Ch¨UµîW
(
zName
);

260 
pFûe
->
hSh¨ed
 = 
	`Cª©eFûeM≠pögW
(
INVALID_HANDLE_VALUE
, 
NULL
,

261 
PAGE_READWRITE
, 0, (
wö˚Lock
),

262 
zName
);

266 i‡(
	`GëLa°Eº‹
(Ë=
ERROR_ALREADY_EXISTS
){

267 
bInô
 = 
FALSE
;

270 
	`sqlôeFªe
(
zName
);

273 i‡(
pFûe
->
hSh¨ed
){

274 
pFûe
->
sh¨ed
 = (
wö˚Lock
*)
	`M≠VõwOfFûe
’Fûe->
hSh¨ed
,

275 
FILE_MAP_READ
|
FILE_MAP_WRITE
, 0, 0, (
wö˚Lock
));

277 i‡(!
pFûe
->
sh¨ed
){

278 
	`Clo£H™dÀ
(
pFûe
->
hSh¨ed
);

279 
pFûe
->
hSh¨ed
 = 
NULL
;

284 i‡(
pFûe
->
hSh¨ed
 =
NULL
){

285 
	`wö˚MuãxRñó£
(
pFûe
->
hMuãx
);

286 
	`Clo£H™dÀ
(
pFûe
->
hMuãx
);

287 
pFûe
->
hMuãx
 = 
NULL
;

288  
FALSE
;

292 i‡(
bInô
) {

293 
	`ZîoMem‹y
(
pFûe
->
sh¨ed
, (
wö˚Lock
));

296 
	`wö˚MuãxRñó£
(
pFûe
->
hMuãx
);

297  
TRUE
;

298 
	}
}

303 
	$wö˚De°royLock
(
wöFûe
 *
pFûe
){

304 i‡(
pFûe
->
hMuãx
){

306 
	`wö˚MuãxAcquúe
(
pFûe
->
hMuãx
);

310 i‡(
pFûe
->
loˇl
.
nRódîs
){

311 
pFûe
->
sh¨ed
->
nRódîs
 --;

313 i‡(
pFûe
->
loˇl
.
bRe£rved
){

314 
pFûe
->
sh¨ed
->
bRe£rved
 = 
FALSE
;

316 i‡(
pFûe
->
loˇl
.
bPídög
){

317 
pFûe
->
sh¨ed
->
bPídög
 = 
FALSE
;

319 i‡(
pFûe
->
loˇl
.
bEx˛usive
){

320 
pFûe
->
sh¨ed
->
bEx˛usive
 = 
FALSE
;

324 
	`Unm≠VõwOfFûe
(
pFûe
->
sh¨ed
);

325 
	`Clo£H™dÀ
(
pFûe
->
hSh¨ed
);

328 
	`wö˚MuãxRñó£
(
pFûe
->
hMuãx
);

329 
	`Clo£H™dÀ
(
pFûe
->
hMuãx
);

330 
pFûe
->
hMuãx
 = 
NULL
;

332 
	}
}

337 
BOOL
 
	$wö˚LockFûe
(

338 
HANDLE
 *
phFûe
,

339 
DWORD
 
dwFûeOff£tLow
,

340 
DWORD
 
dwFûeOff£tHigh
,

341 
DWORD
 
nNumbîOfByãsToLockLow
,

342 
DWORD
 
nNumbîOfByãsToLockHigh


344 
wöFûe
 *
pFûe
 = 
	`HANDLE_TO_WINFILE
(
phFûe
);

345 
BOOL
 
bRëu∫
 = 
FALSE
;

347 i‡(!
pFûe
->
hMuãx
Ë 
TRUE
;

348 
	`wö˚MuãxAcquúe
(
pFûe
->
hMuãx
);

351 i‡(
dwFûeOff£tLow
 =
SHARED_FIRST


352 && 
nNumbîOfByãsToLockLow
 =
SHARED_SIZE
){

353 i‡(
pFûe
->
sh¨ed
->
nRódîs
 =0 &&ÖFûe->sh¨ed->
bEx˛usive
 == 0){

354 
pFûe
->
sh¨ed
->
bEx˛usive
 = 
TRUE
;

355 
pFûe
->
loˇl
.
bEx˛usive
 = 
TRUE
;

356 
bRëu∫
 = 
TRUE
;

361 i‡((
dwFûeOff£tLow
 >
SHARED_FIRST
 &&

362 
dwFûeOff£tLow
 < 
SHARED_FIRST
 + 
SHARED_SIZE
) &&

363 
nNumbîOfByãsToLockLow
 == 1){

364 i‡(
pFûe
->
sh¨ed
->
bEx˛usive
 == 0){

365 
pFûe
->
loˇl
.
nRódîs
 ++;

366 i‡(
pFûe
->
loˇl
.
nRódîs
 == 1){

367 
pFûe
->
sh¨ed
->
nRódîs
 ++;

369 
bRëu∫
 = 
TRUE
;

374 i‡(
dwFûeOff£tLow
 =
PENDING_BYTE
 && 
nNumbîOfByãsToLockLow
 == 1){

376 i‡(
pFûe
->
sh¨ed
->
bPídög
 == 0) {

377 
pFûe
->
sh¨ed
->
bPídög
 = 
TRUE
;

378 
pFûe
->
loˇl
.
bPídög
 = 
TRUE
;

379 
bRëu∫
 = 
TRUE
;

383 i‡(
dwFûeOff£tLow
 =
RESERVED_BYTE
 && 
nNumbîOfByãsToLockLow
 == 1){

384 i‡(
pFûe
->
sh¨ed
->
bRe£rved
 == 0) {

385 
pFûe
->
sh¨ed
->
bRe£rved
 = 
TRUE
;

386 
pFûe
->
loˇl
.
bRe£rved
 = 
TRUE
;

387 
bRëu∫
 = 
TRUE
;

391 
	`wö˚MuãxRñó£
(
pFûe
->
hMuãx
);

392  
bRëu∫
;

393 
	}
}

398 
BOOL
 
	$wö˚U∆ockFûe
(

399 
HANDLE
 *
phFûe
,

400 
DWORD
 
dwFûeOff£tLow
,

401 
DWORD
 
dwFûeOff£tHigh
,

402 
DWORD
 
nNumbîOfByãsToU∆ockLow
,

403 
DWORD
 
nNumbîOfByãsToU∆ockHigh


405 
wöFûe
 *
pFûe
 = 
	`HANDLE_TO_WINFILE
(
phFûe
);

406 
BOOL
 
bRëu∫
 = 
FALSE
;

408 i‡(!
pFûe
->
hMuãx
Ë 
TRUE
;

409 
	`wö˚MuãxAcquúe
(
pFûe
->
hMuãx
);

412 i‡(
dwFûeOff£tLow
 >
SHARED_FIRST
 &&

413 
dwFûeOff£tLow
 < 
SHARED_FIRST
 + 
SHARED_SIZE
){

415 i‡(
pFûe
->
loˇl
.
bEx˛usive
){

416 
pFûe
->
loˇl
.
bEx˛usive
 = 
FALSE
;

417 
pFûe
->
sh¨ed
->
bEx˛usive
 = 
FALSE
;

418 
bRëu∫
 = 
TRUE
;

422 i‡(
pFûe
->
loˇl
.
nRódîs
){

423 
pFûe
->
loˇl
.
nRódîs
 --;

424 i‡(
pFûe
->
loˇl
.
nRódîs
 == 0)

426 
pFûe
->
sh¨ed
->
nRódîs
 --;

428 
bRëu∫
 = 
TRUE
;

433 i‡(
dwFûeOff£tLow
 =
PENDING_BYTE
 && 
nNumbîOfByãsToU∆ockLow
 == 1){

434 i‡(
pFûe
->
loˇl
.
bPídög
){

435 
pFûe
->
loˇl
.
bPídög
 = 
FALSE
;

436 
pFûe
->
sh¨ed
->
bPídög
 = 
FALSE
;

437 
bRëu∫
 = 
TRUE
;

441 i‡(
dwFûeOff£tLow
 =
RESERVED_BYTE
 && 
nNumbîOfByãsToU∆ockLow
 == 1){

442 i‡(
pFûe
->
loˇl
.
bRe£rved
) {

443 
pFûe
->
loˇl
.
bRe£rved
 = 
FALSE
;

444 
pFûe
->
sh¨ed
->
bRe£rved
 = 
FALSE
;

445 
bRëu∫
 = 
TRUE
;

449 
	`wö˚MuãxRñó£
(
pFûe
->
hMuãx
);

450  
bRëu∫
;

451 
	}
}

456 
BOOL
 
	$wö˚LockFûeEx
(

457 
HANDLE
 *
phFûe
,

458 
DWORD
 
dwFœgs
,

459 
DWORD
 
dwRe£rved
,

460 
DWORD
 
nNumbîOfByãsToLockLow
,

461 
DWORD
 
nNumbîOfByãsToLockHigh
,

462 
LPOVERLAPPED
 
ÕOvîœµed


466 i‡(
ÕOvîœµed
->
Off£t
 =
SHARED_FIRST
 &&

467 
dwFœgs
 == 1 &&

468 
nNumbîOfByãsToLockLow
 =
SHARED_SIZE
){

469  
	`wö˚LockFûe
(
phFûe
, 
SHARED_FIRST
, 0, 1, 0);

471  
FALSE
;

472 
	}
}

481 
	$sqlôe3WöDñëe
(c⁄° *
zFûíame
){

482 
WCHAR
 *
zWide
 = 
	`utf8ToUnicode
(
zFûíame
);

483 if–
zWide
 ){

484 
	`DñëeFûeW
(
zWide
);

485 
	`sqlôeFªe
(
zWide
);

487 #i‡
OS_WINCE


488  
SQLITE_NOMEM
;

490 
	`DñëeFûeA
(
zFûíame
);

493 
	`TRACE2
("DELETE \"%s\"\n", 
zFûíame
);

494  
SQLITE_OK
;

495 
	}
}

500 
	$sqlôe3WöFûeExi°s
(c⁄° *
zFûíame
){

501 
exi°s
 = 0;

502 
WCHAR
 *
zWide
 = 
	`utf8ToUnicode
(
zFûíame
);

503 if–
zWide
 ){

504 
exi°s
 = 
	`GëFûeAâribuãsW
(
zWide
) != 0xffffffff;

505 
	`sqlôeFªe
(
zWide
);

507 #i‡
OS_WINCE


508  
SQLITE_NOMEM
;

510 
exi°s
 = 
	`GëFûeAâribuãsA
(
zFûíame
) != 0xffffffff;

513  
exi°s
;

514 
	}
}

517 
ÆloˇãWöFûe
(
wöFûe
 *
pInô
, 
OsFûe
 **
pId
);

532 
	$sqlôe3WöO≥nRódWrôe
(

533 c⁄° *
zFûíame
,

534 
OsFûe
 **
pId
,

535 *
pRód⁄ly


537 
wöFûe
 
f
;

538 
HANDLE
 
h
;

539 
WCHAR
 *
zWide
 = 
	`utf8ToUnicode
(
zFûíame
);

540 
	`as£π
–*
pId
==0 );

541 if–
zWide
 ){

542 
h
 = 
	`Cª©eFûeW
(
zWide
,

543 
GENERIC_READ
 | 
GENERIC_WRITE
,

544 
FILE_SHARE_READ
 | 
FILE_SHARE_WRITE
,

545 
NULL
,

546 
OPEN_ALWAYS
,

547 
FILE_ATTRIBUTE_NORMAL
 | 
FILE_FLAG_RANDOM_ACCESS
,

548 
NULL


550 if–
h
==
INVALID_HANDLE_VALUE
 ){

551 
h
 = 
	`Cª©eFûeW
(
zWide
,

552 
GENERIC_READ
,

553 
FILE_SHARE_READ
,

554 
NULL
,

555 
OPEN_ALWAYS
,

556 
FILE_ATTRIBUTE_NORMAL
 | 
FILE_FLAG_RANDOM_ACCESS
,

557 
NULL


559 if–
h
==
INVALID_HANDLE_VALUE
 ){

560 
	`sqlôeFªe
(
zWide
);

561  
SQLITE_CANTOPEN
;

563 *
pRód⁄ly
 = 1;

565 *
pRód⁄ly
 = 0;

567 #i‡
OS_WINCE


568 i‡(!
	`wö˚Cª©eLock
(
zFûíame
, &
f
)){

569 
	`Clo£H™dÀ
(
h
);

570 
	`sqlôeFªe
(
zWide
);

571  
SQLITE_CANTOPEN
;

574 
	`sqlôeFªe
(
zWide
);

576 #i‡
OS_WINCE


577  
SQLITE_NOMEM
;

579 
h
 = 
	`Cª©eFûeA
(
zFûíame
,

580 
GENERIC_READ
 | 
GENERIC_WRITE
,

581 
FILE_SHARE_READ
 | 
FILE_SHARE_WRITE
,

582 
NULL
,

583 
OPEN_ALWAYS
,

584 
FILE_ATTRIBUTE_NORMAL
 | 
FILE_FLAG_RANDOM_ACCESS
,

585 
NULL


587 if–
h
==
INVALID_HANDLE_VALUE
 ){

588 
h
 = 
	`Cª©eFûeA
(
zFûíame
,

589 
GENERIC_READ
,

590 
FILE_SHARE_READ
,

591 
NULL
,

592 
OPEN_ALWAYS
,

593 
FILE_ATTRIBUTE_NORMAL
 | 
FILE_FLAG_RANDOM_ACCESS
,

594 
NULL


596 if–
h
==
INVALID_HANDLE_VALUE
 ){

597  
SQLITE_CANTOPEN
;

599 *
pRód⁄ly
 = 1;

601 *
pRód⁄ly
 = 0;

605 
f
.
h
 = h;

606 #i‡
OS_WINCE


607 
f
.
zDñëeOnClo£
 = 0;

609 
	`TRACE3
("OPEN R/W %d \"%s\"\n", 
h
, 
zFûíame
);

610  
	`ÆloˇãWöFûe
(&
f
, 
pId
);

611 
	}
}

628 
	$sqlôe3WöO≥nEx˛usive
(c⁄° *
zFûíame
, 
OsFûe
 **
pId
, 
dñFœg
){

629 
wöFûe
 
f
;

630 
HANDLE
 
h
;

631 
fûeÊags
;

632 
WCHAR
 *
zWide
 = 
	`utf8ToUnicode
(
zFûíame
);

633 
	`as£π
–*
pId
 == 0 );

634 
fûeÊags
 = 
FILE_FLAG_RANDOM_ACCESS
;

635 #i‡!
OS_WINCE


636 if–
dñFœg
 ){

637 
fûeÊags
 |
FILE_ATTRIBUTE_TEMPORARY
 | 
FILE_FLAG_DELETE_ON_CLOSE
;

640 if–
zWide
 ){

641 
h
 = 
	`Cª©eFûeW
(
zWide
,

642 
GENERIC_READ
 | 
GENERIC_WRITE
,

644 
NULL
,

645 
CREATE_ALWAYS
,

646 
fûeÊags
,

647 
NULL


649 
	`sqlôeFªe
(
zWide
);

651 #i‡
OS_WINCE


652  
SQLITE_NOMEM
;

654 
h
 = 
	`Cª©eFûeA
(
zFûíame
,

655 
GENERIC_READ
 | 
GENERIC_WRITE
,

657 
NULL
,

658 
CREATE_ALWAYS
,

659 
fûeÊags
,

660 
NULL


664 if–
h
==
INVALID_HANDLE_VALUE
 ){

665  
SQLITE_CANTOPEN
;

667 
f
.
h
 = h;

668 #i‡
OS_WINCE


669 
f
.
zDñëeOnClo£
 = 
dñFœg
 ? 
	`utf8ToUnicode
(
zFûíame
) : 0;

670 
f
.
hMuãx
 = 
NULL
;

672 
	`TRACE3
("OPEN EX %d \"%s\"\n", 
h
, 
zFûíame
);

673  
	`ÆloˇãWöFûe
(&
f
, 
pId
);

674 
	}
}

683 
	$sqlôe3WöO≥nRódO∆y
(c⁄° *
zFûíame
, 
OsFûe
 **
pId
){

684 
wöFûe
 
f
;

685 
HANDLE
 
h
;

686 
WCHAR
 *
zWide
 = 
	`utf8ToUnicode
(
zFûíame
);

687 
	`as£π
–*
pId
==0 );

688 if–
zWide
 ){

689 
h
 = 
	`Cª©eFûeW
(
zWide
,

690 
GENERIC_READ
,

692 
NULL
,

693 
OPEN_EXISTING
,

694 
FILE_ATTRIBUTE_NORMAL
 | 
FILE_FLAG_RANDOM_ACCESS
,

695 
NULL


697 
	`sqlôeFªe
(
zWide
);

699 #i‡
OS_WINCE


700  
SQLITE_NOMEM
;

702 
h
 = 
	`Cª©eFûeA
(
zFûíame
,

703 
GENERIC_READ
,

705 
NULL
,

706 
OPEN_EXISTING
,

707 
FILE_ATTRIBUTE_NORMAL
 | 
FILE_FLAG_RANDOM_ACCESS
,

708 
NULL


712 if–
h
==
INVALID_HANDLE_VALUE
 ){

713  
SQLITE_CANTOPEN
;

715 
f
.
h
 = h;

716 #i‡
OS_WINCE


717 
f
.
zDñëeOnClo£
 = 0;

718 
f
.
hMuãx
 = 
NULL
;

720 
	`TRACE3
("OPEN RO %d \"%s\"\n", 
h
, 
zFûíame
);

721  
	`ÆloˇãWöFûe
(&
f
, 
pId
);

722 
	}
}

740 
	$wöO≥nDúe˘‹y
(

741 
OsFûe
 *
id
,

742 c⁄° *
zDú«me


744  
SQLITE_OK
;

745 
	}
}

752 *
	gsqlôe3_ãmp_dúe˘‹y
 = 0;

758 
	$sqlôe3WöTempFûeName
(*
zBuf
){

759 
zCh¨s
[] =

763 
i
, 
j
;

764 
zTempP©h
[
SQLITE_TEMPNAME_SIZE
];

765 if–
sqlôe3_ãmp_dúe˘‹y
 ){

766 
	`°∫˝y
(
zTempP©h
, 
sqlôe3_ãmp_dúe˘‹y
, 
SQLITE_TEMPNAME_SIZE
-30);

767 
zTempP©h
[
SQLITE_TEMPNAME_SIZE
-30] = 0;

768 }if–
	`isNT
() ){

769 *
zMu…i
;

770 
WCHAR
 
zWideP©h
[
SQLITE_TEMPNAME_SIZE
];

771 
	`GëTempP©hW
(
SQLITE_TEMPNAME_SIZE
-30, 
zWideP©h
);

772 
zMu…i
 = 
	`unicodeToUtf8
(
zWideP©h
);

773 if–
zMu…i
 ){

774 
	`°∫˝y
(
zTempP©h
, 
zMu…i
, 
SQLITE_TEMPNAME_SIZE
-30);

775 
zTempP©h
[
SQLITE_TEMPNAME_SIZE
-30] = 0;

776 
	`sqlôeFªe
(
zMu…i
);

779 
	`GëTempP©hA
(
SQLITE_TEMPNAME_SIZE
-30, 
zTempP©h
);

781 
i
=
	`°æí
(
zTempP©h
); i>0 && zTempPath[i-1]=='\\'; i--){}

782 
zTempP©h
[
i
] = 0;

784 
	`•rötf
(
zBuf
, "%s\\"
TEMP_FILE_PREFIX
, 
zTempP©h
);

785 
j
 = 
	`°æí
(
zBuf
);

786 
	`sqlôe3R™dom√ss
(15, &
zBuf
[
j
]);

787 
i
=0; i<15; i++, 
j
++){

788 
zBuf
[
j
] = ()
zCh¨s
[ (()zBuf[j])%((zChars)-1) ];

790 
zBuf
[
j
] = 0;

791 if–!
	`sqlôe3OsFûeExi°s
(
zBuf
) ) ;

793 
	`TRACE2
("TEMP FILENAME: %s\n", 
zBuf
);

794  
SQLITE_OK
;

795 
	}
}

800 
	$wöClo£
(
OsFûe
 **
pId
){

801 
wöFûe
 *
pFûe
;

802 if–
pId
 && (
pFûe
 = (
wöFûe
*)*pId)!=0 ){

803 
	`TRACE2
("CLOSE %d\n", 
pFûe
->
h
);

804 
	`Clo£H™dÀ
(
pFûe
->
h
);

805 #i‡
OS_WINCE


806 
	`wö˚De°royLock
(
pFûe
);

807 if–
pFûe
->
zDñëeOnClo£
 ){

808 
	`DñëeFûeW
(
pFûe
->
zDñëeOnClo£
);

809 
	`sqlôeFªe
(
pFûe
->
zDñëeOnClo£
);

812 
	`O≥nCou¡î
(-1);

813 
	`sqlôeFªe
(
pFûe
);

814 *
pId
 = 0;

816  
SQLITE_OK
;

817 
	}
}

824 
	$wöRód
(
OsFûe
 *
id
, *
pBuf
, 
amt
){

825 
DWORD
 
gŸ
;

826 
	`as£π
–
id
!=0 );

827 
	`SimuœãIOEº‹
(
SQLITE_IOERR
);

828 
	`TRACE3
("READ %dÜock=%d\n", ((
wöFûe
*)
id
)->
h
, ((wöFûe*)id)->
lockty≥
);

829 if–!
	`RódFûe
(((
wöFûe
*)
id
)->
h
, 
pBuf
, 
amt
, &
gŸ
, 0) ){

830 
gŸ
 = 0;

832 if–
gŸ
==(
DWORD
)
amt
 ){

833  
SQLITE_OK
;

835  
SQLITE_IOERR
;

837 
	}
}

843 
	$wöWrôe
(
OsFûe
 *
id
, c⁄° *
pBuf
, 
amt
){

844 
rc
 = 0;

845 
DWORD
 
wrŸe
;

846 
	`as£π
–
id
!=0 );

847 
	`SimuœãIOEº‹
(
SQLITE_IOERR
);

848 
SimuœãDiskfuŒEº‹
;

849 
	`TRACE3
("WRITE %dÜock=%d\n", ((
wöFûe
*)
id
)->
h
, ((wöFûe*)id)->
lockty≥
);

850 
	`as£π
–
amt
>0 );

851  
amt
>0 && (
rc
 = 
	`WrôeFûe
(((
wöFûe
*)
id
)->
h
, 
pBuf
,ámt, &
wrŸe
, 0))!=0

852 && 
wrŸe
>0 ){

853 
amt
 -
wrŸe
;

854 
pBuf
 = &((*ÌBuf)[
wrŸe
];

856 if–!
rc
 || 
amt
>()
wrŸe
 ){

857  
SQLITE_FULL
;

859  
SQLITE_OK
;

860 
	}
}

865 #i‚de‡
INVALID_SET_FILE_POINTER


866 
	#INVALID_SET_FILE_POINTER
 ((
DWORD
)-1)

	)

872 
	$wöSìk
(
OsFûe
 *
id
, 
i64
 
off£t
){

873 
LONG
 
uµîBôs
 = 
off£t
>>32;

874 
LONG
 
lowîBôs
 = 
off£t
 & 0xffffffff;

875 
DWORD
 
rc
;

876 
	`as£π
–
id
!=0 );

877 #ifde‡
SQLITE_TEST


878 if–
off£t
 ) 
SimuœãDiskfuŒEº‹


880 
	`SEEK
(
off£t
/1024 + 1);

881 
rc
 = 
	`SëFûePoöãr
(((
wöFûe
*)
id
)->
h
, 
lowîBôs
, &
uµîBôs
, 
FILE_BEGIN
);

882 
	`TRACE3
("SEEK %d %Œd\n", ((
wöFûe
*)
id
)->
h
, 
off£t
);

883 if–
rc
==
INVALID_SET_FILE_POINTER
 && 
	`GëLa°Eº‹
()!=
NO_ERROR
 ){

884  
SQLITE_FULL
;

886  
SQLITE_OK
;

887 
	}
}

892 
	$wöSync
(
OsFûe
 *
id
, 
d©aO∆y
){

893 
	`as£π
–
id
!=0 );

894 
	`TRACE3
("SYNC %dÜock=%d\n", ((
wöFûe
*)
id
)->
h
, ((wöFûe*)id)->
lockty≥
);

895 if–
	`FlushFûeBuf„rs
(((
wöFûe
*)
id
)->
h
) ){

896  
SQLITE_OK
;

898  
SQLITE_IOERR
;

900 
	}
}

906 
	$sqlôe3WöSyncDúe˘‹y
(c⁄° *
zDú«me
){

907 
	`SimuœãIOEº‹
(
SQLITE_IOERR
);

908  
SQLITE_OK
;

909 
	}
}

914 
	$wöTrunˇã
(
OsFûe
 *
id
, 
i64
 
nByã
){

915 
LONG
 
uµîBôs
 = 
nByã
>>32;

916 
	`as£π
–
id
!=0 );

917 
	`TRACE3
("TRUNCATE %d %Œd\n", ((
wöFûe
*)
id
)->
h
, 
nByã
);

918 
	`SimuœãIOEº‹
(
SQLITE_IOERR
);

919 
	`SëFûePoöãr
(((
wöFûe
*)
id
)->
h
, 
nByã
, &
uµîBôs
, 
FILE_BEGIN
);

920 
	`SëEndOfFûe
(((
wöFûe
*)
id
)->
h
);

921  
SQLITE_OK
;

922 
	}
}

927 
	$wöFûeSize
(
OsFûe
 *
id
, 
i64
 *
pSize
){

928 
DWORD
 
uµîBôs
, 
lowîBôs
;

929 
	`as£π
–
id
!=0 );

930 
	`SimuœãIOEº‹
(
SQLITE_IOERR
);

931 
lowîBôs
 = 
	`GëFûeSize
(((
wöFûe
*)
id
)->
h
, &
uµîBôs
);

932 *
pSize
 = (((
i64
)
uµîBôs
)<<32Ë+ 
lowîBôs
;

933  
SQLITE_OK
;

934 
	}
}

939 #i‚de‡
LOCKFILE_FAIL_IMMEDIATELY


940 
	#LOCKFILE_FAIL_IMMEDIATELY
 1

	)

948 
	$gëRódLock
(
wöFûe
 *
id
){

949 
ªs
;

950 if–
	`isNT
() ){

951 
OVERLAPPED
 
ovÕ
;

952 
ovÕ
.
Off£t
 = 
SHARED_FIRST
;

953 
ovÕ
.
Off£tHigh
 = 0;

954 
ovÕ
.
hEvít
 = 0;

955 
ªs
 = 
	`LockFûeEx
(
id
->
h
, 
LOCKFILE_FAIL_IMMEDIATELY
, 0, 
SHARED_SIZE
,0,&
ovÕ
);

957 
lk
;

958 
	`sqlôe3R™dom√ss
((
lk
), &lk);

959 
id
->
sh¨edLockByã
 = (
lk
 & 0x7fffffff)%(
SHARED_SIZE
 - 1);

960 
ªs
 = 
	`LockFûe
(
id
->
h
, 
SHARED_FIRST
+id->
sh¨edLockByã
, 0, 1, 0);

962  
ªs
;

963 
	}
}

968 
	$u∆ockRódLock
(
wöFûe
 *
pFûe
){

969 
ªs
;

970 if–
	`isNT
() ){

971 
ªs
 = 
	`U∆ockFûe
(
pFûe
->
h
, 
SHARED_FIRST
, 0, 
SHARED_SIZE
, 0);

973 
ªs
 = 
	`U∆ockFûe
(
pFûe
->
h
, 
SHARED_FIRST
 +ÖFûe->
sh¨edLockByã
, 0, 1, 0);

975  
ªs
;

976 
	}
}

978 #i‚de‡
SQLITE_OMIT_PAGER_PRAGMAS


983 
	$sqlôe3WöIsDúWrôabÀ
(*
zDú«me
){

984 
fûeAâr
;

985 
WCHAR
 *
zWide
;

986 if–
zDú«me
==0 )  0;

987 if–!
	`isNT
(Ë&& 
	`°æí
(
zDú«me
)>
MAX_PATH
 )  0;

988 
zWide
 = 
	`utf8ToUnicode
(
zDú«me
);

989 if–
zWide
 ){

990 
fûeAâr
 = 
	`GëFûeAâribuãsW
(
zWide
);

991 
	`sqlôeFªe
(
zWide
);

993 #i‡
OS_WINCE


996 
fûeAâr
 = 
	`GëFûeAâribuãsA
(
zDú«me
);

999 if–
fûeAâr
 == 0xffffffff )  0;

1000 if–(
fûeAâr
 & 
FILE_ATTRIBUTE_DIRECTORY
) != FILE_ATTRIBUTE_DIRECTORY ){

1004 
	}
}

1033 
	$wöLock
(
OsFûe
 *
id
, 
lockty≥
){

1034 
rc
 = 
SQLITE_OK
;

1035 
ªs
 = 1;

1036 
√wLockty≥
;

1037 
gŸPídögLock
 = 0;

1038 
wöFûe
 *
pFûe
 = (wöFûe*)
id
;

1040 
	`as£π
–
pFûe
!=0 );

1041 
	`TRACE5
("LOCK %d %d was %d(%d)\n",

1042 
pFûe
->
h
, 
lockty≥
,ÖFûe->lockty≥,ÖFûe->
sh¨edLockByã
);

1048 if–
pFûe
->
lockty≥
>=locktype ){

1049  
SQLITE_OK
;

1054 
	`as£π
–
pFûe
->
lockty≥
!=
NO_LOCK
 ||Üockty≥==
SHARED_LOCK
 );

1055 
	`as£π
–
lockty≥
!=
PENDING_LOCK
 );

1056 
	`as£π
–
lockty≥
!=
RESERVED_LOCK
 || 
pFûe
->lockty≥==
SHARED_LOCK
 );

1062 
√wLockty≥
 = 
pFûe
->
lockty≥
;

1063 if–
pFûe
->
lockty≥
==
NO_LOCK


1064 || (
lockty≥
==
EXCLUSIVE_LOCK
 && 
pFûe
->lockty≥==
RESERVED_LOCK
)

1066 
˙t
 = 3;

1067  
˙t
-->0 && (
ªs
 = 
	`LockFûe
(
pFûe
->
h
, 
PENDING_BYTE
, 0, 1, 0))==0 ){

1071 
	`TRACE2
("couldÇŸ gëá PENDINGÜock. c¡=%d\n", 
˙t
);

1072 
	`SÀï
(1);

1074 
gŸPídögLock
 = 
ªs
;

1079 if–
lockty≥
==
SHARED_LOCK
 && 
ªs
 ){

1080 
	`as£π
–
pFûe
->
lockty≥
==
NO_LOCK
 );

1081 
ªs
 = 
	`gëRódLock
(
pFûe
);

1082 if–
ªs
 ){

1083 
√wLockty≥
 = 
SHARED_LOCK
;

1089 if–
lockty≥
==
RESERVED_LOCK
 && 
ªs
 ){

1090 
	`as£π
–
pFûe
->
lockty≥
==
SHARED_LOCK
 );

1091 
ªs
 = 
	`LockFûe
(
pFûe
->
h
, 
RESERVED_BYTE
, 0, 1, 0);

1092 if–
ªs
 ){

1093 
√wLockty≥
 = 
RESERVED_LOCK
;

1099 if–
lockty≥
==
EXCLUSIVE_LOCK
 && 
ªs
 ){

1100 
√wLockty≥
 = 
PENDING_LOCK
;

1101 
gŸPídögLock
 = 0;

1106 if–
lockty≥
==
EXCLUSIVE_LOCK
 && 
ªs
 ){

1107 
	`as£π
–
pFûe
->
lockty≥
>=
SHARED_LOCK
 );

1108 
ªs
 = 
	`u∆ockRódLock
(
pFûe
);

1109 
	`TRACE2
("uƒódlock = %d\n", 
ªs
);

1110 
ªs
 = 
	`LockFûe
(
pFûe
->
h
, 
SHARED_FIRST
, 0, 
SHARED_SIZE
, 0);

1111 if–
ªs
 ){

1112 
√wLockty≥
 = 
EXCLUSIVE_LOCK
;

1114 
	`TRACE2
("îr‹-codê%d\n", 
	`GëLa°Eº‹
());

1121 if–
gŸPídögLock
 && 
lockty≥
==
SHARED_LOCK
 ){

1122 
	`U∆ockFûe
(
pFûe
->
h
, 
PENDING_BYTE
, 0, 1, 0);

1128 if–
ªs
 ){

1129 
rc
 = 
SQLITE_OK
;

1131 
	`TRACE4
("LOCK FAILED %dÅryög f‹ %d buàgŸ %d\n", 
pFûe
->
h
,

1132 
lockty≥
, 
√wLockty≥
);

1133 
rc
 = 
SQLITE_BUSY
;

1135 
pFûe
->
lockty≥
 = 
√wLockty≥
;

1136  
rc
;

1137 
	}
}

1144 
	$wöCheckRe£rvedLock
(
OsFûe
 *
id
){

1145 
rc
;

1146 
wöFûe
 *
pFûe
 = (wöFûe*)
id
;

1147 
	`as£π
–
pFûe
!=0 );

1148 if–
pFûe
->
lockty≥
>=
RESERVED_LOCK
 ){

1149 
rc
 = 1;

1150 
	`TRACE3
("TEST WR-LOCK %d %d (loˇl)\n", 
pFûe
->
h
, 
rc
);

1152 
rc
 = 
	`LockFûe
(
pFûe
->
h
, 
RESERVED_BYTE
, 0, 1, 0);

1153 if–
rc
 ){

1154 
	`U∆ockFûe
(
pFûe
->
h
, 
RESERVED_BYTE
, 0, 1, 0);

1156 
rc
 = !rc;

1157 
	`TRACE3
("TEST WR-LOCK %d %d (ªmŸe)\n", 
pFûe
->
h
, 
rc
);

1159  
rc
;

1160 
	}
}

1173 
	$wöU∆ock
(
OsFûe
 *
id
, 
lockty≥
){

1174 
ty≥
;

1175 
rc
 = 
SQLITE_OK
;

1176 
wöFûe
 *
pFûe
 = (wöFûe*)
id
;

1177 
	`as£π
–
pFûe
!=0 );

1178 
	`as£π
–
lockty≥
<=
SHARED_LOCK
 );

1179 
	`TRACE5
("UNLOCK %dÅÿ%d wa†%d(%d)\n", 
pFûe
->
h
, 
lockty≥
,

1180 
pFûe
->
lockty≥
,ÖFûe->
sh¨edLockByã
);

1181 
ty≥
 = 
pFûe
->
lockty≥
;

1182 if–
ty≥
>=
EXCLUSIVE_LOCK
 ){

1183 
	`U∆ockFûe
(
pFûe
->
h
, 
SHARED_FIRST
, 0, 
SHARED_SIZE
, 0);

1184 if–
lockty≥
==
SHARED_LOCK
 && !
	`gëRódLock
(
pFûe
) ){

1187 
rc
 = 
SQLITE_IOERR
;

1190 if–
ty≥
>=
RESERVED_LOCK
 ){

1191 
	`U∆ockFûe
(
pFûe
->
h
, 
RESERVED_BYTE
, 0, 1, 0);

1193 if–
lockty≥
==
NO_LOCK
 && 
ty≥
>=
SHARED_LOCK
 ){

1194 
	`u∆ockRódLock
(
pFûe
);

1196 if–
ty≥
>=
PENDING_LOCK
 ){

1197 
	`U∆ockFûe
(
pFûe
->
h
, 
PENDING_BYTE
, 0, 1, 0);

1199 
pFûe
->
lockty≥
 =Üocktype;

1200  
rc
;

1201 
	}
}

1209 *
	$sqlôe3WöFuŒP©h«me
(c⁄° *
zRñ©ive
){

1210 *
zFuŒ
;

1211 #i‡
	`deföed
(
__CYGWIN__
)

1212 
nByã
;

1213 
nByã
 = 
	`°æí
(
zRñ©ive
Ë+ 
MAX_PATH
 + 1001;

1214 
zFuŒ
 = 
	`sqlôeMÆloc
–
nByã
 );

1215 if–
zFuŒ
==0 )  0;

1216 if–
	`cygwö_c⁄v_to_fuŒ_wö32_∑th
(
zRñ©ive
, 
zFuŒ
) )  0;

1217 #ñi‡
OS_WINCE


1219 
zFuŒ
 = 
	`sqlôeSåDup
(
zRñ©ive
);

1221 *
zNŸU£d
;

1222 
WCHAR
 *
zWide
;

1223 
nByã
;

1224 
zWide
 = 
	`utf8ToUnicode
(
zRñ©ive
);

1225 if–
zWide
 ){

1226 
WCHAR
 *
zTemp
, *
zNŸU£dW
;

1227 
nByã
 = 
	`GëFuŒP©hNameW
(
zWide
, 0, 0, &
zNŸU£dW
) + 1;

1228 
zTemp
 = 
	`sqlôeMÆloc
–
nByã
*(zTemp[0]) );

1229 if–
zTemp
==0 )  0;

1230 
	`GëFuŒP©hNameW
(
zWide
, 
nByã
, 
zTemp
, &
zNŸU£dW
);

1231 
	`sqlôeFªe
(
zWide
);

1232 
zFuŒ
 = 
	`unicodeToUtf8
(
zTemp
);

1233 
	`sqlôeFªe
(
zTemp
);

1235 
nByã
 = 
	`GëFuŒP©hNameA
(
zRñ©ive
, 0, 0, &
zNŸU£d
) + 1;

1236 
zFuŒ
 = 
	`sqlôeMÆloc
–
nByã
*(zFull[0]) );

1237 if–
zFuŒ
==0 )  0;

1238 
	`GëFuŒP©hNameA
(
zRñ©ive
, 
nByã
, 
zFuŒ
, &
zNŸU£d
);

1241  
zFuŒ
;

1242 
	}
}

1247 
	$wöSëFuŒSync
(
OsFûe
 *
id
, 
v
){

1249 
	}
}

1254 
	$wöFûeH™dÀ
(
OsFûe
 *
id
){

1255  ()((
wöFûe
*)
id
)->
h
;

1256 
	}
}

1262 
	$wöLockSèã
(
OsFûe
 *
id
){

1263  ((
wöFûe
*)
id
)->
lockty≥
;

1264 
	}
}

1270 c⁄° 
IoMëhod
 
	gsqlôe3WöIoMëhod
 = {

1271 
wöClo£
,

1272 
wöO≥nDúe˘‹y
,

1273 
wöRód
,

1274 
wöWrôe
,

1275 
wöSìk
,

1276 
wöTrunˇã
,

1277 
wöSync
,

1278 
wöSëFuŒSync
,

1279 
wöFûeH™dÀ
,

1280 
wöFûeSize
,

1281 
wöLock
,

1282 
wöU∆ock
,

1283 
wöLockSèã
,

1284 
wöCheckRe£rvedLock
,

1292 
	$ÆloˇãWöFûe
(
wöFûe
 *
pInô
, 
OsFûe
 **
pId
){

1293 
wöFûe
 *
pNew
;

1294 
pNew
 = 
	`sqlôeMÆloc
( (*pNew) );

1295 if–
pNew
==0 ){

1296 
	`Clo£H™dÀ
(
pInô
->
h
);

1297 #i‡
OS_WINCE


1298 
	`sqlôeFªe
(
pInô
->
zDñëeOnClo£
);

1300 *
pId
 = 0;

1301  
SQLITE_NOMEM
;

1303 *
pNew
 = *
pInô
;

1304 
pNew
->
pMëhod
 = &
sqlôe3WöIoMëhod
;

1305 
pNew
->
lockty≥
 = 
NO_LOCK
;

1306 
pNew
->
sh¨edLockByã
 = 0;

1307 *
pId
 = (
OsFûe
*)
pNew
;

1308 
	`O≥nCou¡î
(+1);

1309  
SQLITE_OK
;

1311 
	}
}

1325 
	$sqlôe3WöR™domSìd
(*
zBuf
){

1338 
	`mem£t
(
zBuf
, 0, 256);

1339 
	`GëSy°emTime
((
LPSYSTEMTIME
)
zBuf
);

1340  
SQLITE_OK
;

1341 
	}
}

1346 
	$sqlôe3WöSÀï
(
ms
){

1347 
	`SÀï
(
ms
);

1348  
ms
;

1349 
	}
}

1354 
	göMuãx
 = 0;

1355 #ifde‡
SQLITE_W32_THREADS


1356 
DWORD
 
	gmuãxOw√r
;

1357 
CRITICAL_SECTION
 
	gcs
;

1371 
	$sqlôe3WöE¡îMuãx
(){

1372 #ifde‡
SQLITE_W32_THREADS


1373 
isInô
 = 0;

1374  !
isInô
 ){

1375 
lock
 = 0;

1376 if–
	`I¡îlockedIn¸emít
(&
lock
)==1 ){

1377 
	`InôülizeCrôiˇlSe˘i⁄
(&
cs
);

1378 
isInô
 = 1;

1380 
	`SÀï
(1);

1383 
	`E¡îCrôiˇlSe˘i⁄
(&
cs
);

1384 
muãxOw√r
 = 
	`GëCuºítThªadId
();

1386 
öMuãx
++;

1387 
	}
}

1388 
	$sqlôe3WöLóveMuãx
(){

1389 
	`as£π
–
öMuãx
 );

1390 
öMuãx
--;

1391 #ifde‡
SQLITE_W32_THREADS


1392 
	`as£π
–
muãxOw√r
==
	`GëCuºítThªadId
() );

1393 
	`LóveCrôiˇlSe˘i⁄
(&
cs
);

1395 
	}
}

1404 
	$sqlôe3WöInMuãx
(
thisThªadO∆y
){

1405 #ifde‡
SQLITE_W32_THREADS


1406  
öMuãx
>0 && (
thisThªadO∆y
==0 || 
muãxOw√r
==
	`GëCuºítThªadId
());

1408  
öMuãx
>0;

1410 
	}
}

1417 #ifde‡
SQLITE_TEST


1418 
	gsqlôe3_cuºít_time
 = 0;

1426 
	$sqlôe3WöCuºítTime
(*
¥Now
){

1427 
FILETIME
 
·
;

1431 
now
;

1432 #i‡
OS_WINCE


1433 
SYSTEMTIME
 
time
;

1434 
	`GëSy°emTime
(&
time
);

1435 
	`Sy°emTimeToFûeTime
(&
time
,&
·
);

1437 
	`GëSy°emTimeAsFûeTime
–&
·
 );

1439 
now
 = (()
·
.
dwHighD©eTime
) * 4294967296.0;

1440 *
¥Now
 = (
now
 + 
·
.
dwLowD©eTime
)/864000000000.0 + 2305813.5;

1441 #ifde‡
SQLITE_TEST


1442 if–
sqlôe3_cuºít_time
 ){

1443 *
¥Now
 = 
sqlôe3_cuºít_time
/86400.0 + 2440587.5;

1447 
	}
}

1454 #ifde‡
SQLITE_TEST


1455 
	gsqlôe3_tsd_cou¡
 = 0;

1456 
	#TSD_COUNTER_INCR
 
	`I¡îlockedIn¸emít
(&
sqlôe3_tsd_cou¡
)

	)

1457 
	#TSD_COUNTER_DECR
 
	`I¡îlockedDe¸emít
(&
sqlôe3_tsd_cou¡
)

	)

1459 
	#TSD_COUNTER_INCR


	)

1460 
	#TSD_COUNTER_DECR


	)

1479 
ThªadD©a
 *
	$sqlôe3WöThªadS≥cificD©a
(
ÆloˇãFœg
){

1480 
key
;

1481 
keyInô
 = 0;

1482 c⁄° 
ThªadD©a
 
zîoD©a
 = {0};

1483 
ThªadD©a
 *
pTsd
;

1485 if–!
keyInô
 ){

1486 
	`sqlôe3OsE¡îMuãx
();

1487 if–!
keyInô
 ){

1488 
key
 = 
	`TlsAŒoc
();

1489 if–
key
==0xffffffff ){

1490 
	`sqlôe3OsLóveMuãx
();

1493 
keyInô
 = 1;

1495 
	`sqlôe3OsLóveMuãx
();

1497 
pTsd
 = 
	`TlsGëVÆue
(
key
);

1498 if–
ÆloˇãFœg
>0 ){

1499 if–!
pTsd
 ){

1500 
pTsd
 = 
	`sqlôe3OsMÆloc
–(
zîoD©a
) );

1501 if–
pTsd
 ){

1502 *
pTsd
 = 
zîoD©a
;

1503 
	`TlsSëVÆue
(
key
, 
pTsd
);

1504 
TSD_COUNTER_INCR
;

1507 }if–
pTsd
!=0 && 
ÆloˇãFœg
<0

1508 && 
	`memcmp
(
pTsd
, &
zîoD©a
, (
ThªadD©a
))==0 ){

1509 
	`sqlôe3OsFªe
(
pTsd
);

1510 
	`TlsSëVÆue
(
key
, 0);

1511 
TSD_COUNTER_DECR
;

1512 
pTsd
 = 0;

1514  
pTsd
;

1515 
	}
}

	@os_win.h

15 #i‚de‡
_SQLITE_OS_WIN_H_


16 
	#_SQLITE_OS_WIN_H_


	)

18 
	~<wödows.h
>

19 
	~<wöba£.h
>

27 
OsFûe
 
	tOsFûe
;

28 
	sOsFûe
 {

29 
HANDLE
 
	mh
;

30 
	mlockty≥
;

31 
	misO≥n
;

32 
	msh¨edLockByã
;

36 
	#SQLITE_TEMPNAME_SIZE
 (
MAX_PATH
+50)

	)

37 
	#SQLITE_MIN_SLEEP_MS
 1

	)

	@pager.c

23 #i‚de‡
SQLITE_OMIT_DISKIO


24 
	~"sqlôeI¡.h
"

25 
	~"os.h
"

26 
	~"∑gî.h
"

27 
	~<as£π.h
>

28 
	~<°rög.h
>

34 
	#TRACE1
(
X
Ë
	`sqlôe3DebugPrötf
(X)

	)

35 
	#TRACE2
(
X
,
Y
Ë
	`sqlôe3DebugPrötf
(X,Y)

	)

36 
	#TRACE3
(
X
,
Y
,
Z
Ë
	`sqlôe3DebugPrötf
(X,Y,Z)

	)

37 
	#TRACE4
(
X
,
Y
,
Z
,
W
Ë
	`sqlôe3DebugPrötf
(X,Y,Z,W)

	)

38 
	#TRACE5
(
X
,
Y
,
Z
,
W
,
V
Ë
	`sqlôe3DebugPrötf
(X,Y,Z,W,V)

	)

40 
	#TRACE1
(
X
)

	)

41 
	#TRACE2
(
X
,
Y
)

	)

42 
	#TRACE3
(
X
,
Y
,
Z
)

	)

43 
	#TRACE4
(
X
,
Y
,
Z
,
W
)

	)

44 
	#TRACE5
(
X
,
Y
,
Z
,
W
,
V
)

	)

55 
	#PAGERID
(
p
Ë
	`FILEHANDLEID
(&’)->
fd
)

	)

56 
	#FILEHANDLEID
(
fd
Ë(
	`sqlôe3OsFûeH™dÀ
(&fd))

	)

103 
	#PAGER_UNLOCK
 0

	)

104 
	#PAGER_SHARED
 1

	)

105 
	#PAGER_RESERVED
 2

	)

106 
	#PAGER_EXCLUSIVE
 4

	)

107 
	#PAGER_SYNCED
 5

	)

122 #i‚de‡
SQLITE_BUSY_RESERVED_LOCK


123 
	#SQLITE_BUSY_RESERVED_LOCK
 0

	)

130 
	#FORCE_ALIGNMENT
(
X
Ë(((X)+7)&~7)

	)

150 
PgHdr
 
	tPgHdr
;

151 
	sPgHdr
 {

152 
Pagî
 *
	mpPagî
;

153 
Pgno
 
	mpgno
;

154 
PgHdr
 *
	mpNextHash
, *
	mpPªvHash
;

155 
PgHdr
 *
	mpNextFªe
, *
	mpPªvFªe
;

156 
PgHdr
 *
	mpNextAŒ
;

157 
PgHdr
 *
	mpNextStmt
, *
	mpPªvStmt
;

158 
u8
 
	möJou∫Æ
;

159 
u8
 
	möStmt
;

160 
u8
 
	mdúty
;

161 
u8
 
	m√edSync
;

162 
u8
 
	mÆwaysRﬁlback
;

163 
	mnRef
;

164 
PgHdr
 *
	mpDúty
;

165 #ifde‡
SQLITE_CHECK_PAGES


166 
u32
 
	m∑geHash
;

183 
PgHi°‹y
 
	tPgHi°‹y
;

184 
	sPgHi°‹y
 {

185 
u8
 *
	mpOrig
;

186 
u8
 *
	mpStmt
;

192 #ifde‡
SQLITE_HAS_CODEC


193 
	#CODEC
(
P
,
D
,
N
,
X
Ëif–P->
xCodec
 ){ P->
	`xCodec
(P->
pCodecArg
,D,N,X); }

	)

195 
	#CODEC
(
P
,
D
,
N
,
X
)

	)

202 
	#PGHDR_TO_DATA
(
P
Ë((*)(&(P)[1]))

	)

203 
	#DATA_TO_PGHDR
(
D
Ë(&((
PgHdr
*)(D))[-1])

	)

204 
	#PGHDR_TO_EXTRA
(
G
,
P
Ë((*)&((*)(&(G)[1]))[(P)->
∑geSize
])

	)

205 
	#PGHDR_TO_HIST
(
P
,
PGR
) \

206 ((
PgHi°‹y
*)&((*)(&(
P
)[1]))[(
PGR
)->
∑geSize
+(PGR)->
nExåa
])

	)

213 
	#N_PG_HASH
 (\

214 (
MAX_PAGES
>1024)?2048: \

215 (
MAX_PAGES
>512)?1024: \

216 (
MAX_PAGES
>256)?512: \

217 (
MAX_PAGES
>128)?256: \

218 (
MAX_PAGES
>64)?128:64 \

219 )

	)

224 
	#∑gî_hash
(
PN
Ë((PN)&(
N_PG_HASH
-1))

	)

237 
	sPagî
 {

238 
u8
 
	mjou∫ÆO≥n
;

239 
u8
 
	mjou∫ÆSèπed
;

240 
u8
 
	mu£Jou∫Æ
;

241 
u8
 
	mnoRódlock
;

242 
u8
 
	m°mtO≥n
;

243 
u8
 
	m°mtInU£
;

244 
u8
 
	m°mtAuto›í
;

245 
u8
 
	mnoSync
;

246 
u8
 
	mfuŒSync
;

247 
u8
 
	m°©e
;

248 
u8
 
	mîrCode
;

249 
u8
 
	mãmpFûe
;

250 
u8
 
	mªadO∆y
;

251 
u8
 
	m√edSync
;

252 
u8
 
	mdútyCache
;

253 
u8
 
	mÆwaysRﬁlback
;

254 
u8
 
	mmemDb
;

255 
u8
 
	m£tMa°î
;

256 
	mdbSize
;

257 
	m‹igDbSize
;

258 
	m°mtSize
;

259 
	mnRec
;

260 
u32
 
	mcksumInô
;

261 
	m°mtNRec
;

262 
	mnExåa
;

263 
	m∑geSize
;

264 
	mnPage
;

265 
	mnMaxPage
;

266 
	mnRef
;

267 
	mmxPage
;

268 
u8
 *
	maInJou∫Æ
;

269 
u8
 *
	maInStmt
;

270 *
	mzFûíame
;

271 *
	mzJou∫Æ
;

272 *
	mzDúe˘‹y
;

273 
OsFûe
 *
	mfd
, *
	mjfd
;

274 
OsFûe
 *
	m°fd
;

275 
BusyH™dÀr
 *
	mpBusyH™dÀr
;

276 
PgHdr
 *
	mpFú°
, *
	mpLa°
;

277 
PgHdr
 *
	mpFú°Syn˚d
;

278 
PgHdr
 *
	mpAŒ
;

279 
PgHdr
 *
	mpStmt
;

280 
i64
 
	mjou∫ÆOff
;

281 
i64
 
	mjou∫ÆHdr
;

282 
i64
 
	m°mtHdrOff
;

283 
i64
 
	m°mtCksum
;

284 
i64
 
	m°mtJSize
;

285 
	m£˘‹Size
;

286 #ifde‡
SQLITE_TEST


287 
	mnHô
, 
	mnMiss
, 
	mnOvÊ
;

288 
	mnRód
,
	mnWrôe
;

290 (*
	mxDe°ru˘‹
)(*,);

291 (*
	mxReöôî
)(*,);

292 (*
	mxCodec
)(*,*,
	mPgno
,);

293 *
	mpCodecArg
;

294 
PgHdr
 *
	maHash
[
N_PG_HASH
];

295 #ifde‡
SQLITE_ENABLE_MEMORY_MANAGEMENT


296 
Pagî
 *
	mpNext
;

304 #ifde‡
SQLITE_TEST


305 
	#TEST_INCR
(
x
Ëx++

	)

307 
	#TEST_INCR
(
x
)

	)

333 c⁄° 
	gaJou∫ÆMagic
[] = {

341 
	#JOURNAL_PG_SZ
(
pPagî
Ë(’Pagî->
∑geSize
Ë+ 8)

	)

348 
	#JOURNAL_HDR_SZ
(
pPagî
Ë’Pagî->
£˘‹Size
)

	)

356 #ifde‡
SQLITE_OMIT_MEMORYDB


357 
	#MEMDB
 0

	)

359 
	#MEMDB
 
pPagî
->
memDb


	)

365 
	#PAGER_SECTOR_SIZE
 512

	)

375 
	#PAGER_MJ_PGNO
(
x
Ë((
PENDING_BYTE
/((x)->
∑geSize
))+1)

	)

380 
	#PAGER_MAX_PGNO
 2147483647

	)

385 #ifde‡
SQLITE_DEBUG


386 
	g∑gî3_ªföfo_íabÀ
 = 0;

387 
	$∑gî_ªföfo
(
PgHdr
 *
p
){

388 
˙t
 = 0;

389 if–!
∑gî3_ªföfo_íabÀ
 ) ;

390 
	`sqlôe3DebugPrötf
(

392 
p
->
pgno
, 
	`PGHDR_TO_DATA
’),Ö->
nRef


394 
˙t
++;

395 
	}
}

396 
	#REFINFO
(
X
Ë
	`∑gî_ªföfo
(X)

	)

398 
	#REFINFO
(
X
)

	)

408 
	$ªad32bôs
(
OsFûe
 *
fd
, 
u32
 *
pRes
){

409 
ac
[4];

410 
rc
 = 
	`sqlôe3OsRód
(
fd
, 
ac
, (ac));

411 if–
rc
==
SQLITE_OK
 ){

412 *
pRes
 = (
ac
[0]<<24) | (ac[1]<<16) | (ac[2]<<8) |ác[3];

414  
rc
;

415 
	}
}

420 
	$put32bôs
(*
ac
, 
u32
 
vÆ
){

421 
ac
[0] = (
vÆ
>>24) & 0xff;

422 
ac
[1] = (
vÆ
>>16) & 0xff;

423 
ac
[2] = (
vÆ
>>8) & 0xff;

424 
ac
[3] = 
vÆ
 & 0xff;

425 
	}
}

431 
	$wrôe32bôs
(
OsFûe
 *
fd
, 
u32
 
vÆ
){

432 
ac
[4];

433 
	`put32bôs
(
ac
, 
vÆ
);

434  
	`sqlôe3OsWrôe
(
fd
, 
ac
, 4);

435 
	}
}

441 
	$°‹e32bôs
(
u32
 
vÆ
, 
PgHdr
 *
p
, 
off£t
){

442 *
ac
;

443 
ac
 = &((*)
	`PGHDR_TO_DATA
(
p
))[
off£t
];

444 
	`put32bôs
(
ac
, 
vÆ
);

445 
	}
}

451 
u32
 
	$ªåõve32bôs
(
PgHdr
 *
p
, 
off£t
){

452 *
ac
;

453 
ac
 = &((*)
	`PGHDR_TO_DATA
(
p
))[
off£t
];

454  (
ac
[0]<<24) | (ac[1]<<16) | (ac[2]<<8) |ác[3];

455 
	}
}

468 
	$∑gî_îr‹
(
Pagî
 *
pPagî
, 
rc
){

469 
	`as£π
–
pPagî
->
îrCode
==
SQLITE_FULL
 ||ÖPagî->îrCode==
SQLITE_OK
 );

471 
rc
==
SQLITE_FULL
 ||

472 
rc
==
SQLITE_IOERR
 ||

473 
rc
==
SQLITE_CORRUPT
 ||

474 
rc
==
SQLITE_PROTOCOL


476 
pPagî
->
îrCode
 = 
rc
;

478  
rc
;

479 
	}
}

481 #ifde‡
SQLITE_CHECK_PAGES


485 
u32
 
	$∑gî_∑gehash
(
PgHdr
 *
pPage
){

486 
u32
 
hash
 = 0;

487 
i
;

488 *
pD©a
 = (*)
	`PGHDR_TO_DATA
(
pPage
);

489 
i
=0; i<
pPage
->
pPagî
->
∑geSize
; i++){

490 
hash
 = (hash+
i
)^
pD©a
[i];

492  
hash
;

493 
	}
}

500 
	#CHECK_PAGE
(
x
Ë
	`checkPage
(x)

	)

501 
	$checkPage
(
PgHdr
 *
pPg
){

502 
Pagî
 *
pPagî
 = 
pPg
->pPager;

503 
	`as£π
–!
pPg
->
∑geHash
 || 
pPagî
->
îrCode
 || 
MEMDB
 ||ÖPg->
dúty
 ||

504 
pPg
->
∑geHash
==
	`∑gî_∑gehash
(pPg) );

505 
	}
}

508 
	#CHECK_PAGE
(
x
)

	)

521 
	$ªadMa°îJou∫Æ
(
OsFûe
 *
pJ∫l
, **
pzMa°î
){

522 
rc
;

523 
u32
 
Àn
;

524 
i64
 
szJ
;

525 
u32
 
cksum
;

526 
i
;

527 
aMagic
[8];

529 *
pzMa°î
 = 0;

531 
rc
 = 
	`sqlôe3OsFûeSize
(
pJ∫l
, &
szJ
);

532 if–
rc
!=
SQLITE_OK
 || 
szJ
<16 ) Ñc;

534 
rc
 = 
	`sqlôe3OsSìk
(
pJ∫l
, 
szJ
-16);

535 if–
rc
!=
SQLITE_OK
 ) Ñc;

537 
rc
 = 
	`ªad32bôs
(
pJ∫l
, &
Àn
);

538 if–
rc
!=
SQLITE_OK
 ) Ñc;

540 
rc
 = 
	`ªad32bôs
(
pJ∫l
, &
cksum
);

541 if–
rc
!=
SQLITE_OK
 ) Ñc;

543 
rc
 = 
	`sqlôe3OsRód
(
pJ∫l
, 
aMagic
, 8);

544 if–
rc
!=
SQLITE_OK
 || 
	`memcmp
(
aMagic
, 
aJou∫ÆMagic
, 8) ) Ñc;

546 
rc
 = 
	`sqlôe3OsSìk
(
pJ∫l
, 
szJ
-16-
Àn
);

547 if–
rc
!=
SQLITE_OK
 ) Ñc;

549 *
pzMa°î
 = (*)
	`sqlôeMÆloc
(
Àn
+1);

550 if–!*
pzMa°î
 ){

551  
SQLITE_NOMEM
;

553 
rc
 = 
	`sqlôe3OsRód
(
pJ∫l
, *
pzMa°î
, 
Àn
);

554 if–
rc
!=
SQLITE_OK
 ){

555 
	`sqlôeFªe
(*
pzMa°î
);

556 *
pzMa°î
 = 0;

557  
rc
;

561 
i
=0; i<
Àn
; i++){

562 
cksum
 -(*
pzMa°î
)[
i
];

564 if–
cksum
 ){

570 
	`sqlôeFªe
(*
pzMa°î
);

571 *
pzMa°î
 = 0;

573 (*
pzMa°î
)[
Àn
] = '\0';

576  
SQLITE_OK
;

577 
	}
}

594 
	$£ekJou∫ÆHdr
(
Pagî
 *
pPagî
){

595 
i64
 
off£t
 = 0;

596 
i64
 
c
 = 
pPagî
->
jou∫ÆOff
;

597 if–
c
 ){

598 
off£t
 = ((
c
-1)/
	`JOURNAL_HDR_SZ
(
pPagî
) + 1) * JOURNAL_HDR_SZ(pPager);

600 
	`as£π
–
off£t
%
	`JOURNAL_HDR_SZ
(
pPagî
)==0 );

601 
	`as£π
–
off£t
>=
c
 );

602 
	`as£π
–(
off£t
-
c
)<
	`JOURNAL_HDR_SZ
(
pPagî
) );

603 
pPagî
->
jou∫ÆOff
 = 
off£t
;

604  
	`sqlôe3OsSìk
(
pPagî
->
jfd
,ÖPagî->
jou∫ÆOff
);

605 
	}
}

621 
	$wrôeJou∫ÆHdr
(
Pagî
 *
pPagî
){

622 
zHódî
[(
aJou∫ÆMagic
)+16];

624 
rc
 = 
	`£ekJou∫ÆHdr
(
pPagî
);

625 if–
rc
 ) Ñc;

627 
pPagî
->
jou∫ÆHdr
 =ÖPagî->
jou∫ÆOff
;

628 if–
pPagî
->
°mtHdrOff
==0 ){

629 
pPagî
->
°mtHdrOff
 =ÖPagî->
jou∫ÆHdr
;

631 
pPagî
->
jou∫ÆOff
 +
	`JOURNAL_HDR_SZ
(pPager);

641 
	`mem˝y
(
zHódî
, 
aJou∫ÆMagic
, (aJournalMagic));

643 
	`put32bôs
(&
zHódî
[(
aJou∫ÆMagic
)], 
pPagî
->
noSync
 ? 0xffffffff : 0);

645 
	`sqlôe3R™dom√ss
((
pPagî
->
cksumInô
), &pPager->cksumInit);

646 
	`put32bôs
(&
zHódî
[(
aJou∫ÆMagic
)+4], 
pPagî
->
cksumInô
);

648 
	`put32bôs
(&
zHódî
[(
aJou∫ÆMagic
)+8], 
pPagî
->
dbSize
);

650 
	`put32bôs
(&
zHódî
[(
aJou∫ÆMagic
)+12], 
pPagî
->
£˘‹Size
);

651 
rc
 = 
	`sqlôe3OsWrôe
(
pPagî
->
jfd
, 
zHódî
, (zHeader));

656 if–
rc
==
SQLITE_OK
 ){

657 
rc
 = 
	`sqlôe3OsSìk
(
pPagî
->
jfd
,ÖPagî->
jou∫ÆOff
-1);

658 if–
rc
==
SQLITE_OK
 ){

659 
rc
 = 
	`sqlôe3OsWrôe
(
pPagî
->
jfd
, "\000", 1);

662  
rc
;

663 
	}
}

681 
	$ªadJou∫ÆHdr
(

682 
Pagî
 *
pPagî
,

683 
i64
 
jou∫ÆSize
,

684 
u32
 *
pNRec
,

685 
u32
 *
pDbSize


687 
rc
;

688 
aMagic
[8];

690 
rc
 = 
	`£ekJou∫ÆHdr
(
pPagî
);

691 if–
rc
 ) Ñc;

693 if–
pPagî
->
jou∫ÆOff
+
	`JOURNAL_HDR_SZ
’PagîË> 
jou∫ÆSize
 ){

694  
SQLITE_DONE
;

697 
rc
 = 
	`sqlôe3OsRód
(
pPagî
->
jfd
, 
aMagic
, (aMagic));

698 if–
rc
 ) Ñc;

700 if–
	`memcmp
(
aMagic
, 
aJou∫ÆMagic
, (aMagic))!=0 ){

701  
SQLITE_DONE
;

704 
rc
 = 
	`ªad32bôs
(
pPagî
->
jfd
, 
pNRec
);

705 if–
rc
 ) Ñc;

707 
rc
 = 
	`ªad32bôs
(
pPagî
->
jfd
, &pPagî->
cksumInô
);

708 if–
rc
 ) Ñc;

710 
rc
 = 
	`ªad32bôs
(
pPagî
->
jfd
, 
pDbSize
);

711 if–
rc
 ) Ñc;

719 
rc
 = 
	`ªad32bôs
(
pPagî
->
jfd
, (
u32
 *)&pPagî->
£˘‹Size
);

720 if–
rc
 ) Ñc;

722 
pPagî
->
jou∫ÆOff
 +
	`JOURNAL_HDR_SZ
(pPager);

723 
rc
 = 
	`sqlôe3OsSìk
(
pPagî
->
jfd
,ÖPagî->
jou∫ÆOff
);

724  
rc
;

725 
	}
}

747 
	$wrôeMa°îJou∫Æ
(
Pagî
 *
pPagî
, c⁄° *
zMa°î
){

748 
rc
;

749 
Àn
;

750 
i
;

751 
u32
 
cksum
 = 0;

752 
zBuf
[(
aJou∫ÆMagic
)+2*4];

754 if–!
zMa°î
 || 
pPagî
->
£tMa°î
Ë 
SQLITE_OK
;

755 
pPagî
->
£tMa°î
 = 1;

757 
Àn
 = 
	`°æí
(
zMa°î
);

758 
i
=0; i<
Àn
; i++){

759 
cksum
 +
zMa°î
[
i
];

766 if–
pPagî
->
fuŒSync
 ){

767 
rc
 = 
	`£ekJou∫ÆHdr
(
pPagî
);

768 if–
rc
!=
SQLITE_OK
 ) Ñc;

770 
pPagî
->
jou∫ÆOff
 +(
Àn
+20);

772 
rc
 = 
	`wrôe32bôs
(
pPagî
->
jfd
, 
	`PAGER_MJ_PGNO
(pPager));

773 if–
rc
!=
SQLITE_OK
 ) Ñc;

775 
rc
 = 
	`sqlôe3OsWrôe
(
pPagî
->
jfd
, 
zMa°î
, 
Àn
);

776 if–
rc
!=
SQLITE_OK
 ) Ñc;

778 
	`put32bôs
(
zBuf
, 
Àn
);

779 
	`put32bôs
(&
zBuf
[4], 
cksum
);

780 
	`mem˝y
(&
zBuf
[8], 
aJou∫ÆMagic
, (aJournalMagic));

781 
rc
 = 
	`sqlôe3OsWrôe
(
pPagî
->
jfd
, 
zBuf
, 8+(
aJou∫ÆMagic
));

782 
pPagî
->
√edSync
 = !pPagî->
noSync
;

783  
rc
;

784 
	}
}

795 
	$∑ge_add_to_°mt_li°
(
PgHdr
 *
pPg
){

796 
Pagî
 *
pPagî
 = 
pPg
->pPager;

797 if–
pPg
->
öStmt
 ) ;

798 
	`as£π
–
pPg
->
pPªvStmt
==0 &&ÖPg->
pNextStmt
==0 );

799 
pPg
->
pPªvStmt
 = 0;

800 if–
pPagî
->
pStmt
 ){

801 
pPagî
->
pStmt
->
pPªvStmt
 = 
pPg
;

803 
pPg
->
pNextStmt
 = 
pPagî
->
pStmt
;

804 
pPagî
->
pStmt
 = 
pPg
;

805 
pPg
->
öStmt
 = 1;

806 
	}
}

807 
	$∑ge_ªmove_‰om_°mt_li°
(
PgHdr
 *
pPg
){

808 if–!
pPg
->
öStmt
 ) ;

809 if–
pPg
->
pPªvStmt
 ){

810 
	`as£π
–
pPg
->
pPªvStmt
->
pNextStmt
==pPg );

811 
pPg
->
pPªvStmt
->
pNextStmt
 =ÖPg->pNextStmt;

813 
	`as£π
–
pPg
->
pPagî
->
pStmt
==pPg );

814 
pPg
->
pPagî
->
pStmt
 =ÖPg->
pNextStmt
;

816 if–
pPg
->
pNextStmt
 ){

817 
	`as£π
–
pPg
->
pNextStmt
->
pPªvStmt
==pPg );

818 
pPg
->
pNextStmt
->
pPªvStmt
 =ÖPg->pPrevStmt;

820 
pPg
->
pNextStmt
 = 0;

821 
pPg
->
pPªvStmt
 = 0;

822 
pPg
->
öStmt
 = 0;

823 
	}
}

829 
PgHdr
 *
	$∑gî_lookup
(
Pagî
 *
pPagî
, 
Pgno
 
pgno
){

830 
PgHdr
 *
p
 = 
pPagî
->
aHash
[
	`∑gî_hash
(
pgno
)];

831  
p
 &&Ö->
pgno
!=pgno ){

832 
p
 =Ö->
pNextHash
;

834  
p
;

835 
	}
}

843 
	$∑gî_ª£t
(
Pagî
 *
pPagî
){

844 
PgHdr
 *
pPg
, *
pNext
;

845 if–
pPagî
->
îrCode
 ) ;

846 
pPg
=
pPagî
->
pAŒ
;ÖPg;ÖPg=
pNext
){

847 
pNext
 = 
pPg
->
pNextAŒ
;

848 
	`sqlôeFªe
(
pPg
);

850 
pPagî
->
pFú°
 = 0;

851 
pPagî
->
pFú°Syn˚d
 = 0;

852 
pPagî
->
pLa°
 = 0;

853 
pPagî
->
pAŒ
 = 0;

854 
	`mem£t
(
pPagî
->
aHash
, 0, (pPager->aHash));

855 
pPagî
->
nPage
 = 0;

856 if–
pPagî
->
°©e
>=
PAGER_RESERVED
 ){

857 
	`sqlôe3∑gî_rﬁlback
(
pPagî
);

859 
	`sqlôe3OsU∆ock
(
pPagî
->
fd
, 
NO_LOCK
);

860 
pPagî
->
°©e
 = 
PAGER_UNLOCK
;

861 
pPagî
->
dbSize
 = -1;

862 
pPagî
->
nRef
 = 0;

863 
	`as£π
–
pPagî
->
jou∫ÆO≥n
==0 );

864 
	}
}

876 
	$∑gî_unwrôñock
(
Pagî
 *
pPagî
){

877 
PgHdr
 *
pPg
;

878 
rc
;

879 
	`as£π
–!
MEMDB
 );

880 if–
pPagî
->
°©e
<
PAGER_RESERVED
 ){

881  
SQLITE_OK
;

883 
	`sqlôe3∑gî_°mt_commô
(
pPagî
);

884 if–
pPagî
->
°mtO≥n
 ){

885 
	`sqlôe3OsClo£
(&
pPagî
->
°fd
);

886 
pPagî
->
°mtO≥n
 = 0;

888 if–
pPagî
->
jou∫ÆO≥n
 ){

889 
	`sqlôe3OsClo£
(&
pPagî
->
jfd
);

890 
pPagî
->
jou∫ÆO≥n
 = 0;

891 
	`sqlôe3OsDñëe
(
pPagî
->
zJou∫Æ
);

892 
	`sqlôeFªe
–
pPagî
->
aInJou∫Æ
 );

893 
pPagî
->
aInJou∫Æ
 = 0;

894 
pPg
=
pPagî
->
pAŒ
;ÖPg;ÖPgıPg->
pNextAŒ
){

895 
pPg
->
öJou∫Æ
 = 0;

896 
pPg
->
dúty
 = 0;

897 
pPg
->
√edSync
 = 0;

898 #ifde‡
SQLITE_CHECK_PAGES


899 
pPg
->
∑geHash
 = 
	`∑gî_∑gehash
(pPg);

902 
pPagî
->
dútyCache
 = 0;

903 
pPagî
->
nRec
 = 0;

905 
	`as£π
–
pPagî
->
aInJou∫Æ
==0 );

906 
	`as£π
–
pPagî
->
dútyCache
==0 ||ÖPagî->
u£Jou∫Æ
==0 );

908 
rc
 = 
	`sqlôe3OsU∆ock
(
pPagî
->
fd
, 
SHARED_LOCK
);

909 
pPagî
->
°©e
 = 
PAGER_SHARED
;

910 
pPagî
->
‹igDbSize
 = 0;

911 
pPagî
->
£tMa°î
 = 0;

912 
pPagî
->
√edSync
 = 0;

913 
pPagî
->
pFú°Syn˚d
 =ÖPagî->
pFú°
;

914  
rc
;

915 
	}
}

937 
u32
 
	$∑gî_cksum
(
Pagî
 *
pPagî
, 
Pgno
 
pgno
, c⁄° 
u8
 *
aD©a
){

938 
u32
 
cksum
 = 
pPagî
->
cksumInô
;

939 
i
 = 
pPagî
->
∑geSize
-200;

940  
i
>0 ){

941 
cksum
 +
aD©a
[
i
];

942 
i
 -= 200;

944  
cksum
;

945 
	}
}

955 
	$∑gî_∂ayback_⁄e_∑ge
(
Pagî
 *
pPagî
, 
OsFûe
 *
jfd
, 
u£Cksum
){

956 
rc
;

957 
PgHdr
 *
pPg
;

958 
Pgno
 
pgno
;

959 
u32
 
cksum
;

960 
u8
 
aD©a
[
SQLITE_MAX_PAGE_SIZE
];

965 
	`as£π
–
jfd
 =(
u£Cksum
 ? 
pPagî
->jfd :ÖPagî->
°fd
) );

968 
rc
 = 
	`ªad32bôs
(
jfd
, &
pgno
);

969 if–
rc
!=
SQLITE_OK
 ) Ñc;

970 
rc
 = 
	`sqlôe3OsRód
(
jfd
, &
aD©a
, 
pPagî
->
∑geSize
);

971 if–
rc
!=
SQLITE_OK
 ) Ñc;

972 
pPagî
->
jou∫ÆOff
 +pPagî->
∑geSize
 + 4;

979 if–
pgno
==0 ||Ögno==
	`PAGER_MJ_PGNO
(
pPagî
) ){

980  
SQLITE_DONE
;

982 if–
pgno
>()
pPagî
->
dbSize
 ){

983  
SQLITE_OK
;

985 if–
u£Cksum
 ){

986 
rc
 = 
	`ªad32bôs
(
jfd
, &
cksum
);

987 if–
rc
 ) Ñc;

988 
pPagî
->
jou∫ÆOff
 += 4;

989 if–
	`∑gî_cksum
(
pPagî
, 
pgno
, 
aD©a
)!=
cksum
 ){

990  
SQLITE_DONE
;

994 
	`as£π
–
pPagî
->
°©e
==
PAGER_RESERVED
 ||ÖPagî->°©e>=
PAGER_EXCLUSIVE
 );

1016 
pPg
 = 
	`∑gî_lookup
(
pPagî
, 
pgno
);

1017 
	`as£π
–
pPagî
->
°©e
>=
PAGER_EXCLUSIVE
 || 
pPg
!=0 );

1018 
	`TRACE3
("PLAYBACK %dÖagê%d\n", 
	`PAGERID
(
pPagî
), 
pgno
);

1019 if–
pPagî
->
°©e
>=
PAGER_EXCLUSIVE
 && (
pPg
==0 ||ÖPg->
√edSync
==0) ){

1020 
rc
 = 
	`sqlôe3OsSìk
(
pPagî
->
fd
, (
pgno
-1)*(
i64
ÌPagî->
∑geSize
);

1021 if–
rc
==
SQLITE_OK
 ){

1022 
rc
 = 
	`sqlôe3OsWrôe
(
pPagî
->
fd
, 
aD©a
,ÖPagî->
∑geSize
);

1024 if–
pPg
 )ÖPg->
dúty
 = 0;

1026 if–
pPg
 ){

1033 *
pD©a
;

1035 
pD©a
 = 
	`PGHDR_TO_DATA
(
pPg
);

1036 
	`mem˝y
(
pD©a
, 
aD©a
, 
pPagî
->
∑geSize
);

1037 if–
pPagî
->
xDe°ru˘‹
 ){

1038 
pPagî
->
	`xDe°ru˘‹
(
pD©a
,ÖPagî->
∑geSize
);

1040 #ifde‡
SQLITE_CHECK_PAGES


1041 
pPg
->
∑geHash
 = 
	`∑gî_∑gehash
(pPg);

1043 
	`CODEC
(
pPagî
, 
pD©a
, 
pPg
->
pgno
, 3);

1045  
rc
;

1046 
	}
}

1059 
	$∑gî_dñma°î
(c⁄° *
zMa°î
){

1060 
rc
;

1061 
ma°î_›í
 = 0;

1062 
OsFûe
 *
ma°î
 = 0;

1063 *
zMa°îJou∫Æ
 = 0;

1064 
i64
 
nMa°îJou∫Æ
;

1069 
rc
 = 
	`sqlôe3OsO≥nRódO∆y
(
zMa°î
, &
ma°î
);

1070 if–
rc
!=
SQLITE_OK
 ) 
dñma°î_out
;

1071 
ma°î_›í
 = 1;

1072 
rc
 = 
	`sqlôe3OsFûeSize
(
ma°î
, &
nMa°îJou∫Æ
);

1073 if–
rc
!=
SQLITE_OK
 ) 
dñma°î_out
;

1075 if–
nMa°îJou∫Æ
>0 ){

1076 *
zJou∫Æ
;

1077 *
zMa°îPå
 = 0;

1082 
zMa°îJou∫Æ
 = (*)
	`sqlôeMÆloc
(
nMa°îJou∫Æ
);

1083 if–!
zMa°îJou∫Æ
 ){

1084 
rc
 = 
SQLITE_NOMEM
;

1085 
dñma°î_out
;

1087 
rc
 = 
	`sqlôe3OsRód
(
ma°î
, 
zMa°îJou∫Æ
, 
nMa°îJou∫Æ
);

1088 if–
rc
!=
SQLITE_OK
 ) 
dñma°î_out
;

1090 
zJou∫Æ
 = 
zMa°îJou∫Æ
;

1091  (
zJou∫Æ
-
zMa°îJou∫Æ
)<
nMa°îJou∫Æ
 ){

1092 if–
	`sqlôe3OsFûeExi°s
(
zJou∫Æ
) ){

1097 
OsFûe
 *
jou∫Æ
 = 0;

1098 
c
;

1100 
rc
 = 
	`sqlôe3OsO≥nRódO∆y
(
zJou∫Æ
, &
jou∫Æ
);

1101 if–
rc
!=
SQLITE_OK
 ){

1102 
dñma°î_out
;

1105 
rc
 = 
	`ªadMa°îJou∫Æ
(
jou∫Æ
, &
zMa°îPå
);

1106 
	`sqlôe3OsClo£
(&
jou∫Æ
);

1107 if–
rc
!=
SQLITE_OK
 ){

1108 
dñma°î_out
;

1111 
c
 = 
zMa°îPå
!=0 && 
	`°rcmp
(zMa°îPå, 
zMa°î
)==0;

1112 
	`sqlôeFªe
(
zMa°îPå
);

1113 if–
c
 ){

1115 
dñma°î_out
;

1118 
zJou∫Æ
 +(
	`°æí
(zJournal)+1);

1122 
	`sqlôe3OsDñëe
(
zMa°î
);

1124 
dñma°î_out
:

1125 if–
zMa°îJou∫Æ
 ){

1126 
	`sqlôeFªe
(
zMa°îJou∫Æ
);

1128 if–
ma°î_›í
 ){

1129 
	`sqlôe3OsClo£
(&
ma°î
);

1131  
rc
;

1132 
	}
}

1143 
	$∑gî_ªlﬂd_ˇche
(
Pagî
 *
pPagî
){

1144 
PgHdr
 *
pPg
;

1145 
rc
 = 
SQLITE_OK
;

1146 
pPg
=
pPagî
->
pAŒ
;ÖPg;ÖPgıPg->
pNextAŒ
){

1147 
zBuf
[
SQLITE_MAX_PAGE_SIZE
];

1148 if–!
pPg
->
dúty
 ) ;

1149 if–()
pPg
->
pgno
 <
pPagî
->
‹igDbSize
 ){

1150 
rc
 = 
	`sqlôe3OsSìk
(
pPagî
->
fd
,ÖPagî->
∑geSize
*(
i64
)(
pPg
->
pgno
-1));

1151 if–
rc
==
SQLITE_OK
 ){

1152 
rc
 = 
	`sqlôe3OsRód
(
pPagî
->
fd
, 
zBuf
,ÖPagî->
∑geSize
);

1154 
	`TRACE3
("REFETCH %dÖagê%d\n", 
	`PAGERID
(
pPagî
), 
pPg
->
pgno
);

1155 if–
rc
 ) ;

1156 
	`CODEC
(
pPagî
, 
zBuf
, 
pPg
->
pgno
, 2);

1158 
	`mem£t
(
zBuf
, 0, 
pPagî
->
∑geSize
);

1160 if–
pPg
->
nRef
==0 || 
	`memcmp
(
zBuf
, 
	`PGHDR_TO_DATA
’Pg), 
pPagî
->
∑geSize
) ){

1161 
	`mem˝y
(
	`PGHDR_TO_DATA
(
pPg
), 
zBuf
, 
pPagî
->
∑geSize
);

1162 if–
pPagî
->
xReöôî
 ){

1163 
pPagî
->
	`xReöôî
(
	`PGHDR_TO_DATA
(
pPg
),ÖPagî->
∑geSize
);

1165 
	`mem£t
(
	`PGHDR_TO_EXTRA
(
pPg
, 
pPagî
), 0,ÖPagî->
nExåa
);

1168 
pPg
->
√edSync
 = 0;

1169 
pPg
->
dúty
 = 0;

1170 #ifde‡
SQLITE_CHECK_PAGES


1171 
pPg
->
∑geHash
 = 
	`∑gî_∑gehash
(pPg);

1174  
rc
;

1175 
	}
}

1181 
	$∑gî_åunˇã
(
Pagî
 *
pPagî
, 
nPage
){

1182 
	`as£π
–
pPagî
->
°©e
>=
PAGER_EXCLUSIVE
 );

1183  
	`sqlôe3OsTrunˇã
(
pPagî
->
fd
,ÖPagî->
∑geSize
*(
i64
)
nPage
);

1184 
	}
}

1239 
	$∑gî_∂ayback
(
Pagî
 *
pPagî
){

1240 
i64
 
szJ
;

1241 
u32
 
nRec
;

1242 
i
;

1243 
Pgno
 
mxPg
 = 0;

1244 
rc
;

1245 *
zMa°î
 = 0;

1250 
	`as£π
–
pPagî
->
jou∫ÆO≥n
 );

1251 
rc
 = 
	`sqlôe3OsFûeSize
(
pPagî
->
jfd
, &
szJ
);

1252 if–
rc
!=
SQLITE_OK
 ){

1253 
íd_∂ayback
;

1261 
rc
 = 
	`ªadMa°îJou∫Æ
(
pPagî
->
jfd
, &
zMa°î
);

1262 
	`as£π
–
rc
!=
SQLITE_DONE
 );

1263 if–
rc
!=
SQLITE_OK
 || (
zMa°î
 && !
	`sqlôe3OsFûeExi°s
(zMaster)) ){

1264 
	`sqlôeFªe
(
zMa°î
);

1265 
zMa°î
 = 0;

1266 if–
rc
==
SQLITE_DONE
 )Ñ¯
SQLITE_OK
;

1267 
íd_∂ayback
;

1269 
	`sqlôe3OsSìk
(
pPagî
->
jfd
, 0);

1270 
pPagî
->
jou∫ÆOff
 = 0;

1281 
rc
 = 
	`ªadJou∫ÆHdr
(
pPagî
, 
szJ
, &
nRec
, &
mxPg
);

1282 if–
rc
!=
SQLITE_OK
 ){

1283 if–
rc
==
SQLITE_DONE
 ){

1284 
rc
 = 
SQLITE_OK
;

1286 
íd_∂ayback
;

1294 if–
nRec
==0xffffffff ){

1295 
	`as£π
–
pPagî
->
jou∫ÆOff
==
	`JOURNAL_HDR_SZ
(pPager) );

1296 
nRec
 = (
szJ
 - 
	`JOURNAL_HDR_SZ
(
pPagî
))/
	`JOURNAL_PG_SZ
(pPager);

1302 if–
pPagî
->
°©e
>=
PAGER_EXCLUSIVE
 &&

1303 
pPagî
->
jou∫ÆOff
==
	`JOURNAL_HDR_SZ
(pPager) ){

1304 
	`as£π
–
pPagî
->
‹igDbSize
==0 ||ÖPagî->‹igDbSize==
mxPg
 );

1305 
rc
 = 
	`∑gî_åunˇã
(
pPagî
, 
mxPg
);

1306 if–
rc
!=
SQLITE_OK
 ){

1307 
íd_∂ayback
;

1309 
pPagî
->
dbSize
 = 
mxPg
;

1313 if–
rc
!=
SQLITE_OK
 ) 
íd_∂ayback
;

1317 
i
=0; i<
nRec
; i++){

1318 
rc
 = 
	`∑gî_∂ayback_⁄e_∑ge
(
pPagî
,ÖPagî->
jfd
, 1);

1319 if–
rc
!=
SQLITE_OK
 ){

1320 if–
rc
==
SQLITE_DONE
 ){

1321 
rc
 = 
SQLITE_OK
;

1322 
pPagî
->
jou∫ÆOff
 = 
szJ
;

1325 
íd_∂ayback
;

1335 
	`as£π
–
rc
==
SQLITE_OK
 );

1336 
	`∑gî_ªlﬂd_ˇche
(
pPagî
);

1338 
íd_∂ayback
:

1339 if–
rc
==
SQLITE_OK
 ){

1340 
rc
 = 
	`∑gî_unwrôñock
(
pPagî
);

1342 if–
zMa°î
 ){

1346 if–
rc
==
SQLITE_OK
 ){

1347 
rc
 = 
	`∑gî_dñma°î
(
zMa°î
);

1349 
	`sqlôeFªe
(
zMa°î
);

1356 
pPagî
->
£˘‹Size
 = 
PAGER_SECTOR_SIZE
;

1357  
rc
;

1358 
	}
}

1374 
	$∑gî_°mt_∂ayback
(
Pagî
 *
pPagî
){

1375 
i64
 
szJ
;

1376 
i64
 
hdrOff
;

1377 
nRec
;

1378 
i
;

1379 
rc
;

1381 
szJ
 = 
pPagî
->
jou∫ÆOff
;

1382 #i‚de‡
NDEBUG


1384 
i64
 
os_szJ
;

1385 
rc
 = 
	`sqlôe3OsFûeSize
(
pPagî
->
jfd
, &
os_szJ
);

1386 if–
rc
!=
SQLITE_OK
 ) Ñc;

1387 
	`as£π
–
szJ
==
os_szJ
 );

1395 
hdrOff
 = 
pPagî
->
°mtHdrOff
;

1396 
	`as£π
–
pPagî
->
fuŒSync
 || !
hdrOff
 );

1397 if–!
hdrOff
 ){

1398 
hdrOff
 = 
szJ
;

1403 if–
pPagî
->
°©e
>=
PAGER_EXCLUSIVE
 ){

1404 
rc
 = 
	`∑gî_åunˇã
(
pPagî
,ÖPagî->
°mtSize
);

1406 
pPagî
->
dbSize
 =ÖPagî->
°mtSize
;

1410 
	`as£π
–
pPagî
->
°mtInU£
 &&ÖPagî->
jou∫ÆO≥n
 );

1411 
	`sqlôe3OsSìk
(
pPagî
->
°fd
, 0);

1412 
nRec
 = 
pPagî
->
°mtNRec
;

1419 
i
=
nRec
-1; i>=0; i--){

1420 
rc
 = 
	`∑gî_∂ayback_⁄e_∑ge
(
pPagî
,ÖPagî->
°fd
, 0);

1421 
	`as£π
–
rc
!=
SQLITE_DONE
 );

1422 if–
rc
!=
SQLITE_OK
 ) 
íd_°mt_∂ayback
;

1433 
rc
 = 
	`sqlôe3OsSìk
(
pPagî
->
jfd
,ÖPagî->
°mtJSize
);

1434 if–
rc
!=
SQLITE_OK
 ){

1435 
íd_°mt_∂ayback
;

1437 
pPagî
->
jou∫ÆOff
 =ÖPagî->
°mtJSize
;

1438 
pPagî
->
cksumInô
 =ÖPagî->
°mtCksum
;

1439 
	`as£π
–
	`JOURNAL_HDR_SZ
(
pPagî
)<’Pagî->
∑geSize
+8) );

1440  
pPagî
->
jou∫ÆOff
 <(
hdrOff
-’Pagî->
∑geSize
+8)) ){

1441 
rc
 = 
	`∑gî_∂ayback_⁄e_∑ge
(
pPagî
,ÖPagî->
jfd
, 1);

1442 
	`as£π
–
rc
!=
SQLITE_DONE
 );

1443 if–
rc
!=
SQLITE_OK
 ) 
íd_°mt_∂ayback
;

1446  
pPagî
->
jou∫ÆOff
 < 
szJ
 ){

1447 
u32
 
nJRec
;

1448 
u32
 
dummy
;

1449 
rc
 = 
	`ªadJou∫ÆHdr
(
pPagî
, 
szJ
, &
nJRec
, &
dummy
);

1450 if–
rc
!=
SQLITE_OK
 ){

1451 
	`as£π
–
rc
!=
SQLITE_DONE
 );

1452 
íd_°mt_∂ayback
;

1454 if–
nJRec
==0 ){

1455 
nJRec
 = (
szJ
 - 
pPagî
->
jou∫ÆOff
Ë/ (pPagî->
∑geSize
+8);

1457 
i
=
nJRec
-1; i>=0 && 
pPagî
->
jou∫ÆOff
 < 
szJ
; i--){

1458 
rc
 = 
	`∑gî_∂ayback_⁄e_∑ge
(
pPagî
,ÖPagî->
jfd
, 1);

1459 
	`as£π
–
rc
!=
SQLITE_DONE
 );

1460 if–
rc
!=
SQLITE_OK
 ) 
íd_°mt_∂ayback
;

1464 
pPagî
->
jou∫ÆOff
 = 
szJ
;

1466 
íd_°mt_∂ayback
:

1467 if–
rc
==
SQLITE_OK
) {

1468 
pPagî
->
jou∫ÆOff
 = 
szJ
;

1471  
rc
;

1472 
	}
}

1477 
	$sqlôe3∑gî_£t_ˇchesize
(
Pagî
 *
pPagî
, 
mxPage
){

1478 if–
mxPage
>10 ){

1479 
pPagî
->
mxPage
 = mxPage;

1481 
pPagî
->
mxPage
 = 10;

1483 
	}
}

1511 #i‚de‡
SQLITE_OMIT_PAGER_PRAGMAS


1512 
	$sqlôe3∑gî_£t_ß„ty_Àvñ
(
Pagî
 *
pPagî
, 
Àvñ
){

1513 
pPagî
->
noSync
 = 
Àvñ
==1 ||ÖPagî->
ãmpFûe
;

1514 
pPagî
->
fuŒSync
 = 
Àvñ
==3 && !pPagî->
ãmpFûe
;

1515 if–
pPagî
->
noSync
 )ÖPagî->
√edSync
 = 0;

1516 
	}
}

1524 
	gsqlôe3_›íãmp_cou¡
 = 0;

1535 
	$sqlôe3∑gî_›íãmp
(*
zFûe
, 
OsFûe
 **
pFd
){

1536 
˙t
 = 8;

1537 
rc
;

1538 
sqlôe3_›íãmp_cou¡
++;

1540 
˙t
--;

1541 
	`sqlôe3OsTempFûeName
(
zFûe
);

1542 
rc
 = 
	`sqlôe3OsO≥nEx˛usive
(
zFûe
, 
pFd
, 1);

1543 } 
˙t
>0 && 
rc
!=
SQLITE_OK
 &&Ñc!=
SQLITE_NOMEM
 );

1544  
rc
;

1545 
	}
}

1561 
	$sqlôe3∑gî_›í
(

1562 
Pagî
 **
µPagî
,

1563 c⁄° *
zFûíame
,

1564 
nExåa
,

1565 
Êags


1567 
Pagî
 *
pPagî
 = 0;

1568 *
zFuŒP©h«me
 = 0;

1569 
«meLí
;

1570 
OsFûe
 *
fd
;

1571 
rc
 = 
SQLITE_OK
;

1572 
i
;

1573 
ãmpFûe
 = 0;

1574 
memDb
 = 0;

1575 
ªadO∆y
 = 0;

1576 
u£Jou∫Æ
 = (
Êags
 & 
PAGER_OMIT_JOURNAL
)==0;

1577 
noRódlock
 = (
Êags
 & 
PAGER_NO_READLOCK
)!=0;

1578 
zTemp
[
SQLITE_TEMPNAME_SIZE
];

1579 #ifde‡
SQLITE_ENABLE_MEMORY_MANAGEMENT


1587 
ThªadD©a
 *
pTsd
 = 
	`sqlôe3ThªadD©a
();

1588 
	`as£π
–
pTsd
 );

1595 *
µPagî
 = 0;

1596 if–
	`sqlôe3MÆlocFaûed
() ){

1597  
SQLITE_NOMEM
;

1599 
	`mem£t
(&
fd
, 0, (fd));

1604 if–
zFûíame
 && zFilename[0] ){

1605 #i‚de‡
SQLITE_OMIT_MEMORYDB


1606 if–
	`°rcmp
(
zFûíame
,":memory:")==0 ){

1607 
memDb
 = 1;

1608 
zFuŒP©h«me
 = 
	`sqlôeSåDup
("");

1612 
zFuŒP©h«me
 = 
	`sqlôe3OsFuŒP©h«me
(
zFûíame
);

1613 if–
zFuŒP©h«me
 ){

1614 
rc
 = 
	`sqlôe3OsO≥nRódWrôe
(
zFuŒP©h«me
, &
fd
, &
ªadO∆y
);

1618 
rc
 = 
	`sqlôe3∑gî_›íãmp
(
zTemp
, &
fd
);

1619 
zFûíame
 = 
zTemp
;

1620 
zFuŒP©h«me
 = 
	`sqlôe3OsFuŒP©h«me
(
zFûíame
);

1621 if–
rc
==
SQLITE_OK
 ){

1622 
ãmpFûe
 = 1;

1630 if–
zFuŒP©h«me
 ){

1631 
«meLí
 = 
	`°æí
(
zFuŒP©h«me
);

1632 
pPagî
 = 
	`sqlôeMÆloc
–(*pPagîË+ 
«meLí
*3 + 30 );

1640 if–!
pPagî
 || !
zFuŒP©h«me
 || 
rc
!=
SQLITE_OK
 ){

1641 
	`sqlôe3OsClo£
(&
fd
);

1642 
	`sqlôeFªe
(
zFuŒP©h«me
);

1643 
	`sqlôeFªe
(
pPagî
);

1644  ((
rc
==
SQLITE_OK
)?
SQLITE_NOMEM
:rc);

1647 
	`TRACE3
("OPEN %d %s\n", 
	`FILEHANDLEID
(
fd
), 
zFuŒP©h«me
);

1648 
pPagî
->
zFûíame
 = (*)&pPager[1];

1649 
pPagî
->
zDúe˘‹y
 = &pPagî->
zFûíame
[
«meLí
+1];

1650 
pPagî
->
zJou∫Æ
 = &pPagî->
zDúe˘‹y
[
«meLí
+1];

1651 
	`°r˝y
(
pPagî
->
zFûíame
, 
zFuŒP©h«me
);

1652 
	`°r˝y
(
pPagî
->
zDúe˘‹y
, 
zFuŒP©h«me
);

1654 
i
=
«meLí
; i>0 && 
pPagî
->
zDúe˘‹y
[i-1]!='/'; i--){}

1655 if–
i
>0 ) 
pPagî
->
zDúe˘‹y
[i-1] = 0;

1656 
	`°r˝y
(
pPagî
->
zJou∫Æ
, 
zFuŒP©h«me
);

1657 
	`sqlôeFªe
(
zFuŒP©h«me
);

1658 
	`°r˝y
(&
pPagî
->
zJou∫Æ
[
«meLí
], "-journal");

1659 
pPagî
->
fd
 = fd;

1661 
pPagî
->
u£Jou∫Æ
 = u£Jou∫Æ && !
memDb
;

1662 
pPagî
->
noRódlock
 =ÇoRódlock && 
ªadO∆y
;

1666 
pPagî
->
dbSize
 = 
memDb
-1;

1667 
pPagî
->
∑geSize
 = 
SQLITE_DEFAULT_PAGE_SIZE
;

1672 
pPagî
->
mxPage
 = 100;

1673 
	`as£π
–
PAGER_UNLOCK
==0 );

1676 
pPagî
->
ãmpFûe
 =ÅempFile;

1677 
pPagî
->
memDb
 = memDb;

1678 
pPagî
->
ªadO∆y
 =ÑeadOnly;

1680 
pPagî
->
noSync
 =ÖPagî->
ãmpFûe
 || !
u£Jou∫Æ
;

1681 
pPagî
->
fuŒSync
 = (pPagî->
noSync
?0:1);

1685 
pPagî
->
nExåa
 = 
	`FORCE_ALIGNMENT
(nExtra);

1686 
pPagî
->
£˘‹Size
 = 
PAGER_SECTOR_SIZE
;

1689 *
µPagî
 = 
pPagî
;

1690 #ifde‡
SQLITE_ENABLE_MEMORY_MANAGEMENT


1691 
pPagî
->
pNext
 = 
pTsd
->pPager;

1692 
pTsd
->
pPagî
 =ÖPager;

1694  
SQLITE_OK
;

1695 
	}
}

1700 
	$sqlôe3∑gî_£t_busyh™dÀr
(
Pagî
 *
pPagî
, 
BusyH™dÀr
 *
pBusyH™dÀr
){

1701 
pPagî
->
pBusyH™dÀr
 =ÖBusyHandler;

1702 
	}
}

1712 
sqlôe3∑gî_£t_de°ru˘‹
(
Pagî
 *
pPagî
, (*
xDesc
)(*,)){

1713 
pPagî
->
xDe°ru˘‹
 = 
xDesc
;

1714 
	}
}

1723 
sqlôe3∑gî_£t_ªöôî
(
Pagî
 *
pPagî
, (*
xReöô
)(*,)){

1724 
pPagî
->
xReöôî
 = 
xReöô
;

1725 
	}
}

1732 
	$sqlôe3∑gî_£t_∑gesize
(
Pagî
 *
pPagî
, 
∑geSize
){

1733 
	`as£π
–
∑geSize
>=512 &&ÖageSize<=
SQLITE_MAX_PAGE_SIZE
 );

1734 if–!
pPagî
->
memDb
 ){

1735 
pPagî
->
∑geSize
 =ÖageSize;

1737  
pPagî
->
∑geSize
;

1738 
	}
}

1748 #ifde‡
SQLITE_TEST


1749 
sqlôe3_io_îr‹_≥ndög
;

1750 
sqlôe3_io_îr‹_hô
;

1751 
	gßved_˙t
;

1752 
	$˛ór_simuœãd_io_îr‹
(){

1753 
sqlôe3_io_îr‹_hô
 = 0;

1754 
	}
}

1755 
	$dißbÀ_simuœãd_io_îr‹s
(){

1756 
ßved_˙t
 = 
sqlôe3_io_îr‹_≥ndög
;

1757 
sqlôe3_io_îr‹_≥ndög
 = -1;

1758 
	}
}

1759 
	$íabÀ_simuœãd_io_îr‹s
(){

1760 
sqlôe3_io_îr‹_≥ndög
 = 
ßved_˙t
;

1761 
	}
}

1763 
	#˛ór_simuœãd_io_îr‹
()

	)

1764 
	#dißbÀ_simuœãd_io_îr‹s
()

	)

1765 
	#íabÀ_simuœãd_io_îr‹s
()

	)

1778 
	$sqlôe3∑gî_ªad_fûehódî
(
Pagî
 *
pPagî
, 
N
, *
pDe°
){

1779 
	`mem£t
(
pDe°
, 0, 
N
);

1780 if–
MEMDB
==0 ){

1781 
	`dißbÀ_simuœãd_io_îr‹s
();

1782 
	`sqlôe3OsSìk
(
pPagî
->
fd
, 0);

1783 
	`sqlôe3OsRód
(
pPagî
->
fd
, 
pDe°
, 
N
);

1784 
	`íabÀ_simuœãd_io_îr‹s
();

1786 
	}
}

1797 
	$sqlôe3∑gî_∑gecou¡
(
Pagî
 *
pPagî
){

1798 
i64
 
n
;

1799 
	`as£π
–
pPagî
!=0 );

1800 if–
pPagî
->
dbSize
>=0 ){

1801 
n
 = 
pPagî
->
dbSize
;

1803 if–
	`sqlôe3OsFûeSize
(
pPagî
->
fd
, &
n
)!=
SQLITE_OK
 ){

1804 
	`∑gî_îr‹
(
pPagî
, 
SQLITE_IOERR
);

1807 if–
n
>0 &&Ç<
pPagî
->
∑geSize
 ){

1808 
n
 = 1;

1810 
n
 /
pPagî
->
∑geSize
;

1812 if–
pPagî
->
°©e
!=
PAGER_UNLOCK
 ){

1813 
pPagî
->
dbSize
 = 
n
;

1816 if–
n
==(
PENDING_BYTE
/
pPagî
->
∑geSize
) ){

1817 
n
++;

1819  
n
;

1820 
	}
}

1825 
syncJou∫Æ
(
Pagî
*);

1834 
	$u∆ökHashChaö
(
Pagî
 *
pPagî
, 
PgHdr
 *
pPg
){

1835 if–
pPg
->
pgno
==0 ){

1839 if–
pPg
->
pNextHash
 ){

1840 
pPg
->
pNextHash
->
pPªvHash
 =ÖPg->pPrevHash;

1842 if–
pPg
->
pPªvHash
 ){

1843 
	`as£π
–
pPagî
->
aHash
[
	`∑gî_hash
(
pPg
->
pgno
)]!=pPg );

1844 
pPg
->
pPªvHash
->
pNextHash
 =ÖPg->pNextHash;

1846 
h
 = 
	`∑gî_hash
(
pPg
->
pgno
);

1847 
	`as£π
–
pPagî
->
aHash
[
h
]==
pPg
 );

1848 
pPagî
->
aHash
[
h
] = 
pPg
->
pNextHash
;

1851 
pPg
->
pgno
 = 0;

1852 
pPg
->
pNextHash
 =ÖPg->
pPªvHash
 = 0;

1853 
	}
}

1859 
	$u∆ökPage
(
PgHdr
 *
pPg
){

1860 
Pagî
 *
pPagî
 = 
pPg
->pPager;

1863 if–
pPg
==
pPagî
->
pFú°Syn˚d
 ){

1864 
PgHdr
 *
p
 = 
pPg
->
pNextFªe
;

1865  
p
 &&Ö->
√edSync
 ){Ö =Ö->
pNextFªe
; }

1866 
pPagî
->
pFú°Syn˚d
 = 
p
;

1870 if–
pPg
->
pPªvFªe
 ){

1871 
pPg
->
pPªvFªe
->
pNextFªe
 =ÖPg->pNextFree;

1873 
	`as£π
–
pPagî
->
pFú°
==
pPg
 );

1874 
pPagî
->
pFú°
 = 
pPg
->
pNextFªe
;

1876 if–
pPg
->
pNextFªe
 ){

1877 
pPg
->
pNextFªe
->
pPªvFªe
 =ÖPg->pPrevFree;

1879 
	`as£π
–
pPagî
->
pLa°
==
pPg
 );

1880 
pPagî
->
pLa°
 = 
pPg
->
pPªvFªe
;

1882 
pPg
->
pNextFªe
 =ÖPg->
pPªvFªe
 = 0;

1885 
	`u∆ökHashChaö
(
pPagî
, 
pPg
);

1886 
	}
}

1888 #i‚de‡
SQLITE_OMIT_MEMORYDB


1894 
	$mem‹yTrunˇã
(
Pagî
 *
pPagî
){

1895 
PgHdr
 *
pPg
;

1896 
PgHdr
 **
µPg
;

1897 
dbSize
 = 
pPagî
->dbSize;

1899 
µPg
 = &
pPagî
->
pAŒ
;

1900  (
pPg
 = *
µPg
)!=0 ){

1901 if–
pPg
->
pgno
<=
dbSize
 ){

1902 
µPg
 = &
pPg
->
pNextAŒ
;

1903 }if–
pPg
->
nRef
>0 ){

1904 
	`mem£t
(
	`PGHDR_TO_DATA
(
pPg
), 0, 
pPagî
->
∑geSize
);

1905 
µPg
 = &
pPg
->
pNextAŒ
;

1907 *
µPg
 = 
pPg
->
pNextAŒ
;

1908 
	`u∆ökPage
(
pPg
);

1909 
	`sqlôeFªe
(
pPg
);

1910 
pPagî
->
nPage
--;

1913 
	}
}

1915 
	#mem‹yTrunˇã
(
p
)

	)

1926 
	$∑gî_waô_⁄_lock
(
Pagî
 *
pPagî
, 
lockty≥
){

1927 
rc
;

1928 
	`as£π
–
PAGER_SHARED
==
SHARED_LOCK
 );

1929 
	`as£π
–
PAGER_RESERVED
==
RESERVED_LOCK
 );

1930 
	`as£π
–
PAGER_EXCLUSIVE
==
EXCLUSIVE_LOCK
 );

1931 if–
pPagî
->
°©e
>=
lockty≥
 ){

1932 
rc
 = 
SQLITE_OK
;

1935 
rc
 = 
	`sqlôe3OsLock
(
pPagî
->
fd
, 
lockty≥
);

1936 } 
rc
==
SQLITE_BUSY
 && 
	`sqlôe3InvokeBusyH™dÀr
(
pPagî
->
pBusyH™dÀr
) );

1937 if–
rc
==
SQLITE_OK
 ){

1938 
pPagî
->
°©e
 = 
lockty≥
;

1941  
rc
;

1942 
	}
}

1947 
	$sqlôe3∑gî_åunˇã
(
Pagî
 *
pPagî
, 
Pgno
 
nPage
){

1948 
rc
;

1949 
	`sqlôe3∑gî_∑gecou¡
(
pPagî
);

1950 if–
pPagî
->
îrCode
 ){

1951 
rc
 = 
pPagî
->
îrCode
;

1952  
rc
;

1954 if–
nPage
>=()
pPagî
->
dbSize
 ){

1955  
SQLITE_OK
;

1957 if–
MEMDB
 ){

1958 
pPagî
->
dbSize
 = 
nPage
;

1959 
	`mem‹yTrunˇã
(
pPagî
);

1960  
SQLITE_OK
;

1962 
rc
 = 
	`syncJou∫Æ
(
pPagî
);

1963 if–
rc
!=
SQLITE_OK
 ){

1964  
rc
;

1968 
rc
 = 
	`∑gî_waô_⁄_lock
(
pPagî
, 
EXCLUSIVE_LOCK
);

1969 if–
rc
!=
SQLITE_OK
 ){

1970  
rc
;

1973 
rc
 = 
	`∑gî_åunˇã
(
pPagî
, 
nPage
);

1974 if–
rc
==
SQLITE_OK
 ){

1975 
pPagî
->
dbSize
 = 
nPage
;

1977  
rc
;

1978 
	}
}

1994 
	$sqlôe3∑gî_˛o£
(
Pagî
 *
pPagî
){

1995 
PgHdr
 *
pPg
, *
pNext
;

1996 #ifde‡
SQLITE_ENABLE_MEMORY_MANAGEMENT


2002 
ThªadD©a
 *
pTsd
 = 
	`sqlôe3ThªadD©a
();

2003 
	`as£π
–
pPagî
 );

2004 
	`as£π
–
pTsd
 &&ÖTsd->
nAŒoc
 );

2007  
pPagî
->
°©e
 ){

2008 
PAGER_RESERVED
:

2009 
PAGER_SYNCED
:

2010 
PAGER_EXCLUSIVE
: {

2015 
	`dißbÀ_simuœãd_io_îr‹s
();

2016 
	`sqlôe3∑gî_rﬁlback
(
pPagî
);

2017 
	`íabÀ_simuœãd_io_îr‹s
();

2018 if–!
MEMDB
 ){

2019 
	`sqlôe3OsU∆ock
(
pPagî
->
fd
, 
NO_LOCK
);

2021 
	`as£π
–
pPagî
->
îrCode
 ||ÖPagî->
jou∫ÆO≥n
==0 );

2024 
PAGER_SHARED
: {

2025 if–!
MEMDB
 ){

2026 
	`sqlôe3OsU∆ock
(
pPagî
->
fd
, 
NO_LOCK
);

2035 
pPg
=
pPagî
->
pAŒ
;ÖPg;ÖPg=
pNext
){

2036 #i‚de‡
NDEBUG


2037 if–
MEMDB
 ){

2038 
PgHi°‹y
 *
pHi°
 = 
	`PGHDR_TO_HIST
(
pPg
, 
pPagî
);

2039 
	`as£π
–!
pPg
->
ÆwaysRﬁlback
 );

2040 
	`as£π
–!
pHi°
->
pOrig
 );

2041 
	`as£π
–!
pHi°
->
pStmt
 );

2044 
pNext
 = 
pPg
->
pNextAŒ
;

2045 
	`sqlôeFªe
(
pPg
);

2047 
	`TRACE2
("CLOSE %d\n", 
	`PAGERID
(
pPagî
));

2048 
	`as£π
–
pPagî
->
îrCode
 || (pPagî->
jou∫ÆO≥n
==0 &&ÖPagî->
°mtO≥n
==0) );

2049 if–
pPagî
->
jou∫ÆO≥n
 ){

2050 
	`sqlôe3OsClo£
(&
pPagî
->
jfd
);

2052 
	`sqlôeFªe
(
pPagî
->
aInJou∫Æ
);

2053 if–
pPagî
->
°mtO≥n
 ){

2054 
	`sqlôe3OsClo£
(&
pPagî
->
°fd
);

2056 
	`sqlôe3OsClo£
(&
pPagî
->
fd
);

2063 #ifde‡
SQLITE_ENABLE_MEMORY_MANAGEMENT


2067 if–
pPagî
==
pTsd
->pPager ){

2068 
pTsd
->
pPagî
 =ÖPagî->
pNext
;

2070 
Pagî
 *
pTmp
;

2071 
pTmp
 = 
pTsd
->
pPagî
;ÖTmp->
pNext
!=pPager;ÖTmp=pTmp->pNext);

2072 
pTmp
->
pNext
 = 
pPagî
->pNext;

2076 
	`sqlôeFªe
(
pPagî
);

2077  
SQLITE_OK
;

2078 
	}
}

2083 
Pgno
 
	$sqlôe3∑gî_∑gíumbî
(*
pD©a
){

2084 
PgHdr
 *
p
 = 
	`DATA_TO_PGHDR
(
pD©a
);

2085  
p
->
pgno
;

2086 
	}
}

2097 
	$_∑ge_ªf
(
PgHdr
 *
pPg
){

2098 if–
pPg
->
nRef
==0 ){

2100 if–
pPg
=ıPg->
pPagî
->
pFú°Syn˚d
 ){

2101 
PgHdr
 *
p
 = 
pPg
->
pNextFªe
;

2102  
p
 &&Ö->
√edSync
 ){Ö =Ö->
pNextFªe
; }

2103 
pPg
->
pPagî
->
pFú°Syn˚d
 = 
p
;

2105 if–
pPg
->
pPªvFªe
 ){

2106 
pPg
->
pPªvFªe
->
pNextFªe
 =ÖPg->pNextFree;

2108 
pPg
->
pPagî
->
pFú°
 =ÖPg->
pNextFªe
;

2110 if–
pPg
->
pNextFªe
 ){

2111 
pPg
->
pNextFªe
->
pPªvFªe
 =ÖPg->pPrevFree;

2113 
pPg
->
pPagî
->
pLa°
 =ÖPg->
pPªvFªe
;

2115 
pPg
->
pPagî
->
nRef
++;

2117 
pPg
->
nRef
++;

2118 
	`REFINFO
(
pPg
);

2119 
	}
}

2120 #ifde‡
SQLITE_DEBUG


2121 
	$∑ge_ªf
(
PgHdr
 *
pPg
){

2122 if–
pPg
->
nRef
==0 ){

2123 
	`_∑ge_ªf
(
pPg
);

2125 
pPg
->
nRef
++;

2126 
	`REFINFO
(
pPg
);

2128 
	}
}

2130 
	#∑ge_ªf
(
P
Ë((P)->
nRef
==0?
	`_∑ge_ªf
(P):()(P)->nRef++)

	)

2137 
	$sqlôe3∑gî_ªf
(*
pD©a
){

2138 
PgHdr
 *
pPg
 = 
	`DATA_TO_PGHDR
(
pD©a
);

2139 
	`∑ge_ªf
(
pPg
);

2140  
SQLITE_OK
;

2141 
	}
}

2163 
	$syncJou∫Æ
(
Pagî
 *
pPagî
){

2164 
PgHdr
 *
pPg
;

2165 
rc
 = 
SQLITE_OK
;

2170 if–
pPagî
->
√edSync
 ){

2171 if–!
pPagî
->
ãmpFûe
 ){

2172 
	`as£π
–
pPagî
->
jou∫ÆO≥n
 );

2175 #i‚de‡
NDEBUG


2180 
i64
 
jSz
;

2181 
rc
 = 
	`sqlôe3OsFûeSize
(
pPagî
->
jfd
, &
jSz
);

2182 if–
rc
!=0 ) Ñc;

2183 
	`as£π
–
pPagî
->
jou∫ÆOff
==
jSz
 );

2192 if–
pPagî
->
fuŒSync
 ){

2193 
	`TRACE2
("SYNC jou∫Æ o‡%d\n", 
	`PAGERID
(
pPagî
));

2194 
rc
 = 
	`sqlôe3OsSync
(
pPagî
->
jfd
, 0);

2195 if–
rc
!=0 ) Ñc;

2197 
rc
 = 
	`sqlôe3OsSìk
(
pPagî
->
jfd
,

2198 
pPagî
->
jou∫ÆHdr
 + (
aJou∫ÆMagic
));

2199 if–
rc
 ) Ñc;

2200 
rc
 = 
	`wrôe32bôs
(
pPagî
->
jfd
,ÖPagî->
nRec
);

2201 if–
rc
 ) Ñc;

2203 
rc
 = 
	`sqlôe3OsSìk
(
pPagî
->
jfd
,ÖPagî->
jou∫ÆOff
);

2204 if–
rc
 ) Ñc;

2206 
	`TRACE2
("SYNC jou∫Æ o‡%d\n", 
	`PAGERID
(
pPagî
));

2207 
rc
 = 
	`sqlôe3OsSync
(
pPagî
->
jfd
,ÖPagî->
fuŒSync
);

2208 if–
rc
!=0 ) Ñc;

2209 
pPagî
->
jou∫ÆSèπed
 = 1;

2211 
pPagî
->
√edSync
 = 0;

2215 
pPg
=
pPagî
->
pAŒ
;ÖPg;ÖPgıPg->
pNextAŒ
){

2216 
pPg
->
√edSync
 = 0;

2218 
pPagî
->
pFú°Syn˚d
 =ÖPagî->
pFú°
;

2221 #i‚de‡
NDEBUG


2227 
pPg
=
pPagî
->
pAŒ
;ÖPg;ÖPgıPg->
pNextAŒ
){

2228 
	`as£π
–
pPg
->
√edSync
==0 );

2230 
	`as£π
–
pPagî
->
pFú°Syn˚d
=ıPagî->
pFú°
 );

2234  
rc
;

2235 
	}
}

2242 
	$∑gî_wrôe_∑gñi°
(
PgHdr
 *
pLi°
){

2243 
Pagî
 *
pPagî
;

2244 
rc
;

2246 if–
pLi°
==0 )  
SQLITE_OK
;

2247 
pPagî
 = 
pLi°
->pPager;

2265 
rc
 = 
	`∑gî_waô_⁄_lock
(
pPagî
, 
EXCLUSIVE_LOCK
);

2266 if–
rc
!=
SQLITE_OK
 ){

2267  
rc
;

2270  
pLi°
 ){

2271 
	`as£π
–
pLi°
->
dúty
 );

2272 
rc
 = 
	`sqlôe3OsSìk
(
pPagî
->
fd
, (
pLi°
->
pgno
-1)*(
i64
ÌPagî->
∑geSize
);

2273 if–
rc
 ) Ñc;

2279 if–
pLi°
->
pgno
<=
pPagî
->
dbSize
 ){

2280 
	`CODEC
(
pPagî
, 
	`PGHDR_TO_DATA
(
pLi°
),ÖLi°->
pgno
, 6);

2281 
	`TRACE3
("STORE %dÖagê%d\n", 
	`PAGERID
(
pPagî
), 
pLi°
->
pgno
);

2282 
rc
 = 
	`sqlôe3OsWrôe
(
pPagî
->
fd
, 
	`PGHDR_TO_DATA
(
pLi°
),

2283 
pPagî
->
∑geSize
);

2284 
	`CODEC
(
pPagî
, 
	`PGHDR_TO_DATA
(
pLi°
),ÖLi°->
pgno
, 0);

2285 
	`TEST_INCR
(
pPagî
->
nWrôe
);

2287 #i‚de‡
NDEBUG


2289 
	`TRACE3
("NOSTORE %dÖagê%d\n", 
	`PAGERID
(
pPagî
), 
pLi°
->
pgno
);

2292 if–
rc
 ) Ñc;

2293 
pLi°
->
dúty
 = 0;

2294 #ifde‡
SQLITE_CHECK_PAGES


2295 
pLi°
->
∑geHash
 = 
	`∑gî_∑gehash
(pList);

2297 
pLi°
 =ÖLi°->
pDúty
;

2299  
SQLITE_OK
;

2300 
	}
}

2307 
PgHdr
 *
	$∑gî_gë_Æl_dúty_∑ges
(
Pagî
 *
pPagî
){

2308 
PgHdr
 *
p
, *
pLi°
;

2309 
pLi°
 = 0;

2310 
p
=
pPagî
->
pAŒ
;Ö;Öı->
pNextAŒ
){

2311 if–
p
->
dúty
 ){

2312 
p
->
pDúty
 = 
pLi°
;

2313 
pLi°
 = 
p
;

2316  
pLi°
;

2317 
	}
}

2327 
	$hasHŸJou∫Æ
(
Pagî
 *
pPagî
){

2328 if–!
pPagî
->
u£Jou∫Æ
 )  0;

2329 if–!
	`sqlôe3OsFûeExi°s
(
pPagî
->
zJou∫Æ
) )  0;

2330 if–
	`sqlôe3OsCheckRe£rvedLock
(
pPagî
->
fd
) )  0;

2331 if–
	`sqlôe3∑gî_∑gecou¡
(
pPagî
)==0 ){

2332 
	`sqlôe3OsDñëe
(
pPagî
->
zJou∫Æ
);

2337 
	}
}

2345 
	$∑gî_ªcy˛e
(
Pagî
 *
pPagî
, 
syncOk
, 
PgHdr
 **
µPg
){

2346 
PgHdr
 *
pPg
;

2347 *
µPg
 = 0;

2352 
pPg
 = 
pPagî
->
pFú°Syn˚d
;

2359 if–
pPg
==0 && 
pPagî
->
pFú°
 && 
syncOk
 && !
MEMDB
){

2360 
rc
 = 
	`syncJou∫Æ
(
pPagî
);

2361 if–
rc
!=0 ){

2362  
rc
;

2364 if–
pPagî
->
fuŒSync
 ){

2371 
pPagî
->
nRec
 = 0;

2372 
	`as£π
–
pPagî
->
jou∫ÆOff
 > 0 );

2373 
rc
 = 
	`wrôeJou∫ÆHdr
(
pPagî
);

2374 if–
rc
!=0 ){

2375  
rc
;

2378 
pPg
 = 
pPagî
->
pFú°
;

2380 if–
pPg
==0 ){

2381  
SQLITE_OK
;

2384 
	`as£π
–
pPg
->
nRef
==0 );

2388 if–
pPg
->
dúty
 ){

2389 
rc
;

2390 
	`as£π
–
pPg
->
√edSync
==0 );

2391 
pPg
->
pDúty
 = 0;

2392 
rc
 = 
	`∑gî_wrôe_∑gñi°
–
pPg
 );

2393 if–
rc
!=
SQLITE_OK
 ){

2394  
rc
;

2397 
	`as£π
–
pPg
->
dúty
==0 );

2407 if–
pPg
->
ÆwaysRﬁlback
 ){

2408 
pPagî
->
ÆwaysRﬁlback
 = 1;

2413 
	`u∆ökPage
(
pPg
);

2414 
	`TEST_INCR
(
pPagî
->
nOvÊ
);

2416 *
µPg
 = 
pPg
;

2417  
SQLITE_OK
;

2418 
	}
}

2430 #ifde‡
SQLITE_ENABLE_MEMORY_MANAGEMENT


2431 
	$sqlôe3∑gî_ªÀa£_mem‹y
(
nReq
){

2432 c⁄° 
ThªadD©a
 *
pTsdro
 = 
	`sqlôe3ThªadD©aRódO∆y
();

2433 
Pagî
 *
p
;

2434 
nRñó£d
 = 0;

2435 
i
;

2442 if–
	`sqlôe3OsInMuãx
(0) ){

2452 
i
=0; i<=1; i++){

2455 
p
=
pTsdro
->
pPagî
;Ö && (
nReq
<0 || 
nRñó£d
<nReq);Öı->
pNext
){

2456 
PgHdr
 *
pPg
;

2457 
rc
;

2463  
SQLITE_OK
==(
rc
 = 
	`∑gî_ªcy˛e
(
p
, 
i
, &
pPg
)) &&ÖPg) {

2472 
PgHdr
 *
pTmp
;

2473 
	`as£π
–
pPg
 );

2474 
	`∑ge_ªmove_‰om_°mt_li°
(
pPg
);

2475 if–
pPg
==
p
->
pAŒ
 ){

2476 
p
->
pAŒ
 = 
pPg
->
pNextAŒ
;

2478  
pTmp
=
p
->
pAŒ
;ÖTmp->
pNextAŒ
!=
pPg
;ÖTmp=pTmp->pNextAll );

2479 
pTmp
->
pNextAŒ
 = 
pPg
->pNextAll;

2481 
nRñó£d
 +
	`sqlôeAŒocSize
(
pPg
);

2482 
	`sqlôeFªe
(
pPg
);

2485 if–
rc
!=
SQLITE_OK
 ){

2492 
	`as£π
–
rc
==
SQLITE_IOERR
 ||Ñc==
SQLITE_FULL
 );

2493 
	`as£π
–
p
->
°©e
>=
PAGER_RESERVED
 );

2494 
	`∑gî_îr‹
(
p
, 
rc
);

2499  
nRñó£d
;

2500 
	}
}

2526 
	$sqlôe3∑gî_gë
(
Pagî
 *
pPagî
, 
Pgno
 
pgno
, **
µPage
){

2527 
PgHdr
 *
pPg
;

2528 
rc
;

2533 if–
pgno
>
PAGER_MAX_PGNO
 ||Ögno==0 ||Ögno==
	`PAGER_MJ_PGNO
(
pPagî
) ){

2534  
SQLITE_CORRUPT_BKPT
;

2539 
	`as£π
–
pPagî
!=0 );

2540 *
µPage
 = 0;

2541 if–
pPagî
->
îrCode
 &&ÖPagî->îrCode!=
SQLITE_FULL
 ){

2542  
pPagî
->
îrCode
;

2548 if–
pPagî
->
nRef
==0 && !
MEMDB
 ){

2549 if–!
pPagî
->
noRódlock
 ){

2550 
rc
 = 
	`∑gî_waô_⁄_lock
(
pPagî
, 
SHARED_LOCK
);

2551 if–
rc
!=
SQLITE_OK
 ){

2552  
	`∑gî_îr‹
(
pPagî
, 
rc
);

2559 if–
	`hasHŸJou∫Æ
(
pPagî
) ){

2571 
rc
 = 
	`sqlôe3OsLock
(
pPagî
->
fd
, 
EXCLUSIVE_LOCK
);

2572 if–
rc
!=
SQLITE_OK
 ){

2573 
	`sqlôe3OsU∆ock
(
pPagî
->
fd
, 
NO_LOCK
);

2574 
pPagî
->
°©e
 = 
PAGER_UNLOCK
;

2575  
	`∑gî_îr‹
(
pPagî
, 
rc
);

2577 
pPagî
->
°©e
 = 
PAGER_EXCLUSIVE
;

2587 
rc
 = 
	`sqlôe3OsO≥nRódO∆y
(
pPagî
->
zJou∫Æ
, &pPagî->
jfd
);

2588 if–
rc
!=
SQLITE_OK
 ){

2589 
	`sqlôe3OsU∆ock
(
pPagî
->
fd
, 
NO_LOCK
);

2590 
pPagî
->
°©e
 = 
PAGER_UNLOCK
;

2591  
SQLITE_BUSY
;

2593 
pPagî
->
jou∫ÆO≥n
 = 1;

2594 
pPagî
->
jou∫ÆSèπed
 = 0;

2595 
pPagî
->
jou∫ÆOff
 = 0;

2596 
pPagî
->
£tMa°î
 = 0;

2597 
pPagî
->
jou∫ÆHdr
 = 0;

2602 
rc
 = 
	`∑gî_∂ayback
(
pPagî
);

2603 if–
rc
!=
SQLITE_OK
 ){

2604  
	`∑gî_îr‹
(
pPagî
, 
rc
);

2607 
pPg
 = 0;

2610 
pPg
 = 
	`∑gî_lookup
(
pPagî
, 
pgno
);

2611 if–
MEMDB
 && 
pPagî
->
°©e
==
PAGER_UNLOCK
 ){

2612 
pPagî
->
°©e
 = 
PAGER_SHARED
;

2615 if–
pPg
==0 ){

2617 
h
;

2618 
	`TEST_INCR
(
pPagî
->
nMiss
);

2619 if–
pPagî
->
nPage
<pPagî->
mxPage
 ||ÖPagî->
pFú°
==0 || 
MEMDB
 ){

2621 
pPg
 = 
	`sqlôeMÆlocRaw
–(*pPgË+ 
pPagî
->
∑geSize


2622 + (
u32
Ë+ 
pPagî
->
nExåa


2623 + 
MEMDB
*(
PgHi°‹y
) );

2624 if–
pPg
==0 ){

2625  
SQLITE_NOMEM
;

2627 
	`mem£t
(
pPg
, 0, (*pPg));

2628 if–
MEMDB
 ){

2629 
	`mem£t
(
	`PGHDR_TO_HIST
(
pPg
, 
pPagî
), 0, (
PgHi°‹y
));

2631 
pPg
->
pPagî
 =ÖPager;

2632 
pPg
->
pNextAŒ
 = 
pPagî
->
pAŒ
;

2633 
pPagî
->
pAŒ
 = 
pPg
;

2634 
pPagî
->
nPage
++;

2635 if–
pPagî
->
nPage
>pPagî->
nMaxPage
 ){

2636 
	`as£π
–
pPagî
->
nMaxPage
==’Pagî->
nPage
-1) );

2637 
pPagî
->
nMaxPage
++;

2640 
rc
 = 
	`∑gî_ªcy˛e
(
pPagî
, 1, &
pPg
);

2641 if–
rc
!=
SQLITE_OK
 ){

2642  
rc
;

2644 
	`as£π
(
pPg
) ;

2646 
pPg
->
pgno
 =Ögno;

2647 if–
pPagî
->
aInJou∫Æ
 && ()
pgno
<ıPagî->
‹igDbSize
 ){

2648 
	`sqlôe3CheckMem‹y
(
pPagî
->
aInJou∫Æ
, 
pgno
/8);

2649 
	`as£π
–
pPagî
->
jou∫ÆO≥n
 );

2650 
pPg
->
öJou∫Æ
 = (
pPagî
->
aInJou∫Æ
[
pgno
/8] & (1<<(pgno&7)))!=0;

2651 
pPg
->
√edSync
 = 0;

2653 
pPg
->
öJou∫Æ
 = 0;

2654 
pPg
->
√edSync
 = 0;

2656 if–
pPagî
->
aInStmt
 && ()
pgno
<ıPagî->
°mtSize


2657 && (
pPagî
->
aInStmt
[
pgno
/8] & (1<<(pgno&7)))!=0 ){

2658 
	`∑ge_add_to_°mt_li°
(
pPg
);

2660 
	`∑ge_ªmove_‰om_°mt_li°
(
pPg
);

2662 
pPg
->
dúty
 = 0;

2663 
pPg
->
nRef
 = 1;

2664 
	`REFINFO
(
pPg
);

2666 
pPagî
->
nRef
++;

2667 if–
pPagî
->
nExåa
>0 ){

2668 
	`mem£t
(
	`PGHDR_TO_EXTRA
(
pPg
, 
pPagî
), 0,ÖPagî->
nExåa
);

2670 if–
pPagî
->
îrCode
 ){

2671 
	`sqlôe3∑gî_uƒef
(
	`PGHDR_TO_DATA
(
pPg
));

2672 
rc
 = 
pPagî
->
îrCode
;

2673  
rc
;

2679 if–
	`sqlôe3∑gî_∑gecou¡
(
pPagî
)<()
pgno
 || 
MEMDB
 ){

2680 
	`mem£t
(
	`PGHDR_TO_DATA
(
pPg
), 0, 
pPagî
->
∑geSize
);

2682 
	`as£π
–
MEMDB
==0 );

2683 
rc
 = 
	`sqlôe3OsSìk
(
pPagî
->
fd
, (
pgno
-1)*(
i64
ÌPagî->
∑geSize
);

2684 if–
rc
==
SQLITE_OK
 ){

2685 
rc
 = 
	`sqlôe3OsRód
(
pPagî
->
fd
, 
	`PGHDR_TO_DATA
(
pPg
),

2686 
pPagî
->
∑geSize
);

2688 
	`TRACE3
("FETCH %dÖagê%d\n", 
	`PAGERID
(
pPagî
), 
pPg
->
pgno
);

2689 
	`CODEC
(
pPagî
, 
	`PGHDR_TO_DATA
(
pPg
),ÖPg->
pgno
, 3);

2690 if–
rc
!=
SQLITE_OK
 ){

2691 
i64
 
fûeSize
;

2692 
rc2
 = 
	`sqlôe3OsFûeSize
(
pPagî
->
fd
, &
fûeSize
);

2693 if–
rc2
!=
SQLITE_OK
 || 
fûeSize
>=
pgno
*
pPagî
->
∑geSize
 ){

2696 
pPg
->
pgno
 = 0;

2697 
	`sqlôe3∑gî_uƒef
(
	`PGHDR_TO_DATA
(
pPg
));

2698  
rc
;

2700 
	`˛ór_simuœãd_io_îr‹
();

2701 
	`mem£t
(
	`PGHDR_TO_DATA
(
pPg
), 0, 
pPagî
->
∑geSize
);

2704 
	`TEST_INCR
(
pPagî
->
nRód
);

2709 
h
 = 
	`∑gî_hash
(
pgno
);

2710 
pPg
->
pNextHash
 = 
pPagî
->
aHash
[
h
];

2711 
pPagî
->
aHash
[
h
] = 
pPg
;

2712 if–
pPg
->
pNextHash
 ){

2713 
	`as£π
–
pPg
->
pNextHash
->
pPªvHash
==0 );

2714 
pPg
->
pNextHash
->
pPªvHash
 =ÖPg;

2717 #ifde‡
SQLITE_CHECK_PAGES


2718 
pPg
->
∑geHash
 = 
	`∑gî_∑gehash
(pPg);

2722 
	`TEST_INCR
(
pPagî
->
nHô
);

2723 
	`∑ge_ªf
(
pPg
);

2725 *
µPage
 = 
	`PGHDR_TO_DATA
(
pPg
);

2726  
SQLITE_OK
;

2727 
	}
}

2740 *
	$sqlôe3∑gî_lookup
(
Pagî
 *
pPagî
, 
Pgno
 
pgno
){

2741 
PgHdr
 *
pPg
;

2743 
	`as£π
–
pPagî
!=0 );

2744 
	`as£π
–
pgno
!=0 );

2745 if–
pPagî
->
îrCode
 &&ÖPagî->îrCode!=
SQLITE_FULL
 ){

2748 
pPg
 = 
	`∑gî_lookup
(
pPagî
, 
pgno
);

2749 if–
pPg
==0 )  0;

2750 
	`∑ge_ªf
(
pPg
);

2751  
	`PGHDR_TO_DATA
(
pPg
);

2752 
	}
}

2762 
	$sqlôe3∑gî_uƒef
(*
pD©a
){

2763 
PgHdr
 *
pPg
;

2767 
pPg
 = 
	`DATA_TO_PGHDR
(
pD©a
);

2768 
	`as£π
–
pPg
->
nRef
>0 );

2769 
pPg
->
nRef
--;

2770 
	`REFINFO
(
pPg
);

2772 
	`CHECK_PAGE
(
pPg
);

2777 if–
pPg
->
nRef
==0 ){

2778 
Pagî
 *
pPagî
;

2779 
pPagî
 = 
pPg
->pPager;

2780 
pPg
->
pNextFªe
 = 0;

2781 
pPg
->
pPªvFªe
 = 
pPagî
->
pLa°
;

2782 
pPagî
->
pLa°
 = 
pPg
;

2783 if–
pPg
->
pPªvFªe
 ){

2784 
pPg
->
pPªvFªe
->
pNextFªe
 =ÖPg;

2786 
pPagî
->
pFú°
 = 
pPg
;

2788 if–
pPg
->
√edSync
==0 && 
pPagî
->
pFú°Syn˚d
==0 ){

2789 
pPagî
->
pFú°Syn˚d
 = 
pPg
;

2791 if–
pPagî
->
xDe°ru˘‹
 ){

2792 
pPagî
->
	`xDe°ru˘‹
(
pD©a
,ÖPagî->
∑geSize
);

2798 
pPagî
->
nRef
--;

2799 
	`as£π
–
pPagî
->
nRef
>=0 );

2800 if–
pPagî
->
nRef
==0 && !
MEMDB
 ){

2801 
	`∑gî_ª£t
(
pPagî
);

2804  
SQLITE_OK
;

2805 
	}
}

2814 
	$∑gî_›í_jou∫Æ
(
Pagî
 *
pPagî
){

2815 
rc
;

2816 
	`as£π
–!
MEMDB
 );

2817 
	`as£π
–
pPagî
->
°©e
>=
PAGER_RESERVED
 );

2818 
	`as£π
–
pPagî
->
jou∫ÆO≥n
==0 );

2819 
	`as£π
–
pPagî
->
u£Jou∫Æ
 );

2820 
	`as£π
–
pPagî
->
aInJou∫Æ
==0 );

2821 
	`sqlôe3∑gî_∑gecou¡
(
pPagî
);

2822 
pPagî
->
aInJou∫Æ
 = 
	`sqlôeMÆloc
–pPagî->
dbSize
/8 + 1 );

2823 if–
pPagî
->
aInJou∫Æ
==0 ){

2824 
rc
 = 
SQLITE_NOMEM
;

2825 
Áûed_to_›í_jou∫Æ
;

2827 
rc
 = 
	`sqlôe3OsO≥nEx˛usive
(
pPagî
->
zJou∫Æ
, &pPagî->
jfd
,

2828 
pPagî
->
ãmpFûe
);

2829 
pPagî
->
jou∫ÆOff
 = 0;

2830 
pPagî
->
£tMa°î
 = 0;

2831 
pPagî
->
jou∫ÆHdr
 = 0;

2832 if–
rc
!=
SQLITE_OK
 ){

2833 
Áûed_to_›í_jou∫Æ
;

2835 
	`sqlôe3OsSëFuŒSync
(
pPagî
->
jfd
,ÖPagî->
fuŒSync
);

2836 
	`sqlôe3OsSëFuŒSync
(
pPagî
->
fd
,ÖPagî->
fuŒSync
);

2837 
	`sqlôe3OsO≥nDúe˘‹y
(
pPagî
->
jfd
,ÖPagî->
zDúe˘‹y
);

2838 
pPagî
->
jou∫ÆO≥n
 = 1;

2839 
pPagî
->
jou∫ÆSèπed
 = 0;

2840 
pPagî
->
√edSync
 = 0;

2841 
pPagî
->
ÆwaysRﬁlback
 = 0;

2842 
pPagî
->
nRec
 = 0;

2843 if–
pPagî
->
îrCode
 ){

2844 
rc
 = 
pPagî
->
îrCode
;

2845 
Áûed_to_›í_jou∫Æ
;

2847 
pPagî
->
‹igDbSize
 =ÖPagî->
dbSize
;

2849 
rc
 = 
	`wrôeJou∫ÆHdr
(
pPagî
);

2851 if–
pPagî
->
°mtAuto›í
 && 
rc
==
SQLITE_OK
 ){

2852 
rc
 = 
	`sqlôe3∑gî_°mt_begö
(
pPagî
);

2854 if–
rc
!=
SQLITE_OK
 &&Ñc!=
SQLITE_NOMEM
 ){

2855 
rc
 = 
	`∑gî_unwrôñock
(
pPagî
);

2856 if–
rc
==
SQLITE_OK
 ){

2857 
rc
 = 
SQLITE_FULL
;

2860  
rc
;

2862 
Áûed_to_›í_jou∫Æ
:

2863 
	`sqlôeFªe
(
pPagî
->
aInJou∫Æ
);

2864 
pPagî
->
aInJou∫Æ
 = 0;

2865 if–
rc
==
SQLITE_NOMEM
 ){

2871 
	`sqlôe3OsDñëe
(
pPagî
->
zJou∫Æ
);

2873 
	`sqlôe3OsU∆ock
(
pPagî
->
fd
, 
NO_LOCK
);

2874 
pPagî
->
°©e
 = 
PAGER_UNLOCK
;

2876  
rc
;

2877 
	}
}

2906 
	$sqlôe3∑gî_begö
(*
pD©a
, 
exFœg
){

2907 
PgHdr
 *
pPg
 = 
	`DATA_TO_PGHDR
(
pD©a
);

2908 
Pagî
 *
pPagî
 = 
pPg
->pPager;

2909 
rc
 = 
SQLITE_OK
;

2910 
	`as£π
–
pPg
->
nRef
>0 );

2911 
	`as£π
–
pPagî
->
°©e
!=
PAGER_UNLOCK
 );

2912 if–
pPagî
->
°©e
==
PAGER_SHARED
 ){

2913 
	`as£π
–
pPagî
->
aInJou∫Æ
==0 );

2914 if–
MEMDB
 ){

2915 
pPagî
->
°©e
 = 
PAGER_EXCLUSIVE
;

2916 
pPagî
->
‹igDbSize
 =ÖPagî->
dbSize
;

2918 
rc
 = 
	`sqlôe3OsLock
(
pPagî
->
fd
, 
RESERVED_LOCK
);

2919 if–
rc
==
SQLITE_OK
 ){

2920 
pPagî
->
°©e
 = 
PAGER_RESERVED
;

2921 if–
exFœg
 ){

2922 
rc
 = 
	`∑gî_waô_⁄_lock
(
pPagî
, 
EXCLUSIVE_LOCK
);

2925 if–
rc
!=
SQLITE_OK
 ){

2926  
rc
;

2928 
pPagî
->
dútyCache
 = 0;

2929 
	`TRACE2
("TRANSACTION %d\n", 
	`PAGERID
(
pPagî
));

2930 if–
pPagî
->
u£Jou∫Æ
 && !pPagî->
ãmpFûe
 ){

2931 
rc
 = 
	`∑gî_›í_jou∫Æ
(
pPagî
);

2935  
rc
;

2936 
	}
}

2955 
	$sqlôe3∑gî_wrôe
(*
pD©a
){

2956 
PgHdr
 *
pPg
 = 
	`DATA_TO_PGHDR
(
pD©a
);

2957 
Pagî
 *
pPagî
 = 
pPg
->pPager;

2958 
rc
 = 
SQLITE_OK
;

2962 if–
pPagî
->
îrCode
 ){

2963  
pPagî
->
îrCode
;

2965 if–
pPagî
->
ªadO∆y
 ){

2966  
SQLITE_PERM
;

2969 
	`as£π
–!
pPagî
->
£tMa°î
 );

2971 
	`CHECK_PAGE
(
pPg
);

2976 
pPg
->
dúty
 = 1;

2977 if–
pPg
->
öJou∫Æ
 && (pPg->
öStmt
 || 
pPagî
->
°mtInU£
==0) ){

2978 
pPagî
->
dútyCache
 = 1;

2988 
	`as£π
–
pPagî
->
°©e
!=
PAGER_UNLOCK
 );

2989 
rc
 = 
	`sqlôe3∑gî_begö
(
pD©a
, 0);

2990 if–
rc
!=
SQLITE_OK
 ){

2991  
rc
;

2993 
	`as£π
–
pPagî
->
°©e
>=
PAGER_RESERVED
 );

2994 if–!
pPagî
->
jou∫ÆO≥n
 &&ÖPagî->
u£Jou∫Æ
 ){

2995 
rc
 = 
	`∑gî_›í_jou∫Æ
(
pPagî
);

2996 if–
rc
!=
SQLITE_OK
 ) Ñc;

2998 
	`as£π
–
pPagî
->
jou∫ÆO≥n
 || !pPagî->
u£Jou∫Æ
 );

2999 
pPagî
->
dútyCache
 = 1;

3005 if–!
pPg
->
öJou∫Æ
 && (
pPagî
->
u£Jou∫Æ
 || 
MEMDB
) ){

3006 if–()
pPg
->
pgno
 <
pPagî
->
‹igDbSize
 ){

3007 
szPg
;

3008 
u32
 
ßved
;

3009 if–
MEMDB
 ){

3010 
PgHi°‹y
 *
pHi°
 = 
	`PGHDR_TO_HIST
(
pPg
, 
pPagî
);

3011 
	`TRACE3
("JOURNAL %dÖagê%d\n", 
	`PAGERID
(
pPagî
), 
pPg
->
pgno
);

3012 
	`as£π
–
pHi°
->
pOrig
==0 );

3013 
pHi°
->
pOrig
 = 
	`sqlôeMÆlocRaw
–
pPagî
->
∑geSize
 );

3014 if–
pHi°
->
pOrig
 ){

3015 
	`mem˝y
(
pHi°
->
pOrig
, 
	`PGHDR_TO_DATA
(
pPg
), 
pPagî
->
∑geSize
);

3018 
u32
 
cksum
;

3022 
	`as£π
–
pPg
->
pgno
!=
	`PAGER_MJ_PGNO
(
pPagî
) );

3023 
	`CODEC
(
pPagî
, 
pD©a
, 
pPg
->
pgno
, 7);

3024 
cksum
 = 
	`∑gî_cksum
(
pPagî
, 
pPg
->
pgno
, 
pD©a
);

3025 
ßved
 = *(
u32
*)
	`PGHDR_TO_EXTRA
(
pPg
, 
pPagî
);

3026 
	`°‹e32bôs
(
cksum
, 
pPg
, 
pPagî
->
∑geSize
);

3027 
szPg
 = 
pPagî
->
∑geSize
+8;

3028 
	`°‹e32bôs
(
pPg
->
pgno
,ÖPg, -4);

3030 
rc
 = 
	`sqlôe3OsWrôe
(
pPagî
->
jfd
, &((*)
pD©a
)[-4], 
szPg
);

3031 
pPagî
->
jou∫ÆOff
 +
szPg
;

3032 
	`TRACE4
("JOURNAL %dÖage %dÇeedSync=%d\n",

3033 
	`PAGERID
(
pPagî
), 
pPg
->
pgno
,ÖPg->
√edSync
);

3034 
	`CODEC
(
pPagî
, 
pD©a
, 
pPg
->
pgno
, 0);

3035 *(
u32
*)
	`PGHDR_TO_EXTRA
(
pPg
, 
pPagî
Ë
ßved
;

3040 if–
rc
!=
SQLITE_OK
 ){

3041  
rc
;

3044 
pPagî
->
nRec
++;

3045 
	`as£π
–
pPagî
->
aInJou∫Æ
!=0 );

3046 
pPagî
->
aInJou∫Æ
[
pPg
->
pgno
/8] |= 1<<(pPg->pgno&7);

3047 
pPg
->
√edSync
 = !
pPagî
->
noSync
;

3048 if–
pPagî
->
°mtInU£
 ){

3049 
pPagî
->
aInStmt
[
pPg
->
pgno
/8] |= 1<<(pPg->pgno&7);

3050 
	`∑ge_add_to_°mt_li°
(
pPg
);

3054 
pPg
->
√edSync
 = !
pPagî
->
jou∫ÆSèπed
 && !pPagî->
noSync
;

3055 
	`TRACE4
("APPEND %dÖage %dÇeedSync=%d\n",

3056 
	`PAGERID
(
pPagî
), 
pPg
->
pgno
,ÖPg->
√edSync
);

3058 if–
pPg
->
√edSync
 ){

3059 
pPagî
->
√edSync
 = 1;

3061 
pPg
->
öJou∫Æ
 = 1;

3069 if–
pPagî
->
°mtInU£
 && !
pPg
->
öStmt
 && (ÌPg->
pgno
<ıPagî->
°mtSize
 ){

3070 
	`as£π
–
pPg
->
öJou∫Æ
 || (ÌPg->
pgno
>
pPagî
->
‹igDbSize
 );

3071 if–
MEMDB
 ){

3072 
PgHi°‹y
 *
pHi°
 = 
	`PGHDR_TO_HIST
(
pPg
, 
pPagî
);

3073 
	`as£π
–
pHi°
->
pStmt
==0 );

3074 
pHi°
->
pStmt
 = 
	`sqlôeMÆlocRaw
–
pPagî
->
∑geSize
 );

3075 if–
pHi°
->
pStmt
 ){

3076 
	`mem˝y
(
pHi°
->
pStmt
, 
	`PGHDR_TO_DATA
(
pPg
), 
pPagî
->
∑geSize
);

3078 
	`TRACE3
("STMT-JOURNAL %dÖagê%d\n", 
	`PAGERID
(
pPagî
), 
pPg
->
pgno
);

3080 
	`°‹e32bôs
(
pPg
->
pgno
,ÖPg, -4);

3081 
	`CODEC
(
pPagî
, 
pD©a
, 
pPg
->
pgno
, 7);

3082 
rc
 = 
	`sqlôe3OsWrôe
(
pPagî
->
°fd
,((*)
pD©a
)-4,

3083 
pPagî
->
∑geSize
+4);

3084 
	`TRACE3
("STMT-JOURNAL %dÖagê%d\n", 
	`PAGERID
(
pPagî
), 
pPg
->
pgno
);

3085 
	`CODEC
(
pPagî
, 
pD©a
, 
pPg
->
pgno
, 0);

3086 if–
rc
!=
SQLITE_OK
 ){

3087  
rc
;

3089 
pPagî
->
°mtNRec
++;

3090 
	`as£π
–
pPagî
->
aInStmt
!=0 );

3091 
pPagî
->
aInStmt
[
pPg
->
pgno
/8] |= 1<<(pPg->pgno&7);

3093 
	`∑ge_add_to_°mt_li°
(
pPg
);

3099 if–
pPagî
->
dbSize
<()
pPg
->
pgno
 ){

3100 
pPagî
->
dbSize
 = 
pPg
->
pgno
;

3101 if–!
MEMDB
 && 
pPagî
->
dbSize
==
PENDING_BYTE
/pPagî->
∑geSize
 ){

3102 
pPagî
->
dbSize
++;

3105  
rc
;

3106 
	}
}

3113 #i‚de‡
NDEBUG


3114 
	$sqlôe3∑gî_iswrôóbÀ
(*
pD©a
){

3115 
PgHdr
 *
pPg
 = 
	`DATA_TO_PGHDR
(
pD©a
);

3116  
pPg
->
dúty
;

3117 
	}
}

3120 #i‚de‡
SQLITE_OMIT_VACUUM


3125 
	$sqlôe3∑gî_ovîwrôe
(
Pagî
 *
pPagî
, 
Pgno
 
pgno
, *
pD©a
){

3126 *
pPage
;

3127 
rc
;

3129 
rc
 = 
	`sqlôe3∑gî_gë
(
pPagî
, 
pgno
, &
pPage
);

3130 if–
rc
==
SQLITE_OK
 ){

3131 
rc
 = 
	`sqlôe3∑gî_wrôe
(
pPage
);

3132 if–
rc
==
SQLITE_OK
 ){

3133 
	`mem˝y
(
pPage
, 
pD©a
, 
pPagî
->
∑geSize
);

3135 
	`sqlôe3∑gî_uƒef
(
pPage
);

3137  
rc
;

3138 
	}
}

3165 
	$sqlôe3∑gî_d⁄t_wrôe
(
Pagî
 *
pPagî
, 
Pgno
 
pgno
){

3166 
PgHdr
 *
pPg
;

3168 if–
MEMDB
 ) ;

3170 
pPg
 = 
	`∑gî_lookup
(
pPagî
, 
pgno
);

3171 
pPg
->
ÆwaysRﬁlback
 = 1;

3172 if–
pPg
 &&ÖPg->
dúty
 && !
pPagî
->
°mtInU£
 ){

3173 if–
pPagî
->
dbSize
==()
pPg
->
pgno
 &&ÖPagî->
‹igDbSize
<pPager->dbSize ){

3183 
	`TRACE3
("DONT_WRITEÖagê%d o‡%d\n", 
pgno
, 
	`PAGERID
(
pPagî
));

3184 
pPg
->
dúty
 = 0;

3185 #ifde‡
SQLITE_CHECK_PAGES


3186 
pPg
->
∑geHash
 = 
	`∑gî_∑gehash
(pPg);

3190 
	}
}

3198 
	$sqlôe3∑gî_d⁄t_rﬁlback
(*
pD©a
){

3199 
PgHdr
 *
pPg
 = 
	`DATA_TO_PGHDR
(
pD©a
);

3200 
Pagî
 *
pPagî
 = 
pPg
->pPager;

3202 if–
pPagî
->
°©e
!=
PAGER_EXCLUSIVE
 ||ÖPagî->
jou∫ÆO≥n
==0 ) ;

3203 if–
pPg
->
ÆwaysRﬁlback
 || 
pPagî
->ÆwaysRﬁlback || 
MEMDB
 ) ;

3204 if–!
pPg
->
öJou∫Æ
 && (ÌPg->
pgno
 <
pPagî
->
‹igDbSize
 ){

3205 
	`as£π
–
pPagî
->
aInJou∫Æ
!=0 );

3206 
pPagî
->
aInJou∫Æ
[
pPg
->
pgno
/8] |= 1<<(pPg->pgno&7);

3207 
pPg
->
öJou∫Æ
 = 1;

3208 if–
pPagî
->
°mtInU£
 ){

3209 
pPagî
->
aInStmt
[
pPg
->
pgno
/8] |= 1<<(pPg->pgno&7);

3210 
	`∑ge_add_to_°mt_li°
(
pPg
);

3212 
	`TRACE3
("DONT_ROLLBACKÖagê%d o‡%d\n", 
pPg
->
pgno
, 
	`PAGERID
(
pPagî
));

3214 if–
pPagî
->
°mtInU£
 && !
pPg
->
öStmt
 && (ÌPg->
pgno
<ıPagî->
°mtSize
 ){

3215 
	`as£π
–
pPg
->
öJou∫Æ
 || (ÌPg->
pgno
>
pPagî
->
‹igDbSize
 );

3216 
	`as£π
–
pPagî
->
aInStmt
!=0 );

3217 
pPagî
->
aInStmt
[
pPg
->
pgno
/8] |= 1<<(pPg->pgno&7);

3218 
	`∑ge_add_to_°mt_li°
(
pPg
);

3220 
	}
}

3223 #i‚de‡
SQLITE_OMIT_MEMORYDB


3227 
	$˛órHi°‹y
(
PgHi°‹y
 *
pHi°
){

3228 
	`sqlôeFªe
(
pHi°
->
pOrig
);

3229 
	`sqlôeFªe
(
pHi°
->
pStmt
);

3230 
pHi°
->
pOrig
 = 0;

3231 
pHi°
->
pStmt
 = 0;

3232 
	}
}

3234 
	#˛órHi°‹y
(
x
)

	)

3244 
	$sqlôe3∑gî_commô
(
Pagî
 *
pPagî
){

3245 
rc
;

3246 
PgHdr
 *
pPg
;

3248 if–
pPagî
->
îrCode
 ){

3249  
pPagî
->
îrCode
;

3251 if–
pPagî
->
°©e
<
PAGER_RESERVED
 ){

3252  
SQLITE_ERROR
;

3254 
	`TRACE2
("COMMIT %d\n", 
	`PAGERID
(
pPagî
));

3255 if–
MEMDB
 ){

3256 
pPg
 = 
	`∑gî_gë_Æl_dúty_∑ges
(
pPagî
);

3257  
pPg
 ){

3258 
	`˛órHi°‹y
(
	`PGHDR_TO_HIST
(
pPg
, 
pPagî
));

3259 
pPg
->
dúty
 = 0;

3260 
pPg
->
öJou∫Æ
 = 0;

3261 
pPg
->
öStmt
 = 0;

3262 
pPg
->
pPªvStmt
 =ÖPg->
pNextStmt
 = 0;

3263 
pPg
 =ÖPg->
pDúty
;

3265 #i‚de‡
NDEBUG


3266 
pPg
=
pPagî
->
pAŒ
;ÖPg;ÖPgıPg->
pNextAŒ
){

3267 
PgHi°‹y
 *
pHi°
 = 
	`PGHDR_TO_HIST
(
pPg
, 
pPagî
);

3268 
	`as£π
–!
pPg
->
ÆwaysRﬁlback
 );

3269 
	`as£π
–!
pHi°
->
pOrig
 );

3270 
	`as£π
–!
pHi°
->
pStmt
 );

3273 
pPagî
->
pStmt
 = 0;

3274 
pPagî
->
°©e
 = 
PAGER_SHARED
;

3275  
SQLITE_OK
;

3277 if–
pPagî
->
dútyCache
==0 ){

3280 
	`as£π
–
pPagî
->
√edSync
==0 );

3281 
rc
 = 
	`∑gî_unwrôñock
(
pPagî
);

3282 
pPagî
->
dbSize
 = -1;

3283  
rc
;

3285 
	`as£π
–
pPagî
->
jou∫ÆO≥n
 );

3286 
rc
 = 
	`sqlôe3∑gî_sync
(
pPagî
, 0, 0);

3287 if–
rc
==
SQLITE_OK
 ){

3288 
rc
 = 
	`∑gî_unwrôñock
(
pPagî
);

3289 
pPagî
->
dbSize
 = -1;

3291  
rc
;

3292 
	}
}

3306 
	$sqlôe3∑gî_rﬁlback
(
Pagî
 *
pPagî
){

3307 
rc
;

3308 
	`TRACE2
("ROLLBACK %d\n", 
	`PAGERID
(
pPagî
));

3309 if–
MEMDB
 ){

3310 
PgHdr
 *
p
;

3311 
p
=
pPagî
->
pAŒ
;Ö;Öı->
pNextAŒ
){

3312 
PgHi°‹y
 *
pHi°
;

3313 
	`as£π
–!
p
->
ÆwaysRﬁlback
 );

3314 if–!
p
->
dúty
 ){

3315 
	`as£π
–!((
PgHi°‹y
 *)
	`PGHDR_TO_HIST
(
p
, 
pPagî
))->
pOrig
 );

3316 
	`as£π
–!((
PgHi°‹y
 *)
	`PGHDR_TO_HIST
(
p
, 
pPagî
))->
pStmt
 );

3320 
pHi°
 = 
	`PGHDR_TO_HIST
(
p
, 
pPagî
);

3321 if–
pHi°
->
pOrig
 ){

3322 
	`mem˝y
(
	`PGHDR_TO_DATA
(
p
), 
pHi°
->
pOrig
, 
pPagî
->
∑geSize
);

3323 
	`TRACE3
("ROLLBACK-PAGE %d o‡%d\n", 
p
->
pgno
, 
	`PAGERID
(
pPagî
));

3325 
	`TRACE3
("PAGE %d i†˛ó¿⁄ %d\n", 
p
->
pgno
, 
	`PAGERID
(
pPagî
));

3327 
	`˛órHi°‹y
(
pHi°
);

3328 
p
->
dúty
 = 0;

3329 
p
->
öJou∫Æ
 = 0;

3330 
p
->
öStmt
 = 0;

3331 
p
->
pPªvStmt
 =Ö->
pNextStmt
 = 0;

3333 if–
pPagî
->
xReöôî
 ){

3334 
pPagî
->
	`xReöôî
(
	`PGHDR_TO_DATA
(
p
),ÖPagî->
∑geSize
);

3338 
pPagî
->
pStmt
 = 0;

3339 
pPagî
->
dbSize
 =ÖPagî->
‹igDbSize
;

3340 
	`mem‹yTrunˇã
(
pPagî
);

3341 
pPagî
->
°mtInU£
 = 0;

3342 
pPagî
->
°©e
 = 
PAGER_SHARED
;

3343  
SQLITE_OK
;

3346 if–!
pPagî
->
dútyCache
 || !pPagî->
jou∫ÆO≥n
 ){

3347 
rc
 = 
	`∑gî_unwrôñock
(
pPagî
);

3348 
pPagî
->
dbSize
 = -1;

3349  
rc
;

3352 if–
pPagî
->
îrCode
 &&ÖPagî->îrCode!=
SQLITE_FULL
 ){

3353 if–
pPagî
->
°©e
>=
PAGER_EXCLUSIVE
 ){

3354 
	`∑gî_∂ayback
(
pPagî
);

3356  
pPagî
->
îrCode
;

3358 if–
pPagî
->
°©e
==
PAGER_RESERVED
 ){

3359 
rc2
;

3360 
rc
 = 
	`∑gî_ªlﬂd_ˇche
(
pPagî
);

3361 
rc2
 = 
	`∑gî_unwrôñock
(
pPagî
);

3362 if–
rc
==
SQLITE_OK
 ){

3363 
rc
 = 
rc2
;

3366 
rc
 = 
	`∑gî_∂ayback
(
pPagî
);

3368 
pPagî
->
dbSize
 = -1;

3374  
	`∑gî_îr‹
(
pPagî
, 
rc
);

3375 
	}
}

3381 
	$sqlôe3∑gî_i§ód⁄ly
(
Pagî
 *
pPagî
){

3382  
pPagî
->
ªadO∆y
;

3383 
	}
}

3388 *
	$sqlôe3∑gî_°©s
(
Pagî
 *
pPagî
){

3389 
a
[11];

3390 
a
[0] = 
pPagî
->
nRef
;

3391 
a
[1] = 
pPagî
->
nPage
;

3392 
a
[2] = 
pPagî
->
mxPage
;

3393 
a
[3] = 
pPagî
->
dbSize
;

3394 
a
[4] = 
pPagî
->
°©e
;

3395 
a
[5] = 
pPagî
->
îrCode
;

3396 #ifde‡
SQLITE_TEST


3397 
a
[6] = 
pPagî
->
nHô
;

3398 
a
[7] = 
pPagî
->
nMiss
;

3399 
a
[8] = 
pPagî
->
nOvÊ
;

3400 
a
[9] = 
pPagî
->
nRód
;

3401 
a
[10] = 
pPagî
->
nWrôe
;

3403  
a
;

3404 
	}
}

3413 
	$sqlôe3∑gî_°mt_begö
(
Pagî
 *
pPagî
){

3414 
rc
;

3415 
zTemp
[
SQLITE_TEMPNAME_SIZE
];

3416 
	`as£π
–!
pPagî
->
°mtInU£
 );

3417 
	`as£π
–
pPagî
->
dbSize
>=0 );

3418 
	`TRACE2
("STMT-BEGIN %d\n", 
	`PAGERID
(
pPagî
));

3419 if–
MEMDB
 ){

3420 
pPagî
->
°mtInU£
 = 1;

3421 
pPagî
->
°mtSize
 =ÖPagî->
dbSize
;

3422  
SQLITE_OK
;

3424 if–!
pPagî
->
jou∫ÆO≥n
 ){

3425 
pPagî
->
°mtAuto›í
 = 1;

3426  
SQLITE_OK
;

3428 
	`as£π
–
pPagî
->
jou∫ÆO≥n
 );

3429 
pPagî
->
aInStmt
 = 
	`sqlôeMÆloc
–pPagî->
dbSize
/8 + 1 );

3430 if–
pPagî
->
aInStmt
==0 ){

3432  
SQLITE_NOMEM
;

3434 #i‚de‡
NDEBUG


3435 
rc
 = 
	`sqlôe3OsFûeSize
(
pPagî
->
jfd
, &pPagî->
°mtJSize
);

3436 if–
rc
 ) 
°mt_begö_Áûed
;

3437 
	`as£π
–
pPagî
->
°mtJSize
 =pPagî->
jou∫ÆOff
 );

3439 
pPagî
->
°mtJSize
 =ÖPagî->
jou∫ÆOff
;

3440 
pPagî
->
°mtSize
 =ÖPagî->
dbSize
;

3441 
pPagî
->
°mtHdrOff
 = 0;

3442 
pPagî
->
°mtCksum
 =ÖPagî->
cksumInô
;

3443 if–!
pPagî
->
°mtO≥n
 ){

3444 
rc
 = 
	`sqlôe3∑gî_›íãmp
(
zTemp
, &
pPagî
->
°fd
);

3445 if–
rc
 ) 
°mt_begö_Áûed
;

3446 
pPagî
->
°mtO≥n
 = 1;

3447 
pPagî
->
°mtNRec
 = 0;

3449 
pPagî
->
°mtInU£
 = 1;

3450  
SQLITE_OK
;

3452 
°mt_begö_Áûed
:

3453 if–
pPagî
->
aInStmt
 ){

3454 
	`sqlôeFªe
(
pPagî
->
aInStmt
);

3455 
pPagî
->
aInStmt
 = 0;

3457  
rc
;

3458 
	}
}

3463 
	$sqlôe3∑gî_°mt_commô
(
Pagî
 *
pPagî
){

3464 if–
pPagî
->
°mtInU£
 ){

3465 
PgHdr
 *
pPg
, *
pNext
;

3466 
	`TRACE2
("STMT-COMMIT %d\n", 
	`PAGERID
(
pPagî
));

3467 if–!
MEMDB
 ){

3468 
	`sqlôe3OsSìk
(
pPagî
->
°fd
, 0);

3470 
	`sqlôeFªe
–
pPagî
->
aInStmt
 );

3471 
pPagî
->
aInStmt
 = 0;

3473 
pPg
=
pPagî
->
pStmt
;ÖPg;ÖPg=
pNext
){

3474 
pNext
 = 
pPg
->
pNextStmt
;

3475 
	`as£π
–
pPg
->
öStmt
 );

3476 
pPg
->
öStmt
 = 0;

3477 
pPg
->
pPªvStmt
 =ÖPg->
pNextStmt
 = 0;

3478 if–
MEMDB
 ){

3479 
PgHi°‹y
 *
pHi°
 = 
	`PGHDR_TO_HIST
(
pPg
, 
pPagî
);

3480 
	`sqlôeFªe
(
pHi°
->
pStmt
);

3481 
pHi°
->
pStmt
 = 0;

3484 
pPagî
->
°mtNRec
 = 0;

3485 
pPagî
->
°mtInU£
 = 0;

3486 
pPagî
->
pStmt
 = 0;

3488 
pPagî
->
°mtAuto›í
 = 0;

3489  
SQLITE_OK
;

3490 
	}
}

3495 
	$sqlôe3∑gî_°mt_rﬁlback
(
Pagî
 *
pPagî
){

3496 
rc
;

3497 if–
pPagî
->
°mtInU£
 ){

3498 
	`TRACE2
("STMT-ROLLBACK %d\n", 
	`PAGERID
(
pPagî
));

3499 if–
MEMDB
 ){

3500 
PgHdr
 *
pPg
;

3501 
pPg
=
pPagî
->
pStmt
;ÖPg;ÖPgıPg->
pNextStmt
){

3502 
PgHi°‹y
 *
pHi°
 = 
	`PGHDR_TO_HIST
(
pPg
, 
pPagî
);

3503 if–
pHi°
->
pStmt
 ){

3504 
	`mem˝y
(
	`PGHDR_TO_DATA
(
pPg
), 
pHi°
->
pStmt
, 
pPagî
->
∑geSize
);

3505 
	`sqlôeFªe
(
pHi°
->
pStmt
);

3506 
pHi°
->
pStmt
 = 0;

3509 
pPagî
->
dbSize
 =ÖPagî->
°mtSize
;

3510 
	`mem‹yTrunˇã
(
pPagî
);

3511 
rc
 = 
SQLITE_OK
;

3513 
rc
 = 
	`∑gî_°mt_∂ayback
(
pPagî
);

3515 
	`sqlôe3∑gî_°mt_commô
(
pPagî
);

3517 
rc
 = 
SQLITE_OK
;

3519 
pPagî
->
°mtAuto›í
 = 0;

3520  
rc
;

3521 
	}
}

3526 c⁄° *
	$sqlôe3∑gî_fûíame
(
Pagî
 *
pPagî
){

3527  
pPagî
->
zFûíame
;

3528 
	}
}

3533 c⁄° *
	$sqlôe3∑gî_dú«me
(
Pagî
 *
pPagî
){

3534  
pPagî
->
zDúe˘‹y
;

3535 
	}
}

3540 c⁄° *
	$sqlôe3∑gî_jou∫Æ«me
(
Pagî
 *
pPagî
){

3541  
pPagî
->
zJou∫Æ
;

3542 
	}
}

3548 
	$sqlôe3∑gî_nosync
(
Pagî
 *
pPagî
){

3549  
pPagî
->
noSync
;

3550 
	}
}

3555 
sqlôe3∑gî_£t_codec
(

3556 
Pagî
 *
pPagî
,

3557 (*
xCodec
)(*,*,
Pgno
,),

3558 *
pCodecArg


3560 
pPagî
->
xCodec
 = xCodec;

3561 
pPagî
->
pCodecArg
 =ÖCodecArg;

3562 
	}
}

3568 
	$∑gî_ö¸_ch™gecou¡î
(
Pagî
 *
pPagî
){

3569 *
pPage
;

3570 
PgHdr
 *
pPgHdr
;

3571 
u32
 
ch™ge_cou¡î
;

3572 
rc
;

3575 
rc
 = 
	`sqlôe3∑gî_gë
(
pPagî
, 1, &
pPage
);

3576 if–
rc
!=
SQLITE_OK
 ) Ñc;

3577 
rc
 = 
	`sqlôe3∑gî_wrôe
(
pPage
);

3578 if–
rc
!=
SQLITE_OK
 ) Ñc;

3581 
pPgHdr
 = 
	`DATA_TO_PGHDR
(
pPage
);

3582 
ch™ge_cou¡î
 = 
	`ªåõve32bôs
(
pPgHdr
, 24);

3585 
ch™ge_cou¡î
++;

3586 
	`°‹e32bôs
(
ch™ge_cou¡î
, 
pPgHdr
, 24);

3589 
	`sqlôe3∑gî_uƒef
(
pPage
);

3590  
SQLITE_OK
;

3591 
	}
}

3610 
	$sqlôe3∑gî_sync
(
Pagî
 *
pPagî
, c⁄° *
zMa°î
, 
Pgno
 
nTrunc
){

3611 
rc
 = 
SQLITE_OK
;

3613 
	`TRACE4
("DATABASE SYNC: File=%s zMaster=%sÇTrunc=%d\n",

3614 
pPagî
->
zFûíame
, 
zMa°î
, 
nTrunc
);

3619 if–
pPagî
->
°©e
!=
PAGER_SYNCED
 && !
MEMDB
 &&ÖPagî->
dútyCache
 ){

3620 
PgHdr
 *
pPg
;

3621 
	`as£π
–
pPagî
->
jou∫ÆO≥n
 );

3629 if–!
pPagî
->
£tMa°î
 ){

3630 
rc
 = 
	`∑gî_ö¸_ch™gecou¡î
(
pPagî
);

3631 if–
rc
!=
SQLITE_OK
 ) 
sync_exô
;

3632 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


3633 if–
nTrunc
!=0 ){

3638 
Pgno
 
i
;

3639 *
pPage
;

3640 
iSkù
 = 
	`PAGER_MJ_PGNO
(
pPagî
);

3641  
i
=
nTrunc
+1; i<=
pPagî
->
‹igDbSize
; i++ ){

3642 if–!(
pPagî
->
aInJou∫Æ
[
i
/8] & (1<<(i&7))Ë&& i!=
iSkù
 ){

3643 
rc
 = 
	`sqlôe3∑gî_gë
(
pPagî
, 
i
, &
pPage
);

3644 if–
rc
!=
SQLITE_OK
 ) 
sync_exô
;

3645 
rc
 = 
	`sqlôe3∑gî_wrôe
(
pPage
);

3646 
	`sqlôe3∑gî_uƒef
(
pPage
);

3647 if–
rc
!=
SQLITE_OK
 ) 
sync_exô
;

3652 
rc
 = 
	`wrôeMa°îJou∫Æ
(
pPagî
, 
zMa°î
);

3653 if–
rc
!=
SQLITE_OK
 ) 
sync_exô
;

3654 
rc
 = 
	`syncJou∫Æ
(
pPagî
);

3655 if–
rc
!=
SQLITE_OK
 ) 
sync_exô
;

3658 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


3659 if–
nTrunc
!=0 ){

3660 
rc
 = 
	`sqlôe3∑gî_åunˇã
(
pPagî
, 
nTrunc
);

3661 if–
rc
!=
SQLITE_OK
 ) 
sync_exô
;

3666 
pPg
 = 
	`∑gî_gë_Æl_dúty_∑ges
(
pPagî
);

3667 
rc
 = 
	`∑gî_wrôe_∑gñi°
(
pPg
);

3668 if–
rc
!=
SQLITE_OK
 ) 
sync_exô
;

3671 if–!
pPagî
->
noSync
 ){

3672 
rc
 = 
	`sqlôe3OsSync
(
pPagî
->
fd
, 0);

3675 
pPagî
->
°©e
 = 
PAGER_SYNCED
;

3678 
sync_exô
:

3679  
rc
;

3680 
	}
}

3682 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


3700 
	$sqlôe3∑gî_movïage
(
Pagî
 *
pPagî
, *
pD©a
, 
Pgno
 
pgno
){

3701 
PgHdr
 *
pPg
 = 
	`DATA_TO_PGHDR
(
pD©a
);

3702 
PgHdr
 *
pPgOld
;

3703 
h
;

3704 
Pgno
 
√edSyncPgno
 = 0;

3706 
	`as£π
–
pPg
->
nRef
>0 );

3708 
	`TRACE5
("MOVE %dÖage %d (needSync=%d) movesÅo %d\n",

3709 
	`PAGERID
(
pPagî
), 
pPg
->
pgno
,ÖPg->
√edSync
,Ögno);

3711 if–
pPg
->
√edSync
 ){

3712 
√edSyncPgno
 = 
pPg
->
pgno
;

3713 
	`as£π
–
pPg
->
öJou∫Æ
 );

3714 
	`as£π
–
pPg
->
dúty
 );

3715 
	`as£π
–
pPagî
->
√edSync
 );

3719 
	`u∆ökHashChaö
(
pPagî
, 
pPg
);

3726 
pPgOld
 = 
	`∑gî_lookup
(
pPagî
, 
pgno
);

3727 if–
pPgOld
 ){

3728 
	`as£π
–
pPgOld
->
nRef
==0 );

3729 
	`u∆ökHashChaö
(
pPagî
, 
pPgOld
);

3730 
pPgOld
->
dúty
 = 0;

3731 if–
pPgOld
->
√edSync
 ){

3732 
	`as£π
–
pPgOld
->
öJou∫Æ
 );

3733 
pPg
->
öJou∫Æ
 = 1;

3734 
pPg
->
√edSync
 = 1;

3735 
	`as£π
–
pPagî
->
√edSync
 );

3740 
pPg
->
pgno
 =Ögno;

3741 
h
 = 
	`∑gî_hash
(
pgno
);

3742 if–
pPagî
->
aHash
[
h
] ){

3743 
	`as£π
–
pPagî
->
aHash
[
h
]->
pPªvHash
==0 );

3744 
pPagî
->
aHash
[
h
]->
pPªvHash
 = 
pPg
;

3746 
pPg
->
pNextHash
 = 
pPagî
->
aHash
[
h
];

3747 
pPagî
->
aHash
[
h
] = 
pPg
;

3748 
pPg
->
pPªvHash
 = 0;

3750 
pPg
->
dúty
 = 1;

3751 
pPagî
->
dútyCache
 = 1;

3753 if–
√edSyncPgno
 ){

3763 
rc
;

3764 *
pNìdSync
;

3765 
	`as£π
–
pPagî
->
√edSync
 );

3766 
rc
 = 
	`sqlôe3∑gî_gë
(
pPagî
, 
√edSyncPgno
, &
pNìdSync
);

3767 if–
rc
!=
SQLITE_OK
 ) Ñc;

3768 
pPagî
->
√edSync
 = 1;

3769 
	`DATA_TO_PGHDR
(
pNìdSync
)->
√edSync
 = 1;

3770 
	`DATA_TO_PGHDR
(
pNìdSync
)->
öJou∫Æ
 = 1;

3771 
	`DATA_TO_PGHDR
(
pNìdSync
)->
dúty
 = 1;

3772 
	`sqlôe3∑gî_uƒef
(
pNìdSync
);

3775  
SQLITE_OK
;

3776 
	}
}

3779 #i‡
deföed
(
SQLITE_DEBUG
Ë|| deföed(
SQLITE_TEST
)

3785 
	$sqlôe3∑gî_lock°©e
(
Pagî
 *
pPagî
){

3786  
	`sqlôe3OsLockSèã
(
pPagî
->
fd
);

3787 
	}
}

3790 #ifde‡
SQLITE_DEBUG


3794 
	$sqlôe3∑gî_ªfdump
(
Pagî
 *
pPagî
){

3795 
PgHdr
 *
pPg
;

3796 
pPg
=
pPagî
->
pAŒ
;ÖPg;ÖPgıPg->
pNextAŒ
){

3797 if–
pPg
->
nRef
<=0 ) ;

3798 
	`sqlôe3DebugPrötf
("PAGE %3dáddr=%pÇRef=%d\n",

3799 
pPg
->
pgno
, 
	`PGHDR_TO_DATA
’Pg),ÖPg->
nRef
);

3801 
	}
}

	@pager.h

19 #i‚de‡
_PAGER_H_


20 
	#_PAGER_H_


	)

25 #i‚de‡
SQLITE_DEFAULT_PAGE_SIZE


26 
	#SQLITE_DEFAULT_PAGE_SIZE
 1024

	)

39 #i‚de‡
SQLITE_MAX_PAGE_SIZE


40 
	#SQLITE_MAX_PAGE_SIZE
 32768

	)

46 
	#SQLITE_MAX_PAGE
 1073741823

	)

52 
	tPgno
;

57 
Pagî
 
	tPagî
;

64 
	#PAGER_OMIT_JOURNAL
 0x0001

	)

65 
	#PAGER_NO_READLOCK
 0x0002

	)

72 
sqlôe3∑gî_›í
(
Pagî
 **
µPagî
, c⁄° *
zFûíame
,

73 
nExåa
, 
Êags
);

74 
sqlôe3∑gî_£t_busyh™dÀr
(
Pagî
*, 
BusyH™dÀr
 *
pBusyH™dÀr
);

75 
sqlôe3∑gî_£t_de°ru˘‹
(
Pagî
*, (*)(*,));

76 
	`sqlôe3∑gî_£t_ªöôî
(
Pagî
*, (*)(*,));

77 
	`sqlôe3∑gî_£t_∑gesize
(
Pagî
*, );

78 
	`sqlôe3∑gî_ªad_fûehódî
(
Pagî
*, , *);

79 
	`sqlôe3∑gî_£t_ˇchesize
(
Pagî
*, );

80 
	`sqlôe3∑gî_˛o£
(
Pagî
 *
pPagî
);

81 
	`sqlôe3∑gî_gë
(
Pagî
 *
pPagî
, 
Pgno
 
pgno
, **
µPage
);

82 *
	`sqlôe3∑gî_lookup
(
Pagî
 *
pPagî
, 
Pgno
 
pgno
);

83 
	`sqlôe3∑gî_ªf
(*);

84 
	`sqlôe3∑gî_uƒef
(*);

85 
Pgno
 
	`sqlôe3∑gî_∑gíumbî
(*);

86 
	`sqlôe3∑gî_wrôe
(*);

87 
	`sqlôe3∑gî_iswrôóbÀ
(*);

88 
	`sqlôe3∑gî_ovîwrôe
(
Pagî
 *
pPagî
, 
Pgno
 
pgno
, *);

89 
	`sqlôe3∑gî_∑gecou¡
(
Pagî
*);

90 
	`sqlôe3∑gî_åunˇã
(
Pagî
*,
Pgno
);

91 
	`sqlôe3∑gî_begö
(*, 
exFœg
);

92 
	`sqlôe3∑gî_commô
(
Pagî
*);

93 
	`sqlôe3∑gî_sync
(
Pagî
*,c⁄° *
zMa°î
, 
Pgno
);

94 
	`sqlôe3∑gî_rﬁlback
(
Pagî
*);

95 
	`sqlôe3∑gî_i§ód⁄ly
(
Pagî
*);

96 
	`sqlôe3∑gî_°mt_begö
(
Pagî
*);

97 
	`sqlôe3∑gî_°mt_commô
(
Pagî
*);

98 
	`sqlôe3∑gî_°mt_rﬁlback
(
Pagî
*);

99 
	`sqlôe3∑gî_d⁄t_rﬁlback
(*);

100 
	`sqlôe3∑gî_d⁄t_wrôe
(
Pagî
*, 
Pgno
);

101 *
	`sqlôe3∑gî_°©s
(
Pagî
*);

102 
	`sqlôe3∑gî_£t_ß„ty_Àvñ
(
Pagî
*,);

103 c⁄° *
	`sqlôe3∑gî_fûíame
(
Pagî
*);

104 c⁄° *
	`sqlôe3∑gî_dú«me
(
Pagî
*);

105 c⁄° *
	`sqlôe3∑gî_jou∫Æ«me
(
Pagî
*);

106 
	`sqlôe3∑gî_nosync
(
Pagî
*);

107 
	`sqlôe3∑gî_ª«me
(
Pagî
*, c⁄° *
zNewName
);

108 
	`sqlôe3∑gî_£t_codec
(
Pagî
*,(*)(*,*,
Pgno
,),*);

109 
	`sqlôe3∑gî_movïage
(
Pagî
*,*,
Pgno
);

110 
	`sqlôe3∑gî_ª£t
(
Pagî
*);

111 
	`sqlôe3∑gî_ªÀa£_mem‹y
();

113 #i‡
	`deföed
(
SQLITE_DEBUG
Ë|| deföed(
SQLITE_TEST
)

114 
	`sqlôe3∑gî_lock°©e
(
Pagî
*);

117 #ifde‡
SQLITE_TEST


118 
	`sqlôe3∑gî_ªfdump
(
Pagî
*);

119 
∑gî3_ªföfo_íabÀ
;

	@parse.y

21 %
tokí_¥efix
 
TK_


26 %
tokí_ty≥
 {
Tokí
}

27 %
deÁu…_ty≥
 {
Tokí
}

30 %
exåa_¨gumít
 {
P¨£
 *
pP¨£
}

34 %
sy¡ax_îr‹
 {

35 if–
pP¨£
->
zEºMsg
==0 ){

36 if–
TOKEN
.
z
[0] ){

37 
sqlôe3Eº‹Msg
(
pP¨£
, "√¨ \"%T\": sy¡axÉº‹", &
TOKEN
);

39 
sqlôe3Eº‹Msg
(
pP¨£
, "incomplete SQL statement");

46 %
«me
 
sqlôe3P¨£r


51 %
ö˛ude
 {

52 
	~"sqlôeI¡.h
"

53 
	~"∑r£.h
"

59 
	sLimôVÆ
 {

60 
Ex¥
 *
pLimô
;

61 
Ex¥
 *
pOff£t
;

68 
	sLikeOp
 {

69 
Tokí
 
eO≥øt‹
;

70 
nŸ
;

82 
	sTrigEvít
 { 
a
; 
IdLi°
 * 
b
; };

87 
	sAâachKey
 { 
ty≥
; 
Tokí
 
key
; };

92 
öput
 ::
cmdli°
.

93 
cmdli°
 ::cmdli° 
ecmd
.

94 
cmdli°
 ::
ecmd
.

95 
cmdx
 ::
cmd
. { 
sqlôe3FöishCodög
(
pP¨£
); }

96 
ecmd
 ::
SEMI
.

97 
ecmd
 ::
ex∂aö
 
cmdx
 
SEMI
.

98 
ex∂aö
 ::. { 
sqlôe3BegöP¨£
(
pP¨£
, 0); }

99 %
i‚def
 
SQLITE_OMIT_EXPLAIN


100 
ex∂aö
 ::
EXPLAIN
. { 
sqlôe3BegöP¨£
(
pP¨£
, 1); }

101 
ex∂aö
 ::
EXPLAIN
 
QUERY
 
PLAN
. { 
sqlôe3BegöP¨£
(
pP¨£
, 2); }

102 %
ídif


107 
cmd
 ::
BEGIN
 
	$å™°y≥
(
Y
Ë
å™s_›t
. {
	`sqlôe3BegöTønß˘i⁄
(
pP¨£
, Y);
	}
}

108 
å™s_›t
 ::= .

109 
å™s_›t
 ::
TRANSACTION
.

110 
å™s_›t
 ::
TRANSACTION
 
nm
.

111 %
ty≥
 
å™°y≥
 {}

112 
	$å™°y≥
(
A
Ë::. {A = 
TK_DEFERRED
;
	}
}

113 
	$å™°y≥
(
A
Ë::
	`DEFERRED
(
X
). {A = @X;
	}
}

114 
	$å™°y≥
(
A
Ë::
	`IMMEDIATE
(
X
). {A = @X;
	}
}

115 
	$å™°y≥
(
A
Ë::
	`EXCLUSIVE
(
X
). {A = @X;
	}
}

116 
cmd
 ::
COMMIT
 
å™s_›t
. {
sqlôe3CommôTønß˘i⁄
(
pP¨£
);}

117 
cmd
 ::
END
 
å™s_›t
. {
sqlôe3CommôTønß˘i⁄
(
pP¨£
);}

118 
cmd
 ::
ROLLBACK
 
å™s_›t
. {
sqlôe3RﬁlbackTønß˘i⁄
(
pP¨£
);}

122 
cmd
 ::
¸óã_èbÀ
 
¸óã_èbÀ_¨gs
.

123 
¸óã_èbÀ
 ::
	$CREATE
(
X
Ë
	$ãmp
(
T
Ë
TABLE
 
	$i‚Ÿexi°s
(
E
Ë
	$nm
(
Y
Ë
	`dbnm
(
Z
). {

124 
	`sqlôe3SèπTabÀ
(
pP¨£
,&
X
,&
Y
,&
Z
,
T
,0,
E
);

125 
	}
}

126 %
ty≥
 
i‚Ÿexi°s
 {}

127 
	$i‚Ÿexi°s
(
A
Ë::. {A = 0;
	}
}

128 
	$i‚Ÿexi°s
(
A
Ë::
IF
 
NOT
 
EXISTS
. {A = 1;
	}
}

129 %
ty≥
 
ãmp
 {}

130 %
i‚def
 
SQLITE_OMIT_TEMPDB


131 
	$ãmp
(
A
Ë::
TEMP
. {A = 1;
	}
}

132 %
ídif


133 
	$ãmp
(
A
Ë::. {A = 0;
	}
}

134 
¸óã_èbÀ_¨gs
 ::
LP
 
cﬁum∆i°
 
	$c⁄¶i°_›t
(
X
Ë
	`RP
(
Y
). {

135 
	`sqlôe3EndTabÀ
(
pP¨£
,&
X
,&
Y
,0);

136 
	}
}

137 
¸óã_èbÀ_¨gs
 ::
AS
 
£À˘
(
S
). {

138 
sqlôe3EndTabÀ
(
pP¨£
,0,0,
S
);

139 
sqlôe3Sñe˘Dñëe
(
S
);

141 
cﬁum∆i°
 ::cﬁum∆i° 
COMMA
 
cﬁumn
.

142 
cﬁum∆i°
 ::
cﬁumn
.

149 
	$cﬁumn
(
A
Ë::
	$cﬁumnid
(
X
Ë
ty≥
 
ˇrgli°
. {

150 
A
.
z
 = 
X
.z;

151 
A
.
n
 = (
pP¨£
->
sLa°Tokí
.
z
-
X
.z) +ÖParse->sLastToken.n;

152 
	}
}

153 
	$cﬁumnid
(
A
Ë::
	`nm
(
X
). {

154 
	`sqlôe3AddCﬁumn
(
pP¨£
,&
X
);

155 
A
 = 
X
;

156 
	}
}

162 %
ty≥
 
id
 {
Tokí
}

163 
	$id
(
A
Ë::
	`ID
(
X
). {A = X;
	}
}

169 %
ÁŒback
 
ID


170 
ABORT
 
AFTER
 
ANALYZE
 
ASC
 
ATTACH
 
BEFORE
 
BEGIN
 
CASCADE
 
CAST
 
CONFLICT


171 
DATABASE
 
DEFERRED
 
DESC
 
DETACH
 
EACH
 
END
 
EXCLUSIVE
 
EXPLAIN
 
FAIL
 
FOR


172 
IGNORE
 
IMMEDIATE
 
INITIALLY
 
INSTEAD
 
LIKE_KW
 
MATCH
 
PLAN
 
QUERY
 
KEY


173 
OF
 
OFFSET
 
PRAGMA
 
RAISE
 
REPLACE
 
RESTRICT
 
ROW
 
STATEMENT


174 
TEMP
 
TRIGGER
 
VACUUM
 
VIEW


175 %
ifdef
 
SQLITE_OMIT_COMPOUND_SELECT


176 
EXCEPT
 
INTERSECT
 
UNION


177 %
ídif


178 
REINDEX
 
RENAME
 
CTIME_KW
 
IF


192 %
À·
 
OR
.

193 %
À·
 
AND
.

194 %
right
 
NOT
.

195 %
À·
 
IS
 
LIKE_KW
 
BETWEEN
 
IN
 
ISNULL
 
NOTNULL
 
NE
 
EQ
.

196 %
À·
 
GT
 
LE
 
LT
 
GE
.

197 %
right
 
ESCAPE
.

198 %
À·
 
BITAND
 
BITOR
 
LSHIFT
 
RSHIFT
.

199 %
À·
 
PLUS
 
MINUS
.

200 %
À·
 
STAR
 
SLASH
 
REM
.

201 %
À·
 
CONCAT
.

202 %
right
 
UMINUS
 
UPLUS
 
BITNOT
.

206 %
ty≥
 
ids
 {
Tokí
}

207 
	$ids
(
A
Ë::
ID
|
	`STRING
(
X
). {A = X;
	}
}

211 %
ty≥
 
nm
 {
Tokí
}

212 
	$nm
(
A
Ë::
	`ID
(
X
). {A = X;
	}
}

213 
	$nm
(
A
Ë::
	`STRING
(
X
). {A = X;
	}
}

214 
	$nm
(
A
Ë::
	`JOIN_KW
(
X
). {A = X;
	}
}

220 %
ty≥
 
ty≥tokí
 {
Tokí
}

221 
ty≥
 ::= .

222 
ty≥
 ::
ty≥tokí
(
X
). {
sqlôe3AddCﬁumnTy≥
(
pP¨£
,&X);}

223 
	$ty≥tokí
(
A
Ë::
	`ty≥«me
(
X
). {A = X;
	}
}

224 
	$ty≥tokí
(
A
Ë::
	$ty≥«me
(
X
Ë
LP
 sig√d 
	`RP
(
Y
). {

225 
A
.
z
 = 
X
.z;

226 
A
.
n
 = &
Y
.
z
[Y.n] - 
X
.z;

227 
	}
}

228 
	$ty≥tokí
(
A
Ë::
	$ty≥«me
(
X
Ë
LP
 sig√d 
COMMA
 sig√d 
	`RP
(
Y
). {

229 
A
.
z
 = 
X
.z;

230 
A
.
n
 = &
Y
.
z
[Y.n] - 
X
.z;

231 
	}
}

232 %
ty≥
 
ty≥«me
 {
Tokí
}

233 
	$ty≥«me
(
A
Ë::
	`ids
(
X
). {A = X;
	}
}

234 
	$ty≥«me
(
A
Ë::
	$ty≥«me
(
X
Ë
	`ids
(
Y
). {
A
.
z
=X.z; A.
n
=Y.n+(Y.z-X.z);
	}
}

235 %
ty≥
 signed {}

236 sig√d(
A
Ë::
	`∂us_num
(
X
). { A = 
	`©oi
((*)X.
z
); 
	}
}

237 sig√d(
A
Ë::
	`möus_num
(
X
). { A = -
	`©oi
((*)X.
z
); 
	}
}

242 
ˇrgli°
 ::ˇrgli° 
ˇrg
.

243 
ˇrgli°
 ::= .

244 
ˇrg
 ::
CONSTRAINT
 
nm
 
cc⁄s
.

245 
ˇrg
 ::
cc⁄s
.

246 
ˇrg
 ::
DEFAULT
 
ãrm
(
X
). {
sqlôe3AddDeÁu…VÆue
(
pP¨£
,X);}

247 
ˇrg
 ::
DEFAULT
 
LP
 
	$ex¥
(
X
Ë
RP
. {
	`sqlôe3AddDeÁu…VÆue
(
pP¨£
,X);
	}
}

248 
ˇrg
 ::
DEFAULT
 
PLUS
 
ãrm
(
X
). {
sqlôe3AddDeÁu…VÆue
(
pP¨£
,X);}

249 
ˇrg
 ::
DEFAULT
 
MINUS
 
ãrm
(
X
). {

250 
Ex¥
 *
p
 = 
sqlôe3Ex¥
(
TK_UMINUS
, 
X
, 0, 0);

251 
sqlôe3AddDeÁu…VÆue
(
pP¨£
,
p
);

253 
ˇrg
 ::
DEFAULT
 
id
(
X
). {

254 
Ex¥
 *
p
 = 
sqlôe3Ex¥
(
TK_STRING
, 0, 0, &
X
);

255 
sqlôe3AddDeÁu…VÆue
(
pP¨£
,
p
);

261 
cc⁄s
 ::
NULL
 
⁄c⁄f
.

262 
cc⁄s
 ::
NOT
 
NULL
 
⁄c⁄f
(
R
). {
sqlôe3AddNŸNuŒ
(
pP¨£
, R);}

263 
cc⁄s
 ::
PRIMARY
 
KEY
 
	$s‹t‹dî
(
Z
Ë
	$⁄c⁄f
(
R
Ë
	`autoöc
(
I
).

264 {
	`sqlôe3AddPrim¨yKey
(
pP¨£
,0,
R
,
I
,
Z
);
	}
}

265 
cc⁄s
 ::
UNIQUE
 
⁄c⁄f
(
R
). {
sqlôe3Cª©eIndex
(
pP¨£
,0,0,0,0,R,0,0,0,0);}

266 
cc⁄s
 ::
CHECK
 
LP
 
	$ex¥
(
X
Ë
RP
. {
	`sqlôe3AddCheckC⁄°øöt
(
pP¨£
,X);
	}
}

267 
cc⁄s
 ::
REFERENCES
 
	$nm
(
T
Ë
	$idxli°_›t
(
TA
Ë
	`ªÁrgs
(
R
).

268 {
	`sqlôe3Cª©eF‹eignKey
(
pP¨£
,0,&
T
,
TA
,
R
);
	}
}

269 
cc⁄s
 ::
de„r_sub˛au£
(
D
). {
sqlôe3De„rF‹eignKey
(
pP¨£
,D);}

270 
cc⁄s
 ::
COLLATE
 
id
(
C
). {
sqlôe3AddCﬁœãTy≥
(
pP¨£
, (*)C.
z
, C.
n
);}

273 %
ty≥
 
autoöc
 {}

274 
	$autoöc
(
X
Ë::. {X = 0;
	}
}

275 
	$autoöc
(
X
Ë::
AUTOINCR
. {X = 1;
	}
}

282 %
ty≥
 
ªÁrgs
 {}

283 
	$ªÁrgs
(
A
Ë::. { A = 
OE_Re°ri˘
 * 0x010101; 
	}
}

284 
	$ªÁrgs
(
A
Ë::
	$ªÁrgs
(
X
Ë
	`ªÁrg
(
Y
). { 
A
 = (X & Y.
mask
Ë| Y.
vÆue
; 
	}
}

285 %
ty≥
 
ªÁrg
 {°ru˘ {
vÆue
; 
mask
;}}

286 
	$ªÁrg
(
A
Ë::
MATCH
 
nm
. { A.
vÆue
 = 0; A.
mask
 = 0x000000; 
	}
}

287 
	$ªÁrg
(
A
Ë::
ON
 
DELETE
 
	`ªÁ˘
(
X
). { A.
vÆue
 = X; A.
mask
 = 0x0000ff; 
	}
}

288 
	$ªÁrg
(
A
Ë::
ON
 
UPDATE
 
	`ªÁ˘
(
X
). { A.
vÆue
 = X<<8; A.
mask
 = 0x00ff00; 
	}
}

289 
	$ªÁrg
(
A
Ë::
ON
 
INSERT
 
	`ªÁ˘
(
X
). { A.
vÆue
 = X<<16; A.
mask
 = 0xff0000; 
	}
}

290 %
ty≥
 
ªÁ˘
 {}

291 
	$ªÁ˘
(
A
Ë::
SET
 
NULL
. { A = 
OE_SëNuŒ
; 
	}
}

292 
	$ªÁ˘
(
A
Ë::
SET
 
DEFAULT
. { A = 
OE_SëDÊt
; 
	}
}

293 
	$ªÁ˘
(
A
Ë::
CASCADE
. { A = 
OE_Casˇde
; 
	}
}

294 
	$ªÁ˘
(
A
Ë::
RESTRICT
. { A = 
OE_Re°ri˘
; 
	}
}

295 %
ty≥
 
de„r_sub˛au£
 {}

296 
	$de„r_sub˛au£
(
A
Ë::
NOT
 
DEFERRABLE
 
	`öô_de„ºed_¥ed_›t
(
X
). {A = X;
	}
}

297 
	$de„r_sub˛au£
(
A
Ë::
DEFERRABLE
 
	`öô_de„ºed_¥ed_›t
(
X
). {A = X;
	}
}

298 %
ty≥
 
öô_de„ºed_¥ed_›t
 {}

299 
	$öô_de„ºed_¥ed_›t
(
A
Ë::. {A = 0;
	}
}

300 
	$öô_de„ºed_¥ed_›t
(
A
Ë::
INITIALLY
 
DEFERRED
. {A = 1;
	}
}

301 
	$öô_de„ºed_¥ed_›t
(
A
Ë::
INITIALLY
 
IMMEDIATE
. {A = 0;
	}
}

306 
	$c⁄¶i°_›t
(
A
Ë::. {A.
n
 = 0; A.
z
 = 0;
	}
}

307 
	$c⁄¶i°_›t
(
A
Ë::
	$COMMA
(
X
Ë
c⁄¶i°
. {
A
 = X;
	}
}

308 
c⁄¶i°
 ::c⁄¶i° 
COMMA
 
tc⁄s
.

309 
c⁄¶i°
 ::c⁄¶i° 
tc⁄s
.

310 
c⁄¶i°
 ::
tc⁄s
.

311 
tc⁄s
 ::
CONSTRAINT
 
nm
.

312 
tc⁄s
 ::
PRIMARY
 
KEY
 
LP
 
	$idxli°
(
X
Ë
	$autoöc
(
I
Ë
RP
 
	`⁄c⁄f
(
R
).

313 {
	`sqlôe3AddPrim¨yKey
(
pP¨£
,
X
,
R
,
I
,0);
	}
}

314 
tc⁄s
 ::
UNIQUE
 
LP
 
	$idxli°
(
X
Ë
RP
 
	`⁄c⁄f
(
R
).

315 {
	`sqlôe3Cª©eIndex
(
pP¨£
,0,0,0,
X
,
R
,0,0,0,0);
	}
}

316 
tc⁄s
 ::
CHECK
 
LP
 
	$ex¥
(
E
Ë
RP
 
⁄c⁄f
. {
	`sqlôe3AddCheckC⁄°øöt
(
pP¨£
,E);
	}
}

317 
tc⁄s
 ::
FOREIGN
 
KEY
 
LP
 
	$idxli°
(
FA
Ë
RP


318 
REFERENCES
 
	$nm
(
T
Ë
	$idxli°_›t
(
TA
Ë
	$ªÁrgs
(
R
Ë
	`de„r_sub˛au£_›t
(
D
). {

319 
	`sqlôe3Cª©eF‹eignKey
(
pP¨£
, 
FA
, &
T
, 
TA
, 
R
);

320 
	`sqlôe3De„rF‹eignKey
(
pP¨£
, 
D
);

321 
	}
}

322 %
ty≥
 
de„r_sub˛au£_›t
 {}

323 
	$de„r_sub˛au£_›t
(
A
Ë::. {A = 0;
	}
}

324 
	$de„r_sub˛au£_›t
(
A
Ë::
	`de„r_sub˛au£
(
X
). {A = X;
	}
}

329 %
ty≥
 
⁄c⁄f
 {}

330 %
ty≥
 
‹c⁄f
 {}

331 %
ty≥
 
ªsﬁvëy≥
 {}

332 
	$⁄c⁄f
(
A
Ë::. {A = 
OE_DeÁu…
;
	}
}

333 
	$⁄c⁄f
(
A
Ë::
ON
 
CONFLICT
 
	`ªsﬁvëy≥
(
X
). {A = X;
	}
}

334 
	$‹c⁄f
(
A
Ë::. {A = 
OE_DeÁu…
;
	}
}

335 
	$‹c⁄f
(
A
Ë::
OR
 
	`ªsﬁvëy≥
(
X
). {A = X;
	}
}

336 
	$ªsﬁvëy≥
(
A
Ë::
	`øi£ty≥
(
X
). {A = X;
	}
}

337 
	$ªsﬁvëy≥
(
A
Ë::
IGNORE
. {A = 
OE_Ign‹e
;
	}
}

338 
	$ªsﬁvëy≥
(
A
Ë::
REPLACE
. {A = 
OE_Rïœ˚
;
	}
}

342 
cmd
 ::
DROP
 
TABLE
 
	$i„xi°s
(
E
Ë
	`fuŒ«me
(
X
). {

343 
	`sqlôe3Dr›TabÀ
(
pP¨£
, 
X
, 0, 
E
);

344 
	}
}

345 %
ty≥
 
i„xi°s
 {}

346 
	$i„xi°s
(
A
Ë::
IF
 
EXISTS
. {A = 1;
	}
}

347 
	$i„xi°s
(
A
Ë::. {A = 0;
	}
}

351 %
i‚def
 
SQLITE_OMIT_VIEW


352 
cmd
 ::
	$CREATE
(
X
Ë
	$ãmp
(
T
Ë
VIEW
 
	$nm
(
Y
Ë
	$dbnm
(
Z
Ë
AS
 
	`£À˘
(
S
). {

353 
	`sqlôe3Cª©eVõw
(
pP¨£
, &
X
, &
Y
, &
Z
, 
S
, 
T
);

354 
	}
}

355 
cmd
 ::
DROP
 
VIEW
 
	$i„xi°s
(
E
Ë
	`fuŒ«me
(
X
). {

356 
	`sqlôe3Dr›TabÀ
(
pP¨£
, 
X
, 1, 
E
);

357 
	}
}

358 %
ídif


362 
cmd
 ::
£À˘
(
X
). {

363 
sqlôe3Sñe˘
(
pP¨£
, 
X
, 
SRT_CÆlback
, 0, 0, 0, 0, 0);

364 
sqlôe3Sñe˘Dñëe
(
X
);

367 %
ty≥
 
£À˘
 {
Sñe˘
*}

368 %
de°ru˘‹
 
£À˘
 {
sqlôe3Sñe˘Dñëe
(
$$
);}

369 %
ty≥
 
⁄e£À˘
 {
Sñe˘
*}

370 %
de°ru˘‹
 
⁄e£À˘
 {
sqlôe3Sñe˘Dñëe
(
$$
);}

372 
	$£À˘
(
A
Ë::
	`⁄e£À˘
(
X
). {A = X;
	}
}

373 %
i‚def
 
SQLITE_OMIT_COMPOUND_SELECT


374 
	$£À˘
(
A
Ë::
	$£À˘
(
X
Ë
	$mu…i£À˘_›
(
Y
Ë
	`⁄e£À˘
(
Z
). {

375 if–
Z
 ){

376 
Z
->
›
 = 
Y
;

377 
Z
->
pPri‹
 = 
X
;

379 
A
 = 
Z
;

380 
	}
}

381 %
ty≥
 
mu…i£À˘_›
 {}

382 
	$mu…i£À˘_›
(
A
Ë::
	`UNION
(
OP
). {A = @OP;
	}
}

383 
	$mu…i£À˘_›
(
A
Ë::
UNION
 
ALL
. {A = 
TK_ALL
;
	}
}

384 
	$mu…i£À˘_›
(
A
Ë::
EXCEPT
|
	`INTERSECT
(
OP
). {A = @OP;
	}
}

385 %
ídif


386 
	$⁄e£À˘
(
A
Ë::
SELECT
 
	$di°ö˘
(
D
Ë
	$£lcﬁli°
(
W
Ë
	$‰om
(
X
Ë
	$whîe_›t
(
Y
)

387 
	$groupby_›t
(
P
Ë
	$havög_›t
(
Q
Ë
	$‹dîby_›t
(
Z
Ë
	`limô_›t
(
L
). {

388 
A
 = 
	`sqlôe3Sñe˘New
(
W
,
X
,
Y
,
P
,
Q
,
Z
,
D
,
L
.
pLimô
,L.
pOff£t
);

389 
	}
}

394 %
ty≥
 
di°ö˘
 {}

395 
	$di°ö˘
(
A
Ë::
DISTINCT
. {A = 1;
	}
}

396 
	$di°ö˘
(
A
Ë::
ALL
. {A = 0;
	}
}

397 
	$di°ö˘
(
A
Ë::. {A = 0;
	}
}

404 %
ty≥
 
£lcﬁli°
 {
Ex¥Li°
*}

405 %
de°ru˘‹
 
£lcﬁli°
 {
sqlôe3Ex¥Li°Dñëe
(
$$
);}

406 %
ty≥
 
s˛p
 {
Ex¥Li°
*}

407 %
de°ru˘‹
 
s˛p
 {
sqlôe3Ex¥Li°Dñëe
(
$$
);}

408 
	$s˛p
(
A
Ë::
	$£lcﬁli°
(
X
Ë
COMMA
. {
A
 = X;
	}
}

409 
	$s˛p
(
A
Ë::. {A = 0;
	}
}

410 
	$£lcﬁli°
(
A
Ë::
	$s˛p
(
P
Ë
	$ex¥
(
X
Ë
	`as
(
Y
). {

411 
A
 = 
	`sqlôe3Ex¥Li°Aµíd
(
P
,
X
,
Y
.
n
?&Y:0);

412 
	}
}

413 
	$£lcﬁli°
(
A
Ë::
	$s˛p
(
P
Ë
STAR
. {

414 
A
 = 
	`sqlôe3Ex¥Li°Aµíd
(
P
, 
	`sqlôe3Ex¥
(
TK_ALL
, 0, 0, 0), 0);

415 
	}
}

416 
	$£lcﬁli°
(
A
Ë::
	$s˛p
(
P
Ë
	$nm
(
X
Ë
DOT
 
STAR
. {

417 
Ex¥
 *
pRight
 = 
	`sqlôe3Ex¥
(
TK_ALL
, 0, 0, 0);

418 
Ex¥
 *
pLe·
 = 
	`sqlôe3Ex¥
(
TK_ID
, 0, 0, &
X
);

419 
A
 = 
	`sqlôe3Ex¥Li°Aµíd
(
P
, 
	`sqlôe3Ex¥
(
TK_DOT
, 
pLe·
, 
pRight
, 0), 0);

420 
	}
}

425 %
ty≥
 
as
 {
Tokí
}

426 
	$as
(
X
Ë::
AS
 
	`nm
(
Y
). {X = Y;
	}
}

427 
	$as
(
X
Ë::
	`ids
(
Y
). {X = Y;
	}
}

428 
	$as
(
X
Ë::. {X.
n
 = 0;
	}
}

431 %
ty≥
 
£…abli°
 {
SrcLi°
*}

432 %
de°ru˘‹
 
£…abli°
 {
sqlôe3SrcLi°Dñëe
(
$$
);}

433 %
ty≥
 
°l_¥efix
 {
SrcLi°
*}

434 %
de°ru˘‹
 
°l_¥efix
 {
sqlôe3SrcLi°Dñëe
(
$$
);}

435 %
ty≥
 
‰om
 {
SrcLi°
*}

436 %
de°ru˘‹
 
‰om
 {
sqlôe3SrcLi°Dñëe
(
$$
);}

440 
	$‰om
(
A
Ë::. {A = 
	`sqlôeMÆloc
((*A));
	}
}

441 
	$‰om
(
A
Ë::
FROM
 
	`£…abli°
(
X
). {A = X;
	}
}

446 
	$°l_¥efix
(
A
Ë::
	$£…abli°
(
X
Ë
	`joö›
(
Y
). {

447 
A
 = 
X
;

448 if–
A
 && A->
nSrc
>0 ) A->
a
[A->nSrc-1].
joöty≥
 = 
Y
;

449 
	}
}

450 
	$°l_¥efix
(
A
Ë::. {A = 0;
	}
}

451 
	$£…abli°
(
A
Ë::
	$°l_¥efix
(
X
Ë
	$nm
(
Y
Ë
	$dbnm
(
D
Ë
	$as
(
Z
Ë
	$⁄_›t
(
N
Ë
	`usög_›t
(
U
). {

452 
A
 = 
	`sqlôe3SrcLi°Aµíd
(
X
,&
Y
,&
D
);

453 if–
Z
.
n
 ) 
	`sqlôe3SrcLi°AddAlüs
(
A
,&Z);

454 if–
N
 ){

455 if–
A
 && A->
nSrc
>1 ){ A->
a
[A->nSrc-2].
pOn
 = 
N
; }

456 { 
	`sqlôe3Ex¥Dñëe
(
N
); }

458 if–
U
 ){

459 if–
A
 && A->
nSrc
>1 ){ A->
a
[A->nSrc-2].
pUsög
 = 
U
; }

460 { 
	`sqlôe3IdLi°Dñëe
(
U
); }

462 
	}
}

463 %
i‚def
 
SQLITE_OMIT_SUBQUERY


464 
	$£…abli°
(
A
Ë::
	$°l_¥efix
(
X
Ë
LP
 
	$£…abli°_∑ªn
(
S
Ë
RP


465 
	$as
(
Z
Ë
	$⁄_›t
(
N
Ë
	`usög_›t
(
U
). {

466 
A
 = 
	`sqlôe3SrcLi°Aµíd
(
X
,0,0);

467 
A
->
a
[A->
nSrc
-1].
pSñe˘
 = 
S
;

468 if–
Z
.
n
 ) 
	`sqlôe3SrcLi°AddAlüs
(
A
,&Z);

469 if–
N
 ){

470 if–
A
 && A->
nSrc
>1 ){ A->
a
[A->nSrc-2].
pOn
 = 
N
; }

471 { 
	`sqlôe3Ex¥Dñëe
(
N
); }

473 if–
U
 ){

474 if–
A
 && A->
nSrc
>1 ){ A->
a
[A->nSrc-2].
pUsög
 = 
U
; }

475 { 
	`sqlôe3IdLi°Dñëe
(
U
); }

477 
	}
}

483 %
ty≥
 
£…abli°_∑ªn
 {
Sñe˘
*}

484 %
de°ru˘‹
 
£…abli°_∑ªn
 {
sqlôe3Sñe˘Dñëe
(
$$
);}

485 
	$£…abli°_∑ªn
(
A
Ë::
	`£À˘
(
S
). {A = S;
	}
}

486 
	$£…abli°_∑ªn
(
A
Ë::
	`£…abli°
(
F
). {

487 
A
 = 
	`sqlôe3Sñe˘New
(0,
F
,0,0,0,0,0,0,0);

488 
	}
}

489 %
ídif


491 %
ty≥
 
dbnm
 {
Tokí
}

492 
	$dbnm
(
A
Ë::. {A.
z
=0; A.
n
=0;
	}
}

493 
	$dbnm
(
A
Ë::
DOT
 
	`nm
(
X
). {A = X;
	}
}

495 %
ty≥
 
fuŒ«me
 {
SrcLi°
*}

496 %
de°ru˘‹
 
fuŒ«me
 {
sqlôe3SrcLi°Dñëe
(
$$
);}

497 
	$fuŒ«me
(
A
Ë::
	$nm
(
X
Ë
	`dbnm
(
Y
). {
A
 = 
	`sqlôe3SrcLi°Aµíd
(0,&X,&Y);
	}
}

499 %
ty≥
 
joö›
 {}

500 %
ty≥
 
joö›2
 {}

501 
	$joö›
(
X
Ë::
COMMA
|
JOIN
. { X = 
JT_INNER
; 
	}
}

502 
	$joö›
(
X
Ë::
	$JOIN_KW
(
A
Ë
JOIN
. { 
X
 = 
	`sqlôe3JoöTy≥
(
pP¨£
,&A,0,0); 
	}
}

503 
	$joö›
(
X
Ë::
	$JOIN_KW
(
A
Ë
	$nm
(
B
Ë
JOIN
. { 
X
 = 
	`sqlôe3JoöTy≥
(
pP¨£
,&
A
,&B,0); 
	}
}

504 
	$joö›
(
X
Ë::
	$JOIN_KW
(
A
Ë
	$nm
(
B
Ë
	$nm
(
C
Ë
JOIN
.

505 { 
X
 = 
	`sqlôe3JoöTy≥
(
pP¨£
,&
A
,&
B
,&
C
); 
	}
}

507 %
ty≥
 
⁄_›t
 {
Ex¥
*}

508 %
de°ru˘‹
 
⁄_›t
 {
sqlôe3Ex¥Dñëe
(
$$
);}

509 
	$⁄_›t
(
N
Ë::
ON
 
	`ex¥
(
E
). {N = E;
	}
}

510 
	$⁄_›t
(
N
Ë::. {N = 0;
	}
}

512 %
ty≥
 
usög_›t
 {
IdLi°
*}

513 %
de°ru˘‹
 
usög_›t
 {
sqlôe3IdLi°Dñëe
(
$$
);}

514 
	$usög_›t
(
U
Ë::
USING
 
LP
 
	$öscﬁli°
(
L
Ë
RP
. {
U
 = L;
	}
}

515 
	$usög_›t
(
U
Ë::. {U = 0;
	}
}

518 %
ty≥
 
‹dîby_›t
 {
Ex¥Li°
*}

519 %
de°ru˘‹
 
‹dîby_›t
 {
sqlôe3Ex¥Li°Dñëe
(
$$
);}

520 %
ty≥
 
s‹éi°
 {
Ex¥Li°
*}

521 %
de°ru˘‹
 
s‹éi°
 {
sqlôe3Ex¥Li°Dñëe
(
$$
);}

522 %
ty≥
 
s‹tôem
 {
Ex¥
*}

523 %
de°ru˘‹
 
s‹tôem
 {
sqlôe3Ex¥Dñëe
(
$$
);}

525 
	$‹dîby_›t
(
A
Ë::. {A = 0;
	}
}

526 
	$‹dîby_›t
(
A
Ë::
ORDER
 
BY
 
	`s‹éi°
(
X
). {A = X;
	}
}

527 
	$s‹éi°
(
A
Ë::
	$s‹éi°
(
X
Ë
COMMA
 
	$s‹tôem
(
Y
Ë
	$cﬁœã
(
C
Ë
	`s‹t‹dî
(
Z
). {

528 
A
 = 
	`sqlôe3Ex¥Li°Aµíd
(
X
,
Y
,
C
.
n
>0?&C:0);

529 if–
A
 ) A->
a
[A->
nEx¥
-1].
s‹tOrdî
 = 
Z
;

530 
	}
}

531 
	$s‹éi°
(
A
Ë::
	$s‹tôem
(
Y
Ë
	$cﬁœã
(
C
Ë
	`s‹t‹dî
(
Z
). {

532 
A
 = 
	`sqlôe3Ex¥Li°Aµíd
(0,
Y
,
C
.
n
>0?&C:0);

533 if–
A
 && A->
a
 ) A->a[0].
s‹tOrdî
 = 
Z
;

534 
	}
}

535 
	$s‹tôem
(
A
Ë::
	`ex¥
(
X
). {A = X;
	}
}

537 %
ty≥
 
s‹t‹dî
 {}

538 %
ty≥
 
cﬁœã
 {
Tokí
}

540 
	$s‹t‹dî
(
A
Ë::
ASC
. {A = 
SQLITE_SO_ASC
;
	}
}

541 
	$s‹t‹dî
(
A
Ë::
DESC
. {A = 
SQLITE_SO_DESC
;
	}
}

542 
	$s‹t‹dî
(
A
Ë::. {A = 
SQLITE_SO_ASC
;
	}
}

543 
	$cﬁœã
(
C
Ë::. {C.
z
 = 0; C.
n
 = 0;
	}
}

544 
	$cﬁœã
(
C
Ë::
COLLATE
 
	`id
(
X
). {C = X;
	}
}

546 %
ty≥
 
groupby_›t
 {
Ex¥Li°
*}

547 %
de°ru˘‹
 
groupby_›t
 {
sqlôe3Ex¥Li°Dñëe
(
$$
);}

548 
	$groupby_›t
(
A
Ë::. {A = 0;
	}
}

549 
	$groupby_›t
(
A
Ë::
GROUP
 
BY
 
	`ex¥li°
(
X
). {A = X;
	}
}

551 %
ty≥
 
havög_›t
 {
Ex¥
*}

552 %
de°ru˘‹
 
havög_›t
 {
sqlôe3Ex¥Dñëe
(
$$
);}

553 
	$havög_›t
(
A
Ë::. {A = 0;
	}
}

554 
	$havög_›t
(
A
Ë::
HAVING
 
	`ex¥
(
X
). {A = X;
	}
}

556 %
ty≥
 
limô_›t
 {
LimôVÆ
}

557 %
de°ru˘‹
 
limô_›t
 {

558 
sqlôe3Ex¥Dñëe
(
$$
.
pLimô
);

559 
sqlôe3Ex¥Dñëe
(
$$
.
pOff£t
);

561 
	$limô_›t
(
A
Ë::. {A.
pLimô
 = 0; A.
pOff£t
 = 0;
	}
}

562 
	$limô_›t
(
A
Ë::
LIMIT
 
	`ex¥
(
X
). {A.
pLimô
 = X; A.
pOff£t
 = 0;
	}
}

563 
	$limô_›t
(
A
Ë::
LIMIT
 
	$ex¥
(
X
Ë
OFFSET
 
	`ex¥
(
Y
).

564 {
A
.
pLimô
 = 
X
; A.
pOff£t
 = 
Y
;
	}
}

565 
	$limô_›t
(
A
Ë::
LIMIT
 
	$ex¥
(
X
Ë
COMMA
 
	`ex¥
(
Y
).

566 {
A
.
pOff£t
 = 
X
; A.
pLimô
 = 
Y
;
	}
}

570 
cmd
 ::
DELETE
 
FROM
 
	$fuŒ«me
(
X
Ë
	`whîe_›t
(
Y
). {
	`sqlôe3DñëeFrom
(
pP¨£
,X,Y);
	}
}

572 %
ty≥
 
whîe_›t
 {
Ex¥
*}

573 %
de°ru˘‹
 
whîe_›t
 {
sqlôe3Ex¥Dñëe
(
$$
);}

575 
	$whîe_›t
(
A
Ë::. {A = 0;
	}
}

576 
	$whîe_›t
(
A
Ë::
WHERE
 
	`ex¥
(
X
). {A = X;
	}
}

580 
cmd
 ::
UPDATE
 
	$‹c⁄f
(
R
Ë
	$fuŒ«me
(
X
Ë
SET
 
	$£éi°
(
Y
Ë
	`whîe_›t
(
Z
).

581 {
	`sqlôe3Upd©e
(
pP¨£
,
X
,
Y
,
Z
,
R
);
	}
}

583 %
ty≥
 
£éi°
 {
Ex¥Li°
*}

584 %
de°ru˘‹
 
£éi°
 {
sqlôe3Ex¥Li°Dñëe
(
$$
);}

586 
	$£éi°
(
A
Ë::
	$£éi°
(
Z
Ë
COMMA
 
	$nm
(
X
Ë
EQ
 
	`ex¥
(
Y
).

587 {
A
 = 
	`sqlôe3Ex¥Li°Aµíd
(
Z
,
Y
,&
X
);
	}
}

588 
	$£éi°
(
A
Ë::
	$nm
(
X
Ë
EQ
 
	`ex¥
(
Y
). {
A
 = 
	`sqlôe3Ex¥Li°Aµíd
(0,Y,&X);
	}
}

592 
cmd
 ::
	$ö£π_cmd
(
R
Ë
INTO
 
	$fuŒ«me
(
X
Ë
	$öscﬁli°_›t
(
F
)

593 
VALUES
 
LP
 
	$ôemli°
(
Y
Ë
RP
.

594 {
	`sqlôe3In£π
(
pP¨£
, 
X
, 
Y
, 0, 
F
, 
R
);
	}
}

595 
cmd
 ::
	$ö£π_cmd
(
R
Ë
INTO
 
	$fuŒ«me
(
X
Ë
	$öscﬁli°_›t
(
F
Ë
	`£À˘
(
S
).

596 {
	`sqlôe3In£π
(
pP¨£
, 
X
, 0, 
S
, 
F
, 
R
);
	}
}

598 %
ty≥
 
ö£π_cmd
 {}

599 
	$ö£π_cmd
(
A
Ë::
INSERT
 
	`‹c⁄f
(
R
). {A = R;
	}
}

600 
	$ö£π_cmd
(
A
Ë::
REPLACE
. {A = 
OE_Rïœ˚
;
	}
}

603 %
ty≥
 
ôemli°
 {
Ex¥Li°
*}

604 %
de°ru˘‹
 
ôemli°
 {
sqlôe3Ex¥Li°Dñëe
(
$$
);}

606 
	$ôemli°
(
A
Ë::
	$ôemli°
(
X
Ë
COMMA
 
	`ex¥
(
Y
). {
A
 = 
	`sqlôe3Ex¥Li°Aµíd
(X,Y,0);
	}
}

607 
	$ôemli°
(
A
Ë::
	`ex¥
(
X
). {A = 
	`sqlôe3Ex¥Li°Aµíd
(0,X,0);
	}
}

609 %
ty≥
 
öscﬁli°_›t
 {
IdLi°
*}

610 %
de°ru˘‹
 
öscﬁli°_›t
 {
sqlôe3IdLi°Dñëe
(
$$
);}

611 %
ty≥
 
öscﬁli°
 {
IdLi°
*}

612 %
de°ru˘‹
 
öscﬁli°
 {
sqlôe3IdLi°Dñëe
(
$$
);}

614 
	$öscﬁli°_›t
(
A
Ë::. {A = 0;
	}
}

615 
	$öscﬁli°_›t
(
A
Ë::
LP
 
	$öscﬁli°
(
X
Ë
RP
. {
A
 = X;
	}
}

616 
	$öscﬁli°
(
A
Ë::
	$öscﬁli°
(
X
Ë
COMMA
 
	`nm
(
Y
). {
A
 = 
	`sqlôe3IdLi°Aµíd
(X,&Y);
	}
}

617 
	$öscﬁli°
(
A
Ë::
	`nm
(
Y
). {A = 
	`sqlôe3IdLi°Aµíd
(0,&Y);
	}
}

622 %
ty≥
 
ex¥
 {
Ex¥
*}

623 %
de°ru˘‹
 
ex¥
 {
sqlôe3Ex¥Dñëe
(
$$
);}

624 %
ty≥
 
ãrm
 {
Ex¥
*}

625 %
de°ru˘‹
 
ãrm
 {
sqlôe3Ex¥Dñëe
(
$$
);}

627 
	$ex¥
(
A
Ë::
	`ãrm
(
X
). {A = X;
	}
}

628 
	$ex¥
(
A
Ë::
	$LP
(
B
Ë
	$ex¥
(
X
Ë
	`RP
(
E
). {
A
 = X; 
	`sqlôe3Ex¥S∑n
(A,&
B
,&E); 
	}
}

629 
	$ãrm
(
A
Ë::
	`NULL
(
X
). {A = 
	`sqlôe3Ex¥
(@X, 0, 0, &X);
	}
}

630 
	$ex¥
(
A
Ë::
	`ID
(
X
). {A = 
	`sqlôe3Ex¥
(
TK_ID
, 0, 0, &X);
	}
}

631 
	$ex¥
(
A
Ë::
	`JOIN_KW
(
X
). {A = 
	`sqlôe3Ex¥
(
TK_ID
, 0, 0, &X);
	}
}

632 
	$ex¥
(
A
Ë::
	$nm
(
X
Ë
DOT
 
	`nm
(
Y
). {

633 
Ex¥
 *
ãmp1
 = 
	`sqlôe3Ex¥
(
TK_ID
, 0, 0, &
X
);

634 
Ex¥
 *
ãmp2
 = 
	`sqlôe3Ex¥
(
TK_ID
, 0, 0, &
Y
);

635 
A
 = 
	`sqlôe3Ex¥
(
TK_DOT
, 
ãmp1
, 
ãmp2
, 0);

636 
	}
}

637 
	$ex¥
(
A
Ë::
	$nm
(
X
Ë
DOT
 
	$nm
(
Y
Ë
DOT
 
	`nm
(
Z
). {

638 
Ex¥
 *
ãmp1
 = 
	`sqlôe3Ex¥
(
TK_ID
, 0, 0, &
X
);

639 
Ex¥
 *
ãmp2
 = 
	`sqlôe3Ex¥
(
TK_ID
, 0, 0, &
Y
);

640 
Ex¥
 *
ãmp3
 = 
	`sqlôe3Ex¥
(
TK_ID
, 0, 0, &
Z
);

641 
Ex¥
 *
ãmp4
 = 
	`sqlôe3Ex¥
(
TK_DOT
, 
ãmp2
, 
ãmp3
, 0);

642 
A
 = 
	`sqlôe3Ex¥
(
TK_DOT
, 
ãmp1
, 
ãmp4
, 0);

643 
	}
}

644 
	$ãrm
(
A
Ë::
INTEGER
|
FLOAT
|
	`BLOB
(
X
). {A = 
	`sqlôe3Ex¥
(@X, 0, 0, &X);
	}
}

645 
	$ãrm
(
A
Ë::
	`STRING
(
X
). {A = 
	`sqlôe3Ex¥
(@X, 0, 0, &X);
	}
}

646 
	$ex¥
(
A
Ë::
	`REGISTER
(
X
). {A = 
	`sqlôe3Regi°îEx¥
(
pP¨£
, &X);
	}
}

647 
	$ex¥
(
A
Ë::
	`VARIABLE
(
X
). {

648 
Tokí
 *
pTokí
 = &
X
;

649 
Ex¥
 *
pEx¥
 = 
A
 = 
	`sqlôe3Ex¥
(
TK_VARIABLE
, 0, 0, 
pTokí
);

650 
	`sqlôe3Ex¥AssignV¨Numbî
(
pP¨£
, 
pEx¥
);

651 
	}
}

652 %
i‚def
 
SQLITE_OMIT_CAST


653 
	$ex¥
(
A
Ë::
	$CAST
(
X
Ë
LP
 
	$ex¥
(
E
Ë
AS
 
	$ty≥tokí
(
T
Ë
	`RP
(
Y
). {

654 
A
 = 
	`sqlôe3Ex¥
(
TK_CAST
, 
E
, 0, &
T
);

655 
	`sqlôe3Ex¥S∑n
(
A
,&
X
,&
Y
);

656 
	}
}

657 %
ídif


658 
	$ex¥
(
A
Ë::
	$ID
(
X
Ë
LP
 
	$di°ö˘
(
D
Ë
	$ex¥li°
(
Y
Ë
	`RP
(
E
). {

659 
A
 = 
	`sqlôe3Ex¥Fun˘i⁄
(
Y
, &
X
);

660 
	`sqlôe3Ex¥S∑n
(
A
,&
X
,&
E
);

661 if–
D
 ){

662 
A
->
Êags
 |
EP_Di°ö˘
;

664 
	}
}

665 
	$ex¥
(
A
Ë::
	$ID
(
X
Ë
LP
 
STAR
 
	`RP
(
E
). {

666 
A
 = 
	`sqlôe3Ex¥Fun˘i⁄
(0, &
X
);

667 
	`sqlôe3Ex¥S∑n
(
A
,&
X
,&
E
);

668 
	}
}

669 
	$ãrm
(
A
Ë::
	`CTIME_KW
(
OP
). {

672 
A
 = 
	`sqlôe3Ex¥Fun˘i⁄
(0,&
OP
);

673 if–
A
 ) A->
›
 = 
TK_CONST_FUNC
;

674 
	}
}

675 
	$ex¥
(
A
Ë::
	$ex¥
(
X
Ë
	$AND
(
OP
Ë
	`ex¥
(
Y
). {
A
 = 
	`sqlôe3Ex¥
(@OP, 
X
, Y, 0);
	}
}

676 
	$ex¥
(
A
Ë::
	$ex¥
(
X
Ë
	$OR
(
OP
Ë
	`ex¥
(
Y
). {
A
 = 
	`sqlôe3Ex¥
(@OP, 
X
, Y, 0);
	}
}

677 
	$ex¥
(
A
Ë::
	$ex¥
(
X
Ë
LT
|
GT
|
GE
|
	$LE
(
OP
Ë
	`ex¥
(
Y
). {
A
 = 
	`sqlôe3Ex¥
(@OP, 
X
, Y, 0);
	}
}

678 
	$ex¥
(
A
Ë::
	$ex¥
(
X
Ë
EQ
|
	$NE
(
OP
Ë
	`ex¥
(
Y
). {
A
 = 
	`sqlôe3Ex¥
(@OP, 
X
, Y, 0);
	}
}

679 
	$ex¥
(
A
Ë::
	$ex¥
(
X
Ë
BITAND
|
BITOR
|
LSHIFT
|
	$RSHIFT
(
OP
Ë
	`ex¥
(
Y
).

680 {
A
 = 
	`sqlôe3Ex¥
(@
OP
, 
X
, 
Y
, 0);
	}
}

681 
	$ex¥
(
A
Ë::
	$ex¥
(
X
Ë
PLUS
|
	$MINUS
(
OP
Ë
	`ex¥
(
Y
). {
A
 = 
	`sqlôe3Ex¥
(@OP, 
X
, Y, 0);
	}
}

682 
	$ex¥
(
A
Ë::
	$ex¥
(
X
Ë
STAR
|
SLASH
|
	$REM
(
OP
Ë
	`ex¥
(
Y
). {
A
 = 
	`sqlôe3Ex¥
(@OP, 
X
, Y, 0);
	}
}

683 
	$ex¥
(
A
Ë::
	$ex¥
(
X
Ë
	$CONCAT
(
OP
Ë
	`ex¥
(
Y
). {
A
 = 
	`sqlôe3Ex¥
(@OP, 
X
, Y, 0);
	}
}

684 %
ty≥
 
like›
 {
LikeOp
}

685 
	$like›
(
A
Ë::
	`LIKE_KW
(
X
). {A.
eO≥øt‹
 = X; A.
nŸ
 = 0;
	}
}

686 
	$like›
(
A
Ë::
NOT
 
	`LIKE_KW
(
X
). {A.
eO≥øt‹
 = X; A.
nŸ
 = 1;
	}
}

687 %
ty≥
 
esˇ≥
 {
Ex¥
*}

688 %
de°ru˘‹
 
esˇ≥
 {
sqlôe3Ex¥Dñëe
(
$$
);}

689 
	$esˇ≥
(
X
Ë::
ESCAPE
 
	`ex¥
(
A
). [ESCAPE] {X = A;
	}
}

690 
	$esˇ≥
(
X
Ë::. [
ESCAPE
] {X = 0;
	}
}

691 
	$ex¥
(
A
Ë::
	$ex¥
(
X
Ë
	$like›
(
OP
Ë
	$ex¥
(
Y
Ë
	`esˇ≥
(
E
). [
LIKE_KW
] {

692 
Ex¥Li°
 *
pLi°
 = 
	`sqlôe3Ex¥Li°Aµíd
(0, 
Y
, 0);

693 
pLi°
 = 
	`sqlôe3Ex¥Li°Aµíd
’Li°, 
X
, 0);

694 if–
E
 ){

695 
pLi°
 = 
	`sqlôe3Ex¥Li°Aµíd
’Li°, 
E
, 0);

697 
A
 = 
	`sqlôe3Ex¥Fun˘i⁄
(
pLi°
, &
OP
.
eO≥øt‹
);

698 if–
OP
.
nŸ
 ) 
A
 = 
	`sqlôe3Ex¥
(
TK_NOT
, A, 0, 0);

699 
	`sqlôe3Ex¥S∑n
(
A
, &
X
->
•™
, &
Y
->span);

700 
	}
}

702 
	$ex¥
(
A
Ë::
	$ex¥
(
X
Ë
ISNULL
|
	`NOTNULL
(
E
). {

703 
A
 = 
	`sqlôe3Ex¥
(@
E
, 
X
, 0, 0);

704 
	`sqlôe3Ex¥S∑n
(
A
,&
X
->
•™
,&
E
);

705 
	}
}

706 
	$ex¥
(
A
Ë::
	$ex¥
(
X
Ë
IS
 
	`NULL
(
E
). {

707 
A
 = 
	`sqlôe3Ex¥
(
TK_ISNULL
, 
X
, 0, 0);

708 
	`sqlôe3Ex¥S∑n
(
A
,&
X
->
•™
,&
E
);

709 
	}
}

710 
	$ex¥
(
A
Ë::
	$ex¥
(
X
Ë
NOT
 
	`NULL
(
E
). {

711 
A
 = 
	`sqlôe3Ex¥
(
TK_NOTNULL
, 
X
, 0, 0);

712 
	`sqlôe3Ex¥S∑n
(
A
,&
X
->
•™
,&
E
);

713 
	}
}

714 
	$ex¥
(
A
Ë::
	$ex¥
(
X
Ë
IS
 
NOT
 
	`NULL
(
E
). {

715 
A
 = 
	`sqlôe3Ex¥
(
TK_NOTNULL
, 
X
, 0, 0);

716 
	`sqlôe3Ex¥S∑n
(
A
,&
X
->
•™
,&
E
);

717 
	}
}

718 
	$ex¥
(
A
Ë::
NOT
|
	$BITNOT
(
B
Ë
	`ex¥
(
X
). {

719 
A
 = 
	`sqlôe3Ex¥
(@
B
, 
X
, 0, 0);

720 
	`sqlôe3Ex¥S∑n
(
A
,&
B
,&
X
->
•™
);

721 
	}
}

722 
	$ex¥
(
A
Ë::
	$MINUS
(
B
Ë
	`ex¥
(
X
). [
UMINUS
] {

723 
A
 = 
	`sqlôe3Ex¥
(
TK_UMINUS
, 
X
, 0, 0);

724 
	`sqlôe3Ex¥S∑n
(
A
,&
B
,&
X
->
•™
);

725 
	}
}

726 
	$ex¥
(
A
Ë::
	$PLUS
(
B
Ë
	`ex¥
(
X
). [
UPLUS
] {

727 
A
 = 
	`sqlôe3Ex¥
(
TK_UPLUS
, 
X
, 0, 0);

728 
	`sqlôe3Ex¥S∑n
(
A
,&
B
,&
X
->
•™
);

729 
	}
}

730 %
ty≥
 
bëwìn_›
 {}

731 
	$bëwìn_›
(
A
Ë::
BETWEEN
. {A = 0;
	}
}

732 
	$bëwìn_›
(
A
Ë::
NOT
 
BETWEEN
. {A = 1;
	}
}

733 
	$ex¥
(
A
Ë::
	$ex¥
(
W
Ë
	$bëwìn_›
(
N
Ë
	$ex¥
(
X
Ë
AND
 
	`ex¥
(
Y
). [
BETWEEN
] {

734 
Ex¥Li°
 *
pLi°
 = 
	`sqlôe3Ex¥Li°Aµíd
(0, 
X
, 0);

735 
pLi°
 = 
	`sqlôe3Ex¥Li°Aµíd
’Li°, 
Y
, 0);

736 
A
 = 
	`sqlôe3Ex¥
(
TK_BETWEEN
, 
W
, 0, 0);

737 if–
A
 ){

738 
A
->
pLi°
 =ÖList;

740 
	`sqlôe3Ex¥Li°Dñëe
(
pLi°
);

742 if–
N
 ) 
A
 = 
	`sqlôe3Ex¥
(
TK_NOT
, A, 0, 0);

743 
	`sqlôe3Ex¥S∑n
(
A
,&
W
->
•™
,&
Y
->span);

744 
	}
}

745 %
i‚def
 
SQLITE_OMIT_SUBQUERY


746 %
ty≥
 
ö_›
 {}

747 
	$ö_›
(
A
Ë::
IN
. {A = 0;
	}
}

748 
	$ö_›
(
A
Ë::
NOT
 
IN
. {A = 1;
	}
}

749 
	$ex¥
(
A
Ë::
	$ex¥
(
X
Ë
	$ö_›
(
N
Ë
LP
 
	$ex¥li°
(
Y
Ë
	`RP
(
E
). [
IN
] {

750 
A
 = 
	`sqlôe3Ex¥
(
TK_IN
, 
X
, 0, 0);

751 if–
A
 ){

752 
A
->
pLi°
 = 
Y
;

754 
	`sqlôe3Ex¥Li°Dñëe
(
Y
);

756 if–
N
 ) 
A
 = 
	`sqlôe3Ex¥
(
TK_NOT
, A, 0, 0);

757 
	`sqlôe3Ex¥S∑n
(
A
,&
X
->
•™
,&
E
);

758 
	}
}

759 
	$ex¥
(
A
Ë::
	$LP
(
B
Ë
	$£À˘
(
X
Ë
	`RP
(
E
). {

760 
A
 = 
	`sqlôe3Ex¥
(
TK_SELECT
, 0, 0, 0);

761 if–
A
 ){

762 
A
->
pSñe˘
 = 
X
;

764 
	`sqlôe3Sñe˘Dñëe
(
X
);

766 
	`sqlôe3Ex¥S∑n
(
A
,&
B
,&
E
);

767 
	}
}

768 
	$ex¥
(
A
Ë::
	$ex¥
(
X
Ë
	$ö_›
(
N
Ë
LP
 
	$£À˘
(
Y
Ë
	`RP
(
E
). [
IN
] {

769 
A
 = 
	`sqlôe3Ex¥
(
TK_IN
, 
X
, 0, 0);

770 if–
A
 ){

771 
A
->
pSñe˘
 = 
Y
;

773 
	`sqlôe3Sñe˘Dñëe
(
Y
);

775 if–
N
 ) 
A
 = 
	`sqlôe3Ex¥
(
TK_NOT
, A, 0, 0);

776 
	`sqlôe3Ex¥S∑n
(
A
,&
X
->
•™
,&
E
);

777 
	}
}

778 
	$ex¥
(
A
Ë::
	$ex¥
(
X
Ë
	$ö_›
(
N
Ë
	$nm
(
Y
Ë
	`dbnm
(
Z
). [
IN
] {

779 
SrcLi°
 *
pSrc
 = 
	`sqlôe3SrcLi°Aµíd
(0,&
Y
,&
Z
);

780 
A
 = 
	`sqlôe3Ex¥
(
TK_IN
, 
X
, 0, 0);

781 if–
A
 ){

782 
A
->
pSñe˘
 = 
	`sqlôe3Sñe˘New
(0,
pSrc
,0,0,0,0,0,0,0);

784 
	`sqlôe3SrcLi°Dñëe
(
pSrc
);

786 if–
N
 ) 
A
 = 
	`sqlôe3Ex¥
(
TK_NOT
, A, 0, 0);

787 
	`sqlôe3Ex¥S∑n
(
A
,&
X
->
•™
,
Z
.
z
?&Z:&
Y
);

788 
	}
}

789 
	$ex¥
(
A
Ë::
	$EXISTS
(
B
Ë
LP
 
	$£À˘
(
Y
Ë
	`RP
(
E
). {

790 
Ex¥
 *
p
 = 
A
 = 
	`sqlôe3Ex¥
(
TK_EXISTS
, 0, 0, 0);

791 if–
p
 ){

792 
p
->
pSñe˘
 = 
Y
;

793 
	`sqlôe3Ex¥S∑n
(
p
,&
B
,&
E
);

795 
	`sqlôe3Sñe˘Dñëe
(
Y
);

797 
	}
}

798 %
ídif


801 
	$ex¥
(
A
Ë::
	$CASE
(
C
Ë
	$ˇ£_›î™d
(
X
Ë
	$ˇ£_ex¥li°
(
Y
Ë
	$ˇ£_ñ£
(
Z
Ë
	`END
(
E
). {

802 
A
 = 
	`sqlôe3Ex¥
(
TK_CASE
, 
X
, 
Z
, 0);

803 if–
A
 ){

804 
A
->
pLi°
 = 
Y
;

806 
	`sqlôe3Ex¥Li°Dñëe
(
Y
);

808 
	`sqlôe3Ex¥S∑n
(
A
, &
C
, &
E
);

809 
	}
}

810 %
ty≥
 
ˇ£_ex¥li°
 {
Ex¥Li°
*}

811 %
de°ru˘‹
 
ˇ£_ex¥li°
 {
sqlôe3Ex¥Li°Dñëe
(
$$
);}

812 
	$ˇ£_ex¥li°
(
A
Ë::
	$ˇ£_ex¥li°
(
X
Ë
WHEN
 
	$ex¥
(
Y
Ë
THEN
 
	`ex¥
(
Z
). {

813 
A
 = 
	`sqlôe3Ex¥Li°Aµíd
(
X
, 
Y
, 0);

814 
A
 = 
	`sqlôe3Ex¥Li°Aµíd
(A, 
Z
, 0);

815 
	}
}

816 
	$ˇ£_ex¥li°
(
A
Ë::
WHEN
 
	$ex¥
(
Y
Ë
THEN
 
	`ex¥
(
Z
). {

817 
A
 = 
	`sqlôe3Ex¥Li°Aµíd
(0, 
Y
, 0);

818 
A
 = 
	`sqlôe3Ex¥Li°Aµíd
(A, 
Z
, 0);

819 
	}
}

820 %
ty≥
 
ˇ£_ñ£
 {
Ex¥
*}

821 %
de°ru˘‹
 
ˇ£_ñ£
 {
sqlôe3Ex¥Dñëe
(
$$
);}

822 
	$ˇ£_ñ£
(
A
Ë::
ELSE
 
	`ex¥
(
X
). {A = X;
	}
}

823 
	$ˇ£_ñ£
(
A
Ë::. {A = 0;
	}
}

824 %
ty≥
 
ˇ£_›î™d
 {
Ex¥
*}

825 %
de°ru˘‹
 
ˇ£_›î™d
 {
sqlôe3Ex¥Dñëe
(
$$
);}

826 
	$ˇ£_›î™d
(
A
Ë::
	`ex¥
(
X
). {A = X;
	}
}

827 
	$ˇ£_›î™d
(
A
Ë::. {A = 0;
	}
}

829 %
ty≥
 
ex¥li°
 {
Ex¥Li°
*}

830 %
de°ru˘‹
 
ex¥li°
 {
sqlôe3Ex¥Li°Dñëe
(
$$
);}

831 %
ty≥
 
ex¥ôem
 {
Ex¥
*}

832 %
de°ru˘‹
 
ex¥ôem
 {
sqlôe3Ex¥Dñëe
(
$$
);}

834 
	$ex¥li°
(
A
Ë::
	$ex¥li°
(
X
Ë
COMMA
 
	`ex¥ôem
(
Y
).

835 {
A
 = 
	`sqlôe3Ex¥Li°Aµíd
(
X
,
Y
,0);
	}
}

836 
	$ex¥li°
(
A
Ë::
	`ex¥ôem
(
X
). {A = 
	`sqlôe3Ex¥Li°Aµíd
(0,X,0);
	}
}

837 
	$ex¥ôem
(
A
Ë::
	`ex¥
(
X
). {A = X;
	}
}

838 
	$ex¥ôem
(
A
Ë::. {A = 0;
	}
}

842 
cmd
 ::
	$CREATE
(
S
Ë
	$uniqueÊag
(
U
Ë
INDEX
 
	$i‚Ÿexi°s
(
NE
Ë
	$nm
(
X
Ë
	$dbnm
(
D
)

843 
ON
 
	$nm
(
Y
Ë
LP
 
	$idxli°
(
Z
Ë
	`RP
(
E
). {

844 
	`sqlôe3Cª©eIndex
(
pP¨£
, &
X
, &
D
, 
	`sqlôe3SrcLi°Aµíd
(0,&
Y
,0), 
Z
, 
U
,

845 &
S
, &
E
, 
SQLITE_SO_ASC
, 
NE
);

846 
	}
}

848 %
ty≥
 
uniqueÊag
 {}

849 
	$uniqueÊag
(
A
Ë::
UNIQUE
. {A = 
OE_Ab‹t
;
	}
}

850 
	$uniqueÊag
(
A
Ë::. {A = 
OE_N⁄e
;
	}
}

852 %
ty≥
 
idxli°
 {
Ex¥Li°
*}

853 %
de°ru˘‹
 
idxli°
 {
sqlôe3Ex¥Li°Dñëe
(
$$
);}

854 %
ty≥
 
idxli°_›t
 {
Ex¥Li°
*}

855 %
de°ru˘‹
 
idxli°_›t
 {
sqlôe3Ex¥Li°Dñëe
(
$$
);}

856 %
ty≥
 
idxôem
 {
Tokí
}

858 
	$idxli°_›t
(
A
Ë::. {A = 0;
	}
}

859 
	$idxli°_›t
(
A
Ë::
LP
 
	$idxli°
(
X
Ë
RP
. {
A
 = X;
	}
}

860 
	$idxli°
(
A
Ë::
	$idxli°
(
X
Ë
COMMA
 
	$idxôem
(
Y
Ë
	$cﬁœã
(
C
Ë
	`s‹t‹dî
(
Z
). {

861 
Ex¥
 *
p
 = 0;

862 if–
C
.
n
>0 ){

863 
p
 = 
	`sqlôe3Ex¥
(
TK_COLUMN
, 0, 0, 0);

864 if–
p
 )Ö->
pCﬁl
 = 
	`sqlôe3LoˇãCﬁlSeq
(
pP¨£
, (*)
C
.
z
, C.
n
);

866 
A
 = 
	`sqlôe3Ex¥Li°Aµíd
(
X
, 
p
, &
Y
);

867 if–
A
 ) A->
a
[A->
nEx¥
-1].
s‹tOrdî
 = 
Z
;

868 
	}
}

869 
	$idxli°
(
A
Ë::
	$idxôem
(
Y
Ë
	$cﬁœã
(
C
Ë
	`s‹t‹dî
(
Z
). {

870 
Ex¥
 *
p
 = 0;

871 if–
C
.
n
>0 ){

872 
p
 = 
	`sqlôe3Ex¥
(
TK_COLUMN
, 0, 0, 0);

873 if–
p
 )Ö->
pCﬁl
 = 
	`sqlôe3LoˇãCﬁlSeq
(
pP¨£
, (*)
C
.
z
, C.
n
);

875 
A
 = 
	`sqlôe3Ex¥Li°Aµíd
(0, 
p
, &
Y
);

876 if–
A
 ) A->
a
[A->
nEx¥
-1].
s‹tOrdî
 = 
Z
;

877 
	}
}

878 
	$idxôem
(
A
Ë::
	`nm
(
X
). {A = X;
	}
}

883 
cmd
 ::
DROP
 
INDEX
 
	$i„xi°s
(
E
Ë
	`fuŒ«me
(
X
). {
	`sqlôe3Dr›Index
(
pP¨£
, X, E);
	}
}

887 
cmd
 ::
VACUUM
. {
sqlôe3Vacuum
(
pP¨£
,0);}

888 
cmd
 ::
VACUUM
 
nm
. {
sqlôe3Vacuum
(
pP¨£
,0);}

892 %
i‚def
 
SQLITE_OMIT_PRAGMA


893 
cmd
 ::
PRAGMA
 
	$nm
(
X
Ë
	$dbnm
(
Z
Ë
EQ
 
	`nm
(
Y
). {
	`sqlôe3Pøgma
(
pP¨£
,&
X
,&Z,&Y,0);
	}
}

894 
cmd
 ::
PRAGMA
 
	$nm
(
X
Ë
	$dbnm
(
Z
Ë
EQ
 
	`ON
(
Y
). {
	`sqlôe3Pøgma
(
pP¨£
,&
X
,&Z,&Y,0);
	}
}

895 
cmd
 ::
PRAGMA
 
	$nm
(
X
Ë
	$dbnm
(
Z
Ë
EQ
 
	`∂us_num
(
Y
). {
	`sqlôe3Pøgma
(
pP¨£
,&
X
,&Z,&Y,0);
	}
}

896 
cmd
 ::
PRAGMA
 
	$nm
(
X
Ë
	$dbnm
(
Z
Ë
EQ
 
	`möus_num
(
Y
). {

897 
	`sqlôe3Pøgma
(
pP¨£
,&
X
,&
Z
,&
Y
,1);

898 
	}
}

899 
cmd
 ::
PRAGMA
 
	$nm
(
X
Ë
	$dbnm
(
Z
Ë
LP
 
	$nm
(
Y
Ë
RP
. {
	`sqlôe3Pøgma
(
pP¨£
,&
X
,&
Z
,&Y,0);
	}
}

900 
cmd
 ::
PRAGMA
 
	$nm
(
X
Ë
	`dbnm
(
Z
). {
	`sqlôe3Pøgma
(
pP¨£
,&X,&Z,0,0);
	}
}

901 %
ídif


902 
	$∂us_num
(
A
Ë::
∂us_›t
 
	`numbî
(
X
). {A = X;
	}
}

903 
	$möus_num
(
A
Ë::
MINUS
 
	`numbî
(
X
). {A = X;
	}
}

904 
	$numbî
(
A
Ë::
INTEGER
|
	`FLOAT
(
X
). {A = X;
	}
}

905 
∂us_›t
 ::
PLUS
.

906 
∂us_›t
 ::= .

910 %
i‚def
 
SQLITE_OMIT_TRIGGER


912 
cmd
 ::
CREATE
 
	$åiggî_de˛
(
A
Ë
BEGIN
 
	$åiggî_cmd_li°
(
S
Ë
	`END
(
Z
). {

913 
Tokí
 
Æl
;

914 
Æl
.
z
 = 
A
.z;

915 
Æl
.
n
 = (
Z
.
z
 - 
A
.z) + Z.n;

916 
	`sqlôe3FöishTriggî
(
pP¨£
, 
S
, &
Æl
);

917 
	}
}

919 
	$åiggî_de˛
(
A
Ë::
	$ãmp
(
T
Ë
TRIGGER
 
	$nm
(
B
Ë
	$dbnm
(
Z
Ë
	$åiggî_time
(
C
)

920 
	$åiggî_evít
(
D
)

921 
ON
 
	$fuŒ«me
(
E
Ë
	$f‹óch_˛au£
(
F
Ë
	`whí_˛au£
(
G
). {

922 
	`sqlôe3BegöTriggî
(
pP¨£
, &
B
, &
Z
, 
C
, 
D
.
a
, D.
b
, 
E
, 
F
, 
G
, 
T
);

923 
A
 = (
Z
.
n
==0?
B
:Z);

924 
	}
}

926 %
ty≥
 
åiggî_time
 {}

927 
	$åiggî_time
(
A
Ë::
BEFORE
. { A = 
TK_BEFORE
; 
	}
}

928 
	$åiggî_time
(
A
Ë::
AFTER
. { A = 
TK_AFTER
; 
	}
}

929 
	$åiggî_time
(
A
Ë::
INSTEAD
 
OF
. { A = 
TK_INSTEAD
;
	}
}

930 
	$åiggî_time
(
A
Ë::. { A = 
TK_BEFORE
; 
	}
}

932 %
ty≥
 
åiggî_evít
 {
TrigEvít
}

933 %
de°ru˘‹
 
åiggî_evít
 {
sqlôe3IdLi°Dñëe
(
$$
.
b
);}

934 
	$åiggî_evít
(
A
Ë::
DELETE
|
	`INSERT
(
OP
). {A.
a
 = @OP; A.
b
 = 0;
	}
}

935 
	$åiggî_evít
(
A
Ë::
	`UPDATE
(
OP
). {A.
a
 = @OP; A.
b
 = 0;
	}
}

936 
	$åiggî_evít
(
A
Ë::
UPDATE
 
OF
 
	`öscﬁli°
(
X
). {A.
a
 = 
TK_UPDATE
; A.
b
 = X;
	}
}

938 %
ty≥
 
f‹óch_˛au£
 {}

939 
	$f‹óch_˛au£
(
A
Ë::. { A = 
TK_ROW
; 
	}
}

940 
	$f‹óch_˛au£
(
A
Ë::
FOR
 
EACH
 
ROW
. { A = 
TK_ROW
; 
	}
}

941 
	$f‹óch_˛au£
(
A
Ë::
FOR
 
EACH
 
STATEMENT
. { A = 
TK_STATEMENT
; 
	}
}

943 %
ty≥
 
whí_˛au£
 {
Ex¥
*}

944 %
de°ru˘‹
 
whí_˛au£
 {
sqlôe3Ex¥Dñëe
(
$$
);}

945 
	$whí_˛au£
(
A
Ë::. { A = 0; 
	}
}

946 
	$whí_˛au£
(
A
Ë::
WHEN
 
	`ex¥
(
X
). { A = X; 
	}
}

948 %
ty≥
 
åiggî_cmd_li°
 {
TriggîSãp
*}

949 %
de°ru˘‹
 
åiggî_cmd_li°
 {
sqlôe3DñëeTriggîSãp
(
$$
);}

950 
	$åiggî_cmd_li°
(
A
Ë::
	$åiggî_cmd
(
X
Ë
SEMI
 
	`åiggî_cmd_li°
(
Y
). {

951 
X
->
pNext
 = 
Y
;

952 
A
 = 
X
;

953 
	}
}

954 
	$åiggî_cmd_li°
(
A
Ë::. { A = 0; 
	}
}

956 %
ty≥
 
åiggî_cmd
 {
TriggîSãp
*}

957 %
de°ru˘‹
 
åiggî_cmd
 {
sqlôe3DñëeTriggîSãp
(
$$
);}

959 
	$åiggî_cmd
(
A
Ë::
UPDATE
 
	$‹c⁄f
(
R
Ë
	$nm
(
X
Ë
SET
 
	$£éi°
(
Y
Ë
	`whîe_›t
(
Z
).

960 { 
A
 = 
	`sqlôe3TriggîUpd©eSãp
(&
X
, 
Y
, 
Z
, 
R
); 
	}
}

963 
	$åiggî_cmd
(
A
Ë::
	$ö£π_cmd
(
R
Ë
INTO
 
	$nm
(
X
Ë
	$öscﬁli°_›t
(
F
)

964 
VALUES
 
LP
 
	$ôemli°
(
Y
Ë
RP
.

965 {
A
 = 
	`sqlôe3TriggîIn£πSãp
(&
X
, 
F
, 
Y
, 0, 
R
);
	}
}

967 
	$åiggî_cmd
(
A
Ë::
	$ö£π_cmd
(
R
Ë
INTO
 
	$nm
(
X
Ë
	$öscﬁli°_›t
(
F
Ë
	`£À˘
(
S
).

968 {
A
 = 
	`sqlôe3TriggîIn£πSãp
(&
X
, 
F
, 0, 
S
, 
R
);
	}
}

971 
	$åiggî_cmd
(
A
Ë::
DELETE
 
FROM
 
	$nm
(
X
Ë
	`whîe_›t
(
Y
).

972 {
A
 = 
	`sqlôe3TriggîDñëeSãp
(&
X
, 
Y
);
	}
}

975 
	$åiggî_cmd
(
A
Ë::
	`£À˘
(
X
). {A = 
	`sqlôe3TriggîSñe˘Sãp
(X); 
	}
}

978 
	$ex¥
(
A
Ë::
	$RAISE
(
X
Ë
LP
 
IGNORE
 
	`RP
(
Y
). {

979 
A
 = 
	`sqlôe3Ex¥
(
TK_RAISE
, 0, 0, 0);

980 
A
->
iCﬁumn
 = 
OE_Ign‹e
;

981 
	`sqlôe3Ex¥S∑n
(
A
, &
X
, &
Y
);

982 
	}
}

983 
	$ex¥
(
A
Ë::
	$RAISE
(
X
Ë
LP
 
	$øi£ty≥
(
T
Ë
COMMA
 
	$nm
(
Z
Ë
	`RP
(
Y
). {

984 
A
 = 
	`sqlôe3Ex¥
(
TK_RAISE
, 0, 0, &
Z
);

985 
A
->
iCﬁumn
 = 
T
;

986 
	`sqlôe3Ex¥S∑n
(
A
, &
X
, &
Y
);

987 
	}
}

988 %
ídif


990 %
ty≥
 
øi£ty≥
 {}

991 
	$øi£ty≥
(
A
Ë::
ROLLBACK
. {A = 
OE_Rﬁlback
;
	}
}

992 
	$øi£ty≥
(
A
Ë::
ABORT
. {A = 
OE_Ab‹t
;
	}
}

993 
	$øi£ty≥
(
A
Ë::
FAIL
. {A = 
OE_Faû
;
	}
}

997 %
i‚def
 
SQLITE_OMIT_TRIGGER


998 
cmd
 ::
DROP
 
TRIGGER
 
fuŒ«me
(
X
). {

999 
sqlôe3Dr›Triggî
(
pP¨£
,
X
);

1001 %
ídif


1004 
cmd
 ::
ATTACH
 
d©aba£_kw_›t
 
	$ex¥
(
F
Ë
AS
 
	$ex¥
(
D
Ë
	`key_›t
(
K
). {

1005 
	`sqlôe3Aâach
(
pP¨£
, 
F
, 
D
, 
K
);

1006 
	}
}

1007 %
ty≥
 
key_›t
 {
Ex¥
 *}

1008 %
de°ru˘‹
 
key_›t
 {
sqlôe3Ex¥Dñëe
(
$$
);}

1009 
	$key_›t
(
A
Ë::. { A = 0; 
	}
}

1010 
	$key_›t
(
A
Ë::
KEY
 
	`ex¥
(
X
). { A = X; 
	}
}

1012 
d©aba£_kw_›t
 ::
DATABASE
.

1013 
d©aba£_kw_›t
 ::= .

1016 
cmd
 ::
DETACH
 
d©aba£_kw_›t
 
ex¥
(
D
). {

1017 
sqlôe3Dëach
(
pP¨£
, 
D
);

1021 %
i‚def
 
SQLITE_OMIT_REINDEX


1022 
cmd
 ::
REINDEX
. {
sqlôe3Reödex
(
pP¨£
, 0, 0);}

1023 
cmd
 ::
REINDEX
 
	$nm
(
X
Ë
	`dbnm
(
Y
). {
	`sqlôe3Reödex
(
pP¨£
, &X, &Y);
	}
}

1024 %
ídif


1027 %
i‚def
 
SQLITE_OMIT_ANALYZE


1028 
cmd
 ::
ANALYZE
. {
sqlôe3A«lyze
(
pP¨£
, 0, 0);}

1029 
cmd
 ::
ANALYZE
 
	$nm
(
X
Ë
	`dbnm
(
Y
). {
	`sqlôe3A«lyze
(
pP¨£
, &X, &Y);
	}
}

1030 %
ídif


1033 %
i‚def
 
SQLITE_OMIT_ALTERTABLE


1034 
cmd
 ::
ALTER
 
TABLE
 
	$fuŒ«me
(
X
Ë
RENAME
 
TO
 
	`nm
(
Z
). {

1035 
	`sqlôe3A…îRíameTabÀ
(
pP¨£
,
X
,&
Z
);

1036 
	}
}

1037 
cmd
 ::
ALTER
 
TABLE
 
add_cﬁumn_fuŒ«me
 
ADD
 
kwcﬁumn_›t
 
cﬁumn
(
Y
). {

1038 
sqlôe3A…îFöishAddCﬁumn
(
pP¨£
, &
Y
);

1040 
add_cﬁumn_fuŒ«me
 ::
fuŒ«me
(
X
). {

1041 
sqlôe3A…îBegöAddCﬁumn
(
pP¨£
, 
X
);

1043 
kwcﬁumn_›t
 ::= .

1044 
kwcﬁumn_›t
 ::
COLUMNKW
.

1045 %
ídif


	@pragma.c

16 
	~"sqlôeI¡.h
"

17 
	~"os.h
"

18 
	~<˘y≥.h
>

22 #i‡!
deföed
(
SQLITE_OMIT_PRAGMA
Ë&& !deföed(
SQLITE_OMIT_PARSER
)

24 #i‡
deföed
(
SQLITE_DEBUG
Ë|| deföed(
SQLITE_TEST
)

25 
	~"∑gî.h
"

26 
	~"båì.h
"

39 
	$gëSa„tyLevñ
(c⁄° *
z
){

41 c⁄° 
zText
[] = "onoffalseyestruefull";

42 c⁄° 
u8
 
iOff£t
[] = {0, 1, 2, 4, 9, 12, 16};

43 c⁄° 
u8
 
iLígth
[] = {2, 2, 3, 5, 3, 4, 4};

44 c⁄° 
u8
 
iVÆue
[] = {1, 0, 0, 0, 1, 1, 2};

45 
i
, 
n
;

46 if–
	`isdigô
(*
z
) ){

47  
	`©oi
(
z
);

49 
n
 = 
	`°æí
(
z
);

50 
i
=0; i<(
iLígth
); i++){

51 if–
iLígth
[
i
]==
n
 && 
	`sqlôe3SåNICmp
(&
zText
[
iOff£t
[i]],
z
,n)==0 ){

52  
iVÆue
[
i
];

56 
	}
}

61 
	$gëBoﬁón
(c⁄° *
z
){

62  
	`gëSa„tyLevñ
(
z
)&1;

63 
	}
}

65 #i‚de‡
SQLITE_OMIT_PAGER_PRAGMAS


71 
	$gëTempSt‹e
(c⁄° *
z
){

72 if–
z
[0]>='0' && z[0]<='2' ){

73  
z
[0] - '0';

74 }if–
	`sqlôe3SåICmp
(
z
, "file")==0 ){

76 }if–
	`sqlôe3SåICmp
(
z
, "memory")==0 ){

81 
	}
}

84 #i‚de‡
SQLITE_OMIT_PAGER_PRAGMAS


89 
	$övÆid©eTempSt‹age
(
P¨£
 *
pP¨£
){

90 
sqlôe3
 *
db
 = 
pP¨£
->db;

91 if–
db
->
aDb
[1].
pBt
!=0 ){

92 if–
db
->
Êags
 & 
SQLITE_InTøns
 ){

93 
	`sqlôe3Eº‹Msg
(
pP¨£
, "temporary storage cannot be changed "

95  
SQLITE_ERROR
;

97 
	`sqlôe3BåìClo£
(
db
->
aDb
[1].
pBt
);

98 
db
->
aDb
[1].
pBt
 = 0;

99 
	`sqlôe3Re£tI¡î«lSchema
(
db
, 0);

101  
SQLITE_OK
;

102 
	}
}

105 #i‚de‡
SQLITE_OMIT_PAGER_PRAGMAS


111 
	$ch™geTempSt‹age
(
P¨£
 *
pP¨£
, c⁄° *
zSt‹ageTy≥
){

112 
ts
 = 
	`gëTempSt‹e
(
zSt‹ageTy≥
);

113 
sqlôe3
 *
db
 = 
pP¨£
->db;

114 if–
db
->
ãmp_°‹e
==
ts
 )  
SQLITE_OK
;

115 if–
	`övÆid©eTempSt‹age
–
pP¨£
 ) !
SQLITE_OK
 ){

116  
SQLITE_ERROR
;

118 
db
->
ãmp_°‹e
 = 
ts
;

119  
SQLITE_OK
;

120 
	}
}

126 
	$ªtu∫SögÀI¡
(
P¨£
 *
pP¨£
, c⁄° *
zLabñ
, 
vÆue
){

127 
Vdbe
 *
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

128 
	`sqlôe3VdbeAddOp
(
v
, 
OP_I¡egî
, 
vÆue
, 0);

129 if–
pP¨£
->
ex∂aö
==0 ){

130 
	`sqlôe3VdbeSëNumCﬁs
(
v
, 1);

131 
	`sqlôe3VdbeSëCﬁName
(
v
, 0, 
zLabñ
, 
P3_STATIC
);

133 
	`sqlôe3VdbeAddOp
(
v
, 
OP_CÆlback
, 1, 0);

134 
	}
}

136 #i‚de‡
SQLITE_OMIT_FLAG_PRAGMAS


142 
	$ÊagPøgma
(
P¨£
 *
pP¨£
, c⁄° *
zLe·
, c⁄° *
zRight
){

143 c⁄° 
	ssPøgmaTy≥
 {

144 c⁄° *
zName
;

145 
mask
;

146 } 
aPøgma
[] = {

147 { "vdbe_åa˚", 
SQLITE_VdbeTø˚
 },

148 { "sql_åa˚", 
SQLITE_SqlTø˚
 },

149 { "vdbe_li°ög", 
SQLITE_VdbeLi°ög
 },

150 { "fuŒ_cﬁumn_«mes", 
SQLITE_FuŒCﬁNames
 },

151 { "sh‹t_cﬁumn_«mes", 
SQLITE_Sh‹tCﬁNames
 },

152 { "cou¡_ch™ges", 
SQLITE_Cou¡Rows
 },

153 { "em±y_ªsu…_ˇŒbacks", 
SQLITE_NuŒCÆlback
 },

154 { "Àgacy_fûe_f‹m©", 
SQLITE_LegacyFûeFmt
 },

155 #i‚de‡
SQLITE_OMIT_CHECK


156 { "ign‹e_check_c⁄°øöts", 
SQLITE_Ign‹eChecks
 },

159 { "wrôabÀ_schema", 
SQLITE_WrôeSchema
 },

160 { "omô_ªadlock", 
SQLITE_NoRódlock
 },

164 { "ªad_uncommôãd", 
SQLITE_RódUncommôãd
 },

166 
i
;

167 c⁄° 
sPøgmaTy≥
 *
p
;

168 
i
=0, 
p
=
aPøgma
; i<(aPragma)/(aPragma[0]); i++,Ö++){

169 if–
	`sqlôe3SåICmp
(
zLe·
, 
p
->
zName
)==0 ){

170 
sqlôe3
 *
db
 = 
pP¨£
->db;

171 
Vdbe
 *
v
;

172 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

173 if–
v
 ){

174 if–
zRight
==0 ){

175 
	`ªtu∫SögÀI¡
(
pP¨£
, 
p
->
zName
, (
db
->
Êags
 &Ö->
mask
)!=0 );

177 if–
	`gëBoﬁón
(
zRight
) ){

178 
db
->
Êags
 |
p
->
mask
;

180 
db
->
Êags
 &~
p
->
mask
;

186 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Expúe
, 0, 0);

192 
	}
}

210 
	$sqlôe3Pøgma
(

211 
P¨£
 *
pP¨£
,

212 
Tokí
 *
pId1
,

213 
Tokí
 *
pId2
,

214 
Tokí
 *
pVÆue
,

215 
möusFœg


217 *
zLe·
 = 0;

218 *
zRight
 = 0;

219 c⁄° *
zDb
 = 0;

220 
Tokí
 *
pId
;

221 
iDb
;

222 
sqlôe3
 *
db
 = 
pP¨£
->db;

223 
Db
 *
pDb
;

224 
Vdbe
 *
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

225 if–
v
==0 ) ;

229 
iDb
 = 
	`sqlôe3TwoP¨tName
(
pP¨£
, 
pId1
, 
pId2
, &
pId
);

230 if–
iDb
<0 ) ;

231 
pDb
 = &
db
->
aDb
[
iDb
];

233 
zLe·
 = 
	`sqlôe3NameFromTokí
(
pId
);

234 if–!
zLe·
 ) ;

235 if–
möusFœg
 ){

236 
zRight
 = 
	`sqlôe3MPrötf
("-%T", 
pVÆue
);

238 
zRight
 = 
	`sqlôe3NameFromTokí
(
pVÆue
);

241 
zDb
 = ((
iDb
>0)?
pDb
->
zName
:0);

242 if–
	`sqlôe3AuthCheck
(
pP¨£
, 
SQLITE_PRAGMA
, 
zLe·
, 
zRight
, 
zDb
) ){

243 
¥agma_out
;

246 #i‚de‡
SQLITE_OMIT_PAGER_PRAGMAS


263 if–
	`sqlôe3SåICmp
(
zLe·
,"default_cache_size")==0 ){

264 c⁄° 
VdbeOpLi°
 
gëCacheSize
[] = {

265 { 
OP_RódCookõ
, 0, 2, 0},

266 { 
OP_AbsVÆue
, 0, 0, 0},

267 { 
OP_Dup
, 0, 0, 0},

268 { 
OP_I¡egî
, 0, 0, 0},

269 { 
OP_Ne
, 0, 6, 0},

270 { 
OP_I¡egî
, 0, 0, 0},

271 { 
OP_CÆlback
, 1, 0, 0},

273 
addr
;

274 if–
	`sqlôe3RódSchema
(
pP¨£
ËË
¥agma_out
;

275 if–!
zRight
 ){

276 
	`sqlôe3VdbeSëNumCﬁs
(
v
, 1);

277 
	`sqlôe3VdbeSëCﬁName
(
v
, 0, "ˇche_size", 
P3_STATIC
);

278 
addr
 = 
	`sqlôe3VdbeAddOpLi°
(
v
, 
	`AºaySize
(
gëCacheSize
), getCacheSize);

279 
	`sqlôe3VdbeCh™geP1
(
v
, 
addr
, 
iDb
);

280 
	`sqlôe3VdbeCh™geP1
(
v
, 
addr
+5, 
MAX_PAGES
);

282 
size
 = 
	`©oi
(
zRight
);

283 if–
size
<0 ) size = -size;

284 
	`sqlôe3BegöWrôeO≥øti⁄
(
pP¨£
, 0, 
iDb
);

285 
	`sqlôe3VdbeAddOp
(
v
, 
OP_I¡egî
, 
size
, 0);

286 
	`sqlôe3VdbeAddOp
(
v
, 
OP_RódCookõ
, 
iDb
, 2);

287 
addr
 = 
	`sqlôe3VdbeAddOp
(
v
, 
OP_I¡egî
, 0, 0);

288 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Ge
, 0, 
addr
+3);

289 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Neg©ive
, 0, 0);

290 
	`sqlôe3VdbeAddOp
(
v
, 
OP_SëCookõ
, 
iDb
, 2);

291 
pDb
->
pSchema
->
ˇche_size
 = 
size
;

292 
	`sqlôe3BåìSëCacheSize
(
pDb
->
pBt
,ÖDb->
pSchema
->
ˇche_size
);

305 if–
	`sqlôe3SåICmp
(
zLe·
,"page_size")==0 ){

306 
Båì
 *
pBt
 = 
pDb
->pBt;

307 if–!
zRight
 ){

308 
size
 = 
pBt
 ? 
	`sqlôe3BåìGëPageSize
(pBt) : 0;

309 
	`ªtu∫SögÀI¡
(
pP¨£
, "∑ge_size", 
size
);

311 
	`sqlôe3BåìSëPageSize
(
pBt
, 
	`©oi
(
zRight
), -1);

322 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


323 if–
	`sqlôe3SåICmp
(
zLe·
,"auto_vacuum")==0 ){

324 
Båì
 *
pBt
 = 
pDb
->pBt;

325 if–!
zRight
 ){

326 
auto_vacuum
 =

327 
pBt
 ? 
	`sqlôe3BåìGëAutoVacuum
’BtË: 
SQLITE_DEFAULT_AUTOVACUUM
;

328 
	`ªtu∫SögÀI¡
(
pP¨£
, "auto_vacuum", 
auto_vacuum
);

330 
	`sqlôe3BåìSëAutoVacuum
(
pBt
, 
	`gëBoﬁón
(
zRight
));

335 #i‚de‡
SQLITE_OMIT_PAGER_PRAGMAS


350 if–
	`sqlôe3SåICmp
(
zLe·
,"cache_size")==0 ){

351 if–
	`sqlôe3RódSchema
(
pP¨£
ËË
¥agma_out
;

352 if–!
zRight
 ){

353 
	`ªtu∫SögÀI¡
(
pP¨£
, "ˇche_size", 
pDb
->
pSchema
->
ˇche_size
);

355 
size
 = 
	`©oi
(
zRight
);

356 if–
size
<0 ) size = -size;

357 
pDb
->
pSchema
->
ˇche_size
 = 
size
;

358 
	`sqlôe3BåìSëCacheSize
(
pDb
->
pBt
,ÖDb->
pSchema
->
ˇche_size
);

373 if–
	`sqlôe3SåICmp
(
zLe·
, "temp_store")==0 ){

374 if–!
zRight
 ){

375 
	`ªtu∫SögÀI¡
(
pP¨£
, "ãmp_°‹e", 
db
->
ãmp_°‹e
);

377 
	`ch™geTempSt‹age
(
pP¨£
, 
zRight
);

391 if–
	`sqlôe3SåICmp
(
zLe·
, "temp_store_directory")==0 ){

392 if–!
zRight
 ){

393 if–
sqlôe3_ãmp_dúe˘‹y
 ){

394 
	`sqlôe3VdbeSëNumCﬁs
(
v
, 1);

395 
	`sqlôe3VdbeSëCﬁName
(
v
, 0, "ãmp_°‹e_dúe˘‹y", 
P3_STATIC
);

396 
	`sqlôe3VdbeOp3
(
v
, 
OP_Såög8
, 0, 0, 
sqlôe3_ãmp_dúe˘‹y
, 0);

397 
	`sqlôe3VdbeAddOp
(
v
, 
OP_CÆlback
, 1, 0);

400 if–
zRight
[0] && !
	`sqlôe3OsIsDúWrôabÀ
(zRight) ){

401 
	`sqlôe3Eº‹Msg
(
pP¨£
, "notá writable directory");

402 
¥agma_out
;

404 if–
TEMP_STORE
==0

405 || (
TEMP_STORE
==1 && 
db
->
ãmp_°‹e
<=1)

406 || (
TEMP_STORE
==2 && 
db
->
ãmp_°‹e
==1)

408 
	`övÆid©eTempSt‹age
(
pP¨£
);

410 
	`sqlôeFªe
(
sqlôe3_ãmp_dúe˘‹y
);

411 if–
zRight
[0] ){

412 
sqlôe3_ãmp_dúe˘‹y
 = 
zRight
;

413 
zRight
 = 0;

415 
sqlôe3_ãmp_dúe˘‹y
 = 0;

429 if–
	`sqlôe3SåICmp
(
zLe·
,"synchronous")==0 ){

430 if–
	`sqlôe3RódSchema
(
pP¨£
ËË
¥agma_out
;

431 if–!
zRight
 ){

432 
	`ªtu∫SögÀI¡
(
pP¨£
, "synchr⁄ous", 
pDb
->
ß„ty_Àvñ
-1);

434 if–!
db
->
autoCommô
 ){

435 
	`sqlôe3Eº‹Msg
(
pP¨£
,

438 
pDb
->
ß„ty_Àvñ
 = 
	`gëSa„tyLevñ
(
zRight
)+1;

439 
	`sqlôe3BåìSëSa„tyLevñ
(
pDb
->
pBt
,ÖDb->
ß„ty_Àvñ
);

445 #i‚de‡
SQLITE_OMIT_FLAG_PRAGMAS


446 if–
	`ÊagPøgma
(
pP¨£
, 
zLe·
, 
zRight
) ){

452 #i‚de‡
SQLITE_OMIT_SCHEMA_PRAGMAS


465 if–
	`sqlôe3SåICmp
(
zLe·
, "èbÀ_öfo")==0 && 
zRight
 ){

466 
TabÀ
 *
pTab
;

467 if–
	`sqlôe3RódSchema
(
pP¨£
ËË
¥agma_out
;

468 
pTab
 = 
	`sqlôe3FödTabÀ
(
db
, 
zRight
, 
zDb
);

469 if–
pTab
 ){

470 
i
;

471 
Cﬁumn
 *
pCﬁ
;

472 
	`sqlôe3VdbeSëNumCﬁs
(
v
, 6);

473 
	`sqlôe3VdbeSëCﬁName
(
v
, 0, "cid", 
P3_STATIC
);

474 
	`sqlôe3VdbeSëCﬁName
(
v
, 1, "«me", 
P3_STATIC
);

475 
	`sqlôe3VdbeSëCﬁName
(
v
, 2, "ty≥", 
P3_STATIC
);

476 
	`sqlôe3VdbeSëCﬁName
(
v
, 3, "nŸnuŒ", 
P3_STATIC
);

477 
	`sqlôe3VdbeSëCﬁName
(
v
, 4, "dÊt_vÆue", 
P3_STATIC
);

478 
	`sqlôe3VdbeSëCﬁName
(
v
, 5, "pk", 
P3_STATIC
);

479 
	`sqlôe3VõwGëCﬁumnNames
(
pP¨£
, 
pTab
);

480 
i
=0, 
pCﬁ
=
pTab
->
aCﬁ
; i<pTab->
nCﬁ
; i++,ÖCol++){

481 
	`sqlôe3VdbeAddOp
(
v
, 
OP_I¡egî
, 
i
, 0);

482 
	`sqlôe3VdbeOp3
(
v
, 
OP_Såög8
, 0, 0, 
pCﬁ
->
zName
, 0);

483 
	`sqlôe3VdbeOp3
(
v
, 
OP_Såög8
, 0, 0,

484 
pCﬁ
->
zTy≥
 ?ÖCol->zType : "numeric", 0);

485 
	`sqlôe3VdbeAddOp
(
v
, 
OP_I¡egî
, 
pCﬁ
->
nŸNuŒ
, 0);

486 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pCﬁ
->
pDÊt
);

487 
	`sqlôe3VdbeAddOp
(
v
, 
OP_I¡egî
, 
pCﬁ
->
isPrimKey
, 0);

488 
	`sqlôe3VdbeAddOp
(
v
, 
OP_CÆlback
, 6, 0);

493 if–
	`sqlôe3SåICmp
(
zLe·
, "ödex_öfo")==0 && 
zRight
 ){

494 
Index
 *
pIdx
;

495 
TabÀ
 *
pTab
;

496 if–
	`sqlôe3RódSchema
(
pP¨£
ËË
¥agma_out
;

497 
pIdx
 = 
	`sqlôe3FödIndex
(
db
, 
zRight
, 
zDb
);

498 if–
pIdx
 ){

499 
i
;

500 
pTab
 = 
pIdx
->
pTabÀ
;

501 
	`sqlôe3VdbeSëNumCﬁs
(
v
, 3);

502 
	`sqlôe3VdbeSëCﬁName
(
v
, 0, "£qno", 
P3_STATIC
);

503 
	`sqlôe3VdbeSëCﬁName
(
v
, 1, "cid", 
P3_STATIC
);

504 
	`sqlôe3VdbeSëCﬁName
(
v
, 2, "«me", 
P3_STATIC
);

505 
i
=0; i<
pIdx
->
nCﬁumn
; i++){

506 
˙um
 = 
pIdx
->
aiCﬁumn
[
i
];

507 
	`sqlôe3VdbeAddOp
(
v
, 
OP_I¡egî
, 
i
, 0);

508 
	`sqlôe3VdbeAddOp
(
v
, 
OP_I¡egî
, 
˙um
, 0);

509 
	`as£π
–
pTab
->
nCﬁ
>
˙um
 );

510 
	`sqlôe3VdbeOp3
(
v
, 
OP_Såög8
, 0, 0, 
pTab
->
aCﬁ
[
˙um
].
zName
, 0);

511 
	`sqlôe3VdbeAddOp
(
v
, 
OP_CÆlback
, 3, 0);

516 if–
	`sqlôe3SåICmp
(
zLe·
, "ödex_li°")==0 && 
zRight
 ){

517 
Index
 *
pIdx
;

518 
TabÀ
 *
pTab
;

519 if–
	`sqlôe3RódSchema
(
pP¨£
ËË
¥agma_out
;

520 
pTab
 = 
	`sqlôe3FödTabÀ
(
db
, 
zRight
, 
zDb
);

521 if–
pTab
 ){

522 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

523 
pIdx
 = 
pTab
->
pIndex
;

524 if–
pIdx
 ){

525 
i
 = 0;

526 
	`sqlôe3VdbeSëNumCﬁs
(
v
, 3);

527 
	`sqlôe3VdbeSëCﬁName
(
v
, 0, "£q", 
P3_STATIC
);

528 
	`sqlôe3VdbeSëCﬁName
(
v
, 1, "«me", 
P3_STATIC
);

529 
	`sqlôe3VdbeSëCﬁName
(
v
, 2, "unique", 
P3_STATIC
);

530 
pIdx
){

531 
	`sqlôe3VdbeAddOp
(
v
, 
OP_I¡egî
, 
i
, 0);

532 
	`sqlôe3VdbeOp3
(
v
, 
OP_Såög8
, 0, 0, 
pIdx
->
zName
, 0);

533 
	`sqlôe3VdbeAddOp
(
v
, 
OP_I¡egî
, 
pIdx
->
⁄Eº‹
!=
OE_N⁄e
, 0);

534 
	`sqlôe3VdbeAddOp
(
v
, 
OP_CÆlback
, 3, 0);

535 ++
i
;

536 
pIdx
 =ÖIdx->
pNext
;

542 if–
	`sqlôe3SåICmp
(
zLe·
, "database_list")==0 ){

543 
i
;

544 if–
	`sqlôe3RódSchema
(
pP¨£
ËË
¥agma_out
;

545 
	`sqlôe3VdbeSëNumCﬁs
(
v
, 3);

546 
	`sqlôe3VdbeSëCﬁName
(
v
, 0, "£q", 
P3_STATIC
);

547 
	`sqlôe3VdbeSëCﬁName
(
v
, 1, "«me", 
P3_STATIC
);

548 
	`sqlôe3VdbeSëCﬁName
(
v
, 2, "fûe", 
P3_STATIC
);

549 
i
=0; i<
db
->
nDb
; i++){

550 if–
db
->
aDb
[
i
].
pBt
==0 ) ;

551 
	`as£π
–
db
->
aDb
[
i
].
zName
!=0 );

552 
	`sqlôe3VdbeAddOp
(
v
, 
OP_I¡egî
, 
i
, 0);

553 
	`sqlôe3VdbeOp3
(
v
, 
OP_Såög8
, 0, 0, 
db
->
aDb
[
i
].
zName
, 0);

554 
	`sqlôe3VdbeOp3
(
v
, 
OP_Såög8
, 0, 0,

555 
	`sqlôe3BåìGëFûíame
(
db
->
aDb
[
i
].
pBt
), 0);

556 
	`sqlôe3VdbeAddOp
(
v
, 
OP_CÆlback
, 3, 0);

560 if–
	`sqlôe3SåICmp
(
zLe·
, "collation_list")==0 ){

561 
i
 = 0;

562 
HashEÀm
 *
p
;

563 
	`sqlôe3VdbeSëNumCﬁs
(
v
, 2);

564 
	`sqlôe3VdbeSëCﬁName
(
v
, 0, "£q", 
P3_STATIC
);

565 
	`sqlôe3VdbeSëCﬁName
(
v
, 1, "«me", 
P3_STATIC
);

566 
p
=
	`sqlôeHashFú°
(&
db
->
aCﬁlSeq
);Ö;Ö=
	`sqlôeHashNext
(p)){

567 
CﬁlSeq
 *
pCﬁl
 = (CﬁlSeq *)
	`sqlôeHashD©a
(
p
);

568 
	`sqlôe3VdbeAddOp
(
v
, 
OP_I¡egî
, 
i
++, 0);

569 
	`sqlôe3VdbeOp3
(
v
, 
OP_Såög8
, 0, 0, 
pCﬁl
->
zName
, 0);

570 
	`sqlôe3VdbeAddOp
(
v
, 
OP_CÆlback
, 2, 0);

575 #i‚de‡
SQLITE_OMIT_FOREIGN_KEY


576 if–
	`sqlôe3SåICmp
(
zLe·
, "f‹eign_key_li°")==0 && 
zRight
 ){

577 
FKey
 *
pFK
;

578 
TabÀ
 *
pTab
;

579 if–
	`sqlôe3RódSchema
(
pP¨£
ËË
¥agma_out
;

580 
pTab
 = 
	`sqlôe3FödTabÀ
(
db
, 
zRight
, 
zDb
);

581 if–
pTab
 ){

582 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

583 
pFK
 = 
pTab
->
pFKey
;

584 if–
pFK
 ){

585 
i
 = 0;

586 
	`sqlôe3VdbeSëNumCﬁs
(
v
, 5);

587 
	`sqlôe3VdbeSëCﬁName
(
v
, 0, "id", 
P3_STATIC
);

588 
	`sqlôe3VdbeSëCﬁName
(
v
, 1, "£q", 
P3_STATIC
);

589 
	`sqlôe3VdbeSëCﬁName
(
v
, 2, "èbÀ", 
P3_STATIC
);

590 
	`sqlôe3VdbeSëCﬁName
(
v
, 3, "‰om", 
P3_STATIC
);

591 
	`sqlôe3VdbeSëCﬁName
(
v
, 4, "to", 
P3_STATIC
);

592 
pFK
){

593 
j
;

594 
j
=0; j<
pFK
->
nCﬁ
; j++){

595 *
zCﬁ
 = 
pFK
->
aCﬁ
[
j
].zCol;

596 
	`sqlôe3VdbeAddOp
(
v
, 
OP_I¡egî
, 
i
, 0);

597 
	`sqlôe3VdbeAddOp
(
v
, 
OP_I¡egî
, 
j
, 0);

598 
	`sqlôe3VdbeOp3
(
v
, 
OP_Såög8
, 0, 0, 
pFK
->
zTo
, 0);

599 
	`sqlôe3VdbeOp3
(
v
, 
OP_Såög8
, 0, 0,

600 
pTab
->
aCﬁ
[
pFK
->aCﬁ[
j
].
iFrom
].
zName
, 0);

601 
	`sqlôe3VdbeOp3
(
v
, 
zCﬁ
 ? 
OP_Såög8
 : 
OP_NuŒ
, 0, 0, zCol, 0);

602 
	`sqlôe3VdbeAddOp
(
v
, 
OP_CÆlback
, 5, 0);

604 ++
i
;

605 
pFK
 =ÖFK->
pNextFrom
;

612 #i‚de‡
NDEBUG


613 if–
	`sqlôe3SåICmp
(
zLe·
, "parser_trace")==0 ){

614 
	`sqlôe3P¨£rTø˚
(
FILE
*, *);

615 if–
zRight
 ){

616 if–
	`gëBoﬁón
(
zRight
) ){

617 
	`sqlôe3P¨£rTø˚
(
°dîr
, "parser: ");

619 
	`sqlôe3P¨£rTø˚
(0, 0);

628 if–
	`sqlôe3SåICmp
(
zLe·
, "case_sensitive_like")==0 ){

629 if–
zRight
 ){

630 
	`sqlôe3Regi°îLikeFun˘i⁄s
(
db
, 
	`gëBoﬁón
(
zRight
));

634 #i‚de‡
SQLITE_OMIT_INTEGRITY_CHECK


635 if–
	`sqlôe3SåICmp
(
zLe·
, "integrity_check")==0 ){

636 
i
, 
j
, 
addr
;

642 c⁄° 
VdbeOpLi°
 
ídCode
[] = {

643 { 
OP_MemLﬂd
, 0, 0, 0},

644 { 
OP_I¡egî
, 0, 0, 0},

645 { 
OP_Ne
, 0, 0, 0},

646 { 
OP_Såög8
, 0, 0, "ok"},

647 { 
OP_CÆlback
, 1, 0, 0},

651 if–
	`sqlôe3RódSchema
(
pP¨£
ËË
¥agma_out
;

652 
	`sqlôe3VdbeSëNumCﬁs
(
v
, 1);

653 
	`sqlôe3VdbeSëCﬁName
(
v
, 0, "öãgrôy_check", 
P3_STATIC
);

654 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemI¡
, 0, 0);

657 
i
=0; i<
db
->
nDb
; i++){

658 
HashEÀm
 *
x
;

659 
Hash
 *
pTbls
;

660 
˙t
 = 0;

662 if–
OMIT_TEMPDB
 && 
i
==1 ) ;

664 
	`sqlôe3CodeVîifySchema
(
pP¨£
, 
i
);

668 
pTbls
 = &
db
->
aDb
[
i
].
pSchema
->
tblHash
;

669 
x
=
	`sqlôeHashFú°
(
pTbls
); x; x=
	`sqlôeHashNext
(x)){

670 
TabÀ
 *
pTab
 = 
	`sqlôeHashD©a
(
x
);

671 
Index
 *
pIdx
;

672 
	`sqlôe3VdbeAddOp
(
v
, 
OP_I¡egî
, 
pTab
->
äum
, 0);

673 
˙t
++;

674 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
){

675 
	`sqlôe3VdbeAddOp
(
v
, 
OP_I¡egî
, 
pIdx
->
äum
, 0);

676 
˙t
++;

679 
	`as£π
–
˙t
>0 );

680 
	`sqlôe3VdbeAddOp
(
v
, 
OP_I¡egrôyCk
, 
˙t
, 
i
);

681 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Dup
, 0, 1);

682 
addr
 = 
	`sqlôe3VdbeOp3
(
v
, 
OP_Såög8
, 0, 0, "ok", 
P3_STATIC
);

683 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Eq
, 0, 
addr
+7);

684 
	`sqlôe3VdbeOp3
(
v
, 
OP_Såög8
, 0, 0,

685 
	`sqlôe3MPrötf
("*** i¿d©aba£ %†***\n", 
db
->
aDb
[
i
].
zName
),

686 
P3_DYNAMIC
);

687 
	`sqlôe3VdbeAddOp
(
v
, 
OP_PuŒ
, 1, 0);

688 
	`sqlôe3VdbeAddOp
(
v
, 
OP_C⁄ˇt
, 0, 1);

689 
	`sqlôe3VdbeAddOp
(
v
, 
OP_CÆlback
, 1, 0);

690 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemIn¸
, 1, 0);

694 
	`sqlôe3CodeVîifySchema
(
pP¨£
, 
i
);

695 
x
=
	`sqlôeHashFú°
(
pTbls
); x; x=
	`sqlôeHashNext
(x)){

696 
TabÀ
 *
pTab
 = 
	`sqlôeHashD©a
(
x
);

697 
Index
 *
pIdx
;

698 
lo›T›
;

700 if–
pTab
->
pIndex
==0 ) ;

701 
	`sqlôe3O≥nTabÀAndIndi˚s
(
pP¨£
, 
pTab
, 1, 
OP_O≥nRód
);

702 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemI¡
, 0, 1);

703 
lo›T›
 = 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Rewöd
, 1, 0);

704 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemIn¸
, 1, 1);

705 
j
=0, 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
, j++){

706 
jmp2
;

707 c⁄° 
VdbeOpLi°
 
idxEº
[] = {

708 { 
OP_MemIn¸
, 1, 0, 0},

709 { 
OP_Såög8
, 0, 0, "rowid "},

710 { 
OP_Rowid
, 1, 0, 0},

711 { 
OP_Såög8
, 0, 0, " missing from index "},

712 { 
OP_Såög8
, 0, 0, 0},

713 { 
OP_C⁄ˇt
, 2, 0, 0},

714 { 
OP_CÆlback
, 1, 0, 0},

716 
	`sqlôe3Gíî©eIndexKey
(
v
, 
pIdx
, 1);

717 
jmp2
 = 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Found
, 
j
+2, 0);

718 
addr
 = 
	`sqlôe3VdbeAddOpLi°
(
v
, 
	`AºaySize
(
idxEº
), idxErr);

719 
	`sqlôe3VdbeCh™geP3
(
v
, 
addr
+4, 
pIdx
->
zName
, 
P3_STATIC
);

720 
	`sqlôe3VdbeJumpHîe
(
v
, 
jmp2
);

722 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Next
, 1, 
lo›T›
+1);

723 
	`sqlôe3VdbeJumpHîe
(
v
, 
lo›T›
);

724 
j
=0, 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
, j++){

725 c⁄° 
VdbeOpLi°
 
˙tIdx
[] = {

726 { 
OP_MemI¡
, 0, 2, 0},

727 { 
OP_Rewöd
, 0, 0, 0},

728 { 
OP_MemIn¸
, 1, 2, 0},

729 { 
OP_Next
, 0, 0, 0},

730 { 
OP_MemLﬂd
, 1, 0, 0},

731 { 
OP_MemLﬂd
, 2, 0, 0},

732 { 
OP_Eq
, 0, 0, 0},

733 { 
OP_MemIn¸
, 1, 0, 0},

734 { 
OP_Såög8
, 0, 0, "wrong # ofÉntries in index "},

735 { 
OP_Såög8
, 0, 0, 0},

736 { 
OP_C⁄ˇt
, 0, 0, 0},

737 { 
OP_CÆlback
, 1, 0, 0},

739 if–
pIdx
->
äum
==0 ) ;

740 
addr
 = 
	`sqlôe3VdbeAddOpLi°
(
v
, 
	`AºaySize
(
˙tIdx
), cntIdx);

741 
	`sqlôe3VdbeCh™geP1
(
v
, 
addr
+1, 
j
+2);

742 
	`sqlôe3VdbeCh™geP2
(
v
, 
addr
+1,áddr+4);

743 
	`sqlôe3VdbeCh™geP1
(
v
, 
addr
+3, 
j
+2);

744 
	`sqlôe3VdbeCh™geP2
(
v
, 
addr
+3,áddr+2);

745 
	`sqlôe3VdbeJumpHîe
(
v
, 
addr
+6);

746 
	`sqlôe3VdbeCh™geP3
(
v
, 
addr
+9, 
pIdx
->
zName
, 
P3_STATIC
);

750 
addr
 = 
	`sqlôe3VdbeAddOpLi°
(
v
, 
	`AºaySize
(
ídCode
),ÉndCode);

751 
	`sqlôe3VdbeJumpHîe
(
v
, 
addr
+2);

755 #i‚de‡
SQLITE_OMIT_UTF16


778 if–
	`sqlôe3SåICmp
(
zLe·
, "encoding")==0 ){

779 
	sEncName
 {

780 *
zName
;

781 
u8
 
íc
;

782 } 
í˙ames
[] = {

783 { "UTF-8", 
SQLITE_UTF8
 },

784 { "UTF8", 
SQLITE_UTF8
 },

785 { "UTF-16À", 
SQLITE_UTF16LE
 },

786 { "UTF16À", 
SQLITE_UTF16LE
 },

787 { "UTF-16be", 
SQLITE_UTF16BE
 },

788 { "UTF16be", 
SQLITE_UTF16BE
 },

793 
EncName
 *
pEnc
;

794 
í˙ames
[6].
íc
 =Én˙ames[7].í¯
SQLITE_UTF16NATIVE
;

795 if–!
zRight
 ){

796 if–
	`sqlôe3RódSchema
(
pP¨£
ËË
¥agma_out
;

797 
	`sqlôe3VdbeSëNumCﬁs
(
v
, 1);

798 
	`sqlôe3VdbeSëCﬁName
(
v
, 0, "ícodög", 
P3_STATIC
);

799 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Såög8
, 0, 0);

800 
pEnc
=&
í˙ames
[0];ÖEnc->
zName
;ÖEnc++){

801 if–
pEnc
->
íc
==
	`ENC
(
pP¨£
->
db
) ){

802 
	`sqlôe3VdbeCh™geP3
(
v
, -1, 
pEnc
->
zName
, 
P3_STATIC
);

806 
	`sqlôe3VdbeAddOp
(
v
, 
OP_CÆlback
, 1, 0);

814 !(
	`DbHasPr›îty
(
db
, 0, 
DB_SchemaLﬂded
)) ||

815 
	`DbHasPr›îty
(
db
, 0, 
DB_Em±y
)

817 
pEnc
=&
í˙ames
[0];ÖEnc->
zName
;ÖEnc++){

818 if–0==
	`sqlôe3SåICmp
(
zRight
, 
pEnc
->
zName
) ){

819 
	`ENC
(
pP¨£
->
db
Ë
pEnc
->
íc
;

823 if–!
pEnc
->
zName
 ){

824 
	`sqlôe3Eº‹Msg
(
pP¨£
, "unsuµ‹ãdÉncodög: %s", 
zRight
);

831 #i‚de‡
SQLITE_OMIT_SCHEMA_VERSION_PRAGMAS


857 if–
	`sqlôe3SåICmp
(
zLe·
, "schema_version")==0 ||

858 
	`sqlôe3SåICmp
(
zLe·
, "user_version")==0 ){

860 
iCookõ
;

861 if–
zLe·
[0]=='s' || zLeft[0]=='S' ){

862 
iCookõ
 = 0;

864 
iCookõ
 = 5;

867 if–
zRight
 ){

869 c⁄° 
VdbeOpLi°
 
£tCookõ
[] = {

870 { 
OP_Tønß˘i⁄
, 0, 1, 0},

871 { 
OP_I¡egî
, 0, 0, 0},

872 { 
OP_SëCookõ
, 0, 0, 0},

874 
addr
 = 
	`sqlôe3VdbeAddOpLi°
(
v
, 
	`AºaySize
(
£tCookõ
), setCookie);

875 
	`sqlôe3VdbeCh™geP1
(
v
, 
addr
, 
iDb
);

876 
	`sqlôe3VdbeCh™geP1
(
v
, 
addr
+1, 
	`©oi
(
zRight
));

877 
	`sqlôe3VdbeCh™geP1
(
v
, 
addr
+2, 
iDb
);

878 
	`sqlôe3VdbeCh™geP2
(
v
, 
addr
+2, 
iCookõ
);

881 c⁄° 
VdbeOpLi°
 
ªadCookõ
[] = {

882 { 
OP_RódCookõ
, 0, 0, 0},

883 { 
OP_CÆlback
, 1, 0, 0}

885 
addr
 = 
	`sqlôe3VdbeAddOpLi°
(
v
, 
	`AºaySize
(
ªadCookõ
),ÑeadCookie);

886 
	`sqlôe3VdbeCh™geP1
(
v
, 
addr
, 
iDb
);

887 
	`sqlôe3VdbeCh™geP2
(
v
, 
addr
, 
iCookõ
);

888 
	`sqlôe3VdbeSëNumCﬁs
(
v
, 1);

893 #i‡
	`deföed
(
SQLITE_DEBUG
Ë|| deföed(
SQLITE_TEST
)

897 if–
	`sqlôe3SåICmp
(
zLe·
, "lock_status")==0 ){

898 c⁄° *c⁄° 
azLockName
[] = {

901 
i
;

902 
Vdbe
 *
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

903 
	`sqlôe3VdbeSëNumCﬁs
(
v
, 2);

904 
	`sqlôe3VdbeSëCﬁName
(
v
, 0, "d©aba£", 
P3_STATIC
);

905 
	`sqlôe3VdbeSëCﬁName
(
v
, 1, "°©us", 
P3_STATIC
);

906 
i
=0; i<
db
->
nDb
; i++){

907 
Båì
 *
pBt
;

908 
Pagî
 *
pPagî
;

909 if–
db
->
aDb
[
i
].
zName
==0 ) ;

910 
	`sqlôe3VdbeOp3
(
v
, 
OP_Såög8
, 0, 0, 
db
->
aDb
[
i
].
zName
, 
P3_STATIC
);

911 
pBt
 = 
db
->
aDb
[
i
].pBt;

912 if–
pBt
==0 || (
pPagî
 = 
	`sqlôe3BåìPagî
(pBt))==0 ){

913 
	`sqlôe3VdbeOp3
(
v
, 
OP_Såög8
, 0, 0, "˛o£d", 
P3_STATIC
);

915 
j
 = 
	`sqlôe3∑gî_lock°©e
(
pPagî
);

916 
	`sqlôe3VdbeOp3
(
v
, 
OP_Såög8
, 0, 0,

917 (
j
>=0 && j<=4Ë? 
azLockName
[j] : "unknown", 
P3_STATIC
);

919 
	`sqlôe3VdbeAddOp
(
v
, 
OP_CÆlback
, 2, 0);

924 #ifde‡
SQLITE_SSE


929 if–
	`sqlôe3SåICmp
(
zLe·
, "create_sqlite_statement_table")==0 ){

930 
	`sqlôe3Cª©eSèãmítsTabÀ
(
P¨£
*);

931 
	`sqlôe3Cª©eSèãmítsTabÀ
(
pP¨£
);

935 #i‡
SQLITE_HAS_CODEC


936 if–
	`sqlôe3SåICmp
(
zLe·
, "key")==0 ){

937 
	`sqlôe3_key
(
db
, 
zRight
, 
	`°æí
(zRight));

943 if–
v
 ){

948 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Expúe
, 1, 0);

950 
¥agma_out
:

951 
	`sqlôeFªe
(
zLe·
);

952 
	`sqlôeFªe
(
zRight
);

953 
	}
}

	@prepare.c

18 
	~"sqlôeI¡.h
"

19 
	~"os.h
"

20 
	~<˘y≥.h
>

26 
	$c‹ru±Schema
(
InôD©a
 *
pD©a
, c⁄° *
zExåa
){

27 if–!
	`sqlôe3MÆlocFaûed
() ){

28 
	`sqlôe3SëSåög
(
pD©a
->
pzEºMsg
, "malformed database schema",

29 
zExåa
!=0 && zExtra[0]!=0 ? " - " : (*)0, zExtra, (*)0);

31 
	}
}

47 
	$sqlôe3InôCÆlback
(*
pInô
, 
¨gc
, **
¨gv
, **
azCﬁName
){

48 
InôD©a
 *
pD©a
 = (InôD©a*)
pInô
;

49 
sqlôe3
 *
db
 = 
pD©a
->db;

50 
iDb
;

52 if–
	`sqlôe3MÆlocFaûed
() ){

53  
SQLITE_NOMEM
;

56 
	`as£π
–
¨gc
==4 );

57 if–
¨gv
==0 )  0;

58 if–
¨gv
[1]==0 ||árgv[3]==0 ){

59 
	`c‹ru±Schema
(
pD©a
, 0);

62 
iDb
 = 
	`©oi
(
¨gv
[3]);

63 
	`as£π
–
iDb
>=0 && iDb<
db
->
nDb
 );

64 if–
¨gv
[2] &&árgv[2][0] ){

70 *
zEº
;

71 
rc
;

72 
	`as£π
–
db
->
öô
.
busy
 );

73 
db
->
öô
.
iDb
 = iDb;

74 
db
->
öô
.
√wTnum
 = 
	`©oi
(
¨gv
[1]);

75 
rc
 = 
	`sqlôe3_exec
(
db
, 
¨gv
[2], 0, 0, &
zEº
);

76 
db
->
öô
.
iDb
 = 0;

77 if–
SQLITE_OK
!=
rc
 ){

78 if–
rc
==
SQLITE_NOMEM
 ){

79 
	`sqlôe3FaûedMÆloc
();

81 
	`c‹ru±Schema
(
pD©a
, 
zEº
);

83 
	`sqlôe3_‰ì
(
zEº
);

84  
rc
;

93 
Index
 *
pIndex
;

94 
pIndex
 = 
	`sqlôe3FödIndex
(
db
, 
¨gv
[0], db->
aDb
[
iDb
].
zName
);

95 if–
pIndex
==0 ||ÖIndex->
äum
!=0 ){

103 
pIndex
->
äum
 = 
	`©oi
(
¨gv
[1]);

107 
	}
}

117 
	$sqlôe3InôO√
(
sqlôe3
 *
db
, 
iDb
, **
pzEºMsg
){

118 
rc
;

119 
BtCurs‹
 *
curMaö
;

120 
size
;

121 
TabÀ
 *
pTab
;

122 
Db
 *
pDb
;

123 c⁄° *
azArg
[5];

124 
zDbNum
[30];

125 
mëa
[10];

126 
InôD©a
 
öôD©a
;

127 c⁄° *
zMa°îSchema
;

128 c⁄° *
zMa°îName
 = 
	`SCHEMA_TABLE
(
iDb
);

133 c⁄° 
ma°î_schema
[] =

142 #i‚de‡
SQLITE_OMIT_TEMPDB


143 c⁄° 
ãmp_ma°î_schema
[] =

153 
	#ãmp_ma°î_schema
 0

	)

156 
	`as£π
–
iDb
>=0 && iDb<
db
->
nDb
 );

157 
	`as£π
–
db
->
aDb
[
iDb
].
pSchema
 );

163 if–!
OMIT_TEMPDB
 && 
iDb
==1 ){

164 
zMa°îSchema
 = 
ãmp_ma°î_schema
;

166 
zMa°îSchema
 = 
ma°î_schema
;

168 
zMa°îName
 = 
	`SCHEMA_TABLE
(
iDb
);

171 
	`sqlôe3Sa„tyOff
(
db
);

172 
azArg
[0] = 
zMa°îName
;

173 
azArg
[1] = "1";

174 
azArg
[2] = 
zMa°îSchema
;

175 
	`•rötf
(
zDbNum
, "%d", 
iDb
);

176 
azArg
[3] = 
zDbNum
;

177 
azArg
[4] = 0;

178 
öôD©a
.
db
 = db;

179 
öôD©a
.
pzEºMsg
 =ÖzErrMsg;

180 
rc
 = 
	`sqlôe3InôCÆlback
(&
öôD©a
, 4, (**)
azArg
, 0);

181 if–
rc
!=
SQLITE_OK
 ){

182 
	`sqlôe3Sa„tyOn
(
db
);

183  
rc
;

185 
pTab
 = 
	`sqlôe3FödTabÀ
(
db
, 
zMa°îName
, db->
aDb
[
iDb
].
zName
);

186 if–
pTab
 ){

187 
pTab
->
ªadO∆y
 = 1;

189 
	`sqlôe3Sa„tyOn
(
db
);

193 
pDb
 = &
db
->
aDb
[
iDb
];

194 if–
pDb
->
pBt
==0 ){

195 if–!
OMIT_TEMPDB
 && 
iDb
==1 ){

196 
	`DbSëPr›îty
(
db
, 1, 
DB_SchemaLﬂded
);

198  
SQLITE_OK
;

200 
rc
 = 
	`sqlôe3BåìCurs‹
(
pDb
->
pBt
, 
MASTER_ROOT
, 0, 0, 0, &
curMaö
);

201 if–
rc
!=
SQLITE_OK
 &&Ñc!=
SQLITE_EMPTY
 ){

202 
	`sqlôe3SëSåög
(
pzEºMsg
, 
	`sqlôe3EºSå
(
rc
), (*)0);

203  
rc
;

223 if–
rc
==
SQLITE_OK
 ){

224 
i
;

225 
i
=0; 
rc
==
SQLITE_OK
 && i<(
mëa
)/(meta[0]); i++){

226 
rc
 = 
	`sqlôe3BåìGëMëa
(
pDb
->
pBt
, 
i
+1, (
u32
 *)&
mëa
[i]);

228 if–
rc
 ){

229 
	`sqlôe3SëSåög
(
pzEºMsg
, 
	`sqlôe3EºSå
(
rc
), (*)0);

230 
	`sqlôe3BåìClo£Curs‹
(
curMaö
);

231  
rc
;

234 
	`mem£t
(
mëa
, 0, (meta));

236 
pDb
->
pSchema
->
schema_cookõ
 = 
mëa
[0];

243 if–
mëa
[4] ){

244 if–
iDb
==0 ){

246 
	`ENC
(
db
Ë(
u8
)
mëa
[4];

247 
db
->
pDÊtCﬁl
 = 
	`sqlôe3FödCﬁlSeq
(db, 
SQLITE_UTF8
, "BINARY", 6, 0);

250 if–
mëa
[4]!=
	`ENC
(
db
) ){

251 
	`sqlôe3BåìClo£Curs‹
(
curMaö
);

252 
	`sqlôe3SëSåög
(
pzEºMsg
, "attached databases must useÅhe same"

254  
SQLITE_ERROR
;

258 
	`DbSëPr›îty
(
db
, 
iDb
, 
DB_Em±y
);

260 
pDb
->
pSchema
->
íc
 = 
	`ENC
(
db
);

262 
size
 = 
mëa
[2];

263 if–
size
==0 ){ sizê
MAX_PAGES
; }

264 
pDb
->
pSchema
->
ˇche_size
 = 
size
;

265 
	`sqlôe3BåìSëCacheSize
(
pDb
->
pBt
,ÖDb->
pSchema
->
ˇche_size
);

273 
pDb
->
pSchema
->
fûe_f‹m©
 = 
mëa
[1];

274 if–
pDb
->
pSchema
->
fûe_f‹m©
==0 ){

275 
pDb
->
pSchema
->
fûe_f‹m©
 = 1;

277 if–
pDb
->
pSchema
->
fûe_f‹m©
>
SQLITE_MAX_FILE_FORMAT
 ){

278 
	`sqlôe3BåìClo£Curs‹
(
curMaö
);

279 
	`sqlôe3SëSåög
(
pzEºMsg
, "unsupported file format", (*)0);

280  
SQLITE_ERROR
;

286 
	`as£π
–
db
->
öô
.
busy
 );

287 if–
rc
==
SQLITE_EMPTY
 ){

289 
rc
 = 
SQLITE_OK
;

291 *
zSql
;

292 
zSql
 = 
	`sqlôe3MPrötf
(

294 
zDbNum
, 
db
->
aDb
[
iDb
].
zName
, 
zMa°îName
);

295 
	`sqlôe3Sa„tyOff
(
db
);

296 
rc
 = 
	`sqlôe3_exec
(
db
, 
zSql
, 
sqlôe3InôCÆlback
, &
öôD©a
, 0);

297 
	`sqlôe3Sa„tyOn
(
db
);

298 
	`sqlôeFªe
(
zSql
);

299 #i‚de‡
SQLITE_OMIT_ANALYZE


300 if–
rc
==
SQLITE_OK
 ){

301 
	`sqlôe3A«lysisLﬂd
(
db
, 
iDb
);

304 
	`sqlôe3BåìClo£Curs‹
(
curMaö
);

306 if–
	`sqlôe3MÆlocFaûed
() ){

308 
rc
 = 
SQLITE_NOMEM
;

309 
	`sqlôe3Re£tI¡î«lSchema
(
db
, 0);

311 if–
rc
==
SQLITE_OK
 ){

312 
	`DbSëPr›îty
(
db
, 
iDb
, 
DB_SchemaLﬂded
);

314 
	`sqlôe3Re£tI¡î«lSchema
(
db
, 
iDb
);

316  
rc
;

317 
	}
}

329 
	$sqlôe3Inô
(
sqlôe3
 *
db
, **
pzEºMsg
){

330 
i
, 
rc
;

331 
ˇŒed_öô⁄e
 = 0;

333 if–
db
->
öô
.
busy
 )  
SQLITE_OK
;

334 
rc
 = 
SQLITE_OK
;

335 
db
->
öô
.
busy
 = 1;

336 
i
=0; 
rc
==
SQLITE_OK
 && i<
db
->
nDb
; i++){

337 if–
	`DbHasPr›îty
(
db
, 
i
, 
DB_SchemaLﬂded
) || i==1 ) ;

338 
rc
 = 
	`sqlôe3InôO√
(
db
, 
i
, 
pzEºMsg
);

339 if–
rc
 ){

340 
	`sqlôe3Re£tI¡î«lSchema
(
db
, 
i
);

342 
ˇŒed_öô⁄e
 = 1;

349 #i‚de‡
SQLITE_OMIT_TEMPDB


350 if–
rc
==
SQLITE_OK
 && 
db
->
nDb
>1 && !
	`DbHasPr›îty
(db, 1, 
DB_SchemaLﬂded
) ){

351 
rc
 = 
	`sqlôe3InôO√
(
db
, 1, 
pzEºMsg
);

352 if–
rc
 ){

353 
	`sqlôe3Re£tI¡î«lSchema
(
db
, 1);

355 
ˇŒed_öô⁄e
 = 1;

359 
db
->
öô
.
busy
 = 0;

360 if–
rc
==
SQLITE_OK
 && 
ˇŒed_öô⁄e
 ){

361 
	`sqlôe3CommôI¡î«lCh™ges
(
db
);

364  
rc
;

365 
	}
}

371 
	$sqlôe3RódSchema
(
P¨£
 *
pP¨£
){

372 
rc
 = 
SQLITE_OK
;

373 
sqlôe3
 *
db
 = 
pP¨£
->db;

374 if–!
db
->
öô
.
busy
 ){

375 
rc
 = 
	`sqlôe3Inô
(
db
, &
pP¨£
->
zEºMsg
);

377 if–
rc
!=
SQLITE_OK
 ){

378 
pP¨£
->
rc
 =Ñc;

379 
pP¨£
->
nEº
++;

381  
rc
;

382 
	}
}

389 
	$schemaIsVÆid
(
sqlôe3
 *
db
){

390 
iDb
;

391 
rc
;

392 
BtCurs‹
 *
curTemp
;

393 
cookõ
;

394 
ÆlOk
 = 1;

396 
iDb
=0; 
ÆlOk
 && iDb<
db
->
nDb
; iDb++){

397 
Båì
 *
pBt
;

398 
pBt
 = 
db
->
aDb
[
iDb
].pBt;

399 if–
pBt
==0 ) ;

400 
rc
 = 
	`sqlôe3BåìCurs‹
(
pBt
, 
MASTER_ROOT
, 0, 0, 0, &
curTemp
);

401 if–
rc
==
SQLITE_OK
 ){

402 
rc
 = 
	`sqlôe3BåìGëMëa
(
pBt
, 1, (
u32
 *)&
cookõ
);

403 if–
rc
==
SQLITE_OK
 && 
cookõ
!=
db
->
aDb
[
iDb
].
pSchema
->
schema_cookõ
 ){

404 
ÆlOk
 = 0;

406 
	`sqlôe3BåìClo£Curs‹
(
curTemp
);

409  
ÆlOk
;

410 
	}
}

418 
	$sqlôe3SchemaFªe
(*
p
){

419 
Hash
 
ãmp1
;

420 
Hash
 
ãmp2
;

421 
HashEÀm
 *
pEÀm
;

422 
Schema
 *
pSchema
 = (Schem®*)
p
;

424 
ãmp1
 = 
pSchema
->
tblHash
;

425 
ãmp2
 = 
pSchema
->
åigHash
;

426 
	`sqlôe3HashInô
(&
pSchema
->
åigHash
, 
SQLITE_HASH_STRING
, 0);

427 
	`sqlôe3HashCÀ¨
(&
pSchema
->
aFKey
);

428 
	`sqlôe3HashCÀ¨
(&
pSchema
->
idxHash
);

429 
pEÀm
=
	`sqlôeHashFú°
(&
ãmp2
);ÖEÀm;ÖEÀm=
	`sqlôeHashNext
(pElem)){

430 
	`sqlôe3DñëeTriggî
((
Triggî
*)
	`sqlôeHashD©a
(
pEÀm
));

432 
	`sqlôe3HashCÀ¨
(&
ãmp2
);

433 
	`sqlôe3HashInô
(&
pSchema
->
tblHash
, 
SQLITE_HASH_STRING
, 0);

434 
pEÀm
=
	`sqlôeHashFú°
(&
ãmp1
);ÖEÀm;ÖEÀm=
	`sqlôeHashNext
(pElem)){

435 
TabÀ
 *
pTab
 = 
	`sqlôeHashD©a
(
pEÀm
);

436 
	`sqlôe3DñëeTabÀ
(0, 
pTab
);

438 
	`sqlôe3HashCÀ¨
(&
ãmp1
);

439 
pSchema
->
pSeqTab
 = 0;

440 
pSchema
->
Êags
 &~
DB_SchemaLﬂded
;

441 
	}
}

447 
Schema
 *
	$sqlôe3SchemaGë
(
Båì
 *
pBt
){

448 
Schema
 * 
p
;

449 if–
pBt
 ){

450 
p
 = (
Schema
 *)
	`sqlôe3BåìSchema
(
pBt
,(Schema),
sqlôe3SchemaFªe
);

452 
p
 = (
Schema
 *)
	`sqlôeMÆloc
((Schema));

454 if–
p
 && 0=ı->
fûe_f‹m©
 ){

455 
	`sqlôe3HashInô
(&
p
->
tblHash
, 
SQLITE_HASH_STRING
, 0);

456 
	`sqlôe3HashInô
(&
p
->
idxHash
, 
SQLITE_HASH_STRING
, 0);

457 
	`sqlôe3HashInô
(&
p
->
åigHash
, 
SQLITE_HASH_STRING
, 0);

458 
	`sqlôe3HashInô
(&
p
->
aFKey
, 
SQLITE_HASH_STRING
, 1);

460  
p
;

461 
	}
}

470 
	$sqlôe3SchemaToIndex
(
sqlôe3
 *
db
, 
Schema
 *
pSchema
){

471 
i
 = -1000000;

483 if–
pSchema
 ){

484 
i
=0; i<
db
->
nDb
; i++){

485 if–
db
->
aDb
[
i
].
pSchema
==pSchema ){

489 
	`as£π
–
i
>=0 &&i>=0 && i<
db
->
nDb
 );

491  
i
;

492 
	}
}

497 
	$sqlôe3_¥ï¨e
(

498 
sqlôe3
 *
db
,

499 c⁄° *
zSql
,

500 
nByãs
,

501 
sqlôe3_°mt
 **
µStmt
,

502 c⁄° ** 
pzTaû


504 
P¨£
 
sP¨£
;

505 *
zEºMsg
 = 0;

506 
rc
 = 
SQLITE_OK
;

507 
i
;

510 
	`as£π
–!
	`sqlôe3MÆlocFaûed
() );

512 
	`as£π
–
µStmt
 );

513 *
µStmt
 = 0;

514 if–
	`sqlôe3Sa„tyOn
(
db
) ){

515  
SQLITE_MISUSE
;

521 
i
=0; i<
db
->
nDb
; i++) {

522 
Båì
 *
pBt
 = 
db
->
aDb
[
i
].pBt;

523 if–
pBt
 && 
	`sqlôe3BåìSchemaLocked
(pBt) ){

524 c⁄° *
zDb
 = 
db
->
aDb
[
i
].
zName
;

525 
	`sqlôe3Eº‹
(
db
, 
SQLITE_LOCKED
, "d©aba£ schem®i†locked: %s", 
zDb
);

526 
	`sqlôe3Sa„tyOff
(
db
);

527  
SQLITE_LOCKED
;

531 
	`mem£t
(&
sP¨£
, 0, (sParse));

532 
sP¨£
.
db
 = db;

533 if–
nByãs
>=0 && 
zSql
[nBytes]!=0 ){

534 *
zSqlC›y
 = 
	`sqlôe3SåNDup
(
zSql
, 
nByãs
);

535 
	`sqlôe3RunP¨£r
(&
sP¨£
, 
zSqlC›y
, &
zEºMsg
);

536 
sP¨£
.
zTaû
 +
zSql
 - 
zSqlC›y
;

537 
	`sqlôeFªe
(
zSqlC›y
);

539 
	`sqlôe3RunP¨£r
(&
sP¨£
, 
zSql
, &
zEºMsg
);

542 if–
	`sqlôe3MÆlocFaûed
() ){

543 
sP¨£
.
rc
 = 
SQLITE_NOMEM
;

545 if–
sP¨£
.
rc
==
SQLITE_DONE
 ) sP¨£.r¯
SQLITE_OK
;

546 if–
sP¨£
.
checkSchema
 && !
	`schemaIsVÆid
(
db
) ){

547 
sP¨£
.
rc
 = 
SQLITE_SCHEMA
;

549 if–
sP¨£
.
rc
==
SQLITE_SCHEMA
 ){

550 
	`sqlôe3Re£tI¡î«lSchema
(
db
, 0);

552 if–
pzTaû
 ) *pzTaû = 
sP¨£
.
zTaû
;

553 
rc
 = 
sP¨£
.rc;

555 #i‚de‡
SQLITE_OMIT_EXPLAIN


556 if–
rc
==
SQLITE_OK
 && 
sP¨£
.
pVdbe
 && sP¨£.
ex∂aö
 ){

557 if–
sP¨£
.
ex∂aö
==2 ){

558 
	`sqlôe3VdbeSëNumCﬁs
(
sP¨£
.
pVdbe
, 3);

559 
	`sqlôe3VdbeSëCﬁName
(
sP¨£
.
pVdbe
, 0, "‹dî", 
P3_STATIC
);

560 
	`sqlôe3VdbeSëCﬁName
(
sP¨£
.
pVdbe
, 1, "‰om", 
P3_STATIC
);

561 
	`sqlôe3VdbeSëCﬁName
(
sP¨£
.
pVdbe
, 2, "dëaû", 
P3_STATIC
);

563 
	`sqlôe3VdbeSëNumCﬁs
(
sP¨£
.
pVdbe
, 5);

564 
	`sqlôe3VdbeSëCﬁName
(
sP¨£
.
pVdbe
, 0, "addr", 
P3_STATIC
);

565 
	`sqlôe3VdbeSëCﬁName
(
sP¨£
.
pVdbe
, 1, "›code", 
P3_STATIC
);

566 
	`sqlôe3VdbeSëCﬁName
(
sP¨£
.
pVdbe
, 2, "p1", 
P3_STATIC
);

567 
	`sqlôe3VdbeSëCﬁName
(
sP¨£
.
pVdbe
, 3, "p2", 
P3_STATIC
);

568 
	`sqlôe3VdbeSëCﬁName
(
sP¨£
.
pVdbe
, 4, "p3", 
P3_STATIC
);

573 if–
	`sqlôe3Sa„tyOff
(
db
) ){

574 
rc
 = 
SQLITE_MISUSE
;

576 if–
rc
==
SQLITE_OK
 ){

577 *
µStmt
 = (
sqlôe3_°mt
*)
sP¨£
.
pVdbe
;

578 }if–
sP¨£
.
pVdbe
 ){

579 
	`sqlôe3_föÆize
((
sqlôe3_°mt
*)
sP¨£
.
pVdbe
);

582 if–
zEºMsg
 ){

583 
	`sqlôe3Eº‹
(
db
, 
rc
, "%s", 
zEºMsg
);

584 
	`sqlôeFªe
(
zEºMsg
);

586 
	`sqlôe3Eº‹
(
db
, 
rc
, 0);

589 
rc
 = 
	`sqlôe3ApiExô
(
db
,Ñc);

590 
	`sqlôe3Rñó£ThªadD©a
();

591  
rc
;

592 
	}
}

594 #i‚de‡
SQLITE_OMIT_UTF16


598 
	$sqlôe3_¥ï¨e16
(

599 
sqlôe3
 *
db
,

600 c⁄° *
zSql
,

601 
nByãs
,

602 
sqlôe3_°mt
 **
µStmt
,

603 c⁄° **
pzTaû


609 *
zSql8
;

610 c⁄° *
zTaû8
 = 0;

611 
rc
 = 
SQLITE_OK
;

613 if–
	`sqlôe3Sa„tyCheck
(
db
) ){

614  
SQLITE_MISUSE
;

616 
zSql8
 = 
	`sqlôe3utf16to8
(
zSql
, 
nByãs
);

617 if–
zSql8
 ){

618 
rc
 = 
	`sqlôe3_¥ï¨e
(
db
, 
zSql8
, -1, 
µStmt
, &
zTaû8
);

621 if–
zTaû8
 && 
pzTaû
 ){

627 
ch¨s_∑r£d
 = 
	`sqlôe3utf8Ch¨Lí
(
zSql8
, 
zTaû8
-zSql8);

628 *
pzTaû
 = (
u8
 *)
zSql
 + 
	`sqlôe3utf16ByãLí
(zSql, 
ch¨s_∑r£d
);

630 
	`sqlôeFªe
(
zSql8
);

631  
	`sqlôe3ApiExô
(
db
, 
rc
);

632 
	}
}

	@printf.c

53 
	~"sqlôeI¡.h
"

59 
	#ëRADIX
 1

	)

60 
	#ëFLOAT
 2

	)

61 
	#ëEXP
 3

	)

62 
	#ëGENERIC
 4

	)

63 
	#ëSIZE
 5

	)

64 
	#ëSTRING
 6

	)

65 
	#ëDYNSTRING
 7

	)

66 
	#ëPERCENT
 8

	)

67 
	#ëCHARX
 9

	)

68 
	#ëERROR
 10

	)

70 
	#ëCHARLIT
 11

	)

71 
	#ëSQLESCAPE
 12

	)

72 
	#ëSQLESCAPE2
 13

	)

74 
	#ëTOKEN
 14

	)

75 
	#ëSRCLIST
 15

	)

76 
	#ëPOINTER
 16

	)

82 
	tëByã
;

88 
	së_öfo
 {

89 
	mfmây≥
;

90 
ëByã
 
	mba£
;

91 
ëByã
 
	mÊags
;

92 
ëByã
 
	mty≥
;

93 
ëByã
 
	mch¨£t
;

94 
ëByã
 
	m¥efix
;

95 } 
	të_öfo
;

100 
	#FLAG_SIGNED
 1

	)

101 
	#FLAG_INTERN
 2

	)

102 
	#FLAG_STRING
 4

	)

109 c⁄° 
	gaDigôs
[] = "0123456789ABCDEF0123456789abcdef";

110 c⁄° 
	gaPªfix
[] = "-x0\000X0";

111 c⁄° 
ë_öfo
 
	gfmtöfo
[] = {

112 { 'd', 10, 1, 
ëRADIX
, 0, 0 },

113 { 's', 0, 4, 
ëSTRING
, 0, 0 },

114 { 'g', 0, 1, 
ëGENERIC
, 30, 0 },

115 { 'z', 0, 6, 
ëDYNSTRING
, 0, 0 },

116 { 'q', 0, 4, 
ëSQLESCAPE
, 0, 0 },

117 { 'Q', 0, 4, 
ëSQLESCAPE2
, 0, 0 },

118 { 'c', 0, 0, 
ëCHARX
, 0, 0 },

119 { 'o', 8, 0, 
ëRADIX
, 0, 2 },

120 { 'u', 10, 0, 
ëRADIX
, 0, 0 },

121 { 'x', 16, 0, 
ëRADIX
, 16, 1 },

122 { 'X', 16, 0, 
ëRADIX
, 0, 4 },

123 #i‚de‡
SQLITE_OMIT_FLOATING_POINT


124 { 'f', 0, 1, 
ëFLOAT
, 0, 0 },

125 { 'e', 0, 1, 
ëEXP
, 30, 0 },

126 { 'E', 0, 1, 
ëEXP
, 14, 0 },

127 { 'G', 0, 1, 
ëGENERIC
, 14, 0 },

129 { 'i', 10, 1, 
ëRADIX
, 0, 0 },

130 { 'n', 0, 0, 
ëSIZE
, 0, 0 },

131 { '%', 0, 0, 
ëPERCENT
, 0, 0 },

132 { 'p', 16, 0, 
ëPOINTER
, 0, 1 },

133 { 'T', 0, 2, 
ëTOKEN
, 0, 0 },

134 { 'S', 0, 2, 
ëSRCLIST
, 0, 0 },

136 
	#ëNINFO
 ((
fmtöfo
)/(fmtöfo[0]))

	)

142 #i‚de‡
SQLITE_OMIT_FLOATING_POINT


156 
	$ë_gëdigô
(
LONGDOUBLE_TYPE
 *
vÆ
, *
˙t
){

157 
digô
;

158 
LONGDOUBLE_TYPE
 
d
;

159 if–(*
˙t
)++ >= 16 )  '0';

160 
digô
 = ()*
vÆ
;

161 
d
 = 
digô
;

162 
digô
 += '0';

163 *
vÆ
 = (*vÆ - 
d
)*10.0;

164  
digô
;

165 
	}
}

173 #i‚de‡
SQLITE_PRINT_BUF_SIZE


174 
	#SQLITE_PRINT_BUF_SIZE
 350

	)

176 
	#ëBUFSIZE
 
SQLITE_PRINT_BUF_SIZE


	)

205 
vx¥ötf
(

206 (*
func
)(*,const *,),

207 *
¨g
,

208 
u£Exãnded
,

209 c⁄° *
fmt
,

210 
va_li°
 
≠


212 
c
;

213 *
buÂt
;

214 
¥ecisi⁄
;

215 
Àngth
;

216 
idx
;

217 
cou¡
;

218 
width
;

219 
ëByã
 
Êag_À·ju°ify
;

220 
ëByã
 
Êag_∂ussign
;

221 
ëByã
 
Êag_bœnksign
;

222 
ëByã
 
Êag_Æã∫©ef‹m
;

223 
ëByã
 
Êag_Ætf‹m2
;

224 
ëByã
 
Êag_zî›ad
;

225 
ëByã
 
Êag_l⁄g
;

226 
ëByã
 
Êag_l⁄gl⁄g
;

227 
ëByã
 
d⁄e
;

228 
UINT64_TYPE
 
l⁄gvÆue
;

229 
LONGDOUBLE_TYPE
 
ªÆvÆue
;

230 c⁄° 
ë_öfo
 *
öf›
;

231 
buf
[
ëBUFSIZE
];

232 
¥efix
;

233 
ëByã
 
îr‹Êag
 = 0;

234 
ëByã
 
xty≥
;

235 *
zExåa
;

236 c⁄° 
•a˚s
[] =

238 
	#ëSPACESIZE
 ((
•a˚s
)-1)

	)

239 #i‚de‡
SQLITE_OMIT_FLOATING_POINT


240 
exp
, 
e2
;

241 
roundî
;

242 
ëByã
 
Êag_dp
;

243 
ëByã
 
Êag_πz
;

244 
ëByã
 
Êag_exp
;

245 
nsd
;

248 
	`func
(
¨g
,"",0);

249 
cou¡
 = 
Àngth
 = 0;

250 
buÂt
 = 0;

251 ; (
c
=(*
fmt
))!=0; ++fmt){

252 if–
c
!='%' ){

253 
amt
;

254 
buÂt
 = (*)
fmt
;

255 
amt
 = 1;

256  (
c
=(*++
fmt
))!='%' && c!=0 ) 
amt
++;

257 (*
func
)(
¨g
,
buÂt
,
amt
);

258 
cou¡
 +
amt
;

259 if–
c
==0 ) ;

261 if–(
c
=(*++
fmt
))==0 ){

262 
îr‹Êag
 = 1;

263 (*
func
)(
¨g
,"%",1);

264 
cou¡
++;

268 
Êag_À·ju°ify
 = 
Êag_∂ussign
 = 
Êag_bœnksign
 =

269 
Êag_Æã∫©ef‹m
 = 
Êag_Ætf‹m2
 = 
Êag_zî›ad
 = 0;

270 
d⁄e
 = 0;

272  
c
 ){

273 '-': 
Êag_À·ju°ify
 = 1; ;

274 '+': 
Êag_∂ussign
 = 1; ;

275 ' ': 
Êag_bœnksign
 = 1; ;

276 '#': 
Êag_Æã∫©ef‹m
 = 1; ;

277 '!': 
Êag_Ætf‹m2
 = 1; ;

278 '0': 
Êag_zî›ad
 = 1; ;

279 : 
d⁄e
 = 1; ;

281 } !
d⁄e
 && (
c
=(*++
fmt
))!=0 );

283 
width
 = 0;

284 if–
c
=='*' ){

285 
width
 = 
	`va_¨g
(
≠
,);

286 if–
width
<0 ){

287 
Êag_À·ju°ify
 = 1;

288 
width
 = -width;

290 
c
 = *++
fmt
;

292  
c
>='0' && c<='9' ){

293 
width
 = width*10 + 
c
 - '0';

294 
c
 = *++
fmt
;

297 if–
width
 > 
ëBUFSIZE
-10 ){

298 
width
 = 
ëBUFSIZE
-10;

301 if–
c
=='.' ){

302 
¥ecisi⁄
 = 0;

303 
c
 = *++
fmt
;

304 if–
c
=='*' ){

305 
¥ecisi⁄
 = 
	`va_¨g
(
≠
,);

306 if–
¥ecisi⁄
<0 )Örecision = -precision;

307 
c
 = *++
fmt
;

309  
c
>='0' && c<='9' ){

310 
¥ecisi⁄
 =Öªcisi⁄*10 + 
c
 - '0';

311 
c
 = *++
fmt
;

315 
¥ecisi⁄
 = -1;

318 if–
c
=='l' ){

319 
Êag_l⁄g
 = 1;

320 
c
 = *++
fmt
;

321 if–
c
=='l' ){

322 
Êag_l⁄gl⁄g
 = 1;

323 
c
 = *++
fmt
;

325 
Êag_l⁄gl⁄g
 = 0;

328 
Êag_l⁄g
 = 
Êag_l⁄gl⁄g
 = 0;

331 
öf›
 = 0;

332 
xty≥
 = 
ëERROR
;

333 
idx
=0; idx<
ëNINFO
; idx++){

334 if–
c
==
fmtöfo
[
idx
].
fmây≥
 ){

335 
öf›
 = &
fmtöfo
[
idx
];

336 if–
u£Exãnded
 || (
öf›
->
Êags
 & 
FLAG_INTERN
)==0 ){

337 
xty≥
 = 
öf›
->
ty≥
;

342 
zExåa
 = 0;

345 if–
¥ecisi⁄
>
ëBUFSIZE
-40 && (
öf›
->
Êags
 & 
FLAG_STRING
)==0 ){

346 
¥ecisi⁄
 = 
ëBUFSIZE
-40;

370  
xty≥
 ){

371 
ëPOINTER
:

372 
Êag_l⁄gl⁄g
 = (*)==(
i64
);

373 
Êag_l⁄g
 = (*)==();

375 
ëRADIX
:

376 if–
öf›
->
Êags
 & 
FLAG_SIGNED
 ){

377 
i64
 
v
;

378 if–
Êag_l⁄gl⁄g
 ) 
v
 = 
	`va_¨g
(
≠
,
i64
);

379 if–
Êag_l⁄g
 ) 
v
 = 
	`va_¨g
(
≠
,);

380 
v
 = 
	`va_¨g
(
≠
,);

381 if–
v
<0 ){

382 
l⁄gvÆue
 = -
v
;

383 
¥efix
 = '-';

385 
l⁄gvÆue
 = 
v
;

386 if–
Êag_∂ussign
 ) 
¥efix
 = '+';

387 if–
Êag_bœnksign
 ) 
¥efix
 = ' ';

388 
¥efix
 = 0;

391 if–
Êag_l⁄gl⁄g
 ) 
l⁄gvÆue
 = 
	`va_¨g
(
≠
,
u64
);

392 if–
Êag_l⁄g
 ) 
l⁄gvÆue
 = 
	`va_¨g
(
≠
,);

393 
l⁄gvÆue
 = 
	`va_¨g
(
≠
,);

394 
¥efix
 = 0;

396 if–
l⁄gvÆue
==0 ) 
Êag_Æã∫©ef‹m
 = 0;

397 if–
Êag_zî›ad
 && 
¥ecisi⁄
<
width
-(
¥efix
!=0) ){

398 
¥ecisi⁄
 = 
width
-(
¥efix
!=0);

400 
buÂt
 = &
buf
[
ëBUFSIZE
-1];

402 c⁄° *
c£t
;

403 
ba£
;

404 
c£t
 = &
aDigôs
[
öf›
->
ch¨£t
];

405 
ba£
 = 
öf›
->base;

407 *(--
buÂt
Ë
c£t
[
l⁄gvÆue
%
ba£
];

408 
l⁄gvÆue
 =Ü⁄gvÆue/
ba£
;

409 } 
l⁄gvÆue
>0 );

411 
Àngth
 = &
buf
[
ëBUFSIZE
-1]-
buÂt
;

412 
idx
=
¥ecisi⁄
-
Àngth
; idx>0; idx--){

413 *(--
buÂt
) = '0';

415 if–
¥efix
 ) *(--
buÂt
) =Örefix;

416 if–
Êag_Æã∫©ef‹m
 && 
öf›
->
¥efix
 ){

417 c⁄° *
¥e
;

418 
x
;

419 
¥e
 = &
aPªfix
[
öf›
->
¥efix
];

420 if–*
buÂt
!=
¥e
[0] ){

421 ; (
x
=(*
¥e
))!=0;Öª++Ë*(--
buÂt
) = x;

424 
Àngth
 = &
buf
[
ëBUFSIZE
-1]-
buÂt
;

426 
ëFLOAT
:

427 
ëEXP
:

428 
ëGENERIC
:

429 
ªÆvÆue
 = 
	`va_¨g
(
≠
,);

430 #i‚de‡
SQLITE_OMIT_FLOATING_POINT


431 if–
¥ecisi⁄
<0 )Örecision = 6;

432 if–
¥ecisi⁄
>
ëBUFSIZE
/2-10 )Örecision =ÉtBUFSIZE/2-10;

433 if–
ªÆvÆue
<0.0 ){

434 
ªÆvÆue
 = -realvalue;

435 
¥efix
 = '-';

437 if–
Êag_∂ussign
 ) 
¥efix
 = '+';

438 if–
Êag_bœnksign
 ) 
¥efix
 = ' ';

439 
¥efix
 = 0;

441 if–
xty≥
==
ëGENERIC
 && 
¥ecisi⁄
>0 )Örecision--;

444 
idx
=
¥ecisi⁄
, 
roundî
=0.4999; idx>0; idx--,Ñounder*=0.1);

447 
idx
=
¥ecisi⁄
, 
roundî
=0.5; idx>0; idx--,Ñounder*=0.1);

449 if–
xty≥
==
ëFLOAT
 ) 
ªÆvÆue
 +
roundî
;

451 
exp
 = 0;

452 if–
ªÆvÆue
>0.0 ){

453  
ªÆvÆue
>=1e32 && 
exp
<=350 ){Ñealvalue *= 1e-32;Éxp+=32; }

454  
ªÆvÆue
>=1e8 && 
exp
<=350 ){Ñealvalue *= 1e-8;Éxp+=8; }

455  
ªÆvÆue
>=10.0 && 
exp
<=350 ){Ñealvalue *= 0.1;Éxp++; }

456  
ªÆvÆue
<1e-8 && 
exp
>=-350 ){Ñealvalue *= 1e8;Éxp-=8; }

457  
ªÆvÆue
<1.0 && 
exp
>=-350 ){Ñealvalue *= 10.0;Éxp--; }

458 if–
exp
>350 ||Éxp<-350 ){

459 
buÂt
 = "NaN";

460 
Àngth
 = 3;

464 
buÂt
 = 
buf
;

469 
Êag_exp
 = 
xty≥
==
ëEXP
;

470 if–
xty≥
!=
ëFLOAT
 ){

471 
ªÆvÆue
 +
roundî
;

472 if–
ªÆvÆue
>=10.0 ){ÑólvÆuê*0.1; 
exp
++; }

474 if–
xty≥
==
ëGENERIC
 ){

475 
Êag_πz
 = !
Êag_Æã∫©ef‹m
;

476 if–
exp
<-4 ||Éxp>
¥ecisi⁄
 ){

477 
xty≥
 = 
ëEXP
;

479 
¥ecisi⁄
 =Öªcisi⁄ - 
exp
;

480 
xty≥
 = 
ëFLOAT
;

483 
Êag_πz
 = 0;

485 if–
xty≥
==
ëEXP
 ){

486 
e2
 = 0;

488 
e2
 = 
exp
;

490 
nsd
 = 0;

491 
Êag_dp
 = (
¥ecisi⁄
>0Ë| 
Êag_Æã∫©ef‹m
 | 
Êag_Ætf‹m2
;

493 if–
¥efix
 ){

494 *(
buÂt
++Ë
¥efix
;

497 if–
e2
<0 ){

498 *(
buÂt
++) = '0';

500 ; 
e2
>=0;É2--){

501 *(
buÂt
++Ë
	`ë_gëdigô
(&
ªÆvÆue
,&
nsd
);

505 if–
Êag_dp
 ){

506 *(
buÂt
++) = '.';

510 
e2
++;É2<0 && 
¥ecisi⁄
>0;Örecision--,É2++){

511 *(
buÂt
++) = '0';

514  (
¥ecisi⁄
--)>0 ){

515 *(
buÂt
++Ë
	`ë_gëdigô
(&
ªÆvÆue
,&
nsd
);

518 if–
Êag_πz
 && 
Êag_dp
 ){

519  
buÂt
[-1]=='0' ) *(--bufpt) = 0;

520 
	`as£π
–
buÂt
>
buf
 );

521 if–
buÂt
[-1]=='.' ){

522 if–
Êag_Ætf‹m2
 ){

523 *(
buÂt
++) = '0';

525 *(--
buÂt
) = 0;

530 if–
Êag_exp
 || (
xty≥
==
ëEXP
 && 
exp
) ){

531 *(
buÂt
++Ë
aDigôs
[
öf›
->
ch¨£t
];

532 if–
exp
<0 ){

533 *(
buÂt
++Ë'-'; 
exp
 = -exp;

535 *(
buÂt
++) = '+';

537 if–
exp
>=100 ){

538 *(
buÂt
++Ë(
exp
/100)+'0';

539 
exp
 %= 100;

541 *(
buÂt
++Ë
exp
/10+'0';

542 *(
buÂt
++Ë
exp
%10+'0';

544 *
buÂt
 = 0;

549 
Àngth
 = 
buÂt
-
buf
;

550 
buÂt
 = 
buf
;

554 if–
Êag_zî›ad
 && !
Êag_À·ju°ify
 && 
Àngth
 < 
width
){

555 
i
;

556 
nPad
 = 
width
 - 
Àngth
;

557 
i
=
width
; i>=
nPad
; i--){

558 
buÂt
[
i
] = buÂt[i-
nPad
];

560 
i
 = 
¥efix
!=0;

561  
nPad
-- ) 
buÂt
[
i
++] = '0';

562 
Àngth
 = 
width
;

566 
ëSIZE
:

567 *(
	`va_¨g
(
≠
,*)Ë
cou¡
;

568 
Àngth
 = 
width
 = 0;

570 
ëPERCENT
:

571 
buf
[0] = '%';

572 
buÂt
 = 
buf
;

573 
Àngth
 = 1;

575 
ëCHARLIT
:

576 
ëCHARX
:

577 
c
 = 
buf
[0] = (
xty≥
==
ëCHARX
 ? 
	`va_¨g
(
≠
,Ë: *++
fmt
);

578 if–
¥ecisi⁄
>=0 ){

579 
idx
=1; idx<
¥ecisi⁄
; idx++Ë
buf
[idx] = 
c
;

580 
Àngth
 = 
¥ecisi⁄
;

582 
Àngth
 =1;

584 
buÂt
 = 
buf
;

586 
ëSTRING
:

587 
ëDYNSTRING
:

588 
buÂt
 = 
	`va_¨g
(
≠
,*);

589 if–
buÂt
==0 ){

590 
buÂt
 = "";

591 }if–
xty≥
==
ëDYNSTRING
 ){

592 
zExåa
 = 
buÂt
;

594 
Àngth
 = 
	`°æí
(
buÂt
);

595 if–
¥ecisi⁄
>=0 &&Öªcisi⁄<
Àngth
 )Üength =Örecision;

597 
ëSQLESCAPE
:

598 
ëSQLESCAPE2
: {

599 
i
, 
j
, 
n
, 
ch
, 
i¢uŒ
;

600 
√edQuŸe
;

601 *
esˇrg
 = 
	`va_¨g
(
≠
,*);

602 
i¢uŒ
 = 
esˇrg
==0;

603 if–
i¢uŒ
 ) 
esˇrg
 = (
xty≥
==
ëSQLESCAPE2
 ? "NULL" : "(NULL)");

604 
i
=
n
=0; (
ch
=
esˇrg
[i])!=0; i++){

605 if–
ch
=='\'' ) 
n
++;

607 
√edQuŸe
 = !
i¢uŒ
 && 
xty≥
==
ëSQLESCAPE2
;

608 
n
 +
i
 + 1 + 
√edQuŸe
*2;

609 if–
n
>
ëBUFSIZE
 ){

610 
buÂt
 = 
zExåa
 = 
	`sqlôeMÆloc
–
n
 );

611 if–
buÂt
==0 )  -1;

613 
buÂt
 = 
buf
;

615 
j
 = 0;

616 if–
√edQuŸe
 ) 
buÂt
[
j
++] = '\'';

617 
i
=0; (
ch
=
esˇrg
[i])!=0; i++){

618 
buÂt
[
j
++] = 
ch
;

619 if–
ch
=='\'' ) 
buÂt
[
j
++] = ch;

621 if–
√edQuŸe
 ) 
buÂt
[
j
++] = '\'';

622 
buÂt
[
j
] = 0;

623 
Àngth
 = 
j
;

624 if–
¥ecisi⁄
>=0 &&Öªcisi⁄<
Àngth
 )Üength =Örecision;

627 
ëTOKEN
: {

628 
Tokí
 *
pTokí
 = 
	`va_¨g
(
≠
, Token*);

629 if–
pTokí
 &&ÖTokí->
z
 ){

630 (*
func
)(
¨g
, (*)
pTokí
->
z
,ÖTokí->
n
);

632 
Àngth
 = 
width
 = 0;

635 
ëSRCLIST
: {

636 
SrcLi°
 *
pSrc
 = 
	`va_¨g
(
≠
, SrcList*);

637 
k
 = 
	`va_¨g
(
≠
, );

638 
SrcLi°_ôem
 *
pIãm
 = &
pSrc
->
a
[
k
];

639 
	`as£π
–
k
>=0 && k<
pSrc
->
nSrc
 );

640 if–
pIãm
->
zD©aba£
 &&ÖItem->zDatabase[0] ){

641 (*
func
)(
¨g
, 
pIãm
->
zD©aba£
, 
	`°æí
(pItem->zDatabase));

642 (*
func
)(
¨g
, ".", 1);

644 (*
func
)(
¨g
, 
pIãm
->
zName
, 
	`°æí
(pItem->zName));

645 
Àngth
 = 
width
 = 0;

648 
ëERROR
:

649 
buf
[0] = '%';

650 
buf
[1] = 
c
;

651 
îr‹Êag
 = 0;

652 
idx
 = 1+(
c
!=0);

653 (*
func
)(
¨g
,"%",
idx
);

654 
cou¡
 +
idx
;

655 if–
c
==0 ) 
fmt
--;

663 if–!
Êag_À·ju°ify
 ){

664 
n•a˚
;

665 
n•a˚
 = 
width
-
Àngth
;

666 if–
n•a˚
>0 ){

667 
cou¡
 +
n•a˚
;

668  
n•a˚
>=
ëSPACESIZE
 ){

669 (*
func
)(
¨g
,
•a˚s
,
ëSPACESIZE
);

670 
n•a˚
 -
ëSPACESIZE
;

672 if–
n•a˚
>0 ) (*
func
)(
¨g
,
•a˚s
,nspace);

675 if–
Àngth
>0 ){

676 (*
func
)(
¨g
,
buÂt
,
Àngth
);

677 
cou¡
 +
Àngth
;

679 if–
Êag_À·ju°ify
 ){

680 
n•a˚
;

681 
n•a˚
 = 
width
-
Àngth
;

682 if–
n•a˚
>0 ){

683 
cou¡
 +
n•a˚
;

684  
n•a˚
>=
ëSPACESIZE
 ){

685 (*
func
)(
¨g
,
•a˚s
,
ëSPACESIZE
);

686 
n•a˚
 -
ëSPACESIZE
;

688 if–
n•a˚
>0 ) (*
func
)(
¨g
,
•a˚s
,nspace);

691 if–
zExåa
 ){

692 
	`sqlôeFªe
(
zExåa
);

695  
îr‹Êag
 ? -1 : 
cou¡
;

696 
	}
}

702 
	ssgM¥ötf
 {

703 *
	mzBa£
;

704 *
	mzText
;

705 
	mnCh¨
;

706 
	mnTŸÆ
;

707 
	mnAŒoc
;

708 *(*
	mxRóŒoc
)(*,);

717 
	$mout
(*
¨g
, c⁄° *
zNewText
, 
nNewCh¨
){

718 
sgM¥ötf
 *
pM
 = (sgM¥ötf*)
¨g
;

719 
pM
->
nTŸÆ
 +
nNewCh¨
;

720 if–
pM
->
nCh¨
 + 
nNewCh¨
 + 1 >ÖM->
nAŒoc
 ){

721 if–
pM
->
xRóŒoc
==0 ){

722 
nNewCh¨
 = 
pM
->
nAŒoc
 -ÖM->
nCh¨
 - 1;

724 
pM
->
nAŒoc
 =ÖM->
nCh¨
 + 
nNewCh¨
*2 + 1;

725 if–
pM
->
zText
=ıM->
zBa£
 ){

726 
pM
->
zText
 =ÖM->
	`xRóŒoc
(0,ÖM->
nAŒoc
);

727 if–
pM
->
zText
 &&ÖM->
nCh¨
 ){

728 
	`mem˝y
(
pM
->
zText
,ÖM->
zBa£
,ÖM->
nCh¨
);

731 *
zNew
;

732 
zNew
 = 
pM
->
	`xRóŒoc
’M->
zText
,ÖM->
nAŒoc
);

733 if–
zNew
 ){

734 
pM
->
zText
 = 
zNew
;

739 if–
pM
->
zText
 ){

740 if–
nNewCh¨
>0 ){

741 
	`mem˝y
(&
pM
->
zText
[pM->
nCh¨
], 
zNewText
, 
nNewCh¨
);

742 
pM
->
nCh¨
 +
nNewCh¨
;

744 
pM
->
zText
[pM->
nCh¨
] = 0;

746 
	}
}

752 *
ba£_v¥ötf
(

753 *(*
xRóŒoc
)(*,),

754 
u£I¡î«l
,

755 *
zInôBuf
,

756 
nInôBuf
,

757 c⁄° *
zF‹m©
,

758 
va_li°
 
≠


760 
sgM¥ötf
 
	gsM
;

761 
	gsM
.
	gzBa£
 = 
sM
.
zText
 = 
zInôBuf
;

762 
	gsM
.
	gnCh¨
 = 
sM
.
nTŸÆ
 = 0;

763 
	gsM
.
	gnAŒoc
 = 
nInôBuf
;

764 
	gsM
.
	gxRóŒoc
 = 
xRóŒoc
;

765 
vx¥ötf
(
mout
, &
sM
, 
u£I¡î«l
, 
zF‹m©
, 
≠
);

766 if–
	gxRóŒoc
 ){

767 if–
	gsM
.
	gzText
==
sM
.
zBa£
 ){

768 
sM
.
zText
 = 
xRóŒoc
(0, sM.
nCh¨
+1);

769 if–
	gsM
.
	gzText
 ){

770 
mem˝y
(
sM
.
zText
, sM.
zBa£
, sM.
nCh¨
+1);

772 }if–
	gsM
.
	gnAŒoc
>sM.
	gnCh¨
+10 ){

773 *
	gzNew
 = 
xRóŒoc
(
sM
.
zText
, sM.
nCh¨
+1);

774 if–
	gzNew
 ){

775 
	gsM
.
	gzText
 = 
zNew
;

779  
	gsM
.
	gzText
;

785 *
	$¥ötf_ªÆloc
(*
ﬁd
, 
size
){

786  
	`sqlôeRóŒoc
(
ﬁd
,
size
);

787 
	}
}

793 *
	$sqlôe3VMPrötf
(c⁄° *
zF‹m©
, 
va_li°
 
≠
){

794 
zBa£
[
SQLITE_PRINT_BUF_SIZE
];

795  
	`ba£_v¥ötf
(
¥ötf_ªÆloc
, 1, 
zBa£
, (zBa£), 
zF‹m©
, 
≠
);

796 
	}
}

802 *
	$sqlôe3MPrötf
(c⁄° *
zF‹m©
, ...){

803 
va_li°
 
≠
;

804 *
z
;

805 
zBa£
[
SQLITE_PRINT_BUF_SIZE
];

806 
	`va_°¨t
(
≠
, 
zF‹m©
);

807 
z
 = 
	`ba£_v¥ötf
(
¥ötf_ªÆloc
, 1, 
zBa£
, (zBa£), 
zF‹m©
, 
≠
);

808 
	`va_íd
(
≠
);

809  
z
;

810 
	}
}

816 *
	$sqlôe3_m¥ötf
(c⁄° *
zF‹m©
, ...){

817 
va_li°
 
≠
;

818 *
z
;

819 
zBuf
[200];

821 
	`va_°¨t
(
≠
,
zF‹m©
);

822 
z
 = 
	`ba£_v¥ötf
((*(*)(*,))
ªÆloc
, 0,

823 
zBuf
, (zBuf), 
zF‹m©
, 
≠
);

824 
	`va_íd
(
≠
);

825  
z
;

826 
	}
}

830 *
	$sqlôe3_vm¥ötf
(c⁄° *
zF‹m©
, 
va_li°
 
≠
){

831 
zBuf
[200];

832  
	`ba£_v¥ötf
((*(*)(*,))
ªÆloc
, 0,

833 
zBuf
, (zBuf), 
zF‹m©
, 
≠
);

834 
	}
}

842 *
	$sqlôe3_¢¥ötf
(
n
, *
zBuf
, c⁄° *
zF‹m©
, ...){

843 *
z
;

844 
va_li°
 
≠
;

846 
	`va_°¨t
(
≠
,
zF‹m©
);

847 
z
 = 
	`ba£_v¥ötf
(0, 0, 
zBuf
, 
n
, 
zF‹m©
, 
≠
);

848 
	`va_íd
(
≠
);

849  
z
;

850 
	}
}

852 #i‡
deföed
(
SQLITE_TEST
Ë|| deföed(
SQLITE_DEBUG
)

858 
	$sqlôe3DebugPrötf
(c⁄° *
zF‹m©
, ...){

859 
	`gëpid
();

860 
va_li°
 
≠
;

861 
zBuf
[500];

862 
	`va_°¨t
(
≠
, 
zF‹m©
);

863 
	`ba£_v¥ötf
(0, 0, 
zBuf
, (zBuf), 
zF‹m©
, 
≠
);

864 
	`va_íd
(
≠
);

865 
	`Ârötf
(
°dout
,"%d: %s", 
	`gëpid
(), 
zBuf
);

866 
	`fÊush
(
°dout
);

867 
	}
}

	@random.c

20 
	~"sqlôeI¡.h
"

21 
	~"os.h
"

40 
	$øndomByã
(){

41 
t
;

47 
isInô
;

48 
i
, 
j
;

49 
s
[256];

50 } 
¥ng
;

61 if–!
¥ng
.
isInô
 ){

62 
i
;

63 
k
[256];

64 
¥ng
.
j
 = 0;

65 
¥ng
.
i
 = 0;

66 
	`sqlôe3OsR™domSìd
(
k
);

67 
i
=0; i<256; i++){

68 
¥ng
.
s
[
i
] = i;

70 
i
=0; i<256; i++){

71 
¥ng
.
j
 +¥ng.
s
[
i
] + 
k
[i];

72 
t
 = 
¥ng
.
s
[¥ng.
j
];

73 
¥ng
.
s
[¥ng.
j
] =Ö∫g.s[
i
];

74 
¥ng
.
s
[
i
] = 
t
;

76 
¥ng
.
isInô
 = 1;

81 
¥ng
.
i
++;

82 
t
 = 
¥ng
.
s
[¥ng.
i
];

83 
¥ng
.
j
 +
t
;

84 
¥ng
.
s
[¥ng.
i
] =Ö∫g.s[¥ng.
j
];

85 
¥ng
.
s
[¥ng.
j
] = 
t
;

86 
t
 +
¥ng
.
s
[¥ng.
i
];

87  
¥ng
.
s
[
t
];

88 
	}
}

93 
	$sqlôe3R™dom√ss
(
N
, *
pBuf
){

94 *
zBuf
 = 
pBuf
;

95 
	`sqlôe3OsE¡îMuãx
();

96  
N
-- ){

97 *(
zBuf
++Ë
	`øndomByã
();

99 
	`sqlôe3OsLóveMuãx
();

100 
	}
}

	@select.c

17 
	~"sqlôeI¡.h
"

24 
	$˛órSñe˘
(
Sñe˘
 *
p
){

25 
	`sqlôe3Ex¥Li°Dñëe
(
p
->
pELi°
);

26 
	`sqlôe3SrcLi°Dñëe
(
p
->
pSrc
);

27 
	`sqlôe3Ex¥Dñëe
(
p
->
pWhîe
);

28 
	`sqlôe3Ex¥Li°Dñëe
(
p
->
pGroupBy
);

29 
	`sqlôe3Ex¥Dñëe
(
p
->
pHavög
);

30 
	`sqlôe3Ex¥Li°Dñëe
(
p
->
pOrdîBy
);

31 
	`sqlôe3Sñe˘Dñëe
(
p
->
pPri‹
);

32 
	`sqlôe3Ex¥Dñëe
(
p
->
pLimô
);

33 
	`sqlôe3Ex¥Dñëe
(
p
->
pOff£t
);

34 
	}
}

41 
Sñe˘
 *
	$sqlôe3Sñe˘New
(

42 
Ex¥Li°
 *
pELi°
,

43 
SrcLi°
 *
pSrc
,

44 
Ex¥
 *
pWhîe
,

45 
Ex¥Li°
 *
pGroupBy
,

46 
Ex¥
 *
pHavög
,

47 
Ex¥Li°
 *
pOrdîBy
,

48 
isDi°ö˘
,

49 
Ex¥
 *
pLimô
,

50 
Ex¥
 *
pOff£t


52 
Sñe˘
 *
pNew
;

53 
Sñe˘
 
°™dö
;

54 
pNew
 = 
	`sqlôeMÆloc
( (*pNew) );

55 
	`as£π
–!
pOff£t
 || 
pLimô
 );

56 if–
pNew
==0 ){

57 
pNew
 = &
°™dö
;

58 
	`mem£t
(
pNew
, 0, (*pNew));

60 if–
pELi°
==0 ){

61 
pELi°
 = 
	`sqlôe3Ex¥Li°Aµíd
(0, 
	`sqlôe3Ex¥
(
TK_ALL
,0,0,0), 0);

63 
pNew
->
pELi°
 =ÖEList;

64 
pNew
->
pSrc
 =ÖSrc;

65 
pNew
->
pWhîe
 =ÖWhere;

66 
pNew
->
pGroupBy
 =ÖGroupBy;

67 
pNew
->
pHavög
 =ÖHaving;

68 
pNew
->
pOrdîBy
 =ÖOrderBy;

69 
pNew
->
isDi°ö˘
 = isDistinct;

70 
pNew
->
›
 = 
TK_SELECT
;

71 
pNew
->
pLimô
 =ÖLimit;

72 
pNew
->
pOff£t
 =ÖOffset;

73 
pNew
->
iLimô
 = -1;

74 
pNew
->
iOff£t
 = -1;

75 
pNew
->
addrO≥nVút
[0] = -1;

76 
pNew
->
addrO≥nVút
[1] = -1;

77 
pNew
->
addrO≥nVút
[2] = -1;

78 if–
pNew
==&
°™dö
) {

79 
	`˛órSñe˘
(
pNew
);

80 
pNew
 = 0;

82  
pNew
;

83 
	}
}

88 
	$sqlôe3Sñe˘Dñëe
(
Sñe˘
 *
p
){

89 if–
p
 ){

90 
	`˛órSñe˘
(
p
);

91 
	`sqlôeFªe
(
p
);

93 
	}
}

112 
	$sqlôe3JoöTy≥
(
P¨£
 *
pP¨£
, 
Tokí
 *
pA
, Tokí *
pB
, Tokí *
pC
){

113 
joöty≥
 = 0;

114 
Tokí
 *
≠AŒ
[3];

115 
Tokí
 *
p
;

117 c⁄° 
zKeyw‹d
[8];

118 
u8
 
nCh¨
;

119 
u8
 
code
;

120 } 
keyw‹ds
[] = {

121 { "«tuøl", 7, 
JT_NATURAL
 },

122 { "À·", 4, 
JT_LEFT
|
JT_OUTER
 },

123 { "right", 5, 
JT_RIGHT
|
JT_OUTER
 },

124 { "fuŒ", 4, 
JT_LEFT
|
JT_RIGHT
|
JT_OUTER
 },

125 { "ouãr", 5, 
JT_OUTER
 },

126 { "ö√r", 5, 
JT_INNER
 },

127 { "¸oss", 5, 
JT_INNER
|
JT_CROSS
 },

129 
i
, 
j
;

130 
≠AŒ
[0] = 
pA
;

131 
≠AŒ
[1] = 
pB
;

132 
≠AŒ
[2] = 
pC
;

133 
i
=0; i<3 && 
≠AŒ
[i]; i++){

134 
p
 = 
≠AŒ
[
i
];

135 
j
=0; j<(
keyw‹ds
)/(keywords[0]); j++){

136 if–
p
->
n
==
keyw‹ds
[
j
].
nCh¨


137 && 
	`sqlôe3SåNICmp
((*)
p
->
z
, 
keyw‹ds
[
j
].
zKeyw‹d
,Ö->
n
)==0 ){

138 
joöty≥
 |
keyw‹ds
[
j
].
code
;

142 if–
j
>=(
keyw‹ds
)/(keywords[0]) ){

143 
joöty≥
 |
JT_ERROR
;

148 (
joöty≥
 & (
JT_INNER
|
JT_OUTER
))==(JT_INNER|JT_OUTER) ||

149 (
joöty≥
 & 
JT_ERROR
)!=0

151 c⁄° *
zSp1
 = " ";

152 c⁄° *
zSp2
 = " ";

153 if–
pB
==0 ){ 
zSp1
++; }

154 if–
pC
==0 ){ 
zSp2
++; }

155 
	`sqlôe3Eº‹Msg
(
pP¨£
, "unknown or unsupported joinÅype: "

156 "%T%s%T%s%T", 
pA
, 
zSp1
, 
pB
, 
zSp2
, 
pC
);

157 
joöty≥
 = 
JT_INNER
;

158 }if–
joöty≥
 & 
JT_RIGHT
 ){

159 
	`sqlôe3Eº‹Msg
(
pP¨£
,

161 
joöty≥
 = 
JT_INNER
;

163  
joöty≥
;

164 
	}
}

170 
	$cﬁumnIndex
(
TabÀ
 *
pTab
, c⁄° *
zCﬁ
){

171 
i
;

172 
i
=0; i<
pTab
->
nCﬁ
; i++){

173 if–
	`sqlôe3SåICmp
(
pTab
->
aCﬁ
[
i
].
zName
, 
zCﬁ
)==0 )  i;

176 
	}
}

181 
	$£tTokí
(
Tokí
 *
p
, c⁄° *
z
){

182 
p
->
z
 = (
u8
*)z;

183 
p
->
n
 = 
z
 ? 
	`°æí
(z) : 0;

184 
p
->
dyn
 = 0;

185 
	}
}

190 
Ex¥
 *
	$¸óãIdEx¥
(c⁄° *
zName
){

191 
Tokí
 
dummy
;

192 
	`£tTokí
(&
dummy
, 
zName
);

193  
	`sqlôe3Ex¥
(
TK_ID
, 0, 0, &
dummy
);

194 
	}
}

201 
	$addWhîeTîm
(

202 c⁄° *
zCﬁ
,

203 c⁄° 
TabÀ
 *
pTab1
,

204 c⁄° *
zAlüs1
,

205 c⁄° 
TabÀ
 *
pTab2
,

206 c⁄° *
zAlüs2
,

207 
iRightJoöTabÀ
,

208 
Ex¥
 **
µEx¥


210 
Ex¥
 *
pE1a
, *
pE1b
, *
pE1c
;

211 
Ex¥
 *
pE2a
, *
pE2b
, *
pE2c
;

212 
Ex¥
 *
pE
;

214 
pE1a
 = 
	`¸óãIdEx¥
(
zCﬁ
);

215 
pE2a
 = 
	`¸óãIdEx¥
(
zCﬁ
);

216 if–
zAlüs1
==0 ){

217 
zAlüs1
 = 
pTab1
->
zName
;

219 
pE1b
 = 
	`¸óãIdEx¥
(
zAlüs1
);

220 if–
zAlüs2
==0 ){

221 
zAlüs2
 = 
pTab2
->
zName
;

223 
pE2b
 = 
	`¸óãIdEx¥
(
zAlüs2
);

224 
pE1c
 = 
	`sqlôe3Ex¥
(
TK_DOT
, 
pE1b
, 
pE1a
, 0);

225 
pE2c
 = 
	`sqlôe3Ex¥
(
TK_DOT
, 
pE2b
, 
pE2a
, 0);

226 
pE
 = 
	`sqlôe3Ex¥
(
TK_EQ
, 
pE1c
, 
pE2c
, 0);

227 
	`Ex¥SëPr›îty
(
pE
, 
EP_FromJoö
);

228 
pE
->
iRightJoöTabÀ
 = iRightJoinTable;

229 *
µEx¥
 = 
	`sqlôe3Ex¥And
(*µEx¥, 
pE
);

230 
	}
}

258 
	$£tJoöEx¥
(
Ex¥
 *
p
, 
iTabÀ
){

259  
p
 ){

260 
	`Ex¥SëPr›îty
(
p
, 
EP_FromJoö
);

261 
p
->
iRightJoöTabÀ
 = 
iTabÀ
;

262 
	`£tJoöEx¥
(
p
->
pLe·
, 
iTabÀ
);

263 
p
 =Ö->
pRight
;

265 
	}
}

281 
	$sqlôePro˚ssJoö
(
P¨£
 *
pP¨£
, 
Sñe˘
 *
p
){

282 
SrcLi°
 *
pSrc
;

283 
i
, 
j
;

284 
SrcLi°_ôem
 *
pLe·
;

285 
SrcLi°_ôem
 *
pRight
;

287 
pSrc
 = 
p
->pSrc;

288 
pLe·
 = &
pSrc
->
a
[0];

289 
pRight
 = &
pLe·
[1];

290 
i
=0; i<
pSrc
->
nSrc
-1; i++, 
pRight
++, 
pLe·
++){

291 
TabÀ
 *
pLe·Tab
 = 
pLe·
->
pTab
;

292 
TabÀ
 *
pRightTab
 = 
pRight
->
pTab
;

294 if–
pLe·Tab
==0 || 
pRightTab
==0 ) ;

299 if–
pLe·
->
joöty≥
 & 
JT_NATURAL
 ){

300 if–
pLe·
->
pOn
 ||ÖLe·->
pUsög
 ){

301 
	`sqlôe3Eº‹Msg
(
pP¨£
, "a NATURAL join mayÇot have "

305 
j
=0; j<
pLe·Tab
->
nCﬁ
; j++){

306 *
zName
 = 
pLe·Tab
->
aCﬁ
[
j
].zName;

307 if–
	`cﬁumnIndex
(
pRightTab
, 
zName
)>=0 ){

308 
	`addWhîeTîm
(
zName
, 
pLe·Tab
, 
pLe·
->
zAlüs
,

309 
pRightTab
, 
pRight
->
zAlüs
,

310 
pRight
->
iCurs‹
, &
p
->
pWhîe
);

318 if–
pLe·
->
pOn
 &&ÖLe·->
pUsög
 ){

319 
	`sqlôe3Eº‹Msg
(
pP¨£
, "cannot have both ONánd USING "

327 if–
pLe·
->
pOn
 ){

328 
	`£tJoöEx¥
(
pLe·
->
pOn
, 
pRight
->
iCurs‹
);

329 
p
->
pWhîe
 = 
	`sqlôe3Ex¥And
’->pWhîe, 
pLe·
->
pOn
);

330 
pLe·
->
pOn
 = 0;

340 if–
pLe·
->
pUsög
 ){

341 
IdLi°
 *
pLi°
 = 
pLe·
->
pUsög
;

342 
j
=0; j<
pLi°
->
nId
; j++){

343 *
zName
 = 
pLi°
->
a
[
j
].zName;

344 if–
	`cﬁumnIndex
(
pLe·Tab
, 
zName
)<0 || cﬁumnIndex(
pRightTab
, zName)<0 ){

345 
	`sqlôe3Eº‹Msg
(
pP¨£
, "cannot join using column %s - column "

346 "nŸÖª£¡ i¿bŸhÅabÀs", 
zName
);

349 
	`addWhîeTîm
(
zName
, 
pLe·Tab
, 
pLe·
->
zAlüs
,

350 
pRightTab
, 
pRight
->
zAlüs
,

351 
pRight
->
iCurs‹
, &
p
->
pWhîe
);

356 
	}
}

362 
	$pushO¡oS‹ãr
(

363 
P¨£
 *
pP¨£
,

364 
Ex¥Li°
 *
pOrdîBy
,

365 
Sñe˘
 *
pSñe˘


367 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

368 
	`sqlôe3Ex¥CodeEx¥Li°
(
pP¨£
, 
pOrdîBy
);

369 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Sequí˚
, 
pOrdîBy
->
iECurs‹
, 0);

370 
	`sqlôe3VdbeAddOp
(
v
, 
OP_PuŒ
, 
pOrdîBy
->
nEx¥
 + 1, 0);

371 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MakeRec‹d
, 
pOrdîBy
->
nEx¥
 + 2, 0);

372 
	`sqlôe3VdbeAddOp
(
v
, 
OP_IdxIn£π
, 
pOrdîBy
->
iECurs‹
, 0);

373 if–
pSñe˘
->
iLimô
>=0 ){

374 
addr1
, 
addr2
;

375 
addr1
 = 
	`sqlôe3VdbeAddOp
(
v
, 
OP_IfMemZîo
, 
pSñe˘
->
iLimô
+1, 0);

376 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemIn¸
, -1, 
pSñe˘
->
iLimô
+1);

377 
addr2
 = 
	`sqlôe3VdbeAddOp
(
v
, 
OP_GŸo
, 0, 0);

378 
	`sqlôe3VdbeJumpHîe
(
v
, 
addr1
);

379 
	`sqlôe3VdbeAddOp
(
v
, 
OP_La°
, 
pOrdîBy
->
iECurs‹
, 0);

380 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Dñëe
, 
pOrdîBy
->
iECurs‹
, 0);

381 
	`sqlôe3VdbeJumpHîe
(
v
, 
addr2
);

382 
pSñe˘
->
iLimô
 = -1;

384 
	}
}

389 
	$codeOff£t
(

390 
Vdbe
 *
v
,

391 
Sñe˘
 *
p
,

392 
iC⁄töue
,

393 
nP›


395 if–
p
->
iOff£t
>=0 && 
iC⁄töue
!=0 ){

396 
addr
;

397 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemIn¸
, -1, 
p
->
iOff£t
);

398 
addr
 = 
	`sqlôe3VdbeAddOp
(
v
, 
OP_IfMemNeg
, 
p
->
iOff£t
, 0);

399 if–
nP›
>0 ){

400 
	`sqlôe3VdbeAddOp
(
v
, 
OP_P›
, 
nP›
, 0);

402 
	`sqlôe3VdbeAddOp
(
v
, 
OP_GŸo
, 0, 
iC⁄töue
);

403 
	`VdbeCommít
((
v
, "# skip OFFSETÑecords"));

404 
	`sqlôe3VdbeJumpHîe
(
v
, 
addr
);

406 
	}
}

417 
	$codeDi°ö˘
(

418 
Vdbe
 *
v
,

419 
iTab
,

420 
addrRïót
,

421 
N
,

422 
K


424 #i‡
NULL_ALWAYS_DISTINCT


425 
	`sqlôe3VdbeAddOp
(
v
, 
OP_IsNuŒ
, -
N
, 
	`sqlôe3VdbeCuºítAddr
(v)+6);

427 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MakeRec‹d
, -
N
, 0);

428 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Di°ö˘
, 
iTab
, 
	`sqlôe3VdbeCuºítAddr
(v)+3);

429 
	`sqlôe3VdbeAddOp
(
v
, 
OP_P›
, 
K
, 0);

430 
	`sqlôe3VdbeAddOp
(
v
, 
OP_GŸo
, 0, 
addrRïót
);

431 
	`VdbeCommít
((
v
, "# skip indistinctÑecords"));

432 
	`sqlôe3VdbeAddOp
(
v
, 
OP_IdxIn£π
, 
iTab
, 0);

433 
	}
}

445 
	$£À˘I¬îLo›
(

446 
P¨£
 *
pP¨£
,

447 
Sñe˘
 *
p
,

448 
Ex¥Li°
 *
pELi°
,

449 
§cTab
,

450 
nCﬁumn
,

451 
Ex¥Li°
 *
pOrdîBy
,

452 
di°ö˘
,

453 
eDe°
,

454 
iP¨m
,

455 
iC⁄töue
,

456 
iBªak
,

457 *
aff


459 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

460 
i
;

461 
hasDi°ö˘
;

463 if–
v
==0 )  0;

464 
	`as£π
–
pELi°
!=0 );

469 
hasDi°ö˘
 = 
di°ö˘
>=0 && 
pELi°
->
nEx¥
>0;

470 if–
pOrdîBy
==0 && !
hasDi°ö˘
 ){

471 
	`codeOff£t
(
v
, 
p
, 
iC⁄töue
, 0);

476 if–
nCﬁumn
>0 ){

477 
i
=0; i<
nCﬁumn
; i++){

478 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Cﬁumn
, 
§cTab
, 
i
);

481 
nCﬁumn
 = 
pELi°
->
nEx¥
;

482 
	`sqlôe3Ex¥CodeEx¥Li°
(
pP¨£
, 
pELi°
);

489 if–
hasDi°ö˘
 ){

490 
n
 = 
pELi°
->
nEx¥
;

491 
	`codeDi°ö˘
(
v
, 
di°ö˘
, 
iC⁄töue
, 
n
,Ç+1);

492 if–
pOrdîBy
==0 ){

493 
	`codeOff£t
(
v
, 
p
, 
iC⁄töue
, 
nCﬁumn
);

497  
eDe°
 ){

501 #i‚de‡
SQLITE_OMIT_COMPOUND_SELECT


502 
SRT_Uni⁄
: {

503 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MakeRec‹d
, 
nCﬁumn
, 
NULL_ALWAYS_DISTINCT
);

504 if–
aff
 ){

505 
	`sqlôe3VdbeCh™geP3
(
v
, -1, 
aff
, 
P3_STATIC
);

507 
	`sqlôe3VdbeAddOp
(
v
, 
OP_IdxIn£π
, 
iP¨m
, 0);

515 
SRT_Ex˚±
: {

516 
addr
;

517 
addr
 = 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MakeRec‹d
, 
nCﬁumn
, 
NULL_ALWAYS_DISTINCT
);

518 
	`sqlôe3VdbeCh™geP3
(
v
, -1, 
aff
, 
P3_STATIC
);

519 
	`sqlôe3VdbeAddOp
(
v
, 
OP_NŸFound
, 
iP¨m
, 
addr
+3);

520 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Dñëe
, 
iP¨m
, 0);

527 
SRT_TabÀ
:

528 
SRT_VútuÆTab
: {

529 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MakeRec‹d
, 
nCﬁumn
, 0);

530 if–
pOrdîBy
 ){

531 
	`pushO¡oS‹ãr
(
pP¨£
, 
pOrdîBy
, 
p
);

533 
	`sqlôe3VdbeAddOp
(
v
, 
OP_NewRowid
, 
iP¨m
, 0);

534 
	`sqlôe3VdbeAddOp
(
v
, 
OP_PuŒ
, 1, 0);

535 
	`sqlôe3VdbeAddOp
(
v
, 
OP_In£π
, 
iP¨m
, 0);

540 #i‚de‡
SQLITE_OMIT_SUBQUERY


545 
SRT_Së
: {

546 
addr1
 = 
	`sqlôe3VdbeCuºítAddr
(
v
);

547 
addr2
;

549 
	`as£π
–
nCﬁumn
==1 );

550 
	`sqlôe3VdbeAddOp
(
v
, 
OP_NŸNuŒ
, -1, 
addr1
+3);

551 
	`sqlôe3VdbeAddOp
(
v
, 
OP_P›
, 1, 0);

552 
addr2
 = 
	`sqlôe3VdbeAddOp
(
v
, 
OP_GŸo
, 0, 0);

553 if–
pOrdîBy
 ){

558 
	`pushO¡oS‹ãr
(
pP¨£
, 
pOrdîBy
, 
p
);

560 
afföôy
 = (
iP¨m
>>16)&0xFF;

561 
afföôy
 = 
	`sqlôe3Com∑ªAfföôy
(
pELi°
->
a
[0].
pEx¥
,áffinity);

562 
	`sqlôe3VdbeOp3
(
v
, 
OP_MakeRec‹d
, 1, 0, &
afföôy
, 1);

563 
	`sqlôe3VdbeAddOp
(
v
, 
OP_IdxIn£π
, (
iP¨m
&0x0000FFFF), 0);

565 
	`sqlôe3VdbeJumpHîe
(
v
, 
addr2
);

571 
SRT_Exi°s
: {

572 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemI¡
, 1, 
iP¨m
);

573 
	`sqlôe3VdbeAddOp
(
v
, 
OP_P›
, 
nCﬁumn
, 0);

582 
SRT_Mem
: {

583 
	`as£π
–
nCﬁumn
==1 );

584 if–
pOrdîBy
 ){

585 
	`pushO¡oS‹ãr
(
pP¨£
, 
pOrdîBy
, 
p
);

587 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemSt‹e
, 
iP¨m
, 1);

598 
SRT_Subroutöe
:

599 
SRT_CÆlback
: {

600 if–
pOrdîBy
 ){

601 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MakeRec‹d
, 
nCﬁumn
, 0);

602 
	`pushO¡oS‹ãr
(
pP¨£
, 
pOrdîBy
, 
p
);

603 }if–
eDe°
==
SRT_Subroutöe
 ){

604 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Gosub
, 0, 
iP¨m
);

606 
	`sqlôe3VdbeAddOp
(
v
, 
OP_CÆlback
, 
nCﬁumn
, 0);

611 #i‡!
	`deföed
(
SQLITE_OMIT_TRIGGER
)

618 
	`as£π
–
eDe°
==
SRT_Disˇrd
 );

619 
	`sqlôe3VdbeAddOp
(
v
, 
OP_P›
, 
nCﬁumn
, 0);

627 if–
p
->
iLimô
>=0 && 
pOrdîBy
==0 ){

628 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemIn¸
, -1, 
p
->
iLimô
);

629 
	`sqlôe3VdbeAddOp
(
v
, 
OP_IfMemZîo
, 
p
->
iLimô
, 
iBªak
);

632 
	}
}

649 
KeyInfo
 *
	$keyInfoFromEx¥Li°
(
P¨£
 *
pP¨£
, 
Ex¥Li°
 *
pLi°
){

650 
sqlôe3
 *
db
 = 
pP¨£
->db;

651 
nEx¥
;

652 
KeyInfo
 *
pInfo
;

653 
Ex¥Li°_ôem
 *
pIãm
;

654 
i
;

656 
nEx¥
 = 
pLi°
->nExpr;

657 
pInfo
 = 
	`sqlôeMÆloc
–(*pInfoË+ 
nEx¥
*((
CﬁlSeq
*)+1) );

658 if–
pInfo
 ){

659 
pInfo
->
aS‹tOrdî
 = (
u8
*)&pInfo->
aCﬁl
[
nEx¥
];

660 
pInfo
->
nFõld
 = 
nEx¥
;

661 
pInfo
->
íc
 = 
	`ENC
(
db
);

662 
i
=0, 
pIãm
=
pLi°
->
a
; i<
nEx¥
; i++,ÖItem++){

663 
CﬁlSeq
 *
pCﬁl
;

664 
pCﬁl
 = 
	`sqlôe3Ex¥CﬁlSeq
(
pP¨£
, 
pIãm
->
pEx¥
);

665 if–!
pCﬁl
 ){

666 
pCﬁl
 = 
db
->
pDÊtCﬁl
;

668 
pInfo
->
aCﬁl
[
i
] = 
pCﬁl
;

669 
pInfo
->
aS‹tOrdî
[
i
] = 
pIãm
->
s‹tOrdî
;

672  
pInfo
;

673 
	}
}

682 
	$gíî©eS‹tTaû
(

683 
P¨£
 *
pP¨£
,

684 
Sñe˘
 *
p
,

685 
Vdbe
 *
v
,

686 
nCﬁumn
,

687 
eDe°
,

688 
iP¨m


690 
brk
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

691 
c⁄t
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

692 
addr
;

693 
iTab
;

694 
Ex¥Li°
 *
pOrdîBy
 = 
p
->pOrderBy;

696 
iTab
 = 
pOrdîBy
->
iECurs‹
;

697 
addr
 = 1 + 
	`sqlôe3VdbeAddOp
(
v
, 
OP_S‹t
, 
iTab
, 
brk
);

698 
	`codeOff£t
(
v
, 
p
, 
c⁄t
, 0);

699 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Cﬁumn
, 
iTab
, 
pOrdîBy
->
nEx¥
 + 1);

700  
eDe°
 ){

701 
SRT_TabÀ
:

702 
SRT_VútuÆTab
: {

703 
	`sqlôe3VdbeAddOp
(
v
, 
OP_NewRowid
, 
iP¨m
, 0);

704 
	`sqlôe3VdbeAddOp
(
v
, 
OP_PuŒ
, 1, 0);

705 
	`sqlôe3VdbeAddOp
(
v
, 
OP_In£π
, 
iP¨m
, 0);

708 #i‚de‡
SQLITE_OMIT_SUBQUERY


709 
SRT_Së
: {

710 
	`as£π
–
nCﬁumn
==1 );

711 
	`sqlôe3VdbeAddOp
(
v
, 
OP_NŸNuŒ
, -1, 
	`sqlôe3VdbeCuºítAddr
(v)+3);

712 
	`sqlôe3VdbeAddOp
(
v
, 
OP_P›
, 1, 0);

713 
	`sqlôe3VdbeAddOp
(
v
, 
OP_GŸo
, 0, 
	`sqlôe3VdbeCuºítAddr
(v)+3);

714 
	`sqlôe3VdbeOp3
(
v
, 
OP_MakeRec‹d
, 1, 0, "c", 
P3_STATIC
);

715 
	`sqlôe3VdbeAddOp
(
v
, 
OP_IdxIn£π
, (
iP¨m
&0x0000FFFF), 0);

718 
SRT_Mem
: {

719 
	`as£π
–
nCﬁumn
==1 );

720 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemSt‹e
, 
iP¨m
, 1);

725 
SRT_CÆlback
:

726 
SRT_Subroutöe
: {

727 
i
;

728 
	`sqlôe3VdbeAddOp
(
v
, 
OP_I¡egî
, 
p
->
pELi°
->
nEx¥
, 0);

729 
	`sqlôe3VdbeAddOp
(
v
, 
OP_PuŒ
, 1, 0);

730 
i
=0; i<
nCﬁumn
; i++){

731 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Cﬁumn
, -1-
i
, i);

733 if–
eDe°
==
SRT_CÆlback
 ){

734 
	`sqlôe3VdbeAddOp
(
v
, 
OP_CÆlback
, 
nCﬁumn
, 0);

736 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Gosub
, 0, 
iP¨m
);

738 
	`sqlôe3VdbeAddOp
(
v
, 
OP_P›
, 2, 0);

749 if–
p
->
iLimô
>=0 ){

750 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemIn¸
, -1, 
p
->
iLimô
);

751 
	`sqlôe3VdbeAddOp
(
v
, 
OP_IfMemZîo
, 
p
->
iLimô
, 
brk
);

756 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
c⁄t
);

757 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Next
, 
iTab
, 
addr
);

758 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
brk
);

759 
	}
}

771 c⁄° *
	$cﬁumnTy≥
(
NameC⁄ãxt
 *
pNC
, 
Ex¥
 *
pEx¥
){

772 c⁄° *
zTy≥
;

773 
j
;

774 if–
pEx¥
==0 || 
pNC
->
pSrcLi°
==0 )  0;

780 
	`as£π
–
pEx¥
->
›
!=
TK_AS
 );

782  
pEx¥
->
›
 ){

783 
TK_COLUMN
: {

784 
TabÀ
 *
pTab
 = 0;

785 
iCﬁ
 = 
pEx¥
->
iCﬁumn
;

786  
pNC
 && !
pTab
 ){

787 
SrcLi°
 *
pTabLi°
 = 
pNC
->
pSrcLi°
;

788 
j
=0;j<
pTabLi°
->
nSrc
 &&ÖTabLi°->
a
[j].
iCurs‹
!=
pEx¥
->
iTabÀ
;j++);

789 if–
j
<
pTabLi°
->
nSrc
 ){

790 
pTab
 = 
pTabLi°
->
a
[
j
].pTab;

792 
pNC
 =ÖNC->
pNext
;

795 if–
pTab
==0 ){

806 
zTy≥
 = "TEXT";

809 
	`as£π
–
pTab
 );

810 if–
iCﬁ
<0 ) iCﬁ = 
pTab
->
iPKey
;

811 
	`as£π
–
iCﬁ
==-1 || (iCﬁ>=0 && iCﬁ<
pTab
->
nCﬁ
) );

812 if–
iCﬁ
<0 ){

813 
zTy≥
 = "INTEGER";

815 
zTy≥
 = 
pTab
->
aCﬁ
[
iCﬁ
].zType;

819 #i‚de‡
SQLITE_OMIT_SUBQUERY


820 
TK_SELECT
: {

821 
NameC⁄ãxt
 
sNC
;

822 
Sñe˘
 *
pS
 = 
pEx¥
->
pSñe˘
;

823 
sNC
.
pSrcLi°
 = 
pEx¥
->
pSñe˘
->
pSrc
;

824 
sNC
.
pNext
 = 
pNC
;

825 
zTy≥
 = 
	`cﬁumnTy≥
(&
sNC
, 
pS
->
pELi°
->
a
[0].
pEx¥
);

830 
zTy≥
 = 0;

833  
zTy≥
;

834 
	}
}

840 
	$gíî©eCﬁumnTy≥s
(

841 
P¨£
 *
pP¨£
,

842 
SrcLi°
 *
pTabLi°
,

843 
Ex¥Li°
 *
pELi°


845 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

846 
i
;

847 
NameC⁄ãxt
 
sNC
;

848 
sNC
.
pSrcLi°
 = 
pTabLi°
;

849 
i
=0; i<
pELi°
->
nEx¥
; i++){

850 
Ex¥
 *
p
 = 
pELi°
->
a
[
i
].
pEx¥
;

851 c⁄° *
zTy≥
 = 
	`cﬁumnTy≥
(&
sNC
, 
p
);

852 if–
zTy≥
==0 ) ;

856 
	`sqlôe3VdbeSëCﬁName
(
v
, 
i
+
pELi°
->
nEx¥
, 
zTy≥
, 
	`°æí
(zType));

858 
	}
}

865 
	$gíî©eCﬁumnNames
(

866 
P¨£
 *
pP¨£
,

867 
SrcLi°
 *
pTabLi°
,

868 
Ex¥Li°
 *
pELi°


870 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

871 
i
, 
j
;

872 
sqlôe3
 *
db
 = 
pP¨£
->db;

873 
fuŒNames
, 
sh‹tNames
;

875 #i‚de‡
SQLITE_OMIT_EXPLAIN


877 if–
pP¨£
->
ex∂aö
 ){

882 
	`as£π
–
v
!=0 );

883 if–
pP¨£
->
cﬁNamesSë
 || 
v
==0 || 
	`sqlôe3MÆlocFaûed
() ) ;

884 
pP¨£
->
cﬁNamesSë
 = 1;

885 
fuŒNames
 = (
db
->
Êags
 & 
SQLITE_FuŒCﬁNames
)!=0;

886 
sh‹tNames
 = (
db
->
Êags
 & 
SQLITE_Sh‹tCﬁNames
)!=0;

887 
	`sqlôe3VdbeSëNumCﬁs
(
v
, 
pELi°
->
nEx¥
);

888 
i
=0; i<
pELi°
->
nEx¥
; i++){

889 
Ex¥
 *
p
;

890 
p
 = 
pELi°
->
a
[
i
].
pEx¥
;

891 if–
p
==0 ) ;

892 if–
pELi°
->
a
[
i
].
zName
 ){

893 *
zName
 = 
pELi°
->
a
[
i
].zName;

894 
	`sqlôe3VdbeSëCﬁName
(
v
, 
i
, 
zName
, 
	`°æí
(zName));

897 if–
p
->
›
==
TK_COLUMN
 && 
pTabLi°
 ){

898 
TabÀ
 *
pTab
;

899 *
zCﬁ
;

900 
iCﬁ
 = 
p
->
iCﬁumn
;

901 
j
=0; j<
pTabLi°
->
nSrc
 &&ÖTabLi°->
a
[j].
iCurs‹
!=
p
->
iTabÀ
; j++){}

902 
	`as£π
–
j
<
pTabLi°
->
nSrc
 );

903 
pTab
 = 
pTabLi°
->
a
[
j
].pTab;

904 if–
iCﬁ
<0 ) iCﬁ = 
pTab
->
iPKey
;

905 
	`as£π
–
iCﬁ
==-1 || (iCﬁ>=0 && iCﬁ<
pTab
->
nCﬁ
) );

906 if–
iCﬁ
<0 ){

907 
zCﬁ
 = "rowid";

909 
zCﬁ
 = 
pTab
->
aCﬁ
[
iCﬁ
].
zName
;

911 if–!
sh‹tNames
 && !
fuŒNames
 && 
p
->
•™
.
z
 &&Ö->span.z[0] ){

912 
	`sqlôe3VdbeSëCﬁName
(
v
, 
i
, (*)
p
->
•™
.
z
,Ö->•™.
n
);

913 }if–
fuŒNames
 || (!
sh‹tNames
 && 
pTabLi°
->
nSrc
>1) ){

914 *
zName
 = 0;

915 *
zTab
;

917 
zTab
 = 
pTabLi°
->
a
[
j
].
zAlüs
;

918 if–
fuŒNames
 || 
zTab
==0 ) zTab = 
pTab
->
zName
;

919 
	`sqlôe3SëSåög
(&
zName
, 
zTab
, ".", 
zCﬁ
, (*)0);

920 
	`sqlôe3VdbeSëCﬁName
(
v
, 
i
, 
zName
, 
P3_DYNAMIC
);

922 
	`sqlôe3VdbeSëCﬁName
(
v
, 
i
, 
zCﬁ
, 
	`°æí
(zCol));

924 }if–
p
->
•™
.
z
 &&Ö->span.z[0] ){

925 
	`sqlôe3VdbeSëCﬁName
(
v
, 
i
, (*)
p
->
•™
.
z
,Ö->•™.
n
);

928 
zName
[30];

929 
	`as£π
–
p
->
›
!=
TK_COLUMN
 || 
pTabLi°
==0 );

930 
	`•rötf
(
zName
, "cﬁumn%d", 
i
+1);

931 
	`sqlôe3VdbeSëCﬁName
(
v
, 
i
, 
zName
, 0);

934 
	`gíî©eCﬁumnTy≥s
(
pP¨£
, 
pTabLi°
, 
pELi°
);

935 
	}
}

937 #i‚de‡
SQLITE_OMIT_COMPOUND_SELECT


941 c⁄° *
	$£À˘OpName
(
id
){

942 *
z
;

943  
id
 ){

944 
TK_ALL
: 
z
 = "UNION ALL"; ;

945 
TK_INTERSECT
: 
z
 = "INTERSECT"; ;

946 
TK_EXCEPT
: 
z
 = "EXCEPT"; ;

947 : 
z
 = "UNION"; ;

949  
z
;

950 
	}
}

956 
¥ïSñe˘Stmt
(
P¨£
*, 
Sñe˘
*);

962 
TabÀ
 *
	$sqlôe3Resu…SëOfSñe˘
(
P¨£
 *
pP¨£
, *
zTabName
, 
Sñe˘
 *
pSñe˘
){

963 
TabÀ
 *
pTab
;

964 
i
, 
j
;

965 
Ex¥Li°
 *
pELi°
;

966 
Cﬁumn
 *
aCﬁ
, *
pCﬁ
;

968 if–
	`¥ïSñe˘Stmt
(
pP¨£
, 
pSñe˘
) ){

971 if–
	`sqlôe3Sñe˘Resﬁve
(
pP¨£
, 
pSñe˘
, 0) ){

974 
pTab
 = 
	`sqlôeMÆloc
–(
TabÀ
) );

975 if–
pTab
==0 ){

978 
pTab
->
nRef
 = 1;

979 
pTab
->
zName
 = 
zTabName
 ? 
	`sqlôeSåDup
(zTabName) : 0;

980 
pELi°
 = 
pSñe˘
->pEList;

981 
pTab
->
nCﬁ
 = 
pELi°
->
nEx¥
;

982 
	`as£π
–
pTab
->
nCﬁ
>0 );

983 
pTab
->
aCﬁ
 =áCﬁ = 
	`sqlôeMÆloc
–’Tab->aCﬁ[0])*pTab->
nCﬁ
 );

984 
i
=0, 
pCﬁ
=
aCﬁ
; i<
pTab
->
nCﬁ
; i++,ÖCol++){

985 
Ex¥
 *
p
, *
pR
;

986 *
zTy≥
;

987 *
zName
;

988 *
zBa£«me
;

989 
CﬁlSeq
 *
pCﬁl
;

990 
˙t
;

991 
NameC⁄ãxt
 
sNC
;

995 
p
 = 
pELi°
->
a
[
i
].
pEx¥
;

996 
	`as£π
–
p
->
pRight
==0 ||Ö->pRight->
tokí
.
z
==0 ||Ö->pRight->token.z[0]!=0 );

997 if–(
zName
 = 
pELi°
->
a
[
i
].zName)!=0 ){

999 
zName
 = 
	`sqlôeSåDup
(zName);

1000 }if–
p
->
›
==
TK_DOT


1001 && (
pR
=
p
->
pRight
)!=0 &&ÖR->
tokí
.
z
 &&ÖR->token.z[0] ){

1003 
zName
 = 
	`sqlôe3MPrötf
("%T", &
pR
->
tokí
);

1004 }if–
p
->
•™
.
z
 &&Ö->span.z[0] ){

1006 
zName
 = 
	`sqlôe3MPrötf
("%T", &
p
->
•™
);

1009 
zName
 = 
	`sqlôe3MPrötf
("cﬁumn%d", 
i
+1);

1011 
	`sqlôe3DequŸe
(
zName
);

1012 if–
	`sqlôe3MÆlocFaûed
() ){

1013 
	`sqlôeFªe
(
zName
);

1014 
	`sqlôe3DñëeTabÀ
(0, 
pTab
);

1021 
zBa£«me
 = 
zName
;

1022 
j
=
˙t
=0; j<
i
; j++){

1023 if–
	`sqlôe3SåICmp
(
aCﬁ
[
j
].
zName
, zName)==0 ){

1024 
zName
 = 
	`sqlôe3MPrötf
("%s:%d", 
zBa£«me
, ++
˙t
);

1025 
j
 = -1;

1026 if–
zName
==0 ) ;

1029 if–
zBa£«me
!=
zName
 ){

1030 
	`sqlôeFªe
(
zBa£«me
);

1032 
pCﬁ
->
zName
 = zName;

1037 
	`mem£t
(&
sNC
, 0, (sNC));

1038 
sNC
.
pSrcLi°
 = 
pSñe˘
->
pSrc
;

1039 
zTy≥
 = 
	`sqlôeSåDup
(
	`cﬁumnTy≥
(&
sNC
, 
p
));

1040 
pCﬁ
->
zTy≥
 = zType;

1041 
pCﬁ
->
afföôy
 = 
	`sqlôe3Ex¥Afföôy
(
p
);

1042 
pCﬁl
 = 
	`sqlôe3Ex¥CﬁlSeq
(
pP¨£
, 
p
);

1043 if–
pCﬁl
 ){

1044 
pCﬁ
->
zCﬁl
 = 
	`sqlôeSåDup
(
pCﬁl
->
zName
);

1047 
pTab
->
iPKey
 = -1;

1048  
pTab
;

1049 
	}
}

1077 
	$¥ïSñe˘Stmt
(
P¨£
 *
pP¨£
, 
Sñe˘
 *
p
){

1078 
i
, 
j
, 
k
, 
rc
;

1079 
SrcLi°
 *
pTabLi°
;

1080 
Ex¥Li°
 *
pELi°
;

1081 
SrcLi°_ôem
 *
pFrom
;

1083 if–
p
==0 ||Ö->
pSrc
==0 || 
	`sqlôe3MÆlocFaûed
() ){

1086 
pTabLi°
 = 
p
->
pSrc
;

1087 
pELi°
 = 
p
->pEList;

1092 
	`sqlôe3SrcLi°AssignCurs‹s
(
pP¨£
, 
p
->
pSrc
);

1098 
i
=0, 
pFrom
=
pTabLi°
->
a
; i<pTabLi°->
nSrc
; i++,ÖFrom++){

1099 
TabÀ
 *
pTab
;

1100 if–
pFrom
->
pTab
!=0 ){

1103 
	`as£π
–
i
==0 );

1106 if–
pFrom
->
zName
==0 ){

1107 #i‚de‡
SQLITE_OMIT_SUBQUERY


1109 
	`as£π
–
pFrom
->
pSñe˘
!=0 );

1110 if–
pFrom
->
zAlüs
==0 ){

1111 
pFrom
->
zAlüs
 =

1112 
	`sqlôe3MPrötf
("sqlôe_subquîy_%p_", (*)
pFrom
->
pSñe˘
);

1114 
	`as£π
–
pFrom
->
pTab
==0 );

1115 
pFrom
->
pTab
 =ÖTab =

1116 
	`sqlôe3Resu…SëOfSñe˘
(
pP¨£
, 
pFrom
->
zAlüs
,ÖFrom->
pSñe˘
);

1117 if–
pTab
==0 ){

1124 
pTab
->
isTønsõ¡
 = 1;

1128 
	`as£π
–
pFrom
->
pTab
==0 );

1129 
pFrom
->
pTab
 =ÖTab =

1130 
	`sqlôe3LoˇãTabÀ
(
pP¨£
,
pFrom
->
zName
,pFrom->
zD©aba£
);

1131 if–
pTab
==0 ){

1134 
pTab
->
nRef
++;

1135 #i‚de‡
SQLITE_OMIT_VIEW


1136 if–
pTab
->
pSñe˘
 ){

1138 if–
	`sqlôe3VõwGëCﬁumnNames
(
pP¨£
, 
pTab
) ){

1146 if–
pFrom
->
pSñe˘
==0 ){

1147 
pFrom
->
pSñe˘
 = 
	`sqlôe3Sñe˘Dup
(
pTab
->pSelect);

1156 if–
	`sqlôePro˚ssJoö
(
pP¨£
, 
p
) )  1;

1168 
k
=0; k<
pELi°
->
nEx¥
; k++){

1169 
Ex¥
 *
pE
 = 
pELi°
->
a
[
k
].
pEx¥
;

1170 if–
pE
->
›
==
TK_ALL
 ) ;

1171 if–
pE
->
›
==
TK_DOT
 &&ÖE->
pRight
 &&ÖE->pRight->›==
TK_ALL


1172 && 
pE
->
pLe·
 &&ÖE->pLe·->
›
==
TK_ID
 ) ;

1174 
rc
 = 0;

1175 if–
k
<
pELi°
->
nEx¥
 ){

1181 
Ex¥Li°_ôem
 *
a
 = 
pELi°
->a;

1182 
Ex¥Li°
 *
pNew
 = 0;

1183 
Êags
 = 
pP¨£
->
db
->flags;

1184 
l⁄gNames
 = (
Êags
 & 
SQLITE_FuŒCﬁNames
)!=0 &&

1185 (
Êags
 & 
SQLITE_Sh‹tCﬁNames
)==0;

1187 
k
=0; k<
pELi°
->
nEx¥
; k++){

1188 
Ex¥
 *
pE
 = 
a
[
k
].
pEx¥
;

1189 if–
pE
->
›
!=
TK_ALL
 &&

1190 (
pE
->
›
!=
TK_DOT
 ||ÖE->
pRight
==0 ||ÖE->pRight->›!=
TK_ALL
) ){

1193 
pNew
 = 
	`sqlôe3Ex¥Li°Aµíd
’New, 
a
[
k
].
pEx¥
, 0);

1194 if–
pNew
 ){

1195 
pNew
->
a
[pNew->
nEx¥
-1].
zName
 =á[
k
].zName;

1197 
rc
 = 1;

1199 
a
[
k
].
pEx¥
 = 0;

1200 
a
[
k
].
zName
 = 0;

1204 
èbÀSìn
 = 0;

1205 *
zTName
;

1206 if–
pE
->
›
==
TK_DOT
 &&ÖE->
pLe·
 ){

1207 
zTName
 = 
	`sqlôe3NameFromTokí
(&
pE
->
pLe·
->
tokí
);

1209 
zTName
 = 0;

1211 
i
=0, 
pFrom
=
pTabLi°
->
a
; i<pTabLi°->
nSrc
; i++,ÖFrom++){

1212 
TabÀ
 *
pTab
 = 
pFrom
->pTab;

1213 *
zTabName
 = 
pFrom
->
zAlüs
;

1214 if–
zTabName
==0 || zTabName[0]==0 ){

1215 
zTabName
 = 
pTab
->
zName
;

1217 if–
zTName
 && (
zTabName
==0 || zTabName[0]==0 ||

1218 
	`sqlôe3SåICmp
(
zTName
, 
zTabName
)!=0) ){

1221 
èbÀSìn
 = 1;

1222 
j
=0; j<
pTab
->
nCﬁ
; j++){

1223 
Ex¥
 *
pEx¥
, *
pRight
;

1224 *
zName
 = 
pTab
->
aCﬁ
[
j
].zName;

1226 if–
i
>0 ){

1227 
SrcLi°_ôem
 *
pLe·
 = &
pTabLi°
->
a
[
i
-1];

1228 if–(
pLe·
->
joöty≥
 & 
JT_NATURAL
)!=0 &&

1229 
	`cﬁumnIndex
(
pLe·
->
pTab
, 
zName
)>=0 ){

1234 if–
	`sqlôe3IdLi°Index
(
pLe·
->
pUsög
, 
zName
)>=0 ){

1240 
pRight
 = 
	`sqlôe3Ex¥
(
TK_ID
, 0, 0, 0);

1241 if–
pRight
==0 ) ;

1242 
	`£tTokí
(&
pRight
->
tokí
, 
zName
);

1243 if–
zTabName
 && (
l⁄gNames
 || 
pTabLi°
->
nSrc
>1) ){

1244 
Ex¥
 *
pLe·
 = 
	`sqlôe3Ex¥
(
TK_ID
, 0, 0, 0);

1245 
pEx¥
 = 
	`sqlôe3Ex¥
(
TK_DOT
, 
pLe·
, 
pRight
, 0);

1246 if–
pEx¥
==0 ) ;

1247 
	`£tTokí
(&
pLe·
->
tokí
, 
zTabName
);

1248 
	`£tTokí
(&
pEx¥
->
•™
, 
	`sqlôe3MPrötf
("%s.%s", 
zTabName
, 
zName
));

1249 
pEx¥
->
•™
.
dyn
 = 1;

1250 
pEx¥
->
tokí
.
z
 = 0;

1251 
pEx¥
->
tokí
.
n
 = 0;

1252 
pEx¥
->
tokí
.
dyn
 = 0;

1254 
pEx¥
 = 
pRight
;

1255 
pEx¥
->
•™
 =ÖEx¥->
tokí
;

1257 if–
l⁄gNames
 ){

1258 
pNew
 = 
	`sqlôe3Ex¥Li°Aµíd
’New, 
pEx¥
, &pEx¥->
•™
);

1260 
pNew
 = 
	`sqlôe3Ex¥Li°Aµíd
’New, 
pEx¥
, &
pRight
->
tokí
);

1264 if–!
èbÀSìn
 ){

1265 if–
zTName
 ){

1266 
	`sqlôe3Eº‹Msg
(
pP¨£
, "nÿsuchÅabÀ: %s", 
zTName
);

1268 
	`sqlôe3Eº‹Msg
(
pP¨£
, "noÅables specified");

1270 
rc
 = 1;

1272 
	`sqlôeFªe
(
zTName
);

1275 
	`sqlôe3Ex¥Li°Dñëe
(
pELi°
);

1276 
p
->
pELi°
 = 
pNew
;

1278  
rc
;

1279 
	}
}

1281 #i‚de‡
SQLITE_OMIT_COMPOUND_SELECT


1295 
	$m©chOrdîbyToCﬁumn
(

1296 
P¨£
 *
pP¨£
,

1297 
Sñe˘
 *
pSñe˘
,

1298 
Ex¥Li°
 *
pOrdîBy
,

1299 
iTabÀ
,

1300 
mu°Com∂ëe


1302 
nEº
 = 0;

1303 
i
, 
j
;

1304 
Ex¥Li°
 *
pELi°
;

1306 if–
pSñe˘
==0 || 
pOrdîBy
==0 )  1;

1307 if–
mu°Com∂ëe
 ){

1308 
i
=0; i<
pOrdîBy
->
nEx¥
; i++){ÖOrdîBy->
a
[i].
d⁄e
 = 0; }

1310 if–
	`¥ïSñe˘Stmt
(
pP¨£
, 
pSñe˘
) ){

1313 if–
pSñe˘
->
pPri‹
 ){

1314 if–
	`m©chOrdîbyToCﬁumn
(
pP¨£
, 
pSñe˘
->
pPri‹
, 
pOrdîBy
, 
iTabÀ
, 0) ){

1318 
pELi°
 = 
pSñe˘
->pEList;

1319 
i
=0; i<
pOrdîBy
->
nEx¥
; i++){

1320 
Ex¥
 *
pE
 = 
pOrdîBy
->
a
[
i
].
pEx¥
;

1321 
iCﬁ
 = -1;

1322 if–
pOrdîBy
->
a
[
i
].
d⁄e
 ) ;

1323 if–
	`sqlôe3Ex¥IsI¡egî
(
pE
, &
iCﬁ
) ){

1324 if–
iCﬁ
<=0 || iCﬁ>
pELi°
->
nEx¥
 ){

1325 
	`sqlôe3Eº‹Msg
(
pP¨£
,

1327 
iCﬁ
, 
pELi°
->
nEx¥
);

1328 
nEº
++;

1331 if–!
mu°Com∂ëe
 ) ;

1332 
iCﬁ
--;

1334 
j
=0; 
iCﬁ
<0 && j<
pELi°
->
nEx¥
; j++){

1335 if–
pELi°
->
a
[
j
].
zName
 && (
pE
->
›
==
TK_ID
 ||ÖE->›==
TK_STRING
) ){

1336 *
zName
, *
zLabñ
;

1337 
zName
 = 
pELi°
->
a
[
j
].zName;

1338 
zLabñ
 = 
	`sqlôe3NameFromTokí
(&
pE
->
tokí
);

1339 
	`as£π
–
zLabñ
!=0 );

1340 if–
	`sqlôe3SåICmp
(
zName
, 
zLabñ
)==0 ){

1341 
iCﬁ
 = 
j
;

1343 
	`sqlôeFªe
(
zLabñ
);

1345 if–
iCﬁ
<0 && 
	`sqlôe3Ex¥Com∑ª
(
pE
, 
pELi°
->
a
[
j
].
pEx¥
) ){

1346 
iCﬁ
 = 
j
;

1349 if–
iCﬁ
>=0 ){

1350 
pE
->
›
 = 
TK_COLUMN
;

1351 
pE
->
iCﬁumn
 = 
iCﬁ
;

1352 
pE
->
iTabÀ
 = iTable;

1353 
pE
->
iAgg
 = -1;

1354 
pOrdîBy
->
a
[
i
].
d⁄e
 = 1;

1356 if–
iCﬁ
<0 && 
mu°Com∂ëe
 ){

1357 
	`sqlôe3Eº‹Msg
(
pP¨£
,

1358 "ORDER BYÅîmÇumbî %d d€†nŸ m©chányÑesu… cﬁumn", 
i
+1);

1359 
nEº
++;

1363  
nEº
;

1364 
	}
}

1371 
Vdbe
 *
	$sqlôe3GëVdbe
(
P¨£
 *
pP¨£
){

1372 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

1373 if–
v
==0 ){

1374 
v
 = 
pP¨£
->
pVdbe
 = 
	`sqlôe3VdbeCª©e
’P¨£->
db
);

1376  
v
;

1377 
	}
}

1398 
	$compuãLimôRegi°îs
(
P¨£
 *
pP¨£
, 
Sñe˘
 *
p
, 
iBªak
){

1399 
Vdbe
 *
v
 = 0;

1400 
iLimô
 = 0;

1401 
iOff£t
;

1402 
addr1
, 
addr2
;

1410 if–
p
->
pLimô
 ){

1411 
p
->
iLimô
 = iLimô = 
pP¨£
->
nMem
;

1412 
pP¨£
->
nMem
 += 2;

1413 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

1414 if–
v
==0 ) ;

1415 
	`sqlôe3Ex¥Code
(
pP¨£
, 
p
->
pLimô
);

1416 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Mu°BeI¡
, 0, 0);

1417 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemSt‹e
, 
iLimô
, 0);

1418 
	`VdbeCommít
((
v
, "# LIMIT counter"));

1419 
	`sqlôe3VdbeAddOp
(
v
, 
OP_IfMemZîo
, 
iLimô
, 
iBªak
);

1421 if–
p
->
pOff£t
 ){

1422 
p
->
iOff£t
 = iOff£à
pP¨£
->
nMem
++;

1423 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

1424 if–
v
==0 ) ;

1425 
	`sqlôe3Ex¥Code
(
pP¨£
, 
p
->
pOff£t
);

1426 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Mu°BeI¡
, 0, 0);

1427 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemSt‹e
, 
iOff£t
, 
p
->
pLimô
==0);

1428 
	`VdbeCommít
((
v
, "# OFFSET counter"));

1429 
addr1
 = 
	`sqlôe3VdbeAddOp
(
v
, 
OP_IfMemPos
, 
iOff£t
, 0);

1430 
	`sqlôe3VdbeAddOp
(
v
, 
OP_P›
, 1, 0);

1431 
	`sqlôe3VdbeAddOp
(
v
, 
OP_I¡egî
, 0, 0);

1432 
	`sqlôe3VdbeJumpHîe
(
v
, 
addr1
);

1433 if–
p
->
pLimô
 ){

1434 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Add
, 0, 0);

1437 if–
p
->
pLimô
 ){

1438 
addr1
 = 
	`sqlôe3VdbeAddOp
(
v
, 
OP_IfMemPos
, 
iLimô
, 0);

1439 
	`sqlôe3VdbeAddOp
(
v
, 
OP_P›
, 1, 0);

1440 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemI¡
, -1, 
iLimô
+1);

1441 
addr2
 = 
	`sqlôe3VdbeAddOp
(
v
, 
OP_GŸo
, 0, 0);

1442 
	`sqlôe3VdbeJumpHîe
(
v
, 
addr1
);

1443 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemSt‹e
, 
iLimô
+1, 1);

1444 
	`VdbeCommít
((
v
, "# LIMIT+OFFSET"));

1445 
	`sqlôe3VdbeJumpHîe
(
v
, 
addr2
);

1447 
	}
}

1452 
	$¸óãS‹tögIndex
(
P¨£
 *
pP¨£
, 
Sñe˘
 *
p
, 
Ex¥Li°
 *
pOrdîBy
){

1453 if–
pOrdîBy
 ){

1454 
addr
;

1455 
	`as£π
–
pOrdîBy
->
iECurs‹
==0 );

1456 
pOrdîBy
->
iECurs‹
 = 
pP¨£
->
nTab
++;

1457 
addr
 = 
	`sqlôe3VdbeAddOp
(
pP¨£
->
pVdbe
, 
OP_O≥nVútuÆ
,

1458 
pOrdîBy
->
iECurs‹
,ÖOrdîBy->
nEx¥
+1);

1459 
	`as£π
–
p
->
addrO≥nVút
[2] == -1 );

1460 
p
->
addrO≥nVút
[2] = 
addr
;

1462 
	}
}

1469 
	$un¸óãS‹tögIndex
(
P¨£
 *
pP¨£
, 
addr
){

1470 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

1471 
VdbeOp
 *
pOp
 = 
	`sqlôe3VdbeGëOp
(
v
, 
addr
);

1472 
	`sqlôe3VdbeCh™geP3
(
v
, 
addr
, 0, 0);

1473 
pOp
->
›code
 = 
OP_No›
;

1474 
pOp
->
p1
 = 0;

1475 
pOp
->
p2
 = 0;

1476 
	}
}

1478 #i‚de‡
SQLITE_OMIT_COMPOUND_SELECT


1487 
CﬁlSeq
 *
	$mu…iSñe˘CﬁlSeq
(
P¨£
 *
pP¨£
, 
Sñe˘
 *
p
, 
iCﬁ
){

1488 
CﬁlSeq
 *
pRë
;

1489 if–
p
->
pPri‹
 ){

1490 
pRë
 = 
	`mu…iSñe˘CﬁlSeq
(
pP¨£
, 
p
->
pPri‹
, 
iCﬁ
);

1492 
pRë
 = 0;

1494 if–
pRë
==0 ){

1495 
pRë
 = 
	`sqlôe3Ex¥CﬁlSeq
(
pP¨£
, 
p
->
pELi°
->
a
[
iCﬁ
].
pEx¥
);

1497  
pRë
;

1498 
	}
}

1501 #i‚de‡
SQLITE_OMIT_COMPOUND_SELECT


1532 
	$mu…iSñe˘
(

1533 
P¨£
 *
pP¨£
,

1534 
Sñe˘
 *
p
,

1535 
eDe°
,

1536 
iP¨m
,

1537 *
aff


1539 
rc
 = 
SQLITE_OK
;

1540 
Sñe˘
 *
pPri‹
;

1541 
Vdbe
 *
v
;

1542 
nCﬁ
;

1543 
Ex¥Li°
 *
pOrdîBy
;

1544 
aSëP2
[2];

1545 
nSëP2
 = 0;

1550 if–
p
==0 ||Ö->
pPri‹
==0 ){

1551 
rc
 = 1;

1552 
mu…i_£À˘_íd
;

1554 
pPri‹
 = 
p
->pPrior;

1555 
	`as£π
–
pPri‹
->
pRightmo°
!=pPrior );

1556 
	`as£π
–
pPri‹
->
pRightmo°
==
p
->pRightmost );

1557 if–
pPri‹
->
pOrdîBy
 ){

1558 
	`sqlôe3Eº‹Msg
(
pP¨£
,"ORDER BY clause should comeáfter %sÇot before",

1559 
	`£À˘OpName
(
p
->
›
));

1560 
rc
 = 1;

1561 
mu…i_£À˘_íd
;

1563 if–
pPri‹
->
pLimô
 ){

1564 
	`sqlôe3Eº‹Msg
(
pP¨£
,"LIMIT clause should comeáfter %sÇot before",

1565 
	`£À˘OpName
(
p
->
›
));

1566 
rc
 = 1;

1567 
mu…i_£À˘_íd
;

1572 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

1573 if–
v
==0 ){

1574 
rc
 = 1;

1575 
mu…i_£À˘_íd
;

1580 if–
eDe°
==
SRT_VútuÆTab
 ){

1581 
	`as£π
–
p
->
pELi°
 );

1582 
	`as£π
–
nSëP2
<(
aSëP2
)/(aSetP2[0]) );

1583 
aSëP2
[
nSëP2
++] = 
	`sqlôe3VdbeAddOp
(
v
, 
OP_O≥nVútuÆ
, 
iP¨m
, 0);

1584 
eDe°
 = 
SRT_TabÀ
;

1589 
pOrdîBy
 = 
p
->pOrderBy;

1590  
p
->
›
 ){

1591 
TK_ALL
: {

1592 if–
pOrdîBy
==0 ){

1593 
addr
 = 0;

1594 
	`as£π
–!
pPri‹
->
pLimô
 );

1595 
pPri‹
->
pLimô
 = 
p
->pLimit;

1596 
pPri‹
->
pOff£t
 = 
p
->pOffset;

1597 
rc
 = 
	`sqlôe3Sñe˘
(
pP¨£
, 
pPri‹
, 
eDe°
, 
iP¨m
, 0, 0, 0, 
aff
);

1598 
p
->
pLimô
 = 0;

1599 
p
->
pOff£t
 = 0;

1600 if–
rc
 ){

1601 
mu…i_£À˘_íd
;

1603 
p
->
pPri‹
 = 0;

1604 
p
->
iLimô
 = 
pPri‹
->iLimit;

1605 
p
->
iOff£t
 = 
pPri‹
->iOffset;

1606 if–
p
->
iLimô
>=0 ){

1607 
addr
 = 
	`sqlôe3VdbeAddOp
(
v
, 
OP_IfMemZîo
, 
p
->
iLimô
, 0);

1608 
	`VdbeCommít
((
v
, "# Jumpáhead if LIMITÑeached"));

1610 
rc
 = 
	`sqlôe3Sñe˘
(
pP¨£
, 
p
, 
eDe°
, 
iP¨m
, 0, 0, 0, 
aff
);

1611 
p
->
pPri‹
 =ÖPrior;

1612 if–
rc
 ){

1613 
mu…i_£À˘_íd
;

1615 if–
addr
 ){

1616 
	`sqlôe3VdbeJumpHîe
(
v
, 
addr
);

1622 
TK_EXCEPT
:

1623 
TK_UNION
: {

1624 
uni⁄Tab
;

1625 
›
 = 0;

1626 
¥i‹Op
;

1627 
Ex¥
 *
pLimô
, *
pOff£t
;

1628 
addr
;

1630 
¥i‹Op
 = 
p
->
›
==
TK_ALL
 ? 
SRT_TabÀ
 : 
SRT_Uni⁄
;

1631 if–
eDe°
==
¥i‹Op
 && 
pOrdîBy
==0 && !
p
->
pLimô
 && !p->
pOff£t
 ){

1635 
uni⁄Tab
 = 
iP¨m
;

1640 
uni⁄Tab
 = 
pP¨£
->
nTab
++;

1641 if–
pOrdîBy
 && 
	`m©chOrdîbyToCﬁumn
(
pP¨£
, 
p
,ÖOrdîBy, 
uni⁄Tab
,1) ){

1642 
rc
 = 1;

1643 
mu…i_£À˘_íd
;

1645 
addr
 = 
	`sqlôe3VdbeAddOp
(
v
, 
OP_O≥nVútuÆ
, 
uni⁄Tab
, 0);

1646 if–
¥i‹Op
==
SRT_TabÀ
 ){

1647 
	`as£π
–
nSëP2
<(
aSëP2
)/(aSetP2[0]) );

1648 
aSëP2
[
nSëP2
++] = 
addr
;

1650 
	`as£π
–
p
->
addrO≥nVút
[0] == -1 );

1651 
p
->
addrO≥nVút
[0] = 
addr
;

1652 
p
->
pRightmo°
->
u£sVút
 = 1;

1654 
	`¸óãS‹tögIndex
(
pP¨£
, 
p
, 
pOrdîBy
);

1655 
	`as£π
–
p
->
pELi°
 );

1660 
	`as£π
–!
pPri‹
->
pOrdîBy
 );

1661 
rc
 = 
	`sqlôe3Sñe˘
(
pP¨£
, 
pPri‹
, 
¥i‹Op
, 
uni⁄Tab
, 0, 0, 0, 
aff
);

1662 if–
rc
 ){

1663 
mu…i_£À˘_íd
;

1668  
p
->
›
 ){

1669 
TK_EXCEPT
: 
›
 = 
SRT_Ex˚±
; ;

1670 
TK_UNION
: 
›
 = 
SRT_Uni⁄
; ;

1671 
TK_ALL
: 
›
 = 
SRT_TabÀ
; ;

1673 
p
->
pPri‹
 = 0;

1674 
p
->
pOrdîBy
 = 0;

1675 
p
->
dißŒowOrdîBy
 = 
pOrdîBy
!=0;

1676 
pLimô
 = 
p
->pLimit;

1677 
p
->
pLimô
 = 0;

1678 
pOff£t
 = 
p
->pOffset;

1679 
p
->
pOff£t
 = 0;

1680 
rc
 = 
	`sqlôe3Sñe˘
(
pP¨£
, 
p
, 
›
, 
uni⁄Tab
, 0, 0, 0, 
aff
);

1681 
p
->
pPri‹
 =ÖPrior;

1682 
p
->
pOrdîBy
 =ÖOrderBy;

1683 
	`sqlôe3Ex¥Dñëe
(
p
->
pLimô
);

1684 
p
->
pLimô
 =ÖLimit;

1685 
p
->
pOff£t
 =ÖOffset;

1686 
p
->
iLimô
 = -1;

1687 
p
->
iOff£t
 = -1;

1688 if–
rc
 ){

1689 
mu…i_£À˘_íd
;

1696 if–
eDe°
!=
¥i‹Op
 || 
uni⁄Tab
!=
iP¨m
 ){

1697 
iC⁄t
, 
iBªak
, 
iSèπ
;

1698 
	`as£π
–
p
->
pELi°
 );

1699 if–
eDe°
==
SRT_CÆlback
 ){

1700 
	`gíî©eCﬁumnNames
(
pP¨£
, 0, 
p
->
pELi°
);

1702 
iBªak
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

1703 
iC⁄t
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

1704 
	`compuãLimôRegi°îs
(
pP¨£
, 
p
, 
iBªak
);

1705 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Rewöd
, 
uni⁄Tab
, 
iBªak
);

1706 
iSèπ
 = 
	`sqlôe3VdbeCuºítAddr
(
v
);

1707 
rc
 = 
	`£À˘I¬îLo›
(
pP¨£
, 
p
,Ö->
pELi°
, 
uni⁄Tab
,Ö->pELi°->
nEx¥
,

1708 
pOrdîBy
, -1, 
eDe°
, 
iP¨m
,

1709 
iC⁄t
, 
iBªak
, 0);

1710 if–
rc
 ){

1711 
rc
 = 1;

1712 
mu…i_£À˘_íd
;

1714 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
iC⁄t
);

1715 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Next
, 
uni⁄Tab
, 
iSèπ
);

1716 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
iBªak
);

1717 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Clo£
, 
uni⁄Tab
, 0);

1721 
TK_INTERSECT
: {

1722 
èb1
, 
èb2
;

1723 
iC⁄t
, 
iBªak
, 
iSèπ
;

1724 
Ex¥
 *
pLimô
, *
pOff£t
;

1725 
addr
;

1731 
èb1
 = 
pP¨£
->
nTab
++;

1732 
èb2
 = 
pP¨£
->
nTab
++;

1733 if–
pOrdîBy
 && 
	`m©chOrdîbyToCﬁumn
(
pP¨£
,
p
,pOrdîBy,
èb1
,1) ){

1734 
rc
 = 1;

1735 
mu…i_£À˘_íd
;

1737 
	`¸óãS‹tögIndex
(
pP¨£
, 
p
, 
pOrdîBy
);

1739 
addr
 = 
	`sqlôe3VdbeAddOp
(
v
, 
OP_O≥nVútuÆ
, 
èb1
, 0);

1740 
	`as£π
–
p
->
addrO≥nVút
[0] == -1 );

1741 
p
->
addrO≥nVút
[0] = 
addr
;

1742 
p
->
pRightmo°
->
u£sVút
 = 1;

1743 
	`as£π
–
p
->
pELi°
 );

1747 
rc
 = 
	`sqlôe3Sñe˘
(
pP¨£
, 
pPri‹
, 
SRT_Uni⁄
, 
èb1
, 0, 0, 0, 
aff
);

1748 if–
rc
 ){

1749 
mu…i_£À˘_íd
;

1754 
addr
 = 
	`sqlôe3VdbeAddOp
(
v
, 
OP_O≥nVútuÆ
, 
èb2
, 0);

1755 
	`as£π
–
p
->
addrO≥nVút
[1] == -1 );

1756 
p
->
addrO≥nVút
[1] = 
addr
;

1757 
p
->
pPri‹
 = 0;

1758 
pLimô
 = 
p
->pLimit;

1759 
p
->
pLimô
 = 0;

1760 
pOff£t
 = 
p
->pOffset;

1761 
p
->
pOff£t
 = 0;

1762 
rc
 = 
	`sqlôe3Sñe˘
(
pP¨£
, 
p
, 
SRT_Uni⁄
, 
èb2
, 0, 0, 0, 
aff
);

1763 
p
->
pPri‹
 =ÖPrior;

1764 
	`sqlôe3Ex¥Dñëe
(
p
->
pLimô
);

1765 
p
->
pLimô
 =ÖLimit;

1766 
p
->
pOff£t
 =ÖOffset;

1767 if–
rc
 ){

1768 
mu…i_£À˘_íd
;

1774 
	`as£π
–
p
->
pELi°
 );

1775 if–
eDe°
==
SRT_CÆlback
 ){

1776 
	`gíî©eCﬁumnNames
(
pP¨£
, 0, 
p
->
pELi°
);

1778 
iBªak
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

1779 
iC⁄t
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

1780 
	`compuãLimôRegi°îs
(
pP¨£
, 
p
, 
iBªak
);

1781 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Rewöd
, 
èb1
, 
iBªak
);

1782 
iSèπ
 = 
	`sqlôe3VdbeAddOp
(
v
, 
OP_RowKey
, 
èb1
, 0);

1783 
	`sqlôe3VdbeAddOp
(
v
, 
OP_NŸFound
, 
èb2
, 
iC⁄t
);

1784 
rc
 = 
	`£À˘I¬îLo›
(
pP¨£
, 
p
,Ö->
pELi°
, 
èb1
,Ö->pELi°->
nEx¥
,

1785 
pOrdîBy
, -1, 
eDe°
, 
iP¨m
,

1786 
iC⁄t
, 
iBªak
, 0);

1787 if–
rc
 ){

1788 
rc
 = 1;

1789 
mu…i_£À˘_íd
;

1791 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
iC⁄t
);

1792 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Next
, 
èb1
, 
iSèπ
);

1793 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
iBªak
);

1794 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Clo£
, 
èb2
, 0);

1795 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Clo£
, 
èb1
, 0);

1803 
	`as£π
–
p
->
pELi°
 && 
pPri‹
->pEList );

1804 if–
p
->
pELi°
->
nEx¥
!=
pPri‹
->pEList->nExpr ){

1805 
	`sqlôe3Eº‹Msg
(
pP¨£
, "SELECTsÅoÅheÜeftándÑight of %s"

1806 " dÿnŸ havêthêßmênumbî o‡ªsu… cﬁumns", 
	`£À˘OpName
(
p
->
›
));

1807 
rc
 = 1;

1808 
mu…i_£À˘_íd
;

1813 
nCﬁ
 = 
p
->
pELi°
->
nEx¥
;

1814  
nSëP2
 ){

1815 
	`sqlôe3VdbeCh™geP2
(
v
, 
aSëP2
[--
nSëP2
], 
nCﬁ
);

1828 if–
pOrdîBy
 || 
p
->
u£sVút
 ){

1829 
i
;

1830 
KeyInfo
 *
pKeyInfo
;

1831 
Sñe˘
 *
pLo›
;

1832 
CﬁlSeq
 **
≠Cﬁl
;

1833 
CﬁlSeq
 **
aC›y
;

1835 
	`as£π
–
p
->
pRightmo°
==p );

1836 
pKeyInfo
 = 
	`sqlôeMÆloc
((*pKeyInfo)+
nCﬁ
*2*(
CﬁlSeq
*) +ÇCol);

1837 if–!
pKeyInfo
 ){

1838 
rc
 = 
SQLITE_NOMEM
;

1839 
mu…i_£À˘_íd
;

1842 
pKeyInfo
->
íc
 = 
	`ENC
(
pP¨£
->
db
);

1843 
pKeyInfo
->
nFõld
 = 
nCﬁ
;

1845 
i
=0, 
≠Cﬁl
=
pKeyInfo
->
aCﬁl
; i<
nCﬁ
; i++,ápColl++){

1846 *
≠Cﬁl
 = 
	`mu…iSñe˘CﬁlSeq
(
pP¨£
, 
p
, 
i
);

1847 if–0==*
≠Cﬁl
 ){

1848 *
≠Cﬁl
 = 
pP¨£
->
db
->
pDÊtCﬁl
;

1852 
pLo›
=
p
;ÖLo›;ÖLo›ıLo›->
pPri‹
){

1853 
i
=0; i<2; i++){

1854 
addr
 = 
pLo›
->
addrO≥nVút
[
i
];

1855 if–
addr
<0 ){

1858 
	`as£π
–
pLo›
->
addrO≥nVút
[1]<0 );

1861 
	`sqlôe3VdbeCh™geP2
(
v
, 
addr
, 
nCﬁ
);

1862 
	`sqlôe3VdbeCh™geP3
(
v
, 
addr
, (*)
pKeyInfo
, 
P3_KEYINFO
);

1866 if–
pOrdîBy
 ){

1867 
Ex¥Li°_ôem
 *
pOTîm
 = 
pOrdîBy
->
a
;

1868 
nOrdîByEx¥
 = 
pOrdîBy
->
nEx¥
;

1869 
addr
;

1870 
u8
 *
pS‹tOrdî
;

1872 
aC›y
 = &
pKeyInfo
->
aCﬁl
[
nCﬁ
];

1873 
pS‹tOrdî
 = 
pKeyInfo
->
aS‹tOrdî
 = (
u8
*)&
aC›y
[
nCﬁ
];

1874 
	`mem˝y
(
aC›y
, 
pKeyInfo
->
aCﬁl
, 
nCﬁ
*(
CﬁlSeq
*));

1875 
≠Cﬁl
 = 
pKeyInfo
->
aCﬁl
;

1876 
i
=0; i<
nOrdîByEx¥
; i++, 
pOTîm
++, 
≠Cﬁl
++, 
pS‹tOrdî
++){

1877 
Ex¥
 *
pEx¥
 = 
pOTîm
->pExpr;

1878 *
zName
 = 
pOTîm
->zName;

1879 
	`as£π
–
pEx¥
->
›
==
TK_COLUMN
 &&ÖEx¥->
iCﬁumn
<
nCﬁ
 );

1880 if–
zName
 ){

1881 *
≠Cﬁl
 = 
	`sqlôe3LoˇãCﬁlSeq
(
pP¨£
, 
zName
, -1);

1883 *
≠Cﬁl
 = 
aC›y
[
pEx¥
->
iCﬁumn
];

1885 *
pS‹tOrdî
 = 
pOTîm
->
s‹tOrdî
;

1887 
	`as£π
–
p
->
pRightmo°
==p );

1888 
	`as£π
–
p
->
addrO≥nVút
[2]>=0 );

1889 
addr
 = 
p
->
addrO≥nVút
[2];

1890 
	`sqlôe3VdbeCh™geP2
(
v
, 
addr
, 
p
->
pELi°
->
nEx¥
+2);

1891 
pKeyInfo
->
nFõld
 = 
nOrdîByEx¥
;

1892 
	`sqlôe3VdbeCh™geP3
(
v
, 
addr
, (*)
pKeyInfo
, 
P3_KEYINFO_HANDOFF
);

1893 
pKeyInfo
 = 0;

1894 
	`gíî©eS‹tTaû
(
pP¨£
, 
p
, 
v
,Ö->
pELi°
->
nEx¥
, 
eDe°
, 
iP¨m
);

1897 
	`sqlôeFªe
(
pKeyInfo
);

1900 
mu…i_£À˘_íd
:

1901  
rc
;

1902 
	}
}

1905 #i‚de‡
SQLITE_OMIT_VIEW


1919 
sub°Ex¥Li°
(
Ex¥Li°
*,,ExprList*);

1920 
sub°Sñe˘
(
Sñe˘
 *, , 
Ex¥Li°
 *);

1921 
	$sub°Ex¥
(
Ex¥
 *
pEx¥
, 
iTabÀ
, 
Ex¥Li°
 *
pELi°
){

1922 if–
pEx¥
==0 ) ;

1923 if–
pEx¥
->
›
==
TK_COLUMN
 &&ÖEx¥->
iTabÀ
==iTable ){

1924 if–
pEx¥
->
iCﬁumn
<0 ){

1925 
pEx¥
->
›
 = 
TK_NULL
;

1927 
Ex¥
 *
pNew
;

1928 
	`as£π
–
pELi°
!=0 && 
pEx¥
->
iCﬁumn
<pELi°->
nEx¥
 );

1929 
	`as£π
–
pEx¥
->
pLe·
==0 &&ÖEx¥->
pRight
==0 &&ÖEx¥->
pLi°
==0 );

1930 
pNew
 = 
pELi°
->
a
[
pEx¥
->
iCﬁumn
].pExpr;

1931 
	`as£π
–
pNew
!=0 );

1932 
pEx¥
->
›
 = 
pNew
->op;

1933 
	`as£π
–
pEx¥
->
pLe·
==0 );

1934 
pEx¥
->
pLe·
 = 
	`sqlôe3Ex¥Dup
(
pNew
->pLeft);

1935 
	`as£π
–
pEx¥
->
pRight
==0 );

1936 
pEx¥
->
pRight
 = 
	`sqlôe3Ex¥Dup
(
pNew
->pRight);

1937 
	`as£π
–
pEx¥
->
pLi°
==0 );

1938 
pEx¥
->
pLi°
 = 
	`sqlôe3Ex¥Li°Dup
(
pNew
->pList);

1939 
pEx¥
->
iTabÀ
 = 
pNew
->iTable;

1940 
pEx¥
->
iCﬁumn
 = 
pNew
->iColumn;

1941 
pEx¥
->
iAgg
 = 
pNew
->iAgg;

1942 
	`sqlôe3TokíC›y
(&
pEx¥
->
tokí
, &
pNew
->token);

1943 
	`sqlôe3TokíC›y
(&
pEx¥
->
•™
, &
pNew
->span);

1944 
pEx¥
->
pSñe˘
 = 
	`sqlôe3Sñe˘Dup
(
pNew
->pSelect);

1945 
pEx¥
->
Êags
 = 
pNew
->flags;

1948 
	`sub°Ex¥
(
pEx¥
->
pLe·
, 
iTabÀ
, 
pELi°
);

1949 
	`sub°Ex¥
(
pEx¥
->
pRight
, 
iTabÀ
, 
pELi°
);

1950 
	`sub°Sñe˘
(
pEx¥
->
pSñe˘
, 
iTabÀ
, 
pELi°
);

1951 
	`sub°Ex¥Li°
(
pEx¥
->
pLi°
, 
iTabÀ
, 
pELi°
);

1953 
	}
}

1954 
	$sub°Ex¥Li°
(
Ex¥Li°
 *
pLi°
, 
iTabÀ
, Ex¥Li° *
pELi°
){

1955 
i
;

1956 if–
pLi°
==0 ) ;

1957 
i
=0; i<
pLi°
->
nEx¥
; i++){

1958 
	`sub°Ex¥
(
pLi°
->
a
[
i
].
pEx¥
, 
iTabÀ
, 
pELi°
);

1960 
	}
}

1961 
	$sub°Sñe˘
(
Sñe˘
 *
p
, 
iTabÀ
, 
Ex¥Li°
 *
pELi°
){

1962 if–!
p
 ) ;

1963 
	`sub°Ex¥Li°
(
p
->
pELi°
, 
iTabÀ
,ÖEList);

1964 
	`sub°Ex¥Li°
(
p
->
pGroupBy
, 
iTabÀ
, 
pELi°
);

1965 
	`sub°Ex¥Li°
(
p
->
pOrdîBy
, 
iTabÀ
, 
pELi°
);

1966 
	`sub°Ex¥
(
p
->
pHavög
, 
iTabÀ
, 
pELi°
);

1967 
	`sub°Ex¥
(
p
->
pWhîe
, 
iTabÀ
, 
pELi°
);

1968 
	}
}

1971 #i‚de‡
SQLITE_OMIT_VIEW


2045 
	$Ê©ãnSubquîy
(

2046 
P¨£
 *
pP¨£
,

2047 
Sñe˘
 *
p
,

2048 
iFrom
,

2049 
isAgg
,

2050 
subquîyIsAgg


2052 
Sñe˘
 *
pSub
;

2053 
SrcLi°
 *
pSrc
;

2054 
SrcLi°
 *
pSubSrc
;

2055 
Ex¥Li°
 *
pLi°
;

2056 
iP¨ít
;

2057 
i
;

2058 
Ex¥
 *
pWhîe
;

2059 
SrcLi°_ôem
 *
pSubôem
;

2063 if–
p
==0 )  0;

2064 
pSrc
 = 
p
->pSrc;

2065 
	`as£π
–
pSrc
 && 
iFrom
>=0 && iFrom<pSrc->
nSrc
 );

2066 
pSubôem
 = &
pSrc
->
a
[
iFrom
];

2067 
pSub
 = 
pSubôem
->
pSñe˘
;

2068 
	`as£π
–
pSub
!=0 );

2069 if–
isAgg
 && 
subquîyIsAgg
 )  0;

2070 if–
subquîyIsAgg
 && 
pSrc
->
nSrc
>1 )  0;

2071 
pSubSrc
 = 
pSub
->
pSrc
;

2072 
	`as£π
–
pSubSrc
 );

2078 if–
pSub
->
pLimô
 && 
p
->pLimit )  0;

2079 if–
pSub
->
pOff£t
 )  0;

2080 if–
pSubSrc
->
nSrc
==0 )  0;

2081 if–(
pSub
->
isDi°ö˘
 ||ÖSub->
pLimô
)

2082 && (
pSrc
->
nSrc
>1 || 
isAgg
) ){

2085 if–
p
->
isDi°ö˘
 && 
subquîyIsAgg
 )  0;

2086 if–(
p
->
dißŒowOrdîBy
 ||Ö->
pOrdîBy
Ë&& 
pSub
->pOrderBy ){

2102 if–
pSubSrc
->
nSrc
>1 && 
iFrom
>0 && (
pSrc
->
a
[iFrom-1].
joöty≥
 & 
JT_OUTER
)!=0 ){

2119 if–
iFrom
>0 && (
pSrc
->
a
[iFrom-1].
joöty≥
 & 
JT_OUTER
)!=0

2120 && 
pSub
->
pWhîe
!=0 ){

2136 
iP¨ít
 = 
pSubôem
->
iCurs‹
;

2138 
nSubSrc
 = 
pSubSrc
->
nSrc
;

2139 
joöty≥
 = 
pSubôem
->jointype;

2141 
	`sqlôe3DñëeTabÀ
(0, 
pSubôem
->
pTab
);

2142 
	`sqlôeFªe
(
pSubôem
->
zD©aba£
);

2143 
	`sqlôeFªe
(
pSubôem
->
zName
);

2144 
	`sqlôeFªe
(
pSubôem
->
zAlüs
);

2145 if–
nSubSrc
>1 ){

2146 
exåa
 = 
nSubSrc
 - 1;

2147 
i
=1; i<
nSubSrc
; i++){

2148 
pSrc
 = 
	`sqlôe3SrcLi°Aµíd
(pSrc, 0, 0);

2150 
p
->
pSrc
 =ÖSrc;

2151 
i
=
pSrc
->
nSrc
-1; i-
exåa
>=
iFrom
; i--){

2152 
pSrc
->
a
[
i
] =ÖSrc->a[i-
exåa
];

2155 
i
=0; i<
nSubSrc
; i++){

2156 
pSrc
->
a
[
i
+
iFrom
] = 
pSubSrc
->a[i];

2157 
	`mem£t
(&
pSubSrc
->
a
[
i
], 0, (pSubSrc->a[i]));

2159 
pSrc
->
a
[
iFrom
+
nSubSrc
-1].
joöty≥
 = jointype;

2174 
	`sub°Ex¥Li°
(
p
->
pELi°
, 
iP¨ít
, 
pSub
->pEList);

2175 
pLi°
 = 
p
->
pELi°
;

2176 
i
=0; i<
pLi°
->
nEx¥
; i++){

2177 
Ex¥
 *
pEx¥
;

2178 if–
pLi°
->
a
[
i
].
zName
==0 && (
pEx¥
 =ÖLi°->a[i].pEx¥)->
•™
.
z
!=0 ){

2179 
pLi°
->
a
[
i
].
zName
 = 
	`sqlôeSåNDup
((*)
pEx¥
->
•™
.
z
,ÖEx¥->•™.
n
);

2182 if–
isAgg
 ){

2183 
	`sub°Ex¥Li°
(
p
->
pGroupBy
, 
iP¨ít
, 
pSub
->
pELi°
);

2184 
	`sub°Ex¥
(
p
->
pHavög
, 
iP¨ít
, 
pSub
->
pELi°
);

2186 if–
pSub
->
pOrdîBy
 ){

2187 
	`as£π
–
p
->
pOrdîBy
==0 );

2188 
p
->
pOrdîBy
 = 
pSub
->pOrderBy;

2189 
pSub
->
pOrdîBy
 = 0;

2190 }if–
p
->
pOrdîBy
 ){

2191 
	`sub°Ex¥Li°
(
p
->
pOrdîBy
, 
iP¨ít
, 
pSub
->
pELi°
);

2193 if–
pSub
->
pWhîe
 ){

2194 
pWhîe
 = 
	`sqlôe3Ex¥Dup
(
pSub
->pWhere);

2196 
pWhîe
 = 0;

2198 if–
subquîyIsAgg
 ){

2199 
	`as£π
–
p
->
pHavög
==0 );

2200 
p
->
pHavög
 =Ö->
pWhîe
;

2201 
p
->
pWhîe
 =ÖWhere;

2202 
	`sub°Ex¥
(
p
->
pHavög
, 
iP¨ít
, 
pSub
->
pELi°
);

2203 
p
->
pHavög
 = 
	`sqlôe3Ex¥And
’->pHavög, 
	`sqlôe3Ex¥Dup
(
pSub
->pHaving));

2204 
	`as£π
–
p
->
pGroupBy
==0 );

2205 
p
->
pGroupBy
 = 
	`sqlôe3Ex¥Li°Dup
(
pSub
->pGroupBy);

2207 
	`sub°Ex¥
(
p
->
pWhîe
, 
iP¨ít
, 
pSub
->
pELi°
);

2208 
p
->
pWhîe
 = 
	`sqlôe3Ex¥And
(p->pWhere,ÖWhere);

2214 
p
->
isDi°ö˘
 =Ö->isDi°ö˘ || 
pSub
->isDistinct;

2222 if–
pSub
->
pLimô
 ){

2223 
p
->
pLimô
 = 
pSub
->pLimit;

2224 
pSub
->
pLimô
 = 0;

2230 
	`sqlôe3Sñe˘Dñëe
(
pSub
);

2232 
	}
}

2255 
	$sim∂eMöMaxQuîy
(
P¨£
 *
pP¨£
, 
Sñe˘
 *
p
, 
eDe°
, 
iP¨m
){

2256 
Ex¥
 *
pEx¥
;

2257 
iCﬁ
;

2258 
TabÀ
 *
pTab
;

2259 
Index
 *
pIdx
;

2260 
ba£
;

2261 
Vdbe
 *
v
;

2262 
£ekOp
;

2263 
Ex¥Li°
 *
pELi°
, *
pLi°
, 
eLi°
;

2264 
Ex¥Li°_ôem
 
eLi°Iãm
;

2265 
SrcLi°
 *
pSrc
;

2266 
brk
;

2267 
iDb
;

2272 if–
p
->
pGroupBy
 ||Ö->
pHavög
 ||Ö->
pWhîe
 )  0;

2273 
pSrc
 = 
p
->pSrc;

2274 if–
pSrc
->
nSrc
!=1 )  0;

2275 
pELi°
 = 
p
->pEList;

2276 if–
pELi°
->
nEx¥
!=1 )  0;

2277 
pEx¥
 = 
pELi°
->
a
[0].pExpr;

2278 if–
pEx¥
->
›
!=
TK_AGG_FUNCTION
 )  0;

2279 
pLi°
 = 
pEx¥
->pList;

2280 if–
pLi°
==0 ||ÖLi°->
nEx¥
!=1 )  0;

2281 if–
pEx¥
->
tokí
.
n
!=3 )  0;

2282 if–
	`sqlôe3SåNICmp
((*)
pEx¥
->
tokí
.
z
,"min",3)==0 ){

2283 
£ekOp
 = 
OP_Rewöd
;

2284 }if–
	`sqlôe3SåNICmp
((*)
pEx¥
->
tokí
.
z
,"max",3)==0 ){

2285 
£ekOp
 = 
OP_La°
;

2289 
pEx¥
 = 
pLi°
->
a
[0].pExpr;

2290 if–
pEx¥
->
›
!=
TK_COLUMN
 )  0;

2291 
iCﬁ
 = 
pEx¥
->
iCﬁumn
;

2292 
pTab
 = 
pSrc
->
a
[0].pTab;

2301 if–
iCﬁ
<0 ){

2302 
pIdx
 = 0;

2304 
CﬁlSeq
 *
pCﬁl
 = 
	`sqlôe3Ex¥CﬁlSeq
(
pP¨£
, 
pEx¥
);

2305 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
){

2306 
	`as£π
–
pIdx
->
nCﬁumn
>=1 );

2307 if–
pIdx
->
aiCﬁumn
[0]==
iCﬁ
 &&

2308 0==
	`sqlôe3SåICmp
(
pIdx
->
azCﬁl
[0], 
pCﬁl
->
zName
) ){

2312 if–
pIdx
==0 )  0;

2319 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

2320 if–
v
==0 )  0;

2324 if–
eDe°
==
SRT_VútuÆTab
 ){

2325 
	`sqlôe3VdbeAddOp
(
v
, 
OP_O≥nVútuÆ
, 
iP¨m
, 1);

2333 
iDb
 = 
	`sqlôe3SchemaToIndex
(
pP¨£
->
db
, 
pTab
->
pSchema
);

2334 
	`as£π
–
iDb
>=0 || 
pTab
->
isTønsõ¡
 );

2335 
	`sqlôe3CodeVîifySchema
(
pP¨£
, 
iDb
);

2336 
	`sqlôe3TabÀLock
(
pP¨£
, 
iDb
, 
pTab
->
äum
, 0,ÖTab->
zName
);

2337 
ba£
 = 
pSrc
->
a
[0].
iCurs‹
;

2338 
brk
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

2339 
	`compuãLimôRegi°îs
(
pP¨£
, 
p
, 
brk
);

2340 if–
pSrc
->
a
[0].
pSñe˘
==0 ){

2341 
	`sqlôe3O≥nTabÀ
(
pP¨£
, 
ba£
, 
iDb
, 
pTab
, 
OP_O≥nRód
);

2343 if–
pIdx
==0 ){

2344 
	`sqlôe3VdbeAddOp
(
v
, 
£ekOp
, 
ba£
, 0);

2352 
iIdx
;

2353 
KeyInfo
 *
pKey
 = 
	`sqlôe3IndexKeyöfo
(
pP¨£
, 
pIdx
);

2354 
iIdx
 = 
pP¨£
->
nTab
++;

2355 
	`as£π
–
pIdx
->
pSchema
==
pTab
->pSchema );

2356 
	`sqlôe3VdbeAddOp
(
v
, 
OP_I¡egî
, 
iDb
, 0);

2357 
	`sqlôe3VdbeOp3
(
v
, 
OP_O≥nRód
, 
iIdx
, 
pIdx
->
äum
,

2358 (*)
pKey
, 
P3_KEYINFO_HANDOFF
);

2359 if–
£ekOp
==
OP_Rewöd
 ){

2360 
	`sqlôe3VdbeAddOp
(
v
, 
OP_NuŒ
, 0, 0);

2361 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MakeRec‹d
, 1, 0);

2362 
£ekOp
 = 
OP_MoveGt
;

2364 
	`sqlôe3VdbeAddOp
(
v
, 
£ekOp
, 
iIdx
, 0);

2365 
	`sqlôe3VdbeAddOp
(
v
, 
OP_IdxRowid
, 
iIdx
, 0);

2366 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Clo£
, 
iIdx
, 0);

2367 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MoveGe
, 
ba£
, 0);

2369 
eLi°
.
nEx¥
 = 1;

2370 
	`mem£t
(&
eLi°Iãm
, 0, (eListItem));

2371 
eLi°
.
a
 = &
eLi°Iãm
;

2372 
eLi°
.
a
[0].
pEx¥
 =ÖExpr;

2373 
	`£À˘I¬îLo›
(
pP¨£
, 
p
, &
eLi°
, 0, 0, 0, -1, 
eDe°
, 
iP¨m
, 
brk
, brk, 0);

2374 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
brk
);

2375 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Clo£
, 
ba£
, 0);

2378 
	}
}

2388 
	$¥o˚ssOrdîGroupBy
(

2389 
NameC⁄ãxt
 *
pNC
,

2390 
Ex¥Li°
 *
pOrdîBy
,

2391 c⁄° *
zTy≥


2393 
i
;

2394 
Ex¥Li°
 *
pELi°
 = 
pNC
->pEList;

2395 
P¨£
 *
pP¨£
 = 
pNC
->pParse;

2396 
	`as£π
–
pELi°
 );

2398 if–
pOrdîBy
==0 )  0;

2399 
i
=0; i<
pOrdîBy
->
nEx¥
; i++){

2400 
iCﬁ
;

2401 
Ex¥
 *
pE
 = 
pOrdîBy
->
a
[
i
].
pEx¥
;

2402 if–
	`sqlôe3Ex¥IsI¡egî
(
pE
, &
iCﬁ
) ){

2403 if–
iCﬁ
>0 && iCﬁ<=
pELi°
->
nEx¥
 ){

2404 
	`sqlôe3Ex¥Dñëe
(
pE
);

2405 
pE
 = 
pOrdîBy
->
a
[
i
].
pEx¥
 = 
	`sqlôe3Ex¥Dup
(
pELi°
->a[
iCﬁ
-1].pExpr);

2407 
	`sqlôe3Eº‹Msg
(
pP¨£
,

2409 "bëwì¿1ánd %d", 
zTy≥
, 
iCﬁ
, 
pELi°
->
nEx¥
);

2413 if–
	`sqlôe3Ex¥ResﬁveNames
(
pNC
, 
pE
) ){

2416 if–
	`sqlôe3Ex¥IsC⁄°™t
(
pE
) ){

2417 
	`sqlôe3Eº‹Msg
(
pP¨£
,

2418 "%†BYÅîm†mu°ÇŸ bên⁄-öãgî c⁄°™ts", 
zTy≥
);

2423 
	}
}

2431 
	$sqlôe3Sñe˘Resﬁve
(

2432 
P¨£
 *
pP¨£
,

2433 
Sñe˘
 *
p
,

2434 
NameC⁄ãxt
 *
pOuãrNC


2436 
Ex¥Li°
 *
pELi°
;

2437 
i
;

2438 
NameC⁄ãxt
 
sNC
;

2439 
Ex¥Li°
 *
pGroupBy
;

2442 if–
p
->
isResﬁved
 ){

2443 
	`as£π
–!
pOuãrNC
 );

2444  
SQLITE_OK
;

2446 
p
->
isResﬁved
 = 1;

2449 if–
pP¨£
->
nEº
>0 ){

2450  
SQLITE_ERROR
;

2456 if–
	`¥ïSñe˘Stmt
(
pP¨£
, 
p
) ){

2457  
SQLITE_ERROR
;

2463 
	`mem£t
(&
sNC
, 0, (sNC));

2464 
sNC
.
pP¨£
 =ÖParse;

2465 if–
	`sqlôe3Ex¥ResﬁveNames
(&
sNC
, 
p
->
pLimô
) ||

2466 
	`sqlôe3Ex¥ResﬁveNames
(&
sNC
, 
p
->
pOff£t
) ){

2467  
SQLITE_ERROR
;

2473 
sNC
.
ÆlowAgg
 = 1;

2474 
sNC
.
pSrcLi°
 = 
p
->
pSrc
;

2475 
sNC
.
pNext
 = 
pOuãrNC
;

2478 
pELi°
 = 
p
->pEList;

2479 if–!
pELi°
 )  
SQLITE_ERROR
;

2480 
i
=0; i<
pELi°
->
nEx¥
; i++){

2481 
Ex¥
 *
pX
 = 
pELi°
->
a
[
i
].
pEx¥
;

2482 if–
	`sqlôe3Ex¥ResﬁveNames
(&
sNC
, 
pX
) ){

2483  
SQLITE_ERROR
;

2490 
	`as£π
–!
p
->
isAgg
 );

2491 
pGroupBy
 = 
p
->pGroupBy;

2492 if–
pGroupBy
 || 
sNC
.
hasAgg
 ){

2493 
p
->
isAgg
 = 1;

2495 
sNC
.
ÆlowAgg
 = 0;

2500 if–
p
->
pHavög
 && !
pGroupBy
 ){

2501 
	`sqlôe3Eº‹Msg
(
pP¨£
, "a GROUP BY clause isÑequired before HAVING");

2502  
SQLITE_ERROR
;

2513 
sNC
.
pELi°
 = 
p
->pEList;

2514 if–
	`sqlôe3Ex¥ResﬁveNames
(&
sNC
, 
p
->
pWhîe
) ||

2515 
	`sqlôe3Ex¥ResﬁveNames
(&
sNC
, 
p
->
pHavög
) ||

2516 
	`¥o˚ssOrdîGroupBy
(&
sNC
, 
p
->
pOrdîBy
, "ORDER") ||

2517 
	`¥o˚ssOrdîGroupBy
(&
sNC
, 
pGroupBy
, "GROUP")

2519  
SQLITE_ERROR
;

2524 if–
pGroupBy
 ){

2525 
Ex¥Li°_ôem
 *
pIãm
;

2527 
i
=0, 
pIãm
=
pGroupBy
->
a
; i<pGroupBy->
nEx¥
; i++,ÖItem++){

2528 if–
	`Ex¥HasPr›îty
(
pIãm
->
pEx¥
, 
EP_Agg
) ){

2529 
	`sqlôe3Eº‹Msg
(
pP¨£
, "aggregate functionsáreÇotállowed in "

2531  
SQLITE_ERROR
;

2536  
SQLITE_OK
;

2537 
	}
}

2546 
	$ª£tAccumuœt‹
(
P¨£
 *
pP¨£
, 
AggInfo
 *
pAggInfo
){

2547 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

2548 
i
;

2549 
AggInfo_func
 *
pFunc
;

2550 if–
pAggInfo
->
nFunc
+pAggInfo->
nCﬁumn
==0 ){

2553 
i
=0; i<
pAggInfo
->
nCﬁumn
; i++){

2554 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemNuŒ
, 
pAggInfo
->
aCﬁ
[
i
].
iMem
, 0);

2556 
pFunc
=
pAggInfo
->
aFunc
, 
i
=0; i<pAggInfo->
nFunc
; i++,ÖFunc++){

2557 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemNuŒ
, 
pFunc
->
iMem
, 0);

2558 if–
pFunc
->
iDi°ö˘
>=0 ){

2559 
Ex¥
 *
pE
 = 
pFunc
->
pEx¥
;

2560 if–
pE
->
pLi°
==0 ||ÖE->pLi°->
nEx¥
!=1 ){

2561 
	`sqlôe3Eº‹Msg
(
pP¨£
, "DISTINCT inággregate must be followed "

2563 
pFunc
->
iDi°ö˘
 = -1;

2565 
KeyInfo
 *
pKeyInfo
 = 
	`keyInfoFromEx¥Li°
(
pP¨£
, 
pE
->
pLi°
);

2566 
	`sqlôe3VdbeOp3
(
v
, 
OP_O≥nVútuÆ
, 
pFunc
->
iDi°ö˘
, 0,

2567 (*)
pKeyInfo
, 
P3_KEYINFO_HANDOFF
);

2571 
	}
}

2577 
	$föÆizeAggFun˘i⁄s
(
P¨£
 *
pP¨£
, 
AggInfo
 *
pAggInfo
){

2578 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

2579 
i
;

2580 
AggInfo_func
 *
pF
;

2581 
i
=0, 
pF
=
pAggInfo
->
aFunc
; i<pAggInfo->
nFunc
; i++,ÖF++){

2582 
Ex¥Li°
 *
pLi°
 = 
pF
->
pEx¥
->pList;

2583 
	`sqlôe3VdbeOp3
(
v
, 
OP_AggFöÆ
, 
pF
->
iMem
, 
pLi°
 ?ÖLi°->
nEx¥
 : 0,

2584 (*)
pF
->
pFunc
, 
P3_FUNCDEF
);

2586 
	}
}

2592 
	$upd©eAccumuœt‹
(
P¨£
 *
pP¨£
, 
AggInfo
 *
pAggInfo
){

2593 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

2594 
i
;

2595 
AggInfo_func
 *
pF
;

2596 
AggInfo_cﬁ
 *
pC
;

2598 
pAggInfo
->
dúe˘Mode
 = 1;

2599 
i
=0, 
pF
=
pAggInfo
->
aFunc
; i<pAggInfo->
nFunc
; i++,ÖF++){

2600 
nArg
;

2601 
addrNext
 = 0;

2602 
Ex¥Li°
 *
pLi°
 = 
pF
->
pEx¥
->pList;

2603 if–
pLi°
 ){

2604 
nArg
 = 
pLi°
->
nEx¥
;

2605 
	`sqlôe3Ex¥CodeEx¥Li°
(
pP¨£
, 
pLi°
);

2607 
nArg
 = 0;

2609 if–
pF
->
iDi°ö˘
>=0 ){

2610 
addrNext
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

2611 
	`as£π
–
nArg
==1 );

2612 
	`codeDi°ö˘
(
v
, 
pF
->
iDi°ö˘
, 
addrNext
, 1, 2);

2614 if–
pF
->
pFunc
->
√edCﬁlSeq
 ){

2615 
CﬁlSeq
 *
pCﬁl
 = 0;

2616 
Ex¥Li°_ôem
 *
pIãm
;

2617 
j
;

2618 
j
=0, 
pIãm
=
pLi°
->
a
; !
pCﬁl
 && j<pLi°->
nEx¥
; j++,ÖItem++){

2619 
pCﬁl
 = 
	`sqlôe3Ex¥CﬁlSeq
(
pP¨£
, 
pIãm
->
pEx¥
);

2621 if–!
pCﬁl
 ){

2622 
pCﬁl
 = 
pP¨£
->
db
->
pDÊtCﬁl
;

2624 
	`sqlôe3VdbeOp3
(
v
, 
OP_CﬁlSeq
, 0, 0, (*)
pCﬁl
, 
P3_COLLSEQ
);

2626 
	`sqlôe3VdbeOp3
(
v
, 
OP_AggSãp
, 
pF
->
iMem
, 
nArg
, (*ÌF->
pFunc
, 
P3_FUNCDEF
);

2627 if–
addrNext
 ){

2628 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
addrNext
);

2631 
i
=0, 
pC
=
pAggInfo
->
aCﬁ
; i<pAggInfo->
nAccumuœt‹
; i++,ÖC++){

2632 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pC
->
pEx¥
);

2633 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemSt‹e
, 
pC
->
iMem
, 1);

2635 
pAggInfo
->
dúe˘Mode
 = 0;

2636 
	}
}

2691 
	$sqlôe3Sñe˘
(

2692 
P¨£
 *
pP¨£
,

2693 
Sñe˘
 *
p
,

2694 
eDe°
,

2695 
iP¨m
,

2696 
Sñe˘
 *
pP¨ít
,

2697 
∑ª¡Tab
,

2698 *
pP¨ítAgg
,

2699 *
aff


2701 
i
, 
j
;

2702 
WhîeInfo
 *
pWInfo
;

2703 
Vdbe
 *
v
;

2704 
isAgg
;

2705 
Ex¥Li°
 *
pELi°
;

2706 
SrcLi°
 *
pTabLi°
;

2707 
Ex¥
 *
pWhîe
;

2708 
Ex¥Li°
 *
pOrdîBy
;

2709 
Ex¥Li°
 *
pGroupBy
;

2710 
Ex¥
 *
pHavög
;

2711 
isDi°ö˘
;

2712 
di°ö˘
;

2713 
rc
 = 1;

2714 
addrS‹tIndex
;

2715 
AggInfo
 
sAggInfo
;

2716 
iEnd
;

2718 if–
p
==0 || 
	`sqlôe3MÆlocFaûed
(Ë|| 
pP¨£
->
nEº
 ){

2721 if–
	`sqlôe3AuthCheck
(
pP¨£
, 
SQLITE_SELECT
, 0, 0, 0) )  1;

2722 
	`mem£t
(&
sAggInfo
, 0, (sAggInfo));

2724 #i‚de‡
SQLITE_OMIT_COMPOUND_SELECT


2727 if–
p
->
pPri‹
 ){

2728 if–
p
->
pRightmo°
==0 ){

2729 
Sñe˘
 *
pLo›
;

2730 
pLo›
=
p
;ÖLo›;ÖLo›ıLo›->
pPri‹
){

2731 
pLo›
->
pRightmo°
 = 
p
;

2734  
	`mu…iSñe˘
(
pP¨£
, 
p
, 
eDe°
, 
iP¨m
, 
aff
);

2738 
pOrdîBy
 = 
p
->pOrderBy;

2739 if–
	`Ign‹abÀOrdîby
(
eDe°
) ){

2740 
p
->
pOrdîBy
 = 0;

2742 if–
	`sqlôe3Sñe˘Resﬁve
(
pP¨£
, 
p
, 0) ){

2743 
£À˘_íd
;

2745 
p
->
pOrdîBy
 =ÖOrderBy;

2749 
pTabLi°
 = 
p
->
pSrc
;

2750 
pWhîe
 = 
p
->pWhere;

2751 
pGroupBy
 = 
p
->pGroupBy;

2752 
pHavög
 = 
p
->pHaving;

2753 
isAgg
 = 
p
->isAgg;

2754 
isDi°ö˘
 = 
p
->isDistinct;

2755 
pELi°
 = 
p
->pEList;

2756 if–
pELi°
==0 ) 
£À˘_íd
;

2762 if–
pP¨£
->
nEº
>0 ) 
£À˘_íd
;

2767 #i‚de‡
SQLITE_OMIT_SUBQUERY


2768 if–(
eDe°
==
SRT_Mem
 ||ÉDe°==
SRT_Së
Ë&& 
pELi°
->
nEx¥
>1 ){

2769 
	`sqlôe3Eº‹Msg
(
pP¨£
, "onlyá singleÑesultállowed for "

2771 
£À˘_íd
;

2777 if–
	`Ign‹abÀOrdîby
(
eDe°
) ){

2778 
pOrdîBy
 = 0;

2783 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

2784 if–
v
==0 ) 
£À˘_íd
;

2789 if–
eDe°
==
SRT_CÆlback
 ){

2790 
	`gíî©eCﬁumnNames
(
pP¨£
, 
pTabLi°
, 
pELi°
);

2795 #i‡!
	`deföed
(
SQLITE_OMIT_SUBQUERY
Ë|| !deföed(
SQLITE_OMIT_VIEW
)

2796 
i
=0; i<
pTabLi°
->
nSrc
; i++){

2797 c⁄° *
zSavedAuthC⁄ãxt
 = 0;

2798 
√edRe°‹eC⁄ãxt
;

2799 
SrcLi°_ôem
 *
pIãm
 = &
pTabLi°
->
a
[
i
];

2801 if–
pIãm
->
pSñe˘
==0 ) ;

2802 if–
pIãm
->
zName
!=0 ){

2803 
zSavedAuthC⁄ãxt
 = 
pP¨£
->
zAuthC⁄ãxt
;

2804 
pP¨£
->
zAuthC⁄ãxt
 = 
pIãm
->
zName
;

2805 
√edRe°‹eC⁄ãxt
 = 1;

2807 
√edRe°‹eC⁄ãxt
 = 0;

2809 
	`sqlôe3Sñe˘
(
pP¨£
, 
pIãm
->
pSñe˘
, 
SRT_VútuÆTab
,

2810 
pIãm
->
iCurs‹
, 
p
, 
i
, &
isAgg
, 0);

2811 if–
√edRe°‹eC⁄ãxt
 ){

2812 
pP¨£
->
zAuthC⁄ãxt
 = 
zSavedAuthC⁄ãxt
;

2814 
pTabLi°
 = 
p
->
pSrc
;

2815 
pWhîe
 = 
p
->pWhere;

2816 if–!
	`Ign‹abÀOrdîby
(
eDe°
) ){

2817 
pOrdîBy
 = 
p
->pOrderBy;

2819 
pGroupBy
 = 
p
->pGroupBy;

2820 
pHavög
 = 
p
->pHaving;

2821 
isDi°ö˘
 = 
p
->isDistinct;

2828 if–
	`sim∂eMöMaxQuîy
(
pP¨£
, 
p
, 
eDe°
, 
iP¨m
) ){

2829 
rc
 = 0;

2830 
£À˘_íd
;

2836 #i‚de‡
SQLITE_OMIT_VIEW


2837 if–
pP¨ít
 && 
pP¨ítAgg
 &&

2838 
	`Ê©ãnSubquîy
(
pP¨£
, 
pP¨ít
, 
∑ª¡Tab
, *
pP¨ítAgg
, 
isAgg
) ){

2839 if–
isAgg
 ) *
pP¨ítAgg
 = 1;

2840 
£À˘_íd
;

2853 if–
pOrdîBy
 ){

2854 
Ex¥Li°_ôem
 *
pTîm
;

2855 
KeyInfo
 *
pKeyInfo
;

2856 
i
=0, 
pTîm
=
pOrdîBy
->
a
; i<pOrdîBy->
nEx¥
; i++,ÖTerm++){

2857 if–
pTîm
->
zName
 ){

2858 
pTîm
->
pEx¥
->
pCﬁl
 = 
	`sqlôe3LoˇãCﬁlSeq
(
pP¨£
,ÖTîm->
zName
, -1);

2861 if–
pP¨£
->
nEº
 ){

2862 
£À˘_íd
;

2864 
pKeyInfo
 = 
	`keyInfoFromEx¥Li°
(
pP¨£
, 
pOrdîBy
);

2865 
pOrdîBy
->
iECurs‹
 = 
pP¨£
->
nTab
++;

2866 
p
->
addrO≥nVút
[2] = 
addrS‹tIndex
 =

2867 
	`sqlôe3VdbeOp3
(
v
, 
OP_O≥nVútuÆ
, 
pOrdîBy
->
iECurs‹
,ÖOrdîBy->
nEx¥
+2,

2868 (*)
pKeyInfo
, 
P3_KEYINFO_HANDOFF
);

2870 
addrS‹tIndex
 = -1;

2875 
iEnd
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

2876 
	`compuãLimôRegi°îs
(
pP¨£
, 
p
, 
iEnd
);

2880 if–
eDe°
==
SRT_VútuÆTab
 ){

2881 
	`sqlôe3VdbeAddOp
(
v
, 
OP_O≥nVútuÆ
, 
iP¨m
, 
pELi°
->
nEx¥
);

2886 if–
isDi°ö˘
 ){

2887 
KeyInfo
 *
pKeyInfo
;

2888 
di°ö˘
 = 
pP¨£
->
nTab
++;

2889 
pKeyInfo
 = 
	`keyInfoFromEx¥Li°
(
pP¨£
, 
p
->
pELi°
);

2890 
	`sqlôe3VdbeOp3
(
v
, 
OP_O≥nVútuÆ
, 
di°ö˘
, 0,

2891 (*)
pKeyInfo
, 
P3_KEYINFO_HANDOFF
);

2893 
di°ö˘
 = -1;

2897 if–!
isAgg
 && 
pGroupBy
==0 ){

2901 
pWInfo
 = 
	`sqlôe3WhîeBegö
(
pP¨£
, 
pTabLi°
, 
pWhîe
, &
pOrdîBy
);

2902 if–
pWInfo
==0 ) 
£À˘_íd
;

2908 if–
addrS‹tIndex
>=0 && 
pOrdîBy
==0 ){

2909 
	`un¸óãS‹tögIndex
(
pP¨£
, 
addrS‹tIndex
);

2910 
p
->
addrO≥nVút
[2] = -1;

2915 if–
	`£À˘I¬îLo›
(
pP¨£
, 
p
, 
pELi°
, 0, 0, 
pOrdîBy
, 
di°ö˘
, 
eDe°
,

2916 
iP¨m
, 
pWInfo
->
iC⁄töue
,ÖWInfo->
iBªak
, 
aff
) ){

2917 
£À˘_íd
;

2922 
	`sqlôe3WhîeEnd
(
pWInfo
);

2925 
NameC⁄ãxt
 
sNC
;

2926 
iAMem
;

2927 
iBMem
;

2928 
iU£Fœg
;

2931 
iAb‹tFœg
;

2932 
groupByS‹t
;

2937 
addrOuçutRow
;

2938 
addrSëAb‹t
;

2939 
addrInôülizeLo›
;

2940 
addrT›OfLo›
;

2941 
addrGroupByCh™ge
;

2942 
addrPro˚ssRow
;

2943 
addrEnd
;

2944 
addrS‹tögIdx
;

2945 
addrRe£t
;

2947 
addrEnd
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

2953 
	`mem£t
(&
sNC
, 0, (sNC));

2954 
sNC
.
pP¨£
 =ÖParse;

2955 
sNC
.
pSrcLi°
 = 
pTabLi°
;

2956 
sNC
.
pAggInfo
 = &
sAggInfo
;

2957 
sAggInfo
.
nS‹tögCﬁumn
 = 
pGroupBy
 ?ÖGroupBy->
nEx¥
+1 : 0;

2958 
sAggInfo
.
pGroupBy
 =ÖGroupBy;

2959 if–
	`sqlôe3Ex¥A«lyzeAggLi°
(&
sNC
, 
pELi°
) ){

2960 
£À˘_íd
;

2962 if–
	`sqlôe3Ex¥A«lyzeAggLi°
(&
sNC
, 
pOrdîBy
) ){

2963 
£À˘_íd
;

2965 if–
pHavög
 && 
	`sqlôe3Ex¥A«lyzeAggªg©es
(&
sNC
,ÖHaving) ){

2966 
£À˘_íd
;

2968 
sAggInfo
.
nAccumuœt‹
 = sAggInfo.
nCﬁumn
;

2969 
i
=0; i<
sAggInfo
.
nFunc
; i++){

2970 if–
	`sqlôe3Ex¥A«lyzeAggLi°
(&
sNC
, 
sAggInfo
.
aFunc
[
i
].
pEx¥
->
pLi°
) ){

2971 
£À˘_íd
;

2974 if–
	`sqlôe3MÆlocFaûed
(ËË
£À˘_íd
;

2979 if–
pGroupBy
 ){

2980 
KeyInfo
 *
pKeyInfo
;

2985 
addrInôülizeLo›
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

2986 
addrGroupByCh™ge
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

2987 
addrPro˚ssRow
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

2994 
sAggInfo
.
s‹tögIdx
 = 
pP¨£
->
nTab
++;

2995 
pKeyInfo
 = 
	`keyInfoFromEx¥Li°
(
pP¨£
, 
pGroupBy
);

2996 
addrS‹tögIdx
 =

2997 
	`sqlôe3VdbeOp3
(
v
, 
OP_O≥nVútuÆ
, 
sAggInfo
.
s‹tögIdx
,

2998 
sAggInfo
.
nS‹tögCﬁumn
,

2999 (*)
pKeyInfo
, 
P3_KEYINFO_HANDOFF
);

3003 
iU£Fœg
 = 
pP¨£
->
nMem
++;

3004 
iAb‹tFœg
 = 
pP¨£
->
nMem
++;

3005 
iAMem
 = 
pP¨£
->
nMem
;

3006 
pP¨£
->
nMem
 +
pGroupBy
->
nEx¥
;

3007 
iBMem
 = 
pP¨£
->
nMem
;

3008 
pP¨£
->
nMem
 +
pGroupBy
->
nEx¥
;

3009 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemI¡
, 0, 
iAb‹tFœg
);

3010 
	`VdbeCommít
((
v
, "# clearábort flag"));

3011 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemI¡
, 0, 
iU£Fœg
);

3012 
	`VdbeCommít
((
v
, "# indicateáccumulatorÉmpty"));

3013 
	`sqlôe3VdbeAddOp
(
v
, 
OP_GŸo
, 0, 
addrInôülizeLo›
);

3022 
addrSëAb‹t
 = 
	`sqlôe3VdbeCuºítAddr
(
v
);

3023 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemI¡
, 1, 
iAb‹tFœg
);

3024 
	`VdbeCommít
((
v
, "# setábort flag"));

3025 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Rëu∫
, 0, 0);

3026 
addrOuçutRow
 = 
	`sqlôe3VdbeCuºítAddr
(
v
);

3027 
	`sqlôe3VdbeAddOp
(
v
, 
OP_IfMemPos
, 
iU£Fœg
, 
addrOuçutRow
+2);

3028 
	`VdbeCommít
((
v
, "# GroupbyÑesult generatorÉntryÖoint"));

3029 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Rëu∫
, 0, 0);

3030 
	`föÆizeAggFun˘i⁄s
(
pP¨£
, &
sAggInfo
);

3031 if–
pHavög
 ){

3032 
	`sqlôe3Ex¥IfFÆ£
(
pP¨£
, 
pHavög
, 
addrOuçutRow
+1, 1);

3034 
rc
 = 
	`£À˘I¬îLo›
(
pP¨£
, 
p
,Ö->
pELi°
, 0, 0, 
pOrdîBy
,

3035 
di°ö˘
, 
eDe°
, 
iP¨m
,

3036 
addrOuçutRow
+1, 
addrSëAb‹t
, 
aff
);

3037 if–
rc
 ){

3038 
£À˘_íd
;

3040 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Rëu∫
, 0, 0);

3041 
	`VdbeCommít
((
v
, "#Énd groupbyÑesult generator"));

3045 
addrRe£t
 = 
	`sqlôe3VdbeCuºítAddr
(
v
);

3046 
	`ª£tAccumuœt‹
(
pP¨£
, &
sAggInfo
);

3047 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Rëu∫
, 0, 0);

3054 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
addrInôülizeLo›
);

3055 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Gosub
, 0, 
addrRe£t
);

3056 
pWInfo
 = 
	`sqlôe3WhîeBegö
(
pP¨£
, 
pTabLi°
, 
pWhîe
, &
pGroupBy
);

3057 if–
pWInfo
==0 ) 
£À˘_íd
;

3058 if–
pGroupBy
==0 ){

3063 
pGroupBy
 = 
p
->pGroupBy;

3064 
groupByS‹t
 = 0;

3071 
groupByS‹t
 = 1;

3072 
	`sqlôe3Ex¥CodeEx¥Li°
(
pP¨£
, 
pGroupBy
);

3073 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Sequí˚
, 
sAggInfo
.
s‹tögIdx
, 0);

3074 
j
 = 
pGroupBy
->
nEx¥
+1;

3075 
i
=0; i<
sAggInfo
.
nCﬁumn
; i++){

3076 
AggInfo_cﬁ
 *
pCﬁ
 = &
sAggInfo
.
aCﬁ
[
i
];

3077 if–
pCﬁ
->
iS‹ãrCﬁumn
<
j
 ) ;

3078 if–
pCﬁ
->
iCﬁumn
<0 ){

3079 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Rowid
, 
pCﬁ
->
iTabÀ
, 0);

3081 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Cﬁumn
, 
pCﬁ
->
iTabÀ
,ÖCﬁ->
iCﬁumn
);

3083 
j
++;

3085 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MakeRec‹d
, 
j
, 0);

3086 
	`sqlôe3VdbeAddOp
(
v
, 
OP_IdxIn£π
, 
sAggInfo
.
s‹tögIdx
, 0);

3087 
	`sqlôe3WhîeEnd
(
pWInfo
);

3088 
	`sqlôe3VdbeAddOp
(
v
, 
OP_S‹t
, 
sAggInfo
.
s‹tögIdx
, 
addrEnd
);

3089 
	`VdbeCommít
((
v
, "# GROUP BY sort"));

3090 
sAggInfo
.
u£S‹tögIdx
 = 1;

3098 
addrT›OfLo›
 = 
	`sqlôe3VdbeCuºítAddr
(
v
);

3099 
j
=0; j<
pGroupBy
->
nEx¥
; j++){

3100 if–
groupByS‹t
 ){

3101 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Cﬁumn
, 
sAggInfo
.
s‹tögIdx
, 
j
);

3103 
sAggInfo
.
dúe˘Mode
 = 1;

3104 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pGroupBy
->
a
[
j
].
pEx¥
);

3106 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemSt‹e
, 
iBMem
+
j
, j<
pGroupBy
->
nEx¥
-1);

3108 
j
=
pGroupBy
->
nEx¥
-1; j>=0; j--){

3109 if–
j
<
pGroupBy
->
nEx¥
-1 ){

3110 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemLﬂd
, 
iBMem
+
j
, 0);

3112 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemLﬂd
, 
iAMem
+
j
, 0);

3113 if–
j
==0 ){

3114 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Eq
, 0x200, 
addrPro˚ssRow
);

3116 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Ne
, 0x200, 
addrGroupByCh™ge
);

3118 
	`sqlôe3VdbeCh™geP3
(
v
, -1, (*)
pKeyInfo
->
aCﬁl
[
j
], 
P3_COLLSEQ
);

3130 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
addrGroupByCh™ge
);

3131 
j
=0; j<
pGroupBy
->
nEx¥
; j++){

3132 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemMove
, 
iAMem
+
j
, 
iBMem
+j);

3134 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Gosub
, 0, 
addrOuçutRow
);

3135 
	`VdbeCommít
((
v
, "# output oneÑow"));

3136 
	`sqlôe3VdbeAddOp
(
v
, 
OP_IfMemPos
, 
iAb‹tFœg
, 
addrEnd
);

3137 
	`VdbeCommít
((
v
, "# checkábort flag"));

3138 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Gosub
, 0, 
addrRe£t
);

3139 
	`VdbeCommít
((
v
, "#Ñesetáccumulator"));

3144 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
addrPro˚ssRow
);

3145 
	`upd©eAccumuœt‹
(
pP¨£
, &
sAggInfo
);

3146 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemI¡
, 1, 
iU£Fœg
);

3147 
	`VdbeCommít
((
v
, "# indicate data ináccumulator"));

3151 if–
groupByS‹t
 ){

3152 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Next
, 
sAggInfo
.
s‹tögIdx
, 
addrT›OfLo›
);

3154 
	`sqlôe3WhîeEnd
(
pWInfo
);

3155 
	`un¸óãS‹tögIndex
(
pP¨£
, 
addrS‹tögIdx
);

3160 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Gosub
, 0, 
addrOuçutRow
);

3161 
	`VdbeCommít
((
v
, "# output finalÑow"));

3169 
	`ª£tAccumuœt‹
(
pP¨£
, &
sAggInfo
);

3170 
pWInfo
 = 
	`sqlôe3WhîeBegö
(
pP¨£
, 
pTabLi°
, 
pWhîe
, 0);

3171 if–
pWInfo
==0 ) 
£À˘_íd
;

3172 
	`upd©eAccumuœt‹
(
pP¨£
, &
sAggInfo
);

3173 
	`sqlôe3WhîeEnd
(
pWInfo
);

3174 
	`föÆizeAggFun˘i⁄s
(
pP¨£
, &
sAggInfo
);

3175 
pOrdîBy
 = 0;

3176 if–
pHavög
 ){

3177 
	`sqlôe3Ex¥IfFÆ£
(
pP¨£
, 
pHavög
, 
addrEnd
, 1);

3179 
	`£À˘I¬îLo›
(
pP¨£
, 
p
,Ö->
pELi°
, 0, 0, 0, -1,

3180 
eDe°
, 
iP¨m
, 
addrEnd
,áddrEnd, 
aff
);

3182 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
addrEnd
);

3189 if–
pOrdîBy
 ){

3190 
	`gíî©eS‹tTaû
(
pP¨£
, 
p
, 
v
, 
pELi°
->
nEx¥
, 
eDe°
, 
iP¨m
);

3193 #i‚de‡
SQLITE_OMIT_SUBQUERY


3199 if–
pP¨ít
 ){

3200 
	`as£π
–
pP¨ít
->
pSrc
->
nSrc
>
∑ª¡Tab
 );

3201 
	`as£π
–
pP¨ít
->
pSrc
->
a
[
∑ª¡Tab
].
pSñe˘
==
p
 );

3202 
	`sqlôe3Sñe˘Dñëe
(
p
);

3203 
pP¨ít
->
pSrc
->
a
[
∑ª¡Tab
].
pSñe˘
 = 0;

3209 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
iEnd
);

3214 
rc
 = 0;

3219 
£À˘_íd
:

3220 
	`sqlôeFªe
(
sAggInfo
.
aCﬁ
);

3221 
	`sqlôeFªe
(
sAggInfo
.
aFunc
);

3222  
rc
;

3223 
	}
}

	@server.c

203 #ifde‡
SQLITE_SERVER


204 #i‡
deföed
(
OS_UNIX
Ë&& OS_UNIX && deföed(
THREADSAFE
) && THREADSAFE

209 
	~<±hªad.h
>

210 
	~"sqlôe3.h
"

216 
SqlMesßge
 
	tSqlMesßge
;

217 
	sSqlMesßge
 {

218 
	m›
;

219 
sqlôe3
 *
	mpDb
;

220 
sqlôe3_°mt
 *
	mpStmt
;

221 
	mîrCode
;

222 c⁄° *
	mzIn
;

223 
	mnByã
;

224 c⁄° *
	mzOut
;

225 
SqlMesßge
 *
	mpNext
;

226 
SqlMesßge
 *
	mpPªv
;

227 
±hªad_muãx_t
 
	m˛õ¡Muãx
;

228 
±hªad_c⁄d_t
 
	m˛õ¡Wakeup
;

234 
	#MSG_O≥n
 1

	)

235 
	#MSG_Pª∑ª
 2

	)

236 
	#MSG_Sãp
 3

	)

237 
	#MSG_Re£t
 4

	)

238 
	#MSG_FöÆize
 5

	)

239 
	#MSG_Clo£
 6

	)

240 
	#MSG_D⁄e
 7

	)

247 
	sSîvîSèã
 {

248 
±hªad_muãx_t
 
	mqueueMuãx
;

249 
±hªad_muãx_t
 
	m£rvîMuãx
;

250 
±hªad_c⁄d_t
 
	m£rvîWakeup
;

251 vﬁ©ûê
	m£rvîHÆt
;

252 
SqlMesßge
 *
	mpQueueHód
;

253 
SqlMesßge
 *
	mpQueueTaû
;

254 } 
	gg
 = {

255 
PTHREAD_MUTEX_INITIALIZER
,

256 
PTHREAD_MUTEX_INITIALIZER
,

257 
PTHREAD_COND_INITIALIZER
,

267 
	$£ndToSîvî
(
SqlMesßge
 *
pMsg
){

270 
	`±hªad_muãx_öô
(&
pMsg
->
˛õ¡Muãx
, 0);

271 
	`±hªad_c⁄d_öô
(&
pMsg
->
˛õ¡Wakeup
, 0);

275 
	`±hªad_muãx_lock
(&
g
.
queueMuãx
);

276 
pMsg
->
pNext
 = 
g
.
pQueueHód
;

277 if–
g
.
pQueueHód
==0 ){

278 
g
.
pQueueTaû
 = 
pMsg
;

280 
g
.
pQueueHód
->
pPªv
 = 
pMsg
;

282 
pMsg
->
pPªv
 = 0;

283 
g
.
pQueueHód
 = 
pMsg
;

284 
	`±hªad_muãx_u∆ock
(&
g
.
queueMuãx
);

289 
	`±hªad_muãx_lock
(&
pMsg
->
˛õ¡Muãx
);

290 
	`±hªad_c⁄d_sig«l
(&
g
.
£rvîWakeup
);

291  
pMsg
->
›
!=
MSG_D⁄e
 ){

292 
	`±hªad_c⁄d_waô
(&
pMsg
->
˛õ¡Wakeup
, &pMsg->
˛õ¡Muãx
);

294 
	`±hªad_muãx_u∆ock
(&
pMsg
->
˛õ¡Muãx
);

298 
	`±hªad_muãx_de°roy
(&
pMsg
->
˛õ¡Muãx
);

299 
	`±hªad_c⁄d_de°roy
(&
pMsg
->
˛õ¡Wakeup
);

300 
	}
}

327 
	$sqlôe3_˛õ¡_›í
(c⁄° *
zD©aba£Name
, 
sqlôe3
 **
µDb
){

328 
SqlMesßge
 
msg
;

329 
msg
.
›
 = 
MSG_O≥n
;

330 
msg
.
zIn
 = 
zD©aba£Name
;

331 
	`£ndToSîvî
(&
msg
);

332 *
µDb
 = 
msg
.
pDb
;

333  
msg
.
îrCode
;

334 
	}
}

335 
	$sqlôe3_˛õ¡_¥ï¨e
(

336 
sqlôe3
 *
pDb
,

337 c⁄° *
zSql
,

338 
nByã
,

339 
sqlôe3_°mt
 **
µStmt
,

340 c⁄° **
pzTaû


342 
SqlMesßge
 
msg
;

343 
msg
.
›
 = 
MSG_Pª∑ª
;

344 
msg
.
pDb
 =ÖDb;

345 
msg
.
zIn
 = 
zSql
;

346 
msg
.
nByã
 =ÇByte;

347 
	`£ndToSîvî
(&
msg
);

348 *
µStmt
 = 
msg
.
pStmt
;

349 if–
pzTaû
 ) *pzTaû = 
msg
.
zOut
;

350  
msg
.
îrCode
;

351 
	}
}

352 
	$sqlôe3_˛õ¡_°ï
(
sqlôe3_°mt
 *
pStmt
){

353 
SqlMesßge
 
msg
;

354 
msg
.
›
 = 
MSG_Sãp
;

355 
msg
.
pStmt
 =ÖStmt;

356 
	`£ndToSîvî
(&
msg
);

357  
msg
.
îrCode
;

358 
	}
}

359 
	$sqlôe3_˛õ¡_ª£t
(
sqlôe3_°mt
 *
pStmt
){

360 
SqlMesßge
 
msg
;

361 
msg
.
›
 = 
MSG_Re£t
;

362 
msg
.
pStmt
 =ÖStmt;

363 
	`£ndToSîvî
(&
msg
);

364  
msg
.
îrCode
;

365 
	}
}

366 
	$sqlôe3_˛õ¡_föÆize
(
sqlôe3_°mt
 *
pStmt
){

367 
SqlMesßge
 
msg
;

368 
msg
.
›
 = 
MSG_FöÆize
;

369 
msg
.
pStmt
 =ÖStmt;

370 
	`£ndToSîvî
(&
msg
);

371  
msg
.
îrCode
;

372 
	}
}

373 
	$sqlôe3_˛õ¡_˛o£
(
sqlôe3
 *
pDb
){

374 
SqlMesßge
 
msg
;

375 
msg
.
›
 = 
MSG_Clo£
;

376 
msg
.
pDb
 =ÖDb;

377 
	`£ndToSîvî
(&
msg
);

378  
msg
.
îrCode
;

379 
	}
}

388 *
	$sqlôe3_£rvî
(*
NŸU£d
){

389 
	`sqlôe3_íabÀ_sh¨ed_ˇche
(1);

390 if–
	`±hªad_muãx_åylock
(&
g
.
£rvîMuãx
) ){

391 
	`sqlôe3_íabÀ_sh¨ed_ˇche
(0);

394  !
g
.
£rvîHÆt
 ){

395 
SqlMesßge
 *
pMsg
;

399 
	`±hªad_muãx_lock
(&
g
.
queueMuãx
);

400  
g
.
pQueueTaû
==0 && g.
£rvîHÆt
==0 ){

401 
	`±hªad_c⁄d_waô
(&
g
.
£rvîWakeup
, &g.
queueMuãx
);

403 
pMsg
 = 
g
.
pQueueTaû
;

404 if–
pMsg
 ){

405 if–
pMsg
->
pPªv
 ){

406 
pMsg
->
pPªv
->
pNext
 = 0;

408 
g
.
pQueueHód
 = 0;

410 
g
.
pQueueTaû
 = 
pMsg
->
pPªv
;

412 
	`±hªad_muãx_u∆ock
(&
g
.
queueMuãx
);

413 if–
pMsg
==0 ) ;

417 
	`±hªad_muãx_lock
(&
pMsg
->
˛õ¡Muãx
);

418  
pMsg
->
›
 ){

419 
MSG_O≥n
: {

420 
pMsg
->
îrCode
 = 
	`sqlôe3_›í
’Msg->
zIn
, &pMsg->
pDb
);

423 
MSG_Pª∑ª
: {

424 
pMsg
->
îrCode
 = 
	`sqlôe3_¥ï¨e
’Msg->
pDb
,ÖMsg->
zIn
,ÖMsg->
nByã
,

425 &
pMsg
->
pStmt
, &pMsg->
zOut
);

428 
MSG_Sãp
: {

429 
pMsg
->
îrCode
 = 
	`sqlôe3_°ï
’Msg->
pStmt
);

432 
MSG_Re£t
: {

433 
pMsg
->
îrCode
 = 
	`sqlôe3_ª£t
’Msg->
pStmt
);

436 
MSG_FöÆize
: {

437 
pMsg
->
îrCode
 = 
	`sqlôe3_föÆize
’Msg->
pStmt
);

440 
MSG_Clo£
: {

441 
pMsg
->
îrCode
 = 
	`sqlôe3_˛o£
’Msg->
pDb
);

448 
pMsg
->
›
 = 
MSG_D⁄e
;

449 
	`±hªad_muãx_u∆ock
(&
pMsg
->
˛õ¡Muãx
);

450 
	`±hªad_c⁄d_sig«l
(&
pMsg
->
˛õ¡Wakeup
);

452 
	`±hªad_muãx_u∆ock
(&
g
.
£rvîMuãx
);

453 
	`sqlôe3_thªad_˛ónup
();

455 
	}
}

462 
	$sqlôe3_£rvî_°¨t
(){

463 
±hªad_t
 
x
;

464 
rc
;

465 
g
.
£rvîHÆt
 = 0;

466 
rc
 = 
	`±hªad_¸óã
(&
x
, 0, 
sqlôe3_£rvî
, 0);

467 if–
rc
==0 ){

468 
	`±hªad_dëach
(
x
);

470 
	}
}

479 
	$sqlôe3_£rvî_°›
(){

480 
g
.
£rvîHÆt
 = 1;

481 
	`±hªad_c⁄d_brﬂdˇ°
(&
g
.
£rvîWakeup
);

482 
	}
}

	@shell.c

17 
	~<°dlib.h
>

18 
	~<°rög.h
>

19 
	~<°dio.h
>

20 
	~<as£π.h
>

21 
	~"sqlôe3.h
"

22 
	~<˘y≥.h
>

24 #i‡!
deföed
(
_WIN32
Ë&& !deföed(
WIN32
Ë&& !deföed(
__MACOS__
)

25 
	~<sig«l.h
>

26 
	~<pwd.h
>

27 
	~<uni°d.h
>

28 
	~<sys/ty≥s.h
>

31 #ifde‡
__MACOS__


32 
	~<c⁄sﬁe.h
>

33 
	~<sig«l.h
>

34 
	~<uni°d.h
>

35 
	~<exåas.h
>

36 
	~<Fûes.h
>

37 
	~<Fﬁdîs.h
>

40 #i‡
deföed
(
HAVE_READLINE
) && HAVE_READLINE==1

41 
	~<ªadlöe/ªadlöe.h
>

42 
	~<ªadlöe/hi°‹y.h
>

44 
	#ªadlöe
(
p
Ë
	`loˇl_gëlöe
’,
°dö
)

	)

45 
	#add_hi°‹y
(
X
)

	)

46 
	#ªad_hi°‹y
(
X
)

	)

47 
	#wrôe_hi°‹y
(
X
)

	)

48 
	#°iÊe_hi°‹y
(
X
)

	)

53 
ißây
();

60 
sqlôe3
 *
	gdb
 = 0;

65 
	g£íI¡îru±
 = 0;

71 *
	gArgv0
;

77 
	gmaöProm±
[20];

78 
	gc⁄töueProm±
[20];

84 
	$isNumbî
(c⁄° *
z
, *
ªÆnum
){

85 if–*
z
=='-' || *z=='+' ) z++;

86 if–!
	`isdigô
(*
z
) ){

89 
z
++;

90 if–
ªÆnum
 ) *realnum = 0;

91  
	`isdigô
(*
z
) ){ z++; }

92 if–*
z
=='.' ){

93 
z
++;

94 if–!
	`isdigô
(*
z
) )  0;

95  
	`isdigô
(*
z
) ){ z++; }

96 if–
ªÆnum
 ) *realnum = 1;

98 if–*
z
=='e' || *z=='E' ){

99 
z
++;

100 if–*
z
=='+' || *z=='-' ) z++;

101 if–!
	`isdigô
(*
z
) )  0;

102  
	`isdigô
(*
z
) ){ z++; }

103 if–
ªÆnum
 ) *realnum = 1;

105  *
z
==0;

106 
	}
}

116 c⁄° *
	gzShñlSètic
 = 0;

117 
	$shñl°©icFunc
(

118 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

119 
¨gc
,

120 
sqlôe3_vÆue
 **
¨gv


122 
	`as£π
–0==
¨gc
 );

123 
	`as£π
–
zShñlSètic
 );

124 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, 
zShñlSètic
, -1, 
SQLITE_STATIC
);

125 
	}
}

137 *
	$loˇl_gëlöe
(*
zProm±
, 
FILE
 *
ö
){

138 *
zLöe
;

139 
nLöe
;

140 
n
;

141 
eﬁ
;

143 if–
zProm±
 && *zPrompt ){

144 
	`¥ötf
("%s",
zProm±
);

145 
	`fÊush
(
°dout
);

147 
nLöe
 = 100;

148 
zLöe
 = 
	`mÆloc
–
nLöe
 );

149 if–
zLöe
==0 )  0;

150 
n
 = 0;

151 
eﬁ
 = 0;

152  !
eﬁ
 ){

153 if–
n
+100>
nLöe
 ){

154 
nLöe
 =ÇLine*2 + 100;

155 
zLöe
 = 
	`ªÆloc
(zLöe, 
nLöe
);

156 if–
zLöe
==0 )  0;

158 if–
	`fgës
(&
zLöe
[
n
], 
nLöe
 -Ç, 
ö
)==0 ){

159 if–
n
==0 ){

160 
	`‰ì
(
zLöe
);

163 
zLöe
[
n
] = 0;

164 
eﬁ
 = 1;

167  
zLöe
[
n
] ){Ç++; }

168 if–
n
>0 && 
zLöe
[n-1]=='\n' ){

169 
n
--;

170 
zLöe
[
n
] = 0;

171 
eﬁ
 = 1;

174 
zLöe
 = 
	`ªÆloc
–zLöe, 
n
+1 );

175  
zLöe
;

176 
	}
}

187 *
	$⁄e_öput_löe
(c⁄° *
zPri‹
, 
FILE
 *
ö
){

188 *
zProm±
;

189 *
zResu…
;

190 if–
ö
!=0 ){

191  
	`loˇl_gëlöe
(0, 
ö
);

193 if–
zPri‹
 && zPrior[0] ){

194 
zProm±
 = 
c⁄töueProm±
;

196 
zProm±
 = 
maöProm±
;

198 
zResu…
 = 
	`ªadlöe
(
zProm±
);

199 #i‡
	`deföed
(
HAVE_READLINE
) && HAVE_READLINE==1

200 if–
zResu…
 ) 
	`add_hi°‹y
(zResult);

202  
zResu…
;

203 
	}
}

205 
	s¥evious_mode_d©a
 {

206 
	mvÆid
;

207 
	mmode
;

208 
	mshowHódî
;

209 
	mcﬁWidth
[100];

216 
	sˇŒback_d©a
 {

217 
sqlôe3
 *
	mdb
;

218 
	mechoOn
;

219 
	m˙t
;

220 
FILE
 *
	mout
;

221 
	mmode
;

222 
	mshowHódî
;

223 *
	mzDe°TabÀ
;

224 
	m£∑øt‹
[20];

225 
	mcﬁWidth
[100];

226 
	ma˘uÆWidth
[100];

227 
	mnuŒvÆue
[20];

229 
¥evious_mode_d©a
 
	mex∂aöPªv
;

232 
	moutfûe
[
FILENAME_MAX
];

233 c⁄° *
	mzDbFûíame
;

234 *
	mzKey
;

240 
	#MODE_Löe
 0

	)

241 
	#MODE_Cﬁumn
 1

	)

242 
	#MODE_Li°
 2

	)

243 
	#MODE_Semi
 3

	)

244 
	#MODE_Html
 4

	)

245 
	#MODE_In£π
 5

	)

246 
	#MODE_T˛
 6

	)

247 
	#MODE_Csv
 7

	)

248 
	#MODE_NUM_OF
 8

	)

250 c⁄° *
	gmodeDes¸
[
MODE_NUM_OF
] = {

264 
	#AºaySize
(
X
Ë((X)/(X[0]))

	)

269 
	$ouçut_quŸed_°rög
(
FILE
 *
out
, c⁄° *
z
){

270 
i
;

271 
nSögÀ
 = 0;

272 
i
=0; 
z
[i]; i++){

273 if–
z
[
i
]=='\'' ) 
nSögÀ
++;

275 if–
nSögÀ
==0 ){

276 
	`Ârötf
(
out
,"'%s'",
z
);

278 
	`Ârötf
(
out
,"'");

279  *
z
 ){

280 
i
=0; 
z
[i] && z[i]!='\''; i++){}

281 if–
i
==0 ){

282 
	`Ârötf
(
out
,"''");

283 
z
++;

284 }if–
z
[
i
]=='\'' ){

285 
	`Ârötf
(
out
,"%.*s''",
i
,
z
);

286 
z
 +
i
+1;

288 
	`Ârötf
(
out
,"%s",
z
);

292 
	`Ârötf
(
out
,"'");

294 
	}
}

299 
	$ouçut_c_°rög
(
FILE
 *
out
, c⁄° *
z
){

300 
c
;

301 
	`Âutc
('"', 
out
);

302  (
c
 = *(
z
++))!=0 ){

303 if–
c
=='\\' ){

304 
	`Âutc
(
c
, 
out
);

305 
	`Âutc
(
c
, 
out
);

306 }if–
c
=='\t' ){

307 
	`Âutc
('\\', 
out
);

308 
	`Âutc
('t', 
out
);

309 }if–
c
=='\n' ){

310 
	`Âutc
('\\', 
out
);

311 
	`Âutc
('n', 
out
);

312 }if–
c
=='\r' ){

313 
	`Âutc
('\\', 
out
);

314 
	`Âutc
('r', 
out
);

315 }if–!
	`i•röt
(
c
) ){

316 
	`Ârötf
(
out
, "\\%03o", 
c
&0xff);

318 
	`Âutc
(
c
, 
out
);

321 
	`Âutc
('"', 
out
);

322 
	}
}

328 
	$ouçut_html_°rög
(
FILE
 *
out
, c⁄° *
z
){

329 
i
;

330  *
z
 ){

331 
i
=0; 
z
[i] && z[i]!='<' && z[i]!='&'; i++){}

332 if–
i
>0 ){

333 
	`Ârötf
(
out
,"%.*s",
i
,
z
);

335 if–
z
[
i
]=='<' ){

336 
	`Ârötf
(
out
,"&lt;");

337 }if–
z
[
i
]=='&' ){

338 
	`Ârötf
(
out
,"&amp;");

342 
z
 +
i
 + 1;

344 
	}
}

352 
	$ouçut_csv
(
ˇŒback_d©a
 *
p
, c⁄° *
z
, 
bSï
){

353 if–
z
==0 ){

354 
	`Ârötf
(
p
->
out
,"%s",p->
nuŒvÆue
);

355 }if–
	`isNumbî
(
z
, 0) ){

356 
	`Ârötf
(
p
->
out
,"%s",
z
);

358 
	`ouçut_c_°rög
(
p
->
out
, 
z
);

360 if–
bSï
 ){

361 
	`Ârötf
(
p
->
out
,Ö->
£∑øt‹
);

363 
	}
}

365 #ifde‡
SIGINT


369 
	$öãºu±_h™dÀr
(
NŸU£d
){

370 
£íI¡îru±
 = 1;

371 if–
db
 ) 
	`sqlôe3_öãºu±
(db);

372 
	}
}

379 
	$ˇŒback
(*
pArg
, 
nArg
, **
azArg
, **
azCﬁ
){

380 
i
;

381 
ˇŒback_d©a
 *
p
 = (ˇŒback_d©a*)
pArg
;

382  
p
->
mode
 ){

383 
MODE_Löe
: {

384 
w
 = 5;

385 if–
azArg
==0 ) ;

386 
i
=0; i<
nArg
; i++){

387 
Àn
 = 
	`°æí
(
azCﬁ
[
i
]);

388 if–
Àn
>
w
 ) w =Üen;

390 if–
p
->
˙t
++>0 ) 
	`Ârötf
’->
out
,"\n");

391 
i
=0; i<
nArg
; i++){

392 
	`Ârötf
(
p
->
out
,"%*†%s\n", 
w
, 
azCﬁ
[
i
],

393 
azArg
[
i
] ?ázArg[i] : 
p
->
nuŒvÆue
);

397 
MODE_Cﬁumn
: {

398 if–
p
->
˙t
++==0 ){

399 
i
=0; i<
nArg
; i++){

400 
w
, 
n
;

401 if–
i
<
	`AºaySize
(
p
->
cﬁWidth
) ){

402 
w
 = 
p
->
cﬁWidth
[
i
];

404 
w
 = 0;

406 if–
w
<=0 ){

407 
w
 = 
	`°æí
(
azCﬁ
[
i
] ?ázCol[i] : "");

408 if–
w
<10 ) w = 10;

409 
n
 = 
	`°æí
(
azArg
 &&ázArg[
i
] ?ázArg[i] : 
p
->
nuŒvÆue
);

410 if–
w
<
n
 ) w =Ç;

412 if–
i
<
	`AºaySize
(
p
->
a˘uÆWidth
) ){

413 
p
->
a˘uÆWidth
[
i
] = 
w
;

415 if–
p
->
showHódî
 ){

416 
	`Ârötf
(
p
->
out
,"%-*.*s%s",
w
,w,
azCﬁ
[
i
], i==
nArg
-1 ? "\n": " ");

419 if–
p
->
showHódî
 ){

420 
i
=0; i<
nArg
; i++){

421 
w
;

422 if–
i
<
	`AºaySize
(
p
->
a˘uÆWidth
) ){

423 
w
 = 
p
->
a˘uÆWidth
[
i
];

425 
w
 = 10;

427 
	`Ârötf
(
p
->
out
,"%-*.*s%s",
w
,w,"-----------------------------------"

429 
i
==
nArg
-1 ? "\n": " ");

433 if–
azArg
==0 ) ;

434 
i
=0; i<
nArg
; i++){

435 
w
;

436 if–
i
<
	`AºaySize
(
p
->
a˘uÆWidth
) ){

437 
w
 = 
p
->
a˘uÆWidth
[
i
];

439 
w
 = 10;

441 
	`Ârötf
(
p
->
out
,"%-*.*s%s",
w
,w,

442 
azArg
[
i
] ?ázArg[i] : 
p
->
nuŒvÆue
, i==
nArg
-1 ? "\n": " ");

446 
MODE_Semi
:

447 
MODE_Li°
: {

448 if–
p
->
˙t
++==0 &&Ö->
showHódî
 ){

449 
i
=0; i<
nArg
; i++){

450 
	`Ârötf
(
p
->
out
,"%s%s",
azCﬁ
[
i
], i==
nArg
-1 ? "\n" :Ö->
£∑øt‹
);

453 if–
azArg
==0 ) ;

454 
i
=0; i<
nArg
; i++){

455 *
z
 = 
azArg
[
i
];

456 if–
z
==0 ) z = 
p
->
nuŒvÆue
;

457 
	`Ârötf
(
p
->
out
, "%s", 
z
);

458 if–
i
<
nArg
-1 ){

459 
	`Ârötf
(
p
->
out
, "%s",Ö->
£∑øt‹
);

460 }if–
p
->
mode
==
MODE_Semi
 ){

461 
	`Ârötf
(
p
->
out
, ";\n");

463 
	`Ârötf
(
p
->
out
, "\n");

468 
MODE_Html
: {

469 if–
p
->
˙t
++==0 &&Ö->
showHódî
 ){

470 
	`Ârötf
(
p
->
out
,"<TR>");

471 
i
=0; i<
nArg
; i++){

472 
	`Ârötf
(
p
->
out
,"<TH>%s</TH>",
azCﬁ
[
i
]);

474 
	`Ârötf
(
p
->
out
,"</TR>\n");

476 if–
azArg
==0 ) ;

477 
	`Ârötf
(
p
->
out
,"<TR>");

478 
i
=0; i<
nArg
; i++){

479 
	`Ârötf
(
p
->
out
,"<TD>");

480 
	`ouçut_html_°rög
(
p
->
out
, 
azArg
[
i
] ?ázArg[i] :Ö->
nuŒvÆue
);

481 
	`Ârötf
(
p
->
out
,"</TD>\n");

483 
	`Ârötf
(
p
->
out
,"</TR>\n");

486 
MODE_T˛
: {

487 if–
p
->
˙t
++==0 &&Ö->
showHódî
 ){

488 
i
=0; i<
nArg
; i++){

489 
	`ouçut_c_°rög
(
p
->
out
,
azCﬁ
[
i
]);

490 
	`Ârötf
(
p
->
out
, "%s",Ö->
£∑øt‹
);

492 
	`Ârötf
(
p
->
out
,"\n");

494 if–
azArg
==0 ) ;

495 
i
=0; i<
nArg
; i++){

496 
	`ouçut_c_°rög
(
p
->
out
, 
azArg
[
i
] ?ázArg[i] :Ö->
nuŒvÆue
);

497 
	`Ârötf
(
p
->
out
, "%s",Ö->
£∑øt‹
);

499 
	`Ârötf
(
p
->
out
,"\n");

502 
MODE_Csv
: {

503 if–
p
->
˙t
++==0 &&Ö->
showHódî
 ){

504 
i
=0; i<
nArg
; i++){

505 
	`ouçut_csv
(
p
, 
azCﬁ
[
i
], i<
nArg
-1);

507 
	`Ârötf
(
p
->
out
,"\n");

509 if–
azArg
==0 ) ;

510 
i
=0; i<
nArg
; i++){

511 
	`ouçut_csv
(
p
, 
azArg
[
i
], i<
nArg
-1);

513 
	`Ârötf
(
p
->
out
,"\n");

516 
MODE_In£π
: {

517 if–
azArg
==0 ) ;

518 
	`Ârötf
(
p
->
out
,"INSERT INTO %†VALUES(",p->
zDe°TabÀ
);

519 
i
=0; i<
nArg
; i++){

520 *
zSï
 = 
i
>0 ? ",": "";

521 if–
azArg
[
i
]==0 ){

522 
	`Ârötf
(
p
->
out
,"%sNULL",
zSï
);

523 }if–
	`isNumbî
(
azArg
[
i
], 0) ){

524 
	`Ârötf
(
p
->
out
,"%s%s",
zSï
, 
azArg
[
i
]);

526 if–
zSï
[0] ) 
	`Ârötf
(
p
->
out
,"%s",zSep);

527 
	`ouçut_quŸed_°rög
(
p
->
out
, 
azArg
[
i
]);

530 
	`Ârötf
(
p
->
out
,");\n");

535 
	}
}

542 
	$£t_èbÀ_«me
(
ˇŒback_d©a
 *
p
, c⁄° *
zName
){

543 
i
, 
n
;

544 
√edQuŸe
;

545 *
z
;

547 if–
p
->
zDe°TabÀ
 ){

548 
	`‰ì
(
p
->
zDe°TabÀ
);

549 
p
->
zDe°TabÀ
 = 0;

551 if–
zName
==0 ) ;

552 
√edQuŸe
 = !
	`ißÕha
(()*
zName
) && *zName!='_';

553 
i
=
n
=0; 
zName
[i]; i++,Ç++){

554 if–!
	`iß um
(()
zName
[
i
]) && zName[i]!='_' ){

555 
√edQuŸe
 = 1;

556 if–
zName
[
i
]=='\'' ) 
n
++;

559 if–
√edQuŸe
 ) 
n
 += 2;

560 
z
 = 
p
->
zDe°TabÀ
 = 
	`mÆloc
–
n
+1 );

561 if–
z
==0 ){

562 
	`Ârötf
(
°dîr
,"Out of memory!\n");

563 
	`exô
(1);

565 
n
 = 0;

566 if–
√edQuŸe
 ) 
z
[
n
++] = '\'';

567 
i
=0; 
zName
[i]; i++){

568 
z
[
n
++] = 
zName
[
i
];

569 if–
zName
[
i
]=='\'' ) 
z
[
n
++] = '\'';

571 if–
√edQuŸe
 ) 
z
[
n
++] = '\'';

572 
z
[
n
] = 0;

573 
	}
}

583 * 
	$≠≥ndText
(*
zIn
, c⁄° *
zAµíd
, 
quŸe
){

584 
Àn
;

585 
i
;

586 
nAµíd
 = 
	`°æí
(
zAµíd
);

587 
nIn
 = (
zIn
?
	`°æí
(zIn):0);

589 
Àn
 = 
nAµíd
+
nIn
+1;

590 if–
quŸe
 ){

591 
Àn
 += 2;

592 
i
=0; i<
nAµíd
; i++){

593 if–
zAµíd
[
i
]==
quŸe
 ) 
Àn
++;

597 
zIn
 = (*)
	`ªÆloc
(zIn, 
Àn
);

598 if–!
zIn
 ){

602 if–
quŸe
 ){

603 *
zC§
 = &
zIn
[
nIn
];

604 *
zC§
++ = 
quŸe
;

605 
i
=0; i<
nAµíd
; i++){

606 *
zC§
++ = 
zAµíd
[
i
];

607 if–
zAµíd
[
i
]==
quŸe
 ) *
zC§
++ = quote;

609 *
zC§
++ = 
quŸe
;

610 *
zC§
++ = '\0';

611 
	`as£π
–(
zC§
-
zIn
)==
Àn
 );

613 
	`mem˝y
(&
zIn
[
nIn
], 
zAµíd
, 
nAµíd
);

614 
zIn
[
Àn
-1] = '\0';

617  
zIn
;

618 
	}
}

625 
	$run_èbÀ_dump_quîy
(
FILE
 *
out
, 
sqlôe3
 *
db
, c⁄° *
zSñe˘
){

626 
sqlôe3_°mt
 *
pSñe˘
;

627 
rc
;

628 
rc
 = 
	`sqlôe3_¥ï¨e
(
db
, 
zSñe˘
, -1, &
pSñe˘
, 0);

629 if–
rc
!=
SQLITE_OK
 || !
pSñe˘
 ){

630  
rc
;

632 
rc
 = 
	`sqlôe3_°ï
(
pSñe˘
);

633  
rc
==
SQLITE_ROW
 ){

634 
	`Ârötf
(
out
, "%s;\n", 
	`sqlôe3_cﬁumn_ãxt
(
pSñe˘
, 0));

635 
rc
 = 
	`sqlôe3_°ï
(
pSñe˘
);

637  
	`sqlôe3_föÆize
(
pSñe˘
);

638 
	}
}

647 
	$dump_ˇŒback
(*
pArg
, 
nArg
, **
azArg
, **
azCﬁ
){

648 
rc
;

649 c⁄° *
zTabÀ
;

650 c⁄° *
zTy≥
;

651 c⁄° *
zSql
;

652 
ˇŒback_d©a
 *
p
 = (ˇŒback_d©®*)
pArg
;

654 if–
nArg
!=3 )  1;

655 
zTabÀ
 = 
azArg
[0];

656 
zTy≥
 = 
azArg
[1];

657 
zSql
 = 
azArg
[2];

659 if–
	`°rcmp
(
zTabÀ
, "sqlite_sequence")==0 ){

660 
	`Ârötf
(
p
->
out
, "DELETE FROM sqlite_sequence;\n");

661 }if–
	`°rcmp
(
zTabÀ
, "sqlite_stat1")==0 ){

662 
	`Ârötf
(
p
->
out
, "ANALYZE sqlite_master;\n");

663 }if–
	`°∫cmp
(
zTabÀ
, "sqlite_", 7)==0 ){

666 
	`Ârötf
(
p
->
out
, "%s;\n", 
zSql
);

669 if–
	`°rcmp
(
zTy≥
, "table")==0 ){

670 
sqlôe3_°mt
 *
pTabÀInfo
 = 0;

671 *
zSñe˘
 = 0;

672 *
zTabÀInfo
 = 0;

673 *
zTmp
 = 0;

675 
zTabÀInfo
 = 
	`≠≥ndText
(zTableInfo, "PRAGMAÅable_info(", 0);

676 
zTabÀInfo
 = 
	`≠≥ndText
(zTabÀInfo, 
zTabÀ
, '"');

677 
zTabÀInfo
 = 
	`≠≥ndText
(zTableInfo, ");", 0);

679 
rc
 = 
	`sqlôe3_¥ï¨e
(
p
->
db
, 
zTabÀInfo
, -1, &
pTabÀInfo
, 0);

680 if–
zTabÀInfo
 ) 
	`‰ì
(zTableInfo);

681 if–
rc
!=
SQLITE_OK
 || !
pTabÀInfo
 ){

685 
zSñe˘
 = 
	`≠≥ndText
(zSelect, "SELECT 'INSERT INTO ' || ", 0);

686 
zTmp
 = 
	`≠≥ndText
(zTmp, 
zTabÀ
, '"');

687 if–
zTmp
 ){

688 
zSñe˘
 = 
	`≠≥ndText
(zSñe˘, 
zTmp
, '\'');

690 
zSñe˘
 = 
	`≠≥ndText
(zSelect, " || ' VALUES(' || ", 0);

691 
rc
 = 
	`sqlôe3_°ï
(
pTabÀInfo
);

692  
rc
==
SQLITE_ROW
 ){

693 c⁄° *
zText
 = (c⁄° *)
	`sqlôe3_cﬁumn_ãxt
(
pTabÀInfo
, 1);

694 
zSñe˘
 = 
	`≠≥ndText
(zSelect, "quote(", 0);

695 
zSñe˘
 = 
	`≠≥ndText
(zSñe˘, 
zText
, '"');

696 
rc
 = 
	`sqlôe3_°ï
(
pTabÀInfo
);

697 if–
rc
==
SQLITE_ROW
 ){

698 
zSñe˘
 = 
	`≠≥ndText
(zSelect, ") || ', ' || ", 0);

700 
zSñe˘
 = 
	`≠≥ndText
(zSelect, ") ", 0);

703 
rc
 = 
	`sqlôe3_föÆize
(
pTabÀInfo
);

704 if–
rc
!=
SQLITE_OK
 ){

705 if–
zSñe˘
 ) 
	`‰ì
(zSelect);

708 
zSñe˘
 = 
	`≠≥ndText
(zSelect, "|| ')' FROM ", 0);

709 
zSñe˘
 = 
	`≠≥ndText
(zSñe˘, 
zTabÀ
, '"');

711 
rc
 = 
	`run_èbÀ_dump_quîy
(
p
->
out
,Ö->
db
, 
zSñe˘
);

712 if–
rc
==
SQLITE_CORRUPT
 ){

713 
zSñe˘
 = 
	`≠≥ndText
(zSelect, " ORDER BYÑowid DESC", 0);

714 
rc
 = 
	`run_èbÀ_dump_quîy
(
p
->
out
,Ö->
db
, 
zSñe˘
);

716 if–
zSñe˘
 ) 
	`‰ì
(zSelect);

717 if–
rc
!=
SQLITE_OK
 ){

722 
	}
}

729 
	$run_schema_dump_quîy
(

730 
ˇŒback_d©a
 *
p
,

731 c⁄° *
zQuîy
,

732 **
pzEºMsg


734 
rc
;

735 
rc
 = 
	`sqlôe3_exec
(
p
->
db
, 
zQuîy
, 
dump_ˇŒback
,Ö, 
pzEºMsg
);

736 if–
rc
==
SQLITE_CORRUPT
 ){

737 *
zQ2
;

738 
Àn
 = 
	`°æí
(
zQuîy
);

739 if–
pzEºMsg
 ) 
	`sqlôe3_‰ì
(*pzErrMsg);

740 
zQ2
 = 
	`mÆloc
–
Àn
+100 );

741 if–
zQ2
==0 )  
rc
;

742 
	`•rötf
(
zQ2
, "%†ORDER BYÑowid DESC", 
zQuîy
);

743 
rc
 = 
	`sqlôe3_exec
(
p
->
db
, 
zQ2
, 
dump_ˇŒback
,Ö, 
pzEºMsg
);

744 
	`‰ì
(
zQ2
);

746  
rc
;

747 
	}
}

752 
	gzHñp
[] =

786 
¥o˚ss_öput
(
ˇŒback_d©a
 *
p
, 
FILE
 *
ö
);

792 
	$›í_db
(
ˇŒback_d©a
 *
p
){

793 if–
p
->
db
==0 ){

794 
	`sqlôe3_›í
(
p
->
zDbFûíame
, &p->
db
);

795 
db
 = 
p
->db;

796 
	`sqlôe3_¸óã_fun˘i⁄
(
db
, "shñl°©ic", 0, 
SQLITE_UTF8
, 0,

797 
shñl°©icFunc
, 0, 0);

798 if–
SQLITE_OK
!=
	`sqlôe3_îrcode
(
db
) ){

799 
	`Ârötf
(
°dîr
,"UnableÅo open database \"%s\": %s\n",

800 
p
->
zDbFûíame
, 
	`sqlôe3_îrmsg
(
db
));

801 
	`exô
(1);

804 
	}
}

815 
	$ªsﬁve_back¶ashes
(*
z
){

816 
i
, 
j
, 
c
;

817 
i
=
j
=0; (
c
 = 
z
[i])!=0; i++, j++){

818 if–
c
=='\\' ){

819 
c
 = 
z
[++
i
];

820 if–
c
=='n' ){

821 
c
 = '\n';

822 }if–
c
=='t' ){

823 
c
 = '\t';

824 }if–
c
=='r' ){

825 
c
 = '\r';

826 }if–
c
>='0' && c<='7' ){

827 
c
 -= '0';

828 if–
z
[
i
+1]>='0' && z[i+1]<='7' ){

829 
i
++;

830 
c
 = (c<<3Ë+ 
z
[
i
] - '0';

831 if–
z
[
i
+1]>='0' && z[i+1]<='7' ){

832 
i
++;

833 
c
 = (c<<3Ë+ 
z
[
i
] - '0';

838 
z
[
j
] = 
c
;

840 
z
[
j
] = 0;

841 
	}
}

849 
	$do_mëa_comm™d
(*
zLöe
, 
ˇŒback_d©a
 *
p
){

850 
i
 = 1;

851 
nArg
 = 0;

852 
n
, 
c
;

853 
rc
 = 0;

854 *
azArg
[50];

858  
zLöe
[
i
] && 
nArg
<
	`AºaySize
(
azArg
) ){

859  
	`is•a˚
(()
zLöe
[
i
]) ){ i++; }

860 if–
zLöe
[
i
]==0 ) ;

861 if–
zLöe
[
i
]=='\'' || zLine[i]=='"' ){

862 
dñim
 = 
zLöe
[
i
++];

863 
azArg
[
nArg
++] = &
zLöe
[
i
];

864  
zLöe
[
i
] && zLöe[i]!=
dñim
 ){ i++; }

865 if–
zLöe
[
i
]==
dñim
 ){

866 
zLöe
[
i
++] = 0;

868 if–
dñim
=='"' ) 
	`ªsﬁve_back¶ashes
(
azArg
[
nArg
-1]);

870 
azArg
[
nArg
++] = &
zLöe
[
i
];

871  
zLöe
[
i
] && !
	`is•a˚
(()zLine[i]) ){ i++; }

872 if–
zLöe
[
i
] ) zLine[i++] = 0;

873 
	`ªsﬁve_back¶ashes
(
azArg
[
nArg
-1]);

879 if–
nArg
==0 )  
rc
;

880 
n
 = 
	`°æí
(
azArg
[0]);

881 
c
 = 
azArg
[0][0];

882 if–
c
=='d' && 
n
>1 && 
	`°∫cmp
(
azArg
[0], "databases",Ç)==0 ){

883 
ˇŒback_d©a
 
d©a
;

884 *
zEºMsg
 = 0;

885 
	`›í_db
(
p
);

886 
	`mem˝y
(&
d©a
, 
p
, (data));

887 
d©a
.
showHódî
 = 1;

888 
d©a
.
mode
 = 
MODE_Cﬁumn
;

889 
d©a
.
cﬁWidth
[0] = 3;

890 
d©a
.
cﬁWidth
[1] = 15;

891 
d©a
.
cﬁWidth
[2] = 58;

892 
d©a
.
˙t
 = 0;

893 
	`sqlôe3_exec
(
p
->
db
, "PRAGMA d©aba£_li°; ", 
ˇŒback
, &
d©a
, &
zEºMsg
);

894 if–
zEºMsg
 ){

895 
	`Ârötf
(
°dîr
,"Eº‹: %s\n", 
zEºMsg
);

896 
	`sqlôe3_‰ì
(
zEºMsg
);

900 if–
c
=='d' && 
	`°∫cmp
(
azArg
[0], "dump", 
n
)==0 ){

901 *
zEºMsg
 = 0;

902 
	`›í_db
(
p
);

903 
	`Ârötf
(
p
->
out
, "BEGIN TRANSACTION;\n");

904 if–
nArg
==1 ){

905 
	`run_schema_dump_quîy
(
p
,

909 
	`run_schema_dump_quîy
(
p
,

914 
i
;

915 
i
=1; i<
nArg
; i++){

916 
zShñlSètic
 = 
azArg
[
i
];

917 
	`run_schema_dump_quîy
(
p
,

921 
	`run_schema_dump_quîy
(
p
,

925 
zShñlSètic
 = 0;

928 if–
zEºMsg
 ){

929 
	`Ârötf
(
°dîr
,"Eº‹: %s\n", 
zEºMsg
);

930 
	`sqlôe3_‰ì
(
zEºMsg
);

932 
	`Ârötf
(
p
->
out
, "COMMIT;\n");

936 if–
c
=='e' && 
	`°∫cmp
(
azArg
[0], "echo", 
n
)==0 && 
nArg
>1 ){

937 
j
;

938 *
z
 = 
azArg
[1];

939 
vÆ
 = 
	`©oi
(
azArg
[1]);

940 
j
=0; 
z
[j]; j++){

941 
z
[
j
] = 
	`tﬁowî
(()z[j]);

943 if–
	`°rcmp
(
z
,"on")==0 ){

944 
vÆ
 = 1;

945 }if–
	`°rcmp
(
z
,"yes")==0 ){

946 
vÆ
 = 1;

948 
p
->
echoOn
 = 
vÆ
;

951 if–
c
=='e' && 
	`°∫cmp
(
azArg
[0], "exô", 
n
)==0 ){

952 
rc
 = 1;

955 if–
c
=='e' && 
	`°∫cmp
(
azArg
[0], "ex∂aö", 
n
)==0 ){

956 
j
;

957 
zO√
[] = "1";

958 *
z
 = 
nArg
>=2 ? 
azArg
[1] : 
zO√
;

959 
vÆ
 = 
	`©oi
(
z
);

960 
j
=0; 
z
[j]; j++){

961 
z
[
j
] = 
	`tﬁowî
(()z[j]);

963 if–
	`°rcmp
(
z
,"on")==0 ){

964 
vÆ
 = 1;

965 }if–
	`°rcmp
(
z
,"yes")==0 ){

966 
vÆ
 = 1;

968 if(
vÆ
 == 1) {

969 if(!
p
->
ex∂aöPªv
.
vÆid
) {

970 
p
->
ex∂aöPªv
.
vÆid
 = 1;

971 
p
->
ex∂aöPªv
.
mode
 =Ö->mode;

972 
p
->
ex∂aöPªv
.
showHódî
 =Ö->showHeader;

973 
	`mem˝y
(
p
->
ex∂aöPªv
.
cﬁWidth
,p->colWidth,(p->colWidth));

982 
p
->
mode
 = 
MODE_Cﬁumn
;

983 
p
->
showHódî
 = 1;

984 
	`mem£t
(
p
->
cﬁWidth
,0,
	`AºaySize
(p->colWidth));

985 
p
->
cﬁWidth
[0] = 4;

986 
p
->
cﬁWidth
[1] = 14;

987 
p
->
cﬁWidth
[2] = 10;

988 
p
->
cﬁWidth
[3] = 10;

989 
p
->
cﬁWidth
[4] = 33;

990 }i‡(
p
->
ex∂aöPªv
.
vÆid
) {

991 
p
->
ex∂aöPªv
.
vÆid
 = 0;

992 
p
->
mode
 =Ö->
ex∂aöPªv
.mode;

993 
p
->
showHódî
 =Ö->
ex∂aöPªv
.showHeader;

994 
	`mem˝y
(
p
->
cﬁWidth
,p->
ex∂aöPªv
.colWidth,(p->colWidth));

998 if–
c
=='h' && (
	`°∫cmp
(
azArg
[0], "hódî", 
n
)==0

1000 
	`°∫cmp
(
azArg
[0], "hódîs", 
n
)==0 )&& 
nArg
>1 ){

1001 
j
;

1002 *
z
 = 
azArg
[1];

1003 
vÆ
 = 
	`©oi
(
azArg
[1]);

1004 
j
=0; 
z
[j]; j++){

1005 
z
[
j
] = 
	`tﬁowî
(()z[j]);

1007 if–
	`°rcmp
(
z
,"on")==0 ){

1008 
vÆ
 = 1;

1009 }if–
	`°rcmp
(
z
,"yes")==0 ){

1010 
vÆ
 = 1;

1012 
p
->
showHódî
 = 
vÆ
;

1015 if–
c
=='h' && 
	`°∫cmp
(
azArg
[0], "hñp", 
n
)==0 ){

1016 
	`Ârötf
(
°dîr
,
zHñp
);

1019 if–
c
=='i' && 
	`°∫cmp
(
azArg
[0], "imp‹t", 
n
)==0 && 
nArg
>=3 ){

1020 *
zTabÀ
 = 
azArg
[2];

1021 *
zFûe
 = 
azArg
[1];

1022 
sqlôe3_°mt
 *
pStmt
;

1023 
rc
;

1024 
nCﬁ
;

1025 
nByã
;

1026 
i
, 
j
;

1027 
nSï
;

1028 *
zSql
;

1029 *
zLöe
;

1030 **
azCﬁ
;

1031 *
zCommô
;

1032 
FILE
 *
ö
;

1033 
löío
 = 0;

1035 
nSï
 = 
	`°æí
(
p
->
£∑øt‹
);

1036 if–
nSï
==0 ){

1037 
	`Ârötf
(
°dîr
, "non-null separatorÑequired for import\n");

1040 
zSql
 = 
	`sqlôe3_m¥ötf
("SELECT * FROM '%q'", 
zTabÀ
);

1041 if–
zSql
==0 )  0;

1042 
nByã
 = 
	`°æí
(
zSql
);

1043 
rc
 = 
	`sqlôe3_¥ï¨e
(
p
->
db
, 
zSql
, -1, &
pStmt
, 0);

1044 
	`sqlôe3_‰ì
(
zSql
);

1045 if–
rc
 ){

1046 
	`Ârötf
(
°dîr
,"Eº‹: %s\n", 
	`sqlôe3_îrmsg
(
db
));

1047 
nCﬁ
 = 0;

1049 
nCﬁ
 = 
	`sqlôe3_cﬁumn_cou¡
(
pStmt
);

1051 
	`sqlôe3_föÆize
(
pStmt
);

1052 if–
nCﬁ
==0 )  0;

1053 
zSql
 = 
	`mÆloc
–
nByã
 + 20 + 
nCﬁ
*2 );

1054 if–
zSql
==0 )  0;

1055 
	`sqlôe3_¢¥ötf
(
nByã
+20, 
zSql
, "INSERT INTO '%q' VALUES(?", 
zTabÀ
);

1056 
j
 = 
	`°æí
(
zSql
);

1057 
i
=1; i<
nCﬁ
; i++){

1058 
zSql
[
j
++] = ',';

1059 
zSql
[
j
++] = '?';

1061 
zSql
[
j
++] = ')';

1062 
zSql
[
j
] = 0;

1063 
rc
 = 
	`sqlôe3_¥ï¨e
(
p
->
db
, 
zSql
, -1, &
pStmt
, 0);

1064 
	`‰ì
(
zSql
);

1065 if–
rc
 ){

1066 
	`Ârötf
(
°dîr
, "Eº‹: %s\n", 
	`sqlôe3_îrmsg
(
db
));

1067 
	`sqlôe3_föÆize
(
pStmt
);

1070 
ö
 = 
	`f›í
(
zFûe
, "rb");

1071 if–
ö
==0 ){

1072 
	`Ârötf
(
°dîr
, "ˇ¬Ÿ o≥¿fûe: %s\n", 
zFûe
);

1073 
	`sqlôe3_föÆize
(
pStmt
);

1076 
azCﬁ
 = 
	`mÆloc
–◊zCﬁ[0])*(
nCﬁ
+1) );

1077 if–
azCﬁ
==0 )  0;

1078 
	`sqlôe3_exec
(
p
->
db
, "BEGIN", 0, 0, 0);

1079 
zCommô
 = "COMMIT";

1080  (
zLöe
 = 
	`loˇl_gëlöe
(0, 
ö
))!=0 ){

1081 *
z
;

1082 
i
 = 0;

1083 
löío
++;

1084 
azCﬁ
[0] = 
zLöe
;

1085 
i
=0, 
z
=
zLöe
; *z && *z!='\n' && *z!='\r'; z++){

1086 if–*
z
==
p
->
£∑øt‹
[0] && 
	`°∫cmp
(z,Ö->£∑øt‹, 
nSï
)==0 ){

1087 *
z
 = 0;

1088 
i
++;

1089 if–
i
<
nCﬁ
 ){

1090 
azCﬁ
[
i
] = &
z
[
nSï
];

1091 
z
 +
nSï
-1;

1095 *
z
 = 0;

1096 if–
i
+1!=
nCﬁ
 ){

1097 
	`Ârötf
(
°dîr
,"%sÜine %d:Éxpected %d columns of data but found %d\n",

1098 
zFûe
, 
löío
, 
nCﬁ
, 
i
+1);

1099 
zCommô
 = "ROLLBACK";

1102 
i
=0; i<
nCﬁ
; i++){

1103 
	`sqlôe3_böd_ãxt
(
pStmt
, 
i
+1, 
azCﬁ
[i], -1, 
SQLITE_STATIC
);

1105 
	`sqlôe3_°ï
(
pStmt
);

1106 
rc
 = 
	`sqlôe3_ª£t
(
pStmt
);

1107 
	`‰ì
(
zLöe
);

1108 if–
rc
!=
SQLITE_OK
 ){

1109 
	`Ârötf
(
°dîr
,"Eº‹: %s\n", 
	`sqlôe3_îrmsg
(
db
));

1110 
zCommô
 = "ROLLBACK";

1114 
	`‰ì
(
azCﬁ
);

1115 
	`f˛o£
(
ö
);

1116 
	`sqlôe3_föÆize
(
pStmt
);

1117 
	`sqlôe3_exec
(
p
->
db
, 
zCommô
, 0, 0, 0);

1120 if–
c
=='i' && 
	`°∫cmp
(
azArg
[0], "ödi˚s", 
n
)==0 && 
nArg
>1 ){

1121 
ˇŒback_d©a
 
d©a
;

1122 *
zEºMsg
 = 0;

1123 
	`›í_db
(
p
);

1124 
	`mem˝y
(&
d©a
, 
p
, (data));

1125 
d©a
.
showHódî
 = 0;

1126 
d©a
.
mode
 = 
MODE_Li°
;

1127 
zShñlSètic
 = 
azArg
[1];

1128 
	`sqlôe3_exec
(
p
->
db
,

1135 
ˇŒback
, &
d©a
, &
zEºMsg


1137 
zShñlSètic
 = 0;

1138 if–
zEºMsg
 ){

1139 
	`Ârötf
(
°dîr
,"Eº‹: %s\n", 
zEºMsg
);

1140 
	`sqlôe3_‰ì
(
zEºMsg
);

1144 if–
c
=='m' && 
	`°∫cmp
(
azArg
[0], "mode", 
n
)==0 && 
nArg
>=2 ){

1145 
n2
 = 
	`°æí
(
azArg
[1]);

1146 if–
	`°∫cmp
(
azArg
[1],"löe",
n2
)==0

1148 
	`°∫cmp
(
azArg
[1],"löes",
n2
)==0 ){

1149 
p
->
mode
 = 
MODE_Löe
;

1150 }if–
	`°∫cmp
(
azArg
[1],"cﬁumn",
n2
)==0

1152 
	`°∫cmp
(
azArg
[1],"cﬁumns",
n2
)==0 ){

1153 
p
->
mode
 = 
MODE_Cﬁumn
;

1154 }if–
	`°∫cmp
(
azArg
[1],"li°",
n2
)==0 ){

1155 
p
->
mode
 = 
MODE_Li°
;

1156 }if–
	`°∫cmp
(
azArg
[1],"html",
n2
)==0 ){

1157 
p
->
mode
 = 
MODE_Html
;

1158 }if–
	`°∫cmp
(
azArg
[1],"t˛",
n2
)==0 ){

1159 
p
->
mode
 = 
MODE_T˛
;

1160 }if–
	`°∫cmp
(
azArg
[1],"csv",
n2
)==0 ){

1161 
p
->
mode
 = 
MODE_Csv
;

1162 
	`°r˝y
(
p
->
£∑øt‹
, ",");

1163 }if–
	`°∫cmp
(
azArg
[1],"èbs",
n2
)==0 ){

1164 
p
->
mode
 = 
MODE_Li°
;

1165 
	`°r˝y
(
p
->
£∑øt‹
, "\t");

1166 }if–
	`°∫cmp
(
azArg
[1],"ö£π",
n2
)==0 ){

1167 
p
->
mode
 = 
MODE_In£π
;

1168 if–
nArg
>=3 ){

1169 
	`£t_èbÀ_«me
(
p
, 
azArg
[2]);

1171 
	`£t_èbÀ_«me
(
p
, "table");

1174 
	`Ârötf
(
°dîr
,"mode should be on of: "

1179 if–
c
=='n' && 
	`°∫cmp
(
azArg
[0], "nuŒvÆue", 
n
)==0 && 
nArg
==2 ) {

1180 
	`•rötf
(
p
->
nuŒvÆue
, "%.*s", ()
	`AºaySize
’->nuŒvÆue)-1, 
azArg
[1]);

1183 if–
c
=='o' && 
	`°∫cmp
(
azArg
[0], "ouçut", 
n
)==0 && 
nArg
==2 ){

1184 if–
p
->
out
!=
°dout
 ){

1185 
	`f˛o£
(
p
->
out
);

1187 if–
	`°rcmp
(
azArg
[1],"stdout")==0 ){

1188 
p
->
out
 = 
°dout
;

1189 
	`°r˝y
(
p
->
outfûe
,"stdout");

1191 
p
->
out
 = 
	`f›í
(
azArg
[1], "wb");

1192 if–
p
->
out
==0 ){

1193 
	`Ârötf
(
°dîr
,"ˇn'àwrôêtÿ\"%s\"\n", 
azArg
[1]);

1194 
p
->
out
 = 
°dout
;

1196 
	`°r˝y
(
p
->
outfûe
,
azArg
[1]);

1201 if–
c
=='p' && 
	`°∫cmp
(
azArg
[0], "¥om±", 
n
)==0 && (
nArg
==2 ||ÇArg==3)){

1202 if–
nArg
 >= 2) {

1203 
	`°∫˝y
(
maöProm±
,
azArg
[1],()
	`AºaySize
(mainPrompt)-1);

1205 if–
nArg
 >= 3) {

1206 
	`°∫˝y
(
c⁄töueProm±
,
azArg
[2],()
	`AºaySize
(continuePrompt)-1);

1210 if–
c
=='q' && 
	`°∫cmp
(
azArg
[0], "quô", 
n
)==0 ){

1211 
rc
 = 1;

1214 if–
c
=='r' && 
	`°∫cmp
(
azArg
[0], "ªad", 
n
)==0 && 
nArg
==2 ){

1215 
FILE
 *
Æt
 = 
	`f›í
(
azArg
[1], "rb");

1216 if–
Æt
==0 ){

1217 
	`Ârötf
(
°dîr
,"ˇn'à›í \"%s\"\n", 
azArg
[1]);

1219 
	`¥o˚ss_öput
(
p
, 
Æt
);

1220 
	`f˛o£
(
Æt
);

1224 if–
c
=='s' && 
	`°∫cmp
(
azArg
[0], "schema", 
n
)==0 ){

1225 
ˇŒback_d©a
 
d©a
;

1226 *
zEºMsg
 = 0;

1227 
	`›í_db
(
p
);

1228 
	`mem˝y
(&
d©a
, 
p
, (data));

1229 
d©a
.
showHódî
 = 0;

1230 
d©a
.
mode
 = 
MODE_Semi
;

1231 if–
nArg
>1 ){

1232 
i
;

1233 
i
=0; 
azArg
[1][i]; i++ËazArg[1][i] = 
	`tﬁowî
(azArg[1][i]);

1234 if–
	`°rcmp
(
azArg
[1],"sqlite_master")==0 ){

1235 *
√w_¨gv
[2], *
√w_cﬁv
[2];

1236 
√w_¨gv
[0] = "CREATE TABLE sqlite_master (\n"

1243 
√w_¨gv
[1] = 0;

1244 
√w_cﬁv
[0] = "sql";

1245 
√w_cﬁv
[1] = 0;

1246 
	`ˇŒback
(&
d©a
, 1, 
√w_¨gv
, 
√w_cﬁv
);

1247 }if–
	`°rcmp
(
azArg
[1],"sqlite_temp_master")==0 ){

1248 *
√w_¨gv
[2], *
√w_cﬁv
[2];

1249 
√w_¨gv
[0] = "CREATE TEMP TABLE sqlite_temp_master (\n"

1256 
√w_¨gv
[1] = 0;

1257 
√w_cﬁv
[0] = "sql";

1258 
√w_cﬁv
[1] = 0;

1259 
	`ˇŒback
(&
d©a
, 1, 
√w_¨gv
, 
√w_cﬁv
);

1261 
zShñlSètic
 = 
azArg
[1];

1262 
	`sqlôe3_exec
(
p
->
db
,

1268 
ˇŒback
, &
d©a
, &
zEºMsg
);

1269 
zShñlSètic
 = 0;

1272 
	`sqlôe3_exec
(
p
->
db
,

1278 
ˇŒback
, &
d©a
, &
zEºMsg


1281 if–
zEºMsg
 ){

1282 
	`Ârötf
(
°dîr
,"Eº‹: %s\n", 
zEºMsg
);

1283 
	`sqlôe3_‰ì
(
zEºMsg
);

1287 if–
c
=='s' && 
	`°∫cmp
(
azArg
[0], "£∑øt‹", 
n
)==0 && 
nArg
==2 ){

1288 
	`•rötf
(
p
->
£∑øt‹
, "%.*s", ()
	`AºaySize
’->£∑øt‹)-1, 
azArg
[1]);

1291 if–
c
=='s' && 
	`°∫cmp
(
azArg
[0], "show", 
n
)==0){

1292 
i
;

1293 
	`Ârötf
(
p
->
out
,"%9.9s: %s\n","echo",Ö->
echoOn
 ? "on" : "off");

1294 
	`Ârötf
(
p
->
out
,"%9.9s: %s\n","ex∂aö",Ö->
ex∂aöPªv
.
vÆid
 ? "on" :"off");

1295 
	`Ârötf
(
p
->
out
,"%9.9s: %s\n","hódîs",Ö->
showHódî
 ? "on" : "off");

1296 
	`Ârötf
(
p
->
out
,"%9.9s: %s\n","mode", 
modeDes¸
[p->
mode
]);

1297 
	`Ârötf
(
p
->
out
,"%9.9s: ", "nullvalue");

1298 
	`ouçut_c_°rög
(
p
->
out
,Ö->
nuŒvÆue
);

1299 
	`Ârötf
(
p
->
out
, "\n");

1300 
	`Ârötf
(
p
->
out
,"%9.9s: %s\n","output",

1301 
	`°æí
(
p
->
outfûe
) ?Ö->outfile : "stdout");

1302 
	`Ârötf
(
p
->
out
,"%9.9s: ", "separator");

1303 
	`ouçut_c_°rög
(
p
->
out
,Ö->
£∑øt‹
);

1304 
	`Ârötf
(
p
->
out
, "\n");

1305 
	`Ârötf
(
p
->
out
,"%9.9s: ","width");

1306 
i
=0;i<()
	`AºaySize
(
p
->
cﬁWidth
) &&Ö->colWidth[i] != 0;i++) {

1307 
	`Ârötf
(
p
->
out
,"%d ",p->
cﬁWidth
[
i
]);

1309 
	`Ârötf
(
p
->
out
,"\n");

1312 if–
c
=='t' && 
n
>1 && 
	`°∫cmp
(
azArg
[0], "tables",Ç)==0 ){

1313 **
azResu…
;

1314 
nRow
, 
rc
;

1315 *
zEºMsg
;

1316 
	`›í_db
(
p
);

1317 if–
nArg
==1 ){

1318 
rc
 = 
	`sqlôe3_gë_èbÀ
(
p
->
db
,

1325 &
azResu…
, &
nRow
, 0, &
zEºMsg


1328 
zShñlSètic
 = 
azArg
[1];

1329 
rc
 = 
	`sqlôe3_gë_èbÀ
(
p
->
db
,

1336 &
azResu…
, &
nRow
, 0, &
zEºMsg


1338 
zShñlSètic
 = 0;

1340 if–
zEºMsg
 ){

1341 
	`Ârötf
(
°dîr
,"Eº‹: %s\n", 
zEºMsg
);

1342 
	`sqlôe3_‰ì
(
zEºMsg
);

1344 if–
rc
==
SQLITE_OK
 ){

1345 
Àn
, 
maxÀn
 = 0;

1346 
i
, 
j
;

1347 
nPrötCﬁ
, 
nPrötRow
;

1348 
i
=1; i<=
nRow
; i++){

1349 if–
azResu…
[
i
]==0 ) ;

1350 
Àn
 = 
	`°æí
(
azResu…
[
i
]);

1351 if–
Àn
>
maxÀn
 ) maxlen =Üen;

1353 
nPrötCﬁ
 = 80/(
maxÀn
+2);

1354 if–
nPrötCﬁ
<1 )ÇPrintCol = 1;

1355 
nPrötRow
 = (
nRow
 + 
nPrötCﬁ
 - 1)/nPrintCol;

1356 
i
=0; i<
nPrötRow
; i++){

1357 
j
=
i
+1; j<=
nRow
; j+=
nPrötRow
){

1358 *
zSp
 = 
j
<=
nPrötRow
 ? "" : " ";

1359 
	`¥ötf
("%s%-*s", 
zSp
, 
maxÀn
, 
azResu…
[
j
] ?ázResult[j] : "");

1361 
	`¥ötf
("\n");

1364 
	`sqlôe3_‰ì_èbÀ
(
azResu…
);

1367 if–
c
=='t' && 
n
>1 && 
	`°∫cmp
(
azArg
[0], "timeout",Ç)==0 && 
nArg
>=2 ){

1368 
	`›í_db
(
p
);

1369 
	`sqlôe3_busy_timeout
(
p
->
db
, 
	`©oi
(
azArg
[1]));

1372 if–
c
=='w' && 
	`°∫cmp
(
azArg
[0], "width", 
n
)==0 ){

1373 
j
;

1374 
j
=1; j<
nArg
 && j<
	`AºaySize
(
p
->
cﬁWidth
); j++){

1375 
p
->
cﬁWidth
[
j
-1] = 
	`©oi
(
azArg
[j]);

1380 
	`Ârötf
(
°dîr
, "unknown command or invalidárguments: "

1381 " \"%s\". E¡î \".hñp\" f‹ hñp\n", 
azArg
[0]);

1384  
rc
;

1385 
	}
}

1391 
	$_íds_wôh_£micﬁ⁄
(c⁄° *
z
, 
N
){

1392  
N
>0 && 
	`is•a˚
(()
z
[N-1]) ){ N--; }

1393  
N
>0 && 
z
[N-1]==';';

1394 
	}
}

1399 
	$_Æl_whôe•a˚
(c⁄° *
z
){

1400 ; *
z
; z++){

1401 if–
	`is•a˚
(*(*)
z
) ) ;

1402 if–*
z
=='/' && z[1]=='*' ){

1403 
z
 += 2;

1404  *
z
 && (*z!='*' || z[1]!='/') ){ z++; }

1405 if–*
z
==0 )  0;

1406 
z
++;

1409 if–*
z
=='-' && z[1]=='-' ){

1410 
z
 += 2;

1411  *
z
 && *z!='\n' ){ z++; }

1412 if–*
z
==0 )  1;

1418 
	}
}

1425 
	$_is_comm™d_ãrmö©‹
(c⁄° *
zLöe
){

1426  
	`is•a˚
(*(*)
zLöe
) ){ zLine++; };

1427 if–
zLöe
[0]=='/' && 
	`_Æl_whôe•a˚
(&zLine[1]) )  1;

1428 if–
	`tﬁowî
(
zLöe
[0])=='g' &&Åolower(zLine[1])=='o'

1429 && 
	`_Æl_whôe•a˚
(&
zLöe
[2]) ){

1433 
	}
}

1442 
	$¥o˚ss_öput
(
ˇŒback_d©a
 *
p
, 
FILE
 *
ö
){

1443 *
zLöe
;

1444 *
zSql
 = 0;

1445 
nSql
 = 0;

1446 *
zEºMsg
;

1447 
rc
;

1448  
	`fÊush
(
p
->
out
), (
zLöe
 = 
	`⁄e_öput_löe
(
zSql
, 
ö
))!=0 ){

1449 if–
£íI¡îru±
 ){

1450 if–
ö
!=0 ) ;

1451 
£íI¡îru±
 = 0;

1453 if–
p
->
echoOn
 ) 
	`¥ötf
("%s\n", 
zLöe
);

1454 if–(
zSql
==0 || zSql[0]==0Ë&& 
	`_Æl_whôe•a˚
(
zLöe
) ) ;

1455 if–
zLöe
 && zLöe[0]=='.' && 
nSql
==0 ){

1456 
rc
 = 
	`do_mëa_comm™d
(
zLöe
, 
p
);

1457 
	`‰ì
(
zLöe
);

1458 if–
rc
 ) ;

1461 if–
	`_is_comm™d_ãrmö©‹
(
zLöe
) ){

1462 
	`°r˝y
(
zLöe
,";");

1464 if–
zSql
==0 ){

1465 
i
;

1466 
i
=0; 
zLöe
[i] && 
	`is•a˚
(()zLine[i]); i++){}

1467 if–
zLöe
[
i
]!=0 ){

1468 
nSql
 = 
	`°æí
(
zLöe
);

1469 
zSql
 = 
	`mÆloc
–
nSql
+1 );

1470 
	`°r˝y
(
zSql
, 
zLöe
);

1473 
Àn
 = 
	`°æí
(
zLöe
);

1474 
zSql
 = 
	`ªÆloc
–zSql, 
nSql
 + 
Àn
 + 2 );

1475 if–
zSql
==0 ){

1476 
	`Ârötf
(
°dîr
,"%s: ouào‡mem‹y!\n", 
Argv0
);

1477 
	`exô
(1);

1479 
	`°r˝y
(&
zSql
[
nSql
++], "\n");

1480 
	`°r˝y
(&
zSql
[
nSql
], 
zLöe
);

1481 
nSql
 +
Àn
;

1483 
	`‰ì
(
zLöe
);

1484 if–
zSql
 && 
	`_íds_wôh_£micﬁ⁄
(zSql, 
nSql
Ë&& 
	`sqlôe3_com∂ëe
(zSql) ){

1485 
p
->
˙t
 = 0;

1486 
	`›í_db
(
p
);

1487 
rc
 = 
	`sqlôe3_exec
(
p
->
db
, 
zSql
, 
ˇŒback
,Ö, &
zEºMsg
);

1488 if–
rc
 || 
zEºMsg
 ){

1489 if–
ö
!=0 && !
p
->
echoOn
 ) 
	`¥ötf
("%s\n",
zSql
);

1490 if–
zEºMsg
!=0 ){

1491 
	`¥ötf
("SQLÉº‹: %s\n", 
zEºMsg
);

1492 
	`sqlôe3_‰ì
(
zEºMsg
);

1493 
zEºMsg
 = 0;

1495 
	`¥ötf
("SQLÉº‹: %s\n", 
	`sqlôe3_îrmsg
(
p
->
db
));

1498 
	`‰ì
(
zSql
);

1499 
zSql
 = 0;

1500 
nSql
 = 0;

1503 if–
zSql
 ){

1504 if–!
	`_Æl_whôe•a˚
(
zSql
ËË
	`¥ötf
("Incomplete SQL: %s\n", zSql);

1505 
	`‰ì
(
zSql
);

1507 
	}
}

1515 *
	$föd_home_dú
(){

1516 *
home_dú
 = 
NULL
;

1518 #i‡!
	`deföed
(
_WIN32
Ë&& !deföed(
WIN32
Ë&& !deföed(
__MACOS__
)

1519 
∑sswd
 *
pwít
;

1520 
uid_t
 
uid
 = 
	`gëuid
();

1521 if–(
pwít
=
	`gëpwuid
(
uid
)Ë!
NULL
) {

1522 
home_dú
 = 
pwít
->
pw_dú
;

1526 #ifde‡
__MACOS__


1527 
home_∑th
[
_MAX_PATH
+1];

1528 
home_dú
 = 
	`gëcwd
(
home_∑th
, 
_MAX_PATH
);

1531 i‡(!
home_dú
) {

1532 
home_dú
 = 
	`gëív
("HOME");

1533 i‡(!
home_dú
) {

1534 
home_dú
 = 
	`gëív
("HOMEPATH");

1538 #i‡
	`deföed
(
_WIN32
Ë|| deföed(
WIN32
)

1539 i‡(!
home_dú
) {

1540 
home_dú
 = "c:";

1544 if–
home_dú
 ){

1545 *
z
 = 
	`mÆloc
–
	`°æí
(
home_dú
)+1 );

1546 if–
z
 ) 
	`°r˝y
(z, 
home_dú
);

1547 
home_dú
 = 
z
;

1550  
home_dú
;

1551 
	}
}

1557 
	$¥o˚ss_sqlôîc
(

1558 
ˇŒback_d©a
 *
p
,

1559 c⁄° *
sqlôîc_ovîride


1561 *
home_dú
 = 
NULL
;

1562 c⁄° *
sqlôîc
 = 
sqlôîc_ovîride
;

1563 *
zBuf
;

1564 
FILE
 *
ö
 = 
NULL
;

1566 i‡(
sqlôîc
 =
NULL
) {

1567 
home_dú
 = 
	`föd_home_dú
();

1568 if–
home_dú
==0 ){

1569 
	`Ârötf
(
°dîr
,"%s: c™nŸÜoˇã you∏homêdúe˘‹y!\n", 
Argv0
);

1572 
zBuf
 = 
	`mÆloc
(
	`°æí
(
home_dú
) + 15);

1573 if–
zBuf
==0 ){

1574 
	`Ârötf
(
°dîr
,"%s: ouào‡mem‹y!\n", 
Argv0
);

1575 
	`exô
(1);

1577 
	`•rötf
(
zBuf
,"%s/.sqlôîc",
home_dú
);

1578 
	`‰ì
(
home_dú
);

1579 
sqlôîc
 = (c⁄° *)
zBuf
;

1581 
ö
 = 
	`f›í
(
sqlôîc
,"rb");

1582 if–
ö
 ){

1583 if–
	`ißây
(
	`fûío
(
°dout
)) ){

1584 
	`¥ötf
("LﬂdögÑesour˚†‰om %s\n",
sqlôîc
);

1586 
	`¥o˚ss_öput
(
p
,
ö
);

1587 
	`f˛o£
(
ö
);

1590 
	}
}

1595 c⁄° 
	gzO±i⁄s
[] =

1608 
	$ußge
(
showDëaû
){

1609 
	`Ârötf
(
°dîr
, "Ußge: %†[OPTIONS] FILENAME [SQL]\n", 
Argv0
);

1610 if–
showDëaû
 ){

1611 
	`Ârötf
(
°dîr
, "O±i⁄†¨e:\n%s", 
zO±i⁄s
);

1613 
	`Ârötf
(
°dîr
, "UseÅhe -help option forádditional information\n");

1615 
	`exô
(1);

1616 
	}
}

1621 
	$maö_öô
(
ˇŒback_d©a
 *
d©a
) {

1622 
	`mem£t
(
d©a
, 0, (*data));

1623 
d©a
->
mode
 = 
MODE_Li°
;

1624 
	`°r˝y
(
d©a
->
£∑øt‹
,"|");

1625 
d©a
->
showHódî
 = 0;

1626 
	`°r˝y
(
maöProm±
,"sqlite> ");

1627 
	`°r˝y
(
c⁄töueProm±
," ...> ");

1628 
	}
}

1630 
	$maö
(
¨gc
, **
¨gv
){

1631 *
zEºMsg
 = 0;

1632 
ˇŒback_d©a
 
d©a
;

1633 c⁄° *
zInôFûe
 = 0;

1634 *
zFú°Cmd
 = 0;

1635 
i
;

1637 #ifde‡
__MACOS__


1638 
¨gc
 = 
	`ccomm™d
(&
¨gv
);

1641 
Argv0
 = 
¨gv
[0];

1642 
	`maö_öô
(&
d©a
);

1647 #ifde‡
SIGINT


1648 
	`sig«l
(
SIGINT
, 
öãºu±_h™dÀr
);

1655 
i
=1; i<
¨gc
-1; i++){

1656 if–
¨gv
[
i
][0]!='-' ) ;

1657 if–
	`°rcmp
(
¨gv
[
i
],"-separator")==0 || strcmp(argv[i],"-nullvalue")==0 ){

1658 
i
++;

1659 }if–
	`°rcmp
(
¨gv
[
i
],"-init")==0 ){

1660 
i
++;

1661 
zInôFûe
 = 
¨gv
[
i
];

1662 }if–
	`°rcmp
(
¨gv
[
i
],"-key")==0 ){

1663 
i
++;

1664 
d©a
.
zKey
 = 
	`sqlôe3_m¥ötf
("%s",
¨gv
[
i
]);

1667 if–
i
<
¨gc
 ){

1668 
d©a
.
zDbFûíame
 = 
¨gv
[
i
++];

1670 #i‚de‡
SQLITE_OMIT_MEMORYDB


1671 
d©a
.
zDbFûíame
 = ":memory:";

1673 
d©a
.
zDbFûíame
 = 0;

1676 if–
i
<
¨gc
 ){

1677 
zFú°Cmd
 = 
¨gv
[
i
++];

1679 
d©a
.
out
 = 
°dout
;

1681 #ifde‡
SQLITE_OMIT_MEMORYDB


1682 if–
d©a
.
zDbFûíame
==0 ){

1683 
	`Ârötf
(
°dîr
,"%s:Çÿd©aba£ fûíamê•ecifõd\n", 
¨gv
[0]);

1684 
	`exô
(1);

1693 if–
	`ac˚ss
(
d©a
.
zDbFûíame
, 0)==0 ){

1694 
	`›í_db
(&
d©a
);

1701 
	`¥o˚ss_sqlôîc
(&
d©a
,
zInôFûe
);

1708 
i
=1; i<
¨gc
 && 
¨gv
[i][0]=='-'; i++){

1709 *
z
 = 
¨gv
[
i
];

1710 if–
	`°rcmp
(
z
,"-init")==0 || strcmp(z,"-key")==0 ){

1711 
i
++;

1712 }if–
	`°rcmp
(
z
,"-html")==0 ){

1713 
d©a
.
mode
 = 
MODE_Html
;

1714 }if–
	`°rcmp
(
z
,"-list")==0 ){

1715 
d©a
.
mode
 = 
MODE_Li°
;

1716 }if–
	`°rcmp
(
z
,"-line")==0 ){

1717 
d©a
.
mode
 = 
MODE_Löe
;

1718 }if–
	`°rcmp
(
z
,"-column")==0 ){

1719 
d©a
.
mode
 = 
MODE_Cﬁumn
;

1720 }if–
	`°rcmp
(
z
,"-separator")==0 ){

1721 
i
++;

1722 
	`•rötf
(
d©a
.
£∑øt‹
,"%.*s",()(d©a.£∑øt‹)-1,
¨gv
[
i
]);

1723 }if–
	`°rcmp
(
z
,"-nullvalue")==0 ){

1724 
i
++;

1725 
	`•rötf
(
d©a
.
nuŒvÆue
,"%.*s",()(d©a.nuŒvÆue)-1,
¨gv
[
i
]);

1726 }if–
	`°rcmp
(
z
,"-header")==0 ){

1727 
d©a
.
showHódî
 = 1;

1728 }if–
	`°rcmp
(
z
,"-noheader")==0 ){

1729 
d©a
.
showHódî
 = 0;

1730 }if–
	`°rcmp
(
z
,"-echo")==0 ){

1731 
d©a
.
echoOn
 = 1;

1732 }if–
	`°rcmp
(
z
,"-version")==0 ){

1733 
	`¥ötf
("%s\n", 
	`sqlôe3_libvîsi⁄
());

1735 }if–
	`°rcmp
(
z
,"-help")==0 ){

1736 
	`ußge
(1);

1738 
	`Ârötf
(
°dîr
,"%s: unknow¿›ti⁄: %s\n", 
Argv0
, 
z
);

1739 
	`Ârötf
(
°dîr
,"Use -help foráÜist of options.\n");

1744 if–
zFú°Cmd
 ){

1747 if–
zFú°Cmd
[0]=='.' ){

1748 
	`do_mëa_comm™d
(
zFú°Cmd
, &
d©a
);

1749 
	`exô
(0);

1751 
rc
;

1752 
	`›í_db
(&
d©a
);

1753 
rc
 = 
	`sqlôe3_exec
(
d©a
.
db
, 
zFú°Cmd
, 
ˇŒback
, &d©a, &
zEºMsg
);

1754 if–
rc
!=0 && 
zEºMsg
!=0 ){

1755 
	`Ârötf
(
°dîr
,"SQLÉº‹: %s\n", 
zEºMsg
);

1756 
	`exô
(1);

1762 if–
	`ißây
(
	`fûío
(
°dout
)Ë&& ißây(fûío(
°dö
)) ){

1763 *
zHome
;

1764 *
zHi°‹y
 = 0;

1765 
	`¥ötf
(

1768 
	`sqlôe3_libvîsi⁄
()

1770 
zHome
 = 
	`föd_home_dú
();

1771 if–
zHome
 && (
zHi°‹y
 = 
	`mÆloc
(
	`°æí
(zHome)+20))!=0 ){

1772 
	`•rötf
(
zHi°‹y
,"%s/.sqlôe_hi°‹y", 
zHome
);

1774 #i‡
	`deföed
(
HAVE_READLINE
) && HAVE_READLINE==1

1775 if–
zHi°‹y
 ) 
	`ªad_hi°‹y
(zHistory);

1777 
	`¥o˚ss_öput
(&
d©a
, 0);

1778 if–
zHi°‹y
 ){

1779 
	`°iÊe_hi°‹y
(100);

1780 
	`wrôe_hi°‹y
(
zHi°‹y
);

1783 
	`¥o˚ss_öput
(&
d©a
, 
°dö
);

1786 
	`£t_èbÀ_«me
(&
d©a
, 0);

1787 if–
db
 ) 
	`sqlôe3_˛o£
(db);

1789 
	}
}

	@sqliteInt.h

16 #i‚de‡
_SQLITEINT_H_


17 
	#_SQLITEINT_H_


	)

22 #ifde‡
SQLITE_EXTRA


23 
	~"sqlôeExåa.h
"

33 #i‡!
deföed
(
NDEBUG
Ë&& !deföed(
SQLITE_DEBUG
)

34 
	#NDEBUG
 1

	)

52 #i‚de‡
SQLITE_DISABLE_LFS


53 
	#_LARGE_FILE
 1

	)

54 #i‚de‡
_FILE_OFFSET_BITS


55 
	#_FILE_OFFSET_BITS
 64

	)

57 
	#_LARGEFILE_SOURCE
 1

	)

60 
	~"sqlôe3.h
"

61 
	~"hash.h
"

62 
	~"∑r£.h
"

63 
	~<°dio.h
>

64 
	~<°dlib.h
>

65 
	~<°rög.h
>

66 
	~<as£π.h
>

67 
	~<°ddef.h
>

73 #ifde‡
SQLITE_OMIT_FLOATING_POINT


74 
sqlôe_öt64


	)

75 
	#LONGDOUBLE_TYPE
 
sqlôe_öt64


	)

76 #i‚de‡
SQLITE_BIG_DBL


77 
	#SQLITE_BIG_DBL
 (0x7fffffffffffffff)

	)

79 
	#SQLITE_OMIT_DATETIME_FUNCS
 1

	)

80 
	#SQLITE_OMIT_TRACE
 1

	)

82 #i‚de‡
SQLITE_BIG_DBL


83 
	#SQLITE_BIG_DBL
 (1e99)

	)

93 #ifde‡
SQLITE_DEFAULT_CACHE_SIZE


94 
	#MAX_PAGES
 
SQLITE_DEFAULT_CACHE_SIZE


	)

96 
	#MAX_PAGES
 2000

	)

98 #ifde‡
SQLITE_DEFAULT_TEMP_CACHE_SIZE


99 
	#TEMP_PAGES
 
SQLITE_DEFAULT_TEMP_CACHE_SIZE


	)

101 
	#TEMP_PAGES
 500

	)

109 #ifde‡
SQLITE_OMIT_TEMPDB


110 
	#OMIT_TEMPDB
 1

	)

112 
	#OMIT_TEMPDB
 0

	)

125 
	#NULL_ALWAYS_DISTINCT
 0

	)

139 
	#NULL_DISTINCT_FOR_UNIQUE
 1

	)

148 
	#MAX_ATTACHED
 10

	)

153 
	#SQLITE_MAX_VARIABLE_NUMBER
 999

	)

161 
	#SQLITE_MAX_FILE_FORMAT
 4

	)

162 #i‚de‡
SQLITE_DEFAULT_FILE_FORMAT


163 
	#SQLITE_DEFAULT_FILE_FORMAT
 4

	)

170 #i‚de‡
TEMP_STORE


171 
	#TEMP_STORE
 1

	)

178 #i‚de‡
off£tof


179 
	#off£tof
(
STRUCTURE
,
FIELD
Ë(()((*)&((STRUCTURE*)0)->FIELD))

	)

189 #i‚de‡
UINT64_TYPE


190 #i‡
deföed
(
_MSC_VER
Ë|| deföed(
__BORLANDC__
)

191 
	#UINT64_TYPE
 
__öt64


	)

193 
	#UINT64_TYPE
 

	)

196 #i‚de‡
UINT32_TYPE


197 
	#UINT32_TYPE
 

	)

199 #i‚de‡
UINT16_TYPE


200 
	#UINT16_TYPE
 

	)

202 #i‚de‡
INT16_TYPE


203 
	#INT16_TYPE
 

	)

205 #i‚de‡
UINT8_TYPE


206 
	#UINT8_TYPE
 

	)

208 #i‚de‡
INT8_TYPE


209 
	#INT8_TYPE
 sig√d 

	)

211 #i‚de‡
LONGDOUBLE_TYPE


212 
	#LONGDOUBLE_TYPE
 

	)

214 
sqlôe_öt64
 
	ti64
;

215 
UINT64_TYPE
 
	tu64
;

216 
UINT32_TYPE
 
	tu32
;

217 
UINT16_TYPE
 
	tu16
;

218 
INT16_TYPE
 
	ti16
;

219 
UINT8_TYPE
 
	tu8
;

220 
UINT8_TYPE
 
	ti8
;

226 c⁄° 
sqlôe3⁄e
;

227 
	#SQLITE_BIGENDIAN
 (*(*)(&
sqlôe3⁄e
)==0)

	)

228 
	#SQLITE_LITTLEENDIAN
 (*(*)(&
sqlôe3⁄e
)==1)

	)

239 
BusyH™dÀr
 
	tBusyH™dÀr
;

240 
	sBusyH™dÀr
 {

241 (*
	mxFunc
)(*,);

242 *
	mpArg
;

243 
	mnBusy
;

250 
	~"vdbe.h
"

251 
	~"båì.h
"

252 
	~"∑gî.h
"

258 
	#Addr
(
X
Ë((
u±r
)X)

	)

260 #ifde‡
SQLITE_MEMDEBUG


265 
sqlôe3_nMÆloc
;

266 
sqlôe3_nFªe
;

267 
sqlôe3_iMÆlocFaû
;

268 
sqlôe3_iMÆlocRe£t
;

271 *
sqlôe3_pFú°
;

272 
sqlôe3_nMaxAŒoc
;

273 
sqlôe3_mÆlocDißŒowed
;

274 
sqlôe3_isFaû
;

275 c⁄° *
sqlôe3_zFûe
;

276 
sqlôe3_iLöe
;

278 
	#ENTER_MALLOC
 (
sqlôe3_zFûe
 = 
__FILE__
, 
sqlôe3_iLöe
 = 
__LINE__
)

	)

279 
	#sqlôeMÆloc
(
x
Ë(
ENTER_MALLOC
, 
	`sqlôe3MÆloc
(x))

	)

280 
	#sqlôeMÆlocRaw
(
x
Ë(
ENTER_MALLOC
, 
	`sqlôe3MÆlocRaw
(x))

	)

281 
	#sqlôeRóŒoc
(
x
,
y
Ë(
ENTER_MALLOC
, 
	`sqlôe3RóŒoc
(x,y))

	)

282 
	#sqlôeSåDup
(
x
Ë(
ENTER_MALLOC
, 
	`sqlôe3SåDup
(x))

	)

283 
	#sqlôeSåNDup
(
x
,
y
Ë(
ENTER_MALLOC
, 
	`sqlôe3SåNDup
(x,y))

	)

284 
	#sqlôeRóŒocOrFªe
(
x
,
y
Ë(
ENTER_MALLOC
, 
	`sqlôe3RóŒocOrFªe
(x,y))

	)

288 
	#sqlôeMÆloc
(
x
Ë
	`sqlôe3MÆloc
(x)

	)

289 
	#sqlôeMÆlocRaw
(
x
Ë
	`sqlôe3MÆlocRaw
(x)

	)

290 
	#sqlôeRóŒoc
(
x
,
y
Ë
	`sqlôe3RóŒoc
(x,y)

	)

291 
	#sqlôeSåDup
(
x
Ë
	`sqlôe3SåDup
(x)

	)

292 
	#sqlôeSåNDup
(
x
,
y
Ë
	`sqlôe3SåNDup
(x,y)

	)

293 
	#sqlôeRóŒocOrFªe
(
x
,
y
Ë
	`sqlôe3RóŒocOrFªe
(x,y)

	)

297 
	#sqlôeFªe
(
x
Ë
	`sqlôe3FªeX
(x)

	)

298 
	#sqlôeAŒocSize
(
x
Ë
	`sqlôe3AŒocSize
(x)

	)

305 
	sThªadD©a
 {

306 
	mdummy
;

308 #ifde‡
SQLITE_ENABLE_MEMORY_MANAGEMENT


309 
	mnSo·HópLimô
;

310 
	mnAŒoc
;

311 
Pagî
 *
	mpPagî
;

314 #i‚de‡
SQLITE_OMIT_SHARED_CACHE


315 
u8
 
	mu£Sh¨edD©a
;

316 
BtSh¨ed
 *
	mpBåì
;

325 
	#MASTER_NAME
 "sqlôe_ma°î"

	)

326 
	#TEMP_MASTER_NAME
 "sqlôe_ãmp_ma°î"

	)

331 
	#MASTER_ROOT
 1

	)

336 
	#SCHEMA_TABLE
(
x
Ë((!
OMIT_TEMPDB
)&&(x==1)?
TEMP_MASTER_NAME
:
MASTER_NAME
)

	)

342 
	#AºaySize
(
X
Ë((X)/(X[0]))

	)

347 
AggInfo
 
	tAggInfo
;

348 
AuthC⁄ãxt
 
	tAuthC⁄ãxt
;

349 
CﬁlSeq
 
	tCﬁlSeq
;

350 
Cﬁumn
 
	tCﬁumn
;

351 
Db
 
	tDb
;

352 
Schema
 
	tSchema
;

353 
Ex¥
 
	tEx¥
;

354 
Ex¥Li°
 
	tEx¥Li°
;

355 
FKey
 
	tFKey
;

356 
FuncDef
 
	tFuncDef
;

357 
IdLi°
 
	tIdLi°
;

358 
Index
 
	tIndex
;

359 
KeyCœss
 
	tKeyCœss
;

360 
KeyInfo
 
	tKeyInfo
;

361 
NameC⁄ãxt
 
	tNameC⁄ãxt
;

362 
P¨£
 
	tP¨£
;

363 
Sñe˘
 
	tSñe˘
;

364 
SrcLi°
 
	tSrcLi°
;

365 
ThªadD©a
 
	tThªadD©a
;

366 
TabÀ
 
	tTabÀ
;

367 
TabÀLock
 
	tTabÀLock
;

368 
Tokí
 
	tTokí
;

369 
TriggîSèck
 
	tTriggîSèck
;

370 
TriggîSãp
 
	tTriggîSãp
;

371 
Triggî
 
	tTriggî
;

372 
WhîeInfo
 
	tWhîeInfo
;

373 
WhîeLevñ
 
	tWhîeLevñ
;

382 
	sDb
 {

383 *
	mzName
;

384 
Båì
 *
	mpBt
;

385 
u8
 
	möTøns
;

386 
u8
 
	mß„ty_Àvñ
;

387 *
	mpAux
;

388 (*
	mxFªeAux
)(*);

389 
Schema
 *
	mpSchema
;

395 
	sSchema
 {

396 
	mschema_cookõ
;

397 
Hash
 
	mtblHash
;

398 
Hash
 
	midxHash
;

399 
Hash
 
	måigHash
;

400 
Hash
 
	maFKey
;

401 
TabÀ
 *
	mpSeqTab
;

402 
u8
 
	mfûe_f‹m©
;

403 
u8
 
	míc
;

404 
u16
 
	mÊags
;

405 
	mˇche_size
;

412 
	#DbHasPr›îty
(
D
,
I
,
P
Ë(((D)->
aDb
[I].
pSchema
->
Êags
&(P))==(P))

	)

413 
	#DbHasAnyPr›îty
(
D
,
I
,
P
Ë(((D)->
aDb
[I].
pSchema
->
Êags
&(P))!=0)

	)

414 
	#DbSëPr›îty
(
D
,
I
,
P
Ë(D)->
aDb
[I].
pSchema
->
Êags
|=(P)

	)

415 
	#DbCÀ¨Pr›îty
(
D
,
I
,
P
Ë(D)->
aDb
[I].
pSchema
->
Êags
&=~(P)

	)

427 
	#DB_SchemaLﬂded
 0x0001

	)

428 
	#DB_Uƒe£tVõws
 0x0002

	)

429 
	#DB_Em±y
 0x0004

	)

431 
	#SQLITE_UTF16NATIVE
 (
SQLITE_BIGENDIAN
?
SQLITE_UTF16BE
:
SQLITE_UTF16LE
)

	)

459 
	ssqlôe3
 {

460 
	mnDb
;

461 
Db
 *
	maDb
;

462 
	mÊags
;

463 
	mîrCode
;

464 
u8
 
	mautoCommô
;

465 
u8
 
	mãmp_°‹e
;

466 
	mnTabÀ
;

467 
CﬁlSeq
 *
	mpDÊtCﬁl
;

468 
i64
 
	mœ°Rowid
;

469 
i64
 
	m¥i‹NewRowid
;

470 
	mmagic
;

471 
	mnCh™ge
;

472 
	mnTŸÆCh™ge
;

473 
	ssqlôe3InôInfo
 {

474 
	miDb
;

475 
	m√wTnum
;

476 
u8
 
	mbusy
;

477 } 
	möô
;

478 
Vdbe
 *
	mpVdbe
;

479 
	ma˘iveVdbeC¡
;

480 (*
	mxTø˚
)(*,const *);

481 *
	mpTø˚Arg
;

482 (*
	mxProfûe
)(*,c⁄° *,
	mu64
);

483 *
	mpProfûeArg
;

484 *
	mpCommôArg
;

485 (*
	mxCommôCÆlback
)(*);

486 *
	mpRﬁlbackArg
;

487 (*
	mxRﬁlbackCÆlback
)(*);

488 *
	mpUpd©eArg
;

489 (*
	mxUpd©eCÆlback
)(*,, c⁄° *,c⁄° *,
	msqlôe_öt64
);

490 (*
	mxCﬁlNìded
)(*,
	msqlôe3
*,
	meTextRï
,const *);

491 (*
	mxCﬁlNìded16
)(*,
	msqlôe3
*,
	meTextRï
,const *);

492 *
	mpCﬁlNìdedArg
;

493 
sqlôe3_vÆue
 *
	mpEº
;

494 *
	mzEºMsg
;

495 *
	mzEºMsg16
;

496 #i‚de‡
SQLITE_OMIT_AUTHORIZATION


497 (*
	mxAuth
)(*,,const *,const *,const *,const *);

499 *
	mpAuthArg
;

501 #i‚de‡
SQLITE_OMIT_PROGRESS_CALLBACK


502 (*
	mxProgªss
)(*);

503 *
	mpProgªssArg
;

504 
	mnProgªssOps
;

506 #i‚de‡
SQLITE_OMIT_GLOBALRECOVER


507 
sqlôe3
 *
	mpNext
;

509 
Hash
 
	maFunc
;

510 
Hash
 
	maCﬁlSeq
;

511 
BusyH™dÀr
 
	mbusyH™dÀr
;

512 
	mbusyTimeout
;

513 
Db
 
	maDbSètic
[2];

514 #ifde‡
SQLITE_SSE


515 
sqlôe3_°mt
 *
	mpFëch
;

519 
	#ENC
(
db
Ë((db)->
aDb
[0].
pSchema
->
íc
)

	)

528 
	#SQLITE_VdbeTø˚
 0x00000001

	)

529 
	#SQLITE_I¡îru±
 0x00000004

	)

530 
	#SQLITE_InTøns
 0x00000008

	)

531 
	#SQLITE_I¡înCh™ges
 0x00000010

	)

532 
	#SQLITE_FuŒCﬁNames
 0x00000020

	)

533 
	#SQLITE_Sh‹tCﬁNames
 0x00000040

	)

534 
	#SQLITE_Cou¡Rows
 0x00000080

	)

537 
	#SQLITE_NuŒCÆlback
 0x00000100

	)

539 
	#SQLITE_SqlTø˚
 0x00000200

	)

540 
	#SQLITE_VdbeLi°ög
 0x00000400

	)

541 
	#SQLITE_WrôeSchema
 0x00000800

	)

542 
	#SQLITE_NoRódlock
 0x00001000

	)

544 
	#SQLITE_Ign‹eChecks
 0x00002000

	)

545 
	#SQLITE_RódUncommôãd
 0x00004000

	)

546 
	#SQLITE_LegacyFûeFmt
 0x00008000

	)

553 
	#SQLITE_MAGIC_OPEN
 0xa029a697

	)

554 
	#SQLITE_MAGIC_CLOSED
 0x9f3c2d33

	)

555 
	#SQLITE_MAGIC_BUSY
 0xf03b7906

	)

556 
	#SQLITE_MAGIC_ERROR
 0xb5357930

	)

564 
	sFuncDef
 {

565 
i16
 
	mnArg
;

566 
u8
 
	miPªfEnc
;

567 
u8
 
	m√edCﬁlSeq
;

568 
u8
 
	mÊags
;

569 *
	mpU£rD©a
;

570 
FuncDef
 *
	mpNext
;

571 (*
	mxFunc
)(
	msqlôe3_c⁄ãxt
*,,
	msqlôe3_vÆue
**);

572 (*
	mxSãp
)(
	msqlôe3_c⁄ãxt
*,,
	msqlôe3_vÆue
**);

573 (*
	mxFöÆize
)(
	msqlôe3_c⁄ãxt
*);

574 
	mzName
[1];

580 
	#SQLITE_FUNC_LIKE
 0x01

	)

581 
	#SQLITE_FUNC_CASE
 0x02

	)

587 
	sCﬁumn
 {

588 *
	mzName
;

589 
Ex¥
 *
	mpDÊt
;

590 *
	mzTy≥
;

591 *
	mzCﬁl
;

592 
u8
 
	mnŸNuŒ
;

593 
u8
 
	misPrimKey
;

594 
	mafföôy
;

618 
	sCﬁlSeq
 {

619 *
	mzName
;

620 
u8
 
	míc
;

621 
u8
 
	mty≥
;

622 *
	mpU£r
;

623 (*
	mxCmp
)(*,, const *, , const *);

629 
	#SQLITE_COLL_BINARY
 1

	)

630 
	#SQLITE_COLL_NOCASE
 2

	)

631 
	#SQLITE_COLL_REVERSE
 3

	)

632 
	#SQLITE_COLL_USER
 0

	)

637 
	#SQLITE_SO_ASC
 0

	)

638 
	#SQLITE_SO_DESC
 1

	)

654 
	#SQLITE_AFF_TEXT
 'a'

	)

655 
	#SQLITE_AFF_NONE
 'b'

	)

656 
	#SQLITE_AFF_NUMERIC
 'c'

	)

657 
	#SQLITE_AFF_INTEGER
 'd'

	)

658 
	#SQLITE_AFF_REAL
 'e'

	)

660 
	#sqlôe3IsNumîicAfföôy
(
X
Ë((X)>=
SQLITE_AFF_NUMERIC
)

	)

692 
	sTabÀ
 {

693 *
	mzName
;

694 
	mnCﬁ
;

695 
Cﬁumn
 *
	maCﬁ
;

696 
	miPKey
;

697 
Index
 *
	mpIndex
;

698 
	mäum
;

699 
Sñe˘
 *
	mpSñe˘
;

700 
u8
 
	mªadO∆y
;

701 
u8
 
	misTønsõ¡
;

702 
u8
 
	mhasPrimKey
;

703 
u8
 
	mkeyC⁄f
;

704 
u8
 
	mautoInc
;

705 
	mnRef
;

706 
Triggî
 *
	mpTriggî
;

707 
FKey
 *
	mpFKey
;

708 *
	mzCﬁAff
;

709 #i‚de‡
SQLITE_OMIT_CHECK


710 
Ex¥
 *
	mpCheck
;

712 #i‚de‡
SQLITE_OMIT_ALTERTABLE


713 
	maddCﬁOff£t
;

715 
Schema
 *
	mpSchema
;

743 
	sFKey
 {

744 
TabÀ
 *
	mpFrom
;

745 
FKey
 *
	mpNextFrom
;

746 *
	mzTo
;

747 
FKey
 *
	mpNextTo
;

748 
	mnCﬁ
;

749 
	ssCﬁM≠
 {

750 
	miFrom
;

751 *
	mzCﬁ
;

752 } *
	maCﬁ
;

753 
u8
 
	misDe„ºed
;

754 
u8
 
	mupd©eC⁄f
;

755 
u8
 
	mdñëeC⁄f
;

756 
u8
 
	mö£πC⁄f
;

784 
	#OE_N⁄e
 0

	)

785 
	#OE_Rﬁlback
 1

	)

786 
	#OE_Ab‹t
 2

	)

787 
	#OE_Faû
 3

	)

788 
	#OE_Ign‹e
 4

	)

789 
	#OE_Rïœ˚
 5

	)

791 
	#OE_Re°ri˘
 6

	)

792 
	#OE_SëNuŒ
 7

	)

793 
	#OE_SëDÊt
 8

	)

794 
	#OE_Casˇde
 9

	)

796 
	#OE_DeÁu…
 99

	)

808 
	sKeyInfo
 {

809 
u8
 
	míc
;

810 
u8
 
	mö¸Key
;

811 
	mnFõld
;

812 
u8
 *
	maS‹tOrdî
;

813 
CﬁlSeq
 *
	maCﬁl
[1];

842 
	sIndex
 {

843 *
	mzName
;

844 
	mnCﬁumn
;

845 *
	maiCﬁumn
;

846 *
	maiRowE°
;

847 
TabÀ
 *
	mpTabÀ
;

848 
	mäum
;

849 
u8
 
	m⁄Eº‹
;

850 
u8
 
	mautoIndex
;

851 *
	mzCﬁAff
;

852 
Index
 *
	mpNext
;

853 
Schema
 *
	mpSchema
;

854 
u8
 *
	maS‹tOrdî
;

855 **
	mazCﬁl
;

866 
	sTokí
 {

867 c⁄° *
	mz
;

868 
	mdyn
 : 1;

869 
	mn
 : 31;

885 
	sAggInfo
 {

886 
u8
 
	mdúe˘Mode
;

888 
u8
 
	mu£S‹tögIdx
;

890 
	ms‹tögIdx
;

891 
Ex¥Li°
 *
	mpGroupBy
;

892 
	mnS‹tögCﬁumn
;

893 
	sAggInfo_cﬁ
 {

894 
	miTabÀ
;

895 
	miCﬁumn
;

896 
	miS‹ãrCﬁumn
;

897 
	miMem
;

898 
Ex¥
 *
	mpEx¥
;

899 } *
	maCﬁ
;

900 
	mnCﬁumn
;

901 
	mnCﬁumnAŒoc
;

902 
	mnAccumuœt‹
;

905 
	sAggInfo_func
 {

906 
Ex¥
 *
	mpEx¥
;

907 
FuncDef
 *
	mpFunc
;

908 
	miMem
;

909 
	miDi°ö˘
;

910 } *
	maFunc
;

911 
	mnFunc
;

912 
	mnFuncAŒoc
;

961 
	sEx¥
 {

962 
u8
 
	m›
;

963 
	mafföôy
;

964 
u8
 
	mÊags
;

965 
CﬁlSeq
 *
	mpCﬁl
;

966 
Ex¥
 *
	mpLe·
, *
	mpRight
;

967 
Ex¥Li°
 *
	mpLi°
;

969 
Tokí
 
	mtokí
;

970 
Tokí
 
	m•™
;

971 
	miTabÀ
, 
	miCﬁumn
;

973 
AggInfo
 *
	mpAggInfo
;

974 
	miAgg
;

975 
	miRightJoöTabÀ
;

976 
Sñe˘
 *
	mpSñe˘
;

978 
TabÀ
 *
	mpTab
;

979 
Schema
 *
	mpSchema
;

985 
	#EP_FromJoö
 0x01

	)

986 
	#EP_Agg
 0x02

	)

987 
	#EP_Resﬁved
 0x04

	)

988 
	#EP_Eº‹
 0x08

	)

989 
	#EP_Di°ö˘
 0x10

	)

990 
	#EP_V¨Sñe˘
 0x20

	)

991 
	#EP_DequŸed
 0x40

	)

997 
	#Ex¥HasPr›îty
(
E
,
P
Ë(((E)->
Êags
&(P))==(P))

	)

998 
	#Ex¥HasAnyPr›îty
(
E
,
P
Ë(((E)->
Êags
&(P))!=0)

	)

999 
	#Ex¥SëPr›îty
(
E
,
P
Ë(E)->
Êags
|=(P)

	)

1000 
	#Ex¥CÀ¨Pr›îty
(
E
,
P
Ë(E)->
Êags
&=~(P)

	)

1010 
	sEx¥Li°
 {

1011 
	mnEx¥
;

1012 
	mnAŒoc
;

1013 
	miECurs‹
;

1014 
	sEx¥Li°_ôem
 {

1015 
Ex¥
 *
	mpEx¥
;

1016 *
	mzName
;

1017 
u8
 
	ms‹tOrdî
;

1018 
u8
 
	misAgg
;

1019 
u8
 
	md⁄e
;

1020 } *
	ma
;

1038 
	sIdLi°
 {

1039 
	sIdLi°_ôem
 {

1040 *
	mzName
;

1041 
	midx
;

1042 } *
	ma
;

1043 
	mnId
;

1044 
	mnAŒoc
;

1050 
	tBômask
;

1063 
	sSrcLi°
 {

1064 
i16
 
	mnSrc
;

1065 
i16
 
	mnAŒoc
;

1066 
	sSrcLi°_ôem
 {

1067 *
	mzD©aba£
;

1068 *
	mzName
;

1069 *
	mzAlüs
;

1070 
TabÀ
 *
	mpTab
;

1071 
Sñe˘
 *
	mpSñe˘
;

1072 
u8
 
	mjoöty≥
;

1073 
i16
 
	miCurs‹
;

1074 
Ex¥
 *
	mpOn
;

1075 
IdLi°
 *
	mpUsög
;

1076 
Bômask
 
	mcﬁU£d
;

1077 } 
	ma
[1];

1083 
	#JT_INNER
 0x0001

	)

1084 
	#JT_CROSS
 0x0002

	)

1085 
	#JT_NATURAL
 0x0004

	)

1086 
	#JT_LEFT
 0x0008

	)

1087 
	#JT_RIGHT
 0x0010

	)

1088 
	#JT_OUTER
 0x0020

	)

1089 
	#JT_ERROR
 0x0040

	)

1097 
	sWhîeLevñ
 {

1098 
	miFrom
;

1099 
	mÊags
;

1100 
	miMem
;

1101 
	miLe·Joö
;

1102 
Index
 *
	mpIdx
;

1103 
	miTabCur
;

1104 
	miIdxCur
;

1105 
	mbrk
;

1106 
	mc⁄t
;

1107 
	mt›
;

1108 
	m›
, 
	mp1
, 
	mp2
;

1109 
	mnEq
;

1110 
	mnIn
;

1111 *
	maInLo›
;

1121 
	sWhîeInfo
 {

1122 
P¨£
 *
	mpP¨£
;

1123 
SrcLi°
 *
	mpTabLi°
;

1124 
	miT›
;

1125 
	miC⁄töue
;

1126 
	miBªak
;

1127 
	mnLevñ
;

1128 
WhîeLevñ
 
	ma
[1];

1152 
	sNameC⁄ãxt
 {

1153 
P¨£
 *
	mpP¨£
;

1154 
SrcLi°
 *
	mpSrcLi°
;

1155 
Ex¥Li°
 *
	mpELi°
;

1156 
	mnRef
;

1157 
	mnEº
;

1158 
u8
 
	mÆlowAgg
;

1159 
u8
 
	mhasAgg
;

1160 
u8
 
	misCheck
;

1161 
	mnDïth
;

1162 
AggInfo
 *
	mpAggInfo
;

1163 
NameC⁄ãxt
 *
	mpNext
;

1186 
	sSñe˘
 {

1187 
Ex¥Li°
 *
	mpELi°
;

1188 
u8
 
	m›
;

1189 
u8
 
	misDi°ö˘
;

1190 
u8
 
	misResﬁved
;

1191 
u8
 
	misAgg
;

1192 
u8
 
	mu£sVút
;

1193 
u8
 
	mdißŒowOrdîBy
;

1194 
SrcLi°
 *
	mpSrc
;

1195 
Ex¥
 *
	mpWhîe
;

1196 
Ex¥Li°
 *
	mpGroupBy
;

1197 
Ex¥
 *
	mpHavög
;

1198 
Ex¥Li°
 *
	mpOrdîBy
;

1199 
Sñe˘
 *
	mpPri‹
;

1200 
Sñe˘
 *
	mpRightmo°
;

1201 
Ex¥
 *
	mpLimô
;

1202 
Ex¥
 *
	mpOff£t
;

1203 
	miLimô
, 
	miOff£t
;

1204 
	maddrO≥nVút
[3];

1210 
	#SRT_Uni⁄
 1

	)

1211 
	#SRT_Ex˚±
 2

	)

1212 
	#SRT_Disˇrd
 3

	)

1215 
	#Ign‹abÀOrdîby
(
X
Ë(X<=
SRT_Disˇrd
)

	)

1217 
	#SRT_CÆlback
 4

	)

1218 
	#SRT_Mem
 5

	)

1219 
	#SRT_Së
 6

	)

1220 
	#SRT_TabÀ
 7

	)

1221 
	#SRT_VútuÆTab
 8

	)

1222 
	#SRT_Subroutöe
 9

	)

1223 
	#SRT_Exi°s
 10

	)

1241 
	sP¨£
 {

1242 
sqlôe3
 *
	mdb
;

1243 
	mrc
;

1244 *
	mzEºMsg
;

1245 
Vdbe
 *
	mpVdbe
;

1246 
u8
 
	mcﬁNamesSë
;

1247 
u8
 
	m«meCœsh
;

1248 
u8
 
	mcheckSchema
;

1249 
u8
 
	m√°ed
;

1250 
	mnEº
;

1251 
	mnTab
;

1252 
	mnMem
;

1253 
	mnSë
;

1254 
	mckOff£t
;

1255 
u32
 
	mwrôeMask
;

1256 
u32
 
	mcookõMask
;

1257 
	mcookõGŸo
;

1258 
	mcookõVÆue
[
MAX_ATTACHED
+2];

1259 #i‚de‡
SQLITE_OMIT_SHARED_CACHE


1260 
	mnTabÀLock
;

1261 
TabÀLock
 *
	maTabÀLock
;

1267 
	mnV¨
;

1268 
	mnV¨Ex¥
;

1269 
	mnV¨Ex¥AŒoc
;

1270 
Ex¥
 **
	m≠V¨Ex¥
;

1271 
u8
 
	mex∂aö
;

1272 
Tokí
 
	msEºTokí
;

1273 
Tokí
 
	msNameTokí
;

1274 
Tokí
 
	msLa°Tokí
;

1275 c⁄° *
	mzSql
;

1276 c⁄° *
	mzTaû
;

1277 
TabÀ
 *
	mpNewTabÀ
;

1278 
Triggî
 *
	mpNewTriggî
;

1279 
TriggîSèck
 *
	måigSèck
;

1280 c⁄° *
	mzAuthC⁄ãxt
;

1287 
	sAuthC⁄ãxt
 {

1288 c⁄° *
	mzAuthC⁄ãxt
;

1289 
P¨£
 *
	mpP¨£
;

1295 
	#OPFLAG_NCHANGE
 1

	)

1296 
	#OPFLAG_LASTROWID
 2

	)

1297 
	#OPFLAG_ISUPDATE
 4

	)

1314 
	sTriggî
 {

1315 *
	m«me
;

1316 *
	mèbÀ
;

1317 
u8
 
	m›
;

1318 
u8
 
	må_tm
;

1319 
Ex¥
 *
	mpWhí
;

1320 
IdLi°
 *
	mpCﬁumns
;

1322 
	mf‹óch
;

1323 
Tokí
 
	m«meTokí
;

1324 
Schema
 *
	mpSchema
;

1325 
Schema
 *
	mpTabSchema
;

1326 
TriggîSãp
 *
	m°ï_li°
;

1327 
Triggî
 *
	mpNext
;

1337 
	#TRIGGER_BEFORE
 1

	)

1338 
	#TRIGGER_AFTER
 2

	)

1378 
	sTriggîSãp
 {

1379 
	m›
;

1380 
	m‹c⁄f
;

1381 
Triggî
 *
	mpTrig
;

1383 
Sñe˘
 *
	mpSñe˘
;

1385 
Tokí
 
	mèrgë
;

1386 
Ex¥
 *
	mpWhîe
;

1387 
Ex¥Li°
 *
	mpEx¥Li°
;

1389 
IdLi°
 *
	mpIdLi°
;

1391 
TriggîSãp
 * 
	mpNext
;

1421 
	sTriggîSèck
 {

1422 
TabÀ
 *
	mpTab
;

1423 
	m√wIdx
;

1424 
	mﬁdIdx
;

1425 
	m‹c⁄f
;

1426 
	mign‹eJump
;

1427 
Triggî
 *
	mpTriggî
;

1428 
TriggîSèck
 *
	mpNext
;

1436 
DbFixî
 
	tDbFixî
;

1437 
	sDbFixî
 {

1438 
P¨£
 *
	mpP¨£
;

1439 c⁄° *
	mzDb
;

1440 c⁄° *
	mzTy≥
;

1441 c⁄° 
Tokí
 *
	mpName
;

1449 
sqlôe3
 *
	mdb
;

1450 **
	mpzEºMsg
;

1451 } 
	tInôD©a
;

1458 
sqlôe3_Æways_code_åiggî_£tup
;

1466 #ifde‡
SQLITE_DEBUG


1467 
sqlôe3C‹ru±
();

1468 
	#SQLITE_CORRUPT_BKPT
 
	`sqlôe3C‹ru±
()

	)

1470 
	#SQLITE_CORRUPT_BKPT
 
SQLITE_CORRUPT


	)

1476 
sqlôe3SåICmp
(const *, const *);

1477 
sqlôe3SåNICmp
(const *, const *, );

1478 
sqlôe3HashNoCa£
(const *, );

1479 
sqlôe3IsNumbî
(c⁄° *, *, 
u8
);

1480 
sqlôe3Com∑ª
(const *, const *);

1481 
sqlôe3S‹tCom∑ª
(const *, const *);

1482 
sqlôe3RólToS‹èbÀ
(
r
, *);

1484 *
sqlôe3MÆloc
();

1485 *
sqlôe3MÆlocRaw
();

1486 
sqlôe3Fªe
(*);

1487 *
sqlôe3RóŒoc
(*,);

1488 *
sqlôe3SåDup
(const *);

1489 *
sqlôe3SåNDup
(const *, );

1490 
	#sqlôe3CheckMem‹y
(
a
,
b
)

	)

1491 
sqlôe3RóŒocOrFªe
(**,);

1492 
sqlôe3FªeX
(*);

1493 *
sqlôe3MÆlocX
();

1494 
sqlôe3AŒocSize
(*);

1496 *
sqlôe3MPrötf
(const *, ...);

1497 *
sqlôe3VMPrötf
(c⁄° *, 
va_li°
);

1498 
sqlôe3DebugPrötf
(const *, ...);

1499 *
sqlôe3TextToPå
(const *);

1500 
sqlôe3SëSåög
(**, ...);

1501 
sqlôe3Eº‹Msg
(
P¨£
*, const *, ...);

1502 
sqlôe3Eº‹CÀ¨
(
P¨£
*);

1503 
sqlôe3DequŸe
(*);

1504 
sqlôe3DequŸeEx¥
(
Ex¥
*);

1505 
sqlôe3Keyw‹dCode
(const *, );

1506 
sqlôe3RunP¨£r
(
P¨£
*, const *, **);

1507 
sqlôe3FöishCodög
(
P¨£
*);

1508 
Ex¥
 *
sqlôe3Ex¥
(, Ex¥*, Ex¥*, c⁄° 
Tokí
*);

1509 
Ex¥
 *
sqlôe3Regi°îEx¥
(
P¨£
*,
Tokí
*);

1510 
Ex¥
 *
sqlôe3Ex¥And
(Expr*, Expr*);

1511 
sqlôe3Ex¥S∑n
(
Ex¥
*,
Tokí
*,Token*);

1512 
Ex¥
 *
sqlôe3Ex¥Fun˘i⁄
(
Ex¥Li°
*, 
Tokí
*);

1513 
sqlôe3Ex¥AssignV¨Numbî
(
P¨£
*, 
Ex¥
*);

1514 
sqlôe3Ex¥Dñëe
(
Ex¥
*);

1515 
Ex¥Li°
 *
sqlôe3Ex¥Li°Aµíd
(Ex¥Li°*,
Ex¥
*,
Tokí
*);

1516 
sqlôe3Ex¥Li°Dñëe
(
Ex¥Li°
*);

1517 
sqlôe3Inô
(
sqlôe3
*, **);

1518 
sqlôe3InôCÆlback
(*, , **, **);

1519 
sqlôe3Pøgma
(
P¨£
*,
Tokí
*,Token*,Token*,);

1520 
sqlôe3Re£tI¡î«lSchema
(
sqlôe3
*, );

1521 
sqlôe3BegöP¨£
(
P¨£
*,);

1522 
sqlôe3RﬁlbackI¡î«lCh™ges
(
sqlôe3
*);

1523 
sqlôe3CommôI¡î«lCh™ges
(
sqlôe3
*);

1524 
TabÀ
 *
sqlôe3Resu…SëOfSñe˘
(
P¨£
*,*,
Sñe˘
*);

1525 
sqlôe3O≥nMa°îTabÀ
(
P¨£
 *, );

1526 
sqlôe3SèπTabÀ
(
P¨£
*,
Tokí
*,Token*,Token*,,,);

1527 
sqlôe3AddCﬁumn
(
P¨£
*,
Tokí
*);

1528 
sqlôe3AddNŸNuŒ
(
P¨£
*, );

1529 
sqlôe3AddPrim¨yKey
(
P¨£
*, 
Ex¥Li°
*, , , );

1530 
sqlôe3AddCheckC⁄°øöt
(
P¨£
*, 
Ex¥
*);

1531 
sqlôe3AddCﬁumnTy≥
(
P¨£
*,
Tokí
*);

1532 
sqlôe3AddDeÁu…VÆue
(
P¨£
*,
Ex¥
*);

1533 
sqlôe3AddCﬁœãTy≥
(
P¨£
*, const *, );

1534 
sqlôe3EndTabÀ
(
P¨£
*,
Tokí
*,Tokí*,
Sñe˘
*);

1536 #i‚de‡
SQLITE_OMIT_VIEW


1537 
sqlôe3Cª©eVõw
(
P¨£
*,
Tokí
*,Tokí*,Tokí*,
Sñe˘
*,);

1538 
sqlôe3VõwGëCﬁumnNames
(
P¨£
*,
TabÀ
*);

1540 
	#sqlôe3VõwGëCﬁumnNames
(
A
,
B
Ë0

	)

1543 
sqlôe3Dr›TabÀ
(
P¨£
*, 
SrcLi°
*, , );

1544 
sqlôe3DñëeTabÀ
(
sqlôe3
*, 
TabÀ
*);

1545 
sqlôe3In£π
(
P¨£
*, 
SrcLi°
*, 
Ex¥Li°
*, 
Sñe˘
*, 
IdLi°
*, );

1546 
sqlôe3AºayAŒoˇã
(**,,);

1547 
IdLi°
 *
sqlôe3IdLi°Aµíd
(IdLi°*, 
Tokí
*);

1548 
sqlôe3IdLi°Index
(
IdLi°
*,const *);

1549 
SrcLi°
 *
sqlôe3SrcLi°Aµíd
(SrcLi°*, 
Tokí
*, Token*);

1550 
sqlôe3SrcLi°AddAlüs
(
SrcLi°
*, 
Tokí
*);

1551 
sqlôe3SrcLi°AssignCurs‹s
(
P¨£
*, 
SrcLi°
*);

1552 
sqlôe3IdLi°Dñëe
(
IdLi°
*);

1553 
sqlôe3SrcLi°Dñëe
(
SrcLi°
*);

1554 
sqlôe3Cª©eIndex
(
P¨£
*,
Tokí
*,Tokí*,
SrcLi°
*,
Ex¥Li°
*,,Token*,

1555 
Tokí
*, , );

1556 
sqlôe3Dr›Index
(
P¨£
*, 
SrcLi°
*, );

1557 
sqlôe3AddKeyTy≥
(
Vdbe
*, 
Ex¥Li°
*);

1558 
sqlôe3AddIdxKeyTy≥
(
Vdbe
*, 
Index
*);

1559 
sqlôe3Sñe˘
(
P¨£
*, 
Sñe˘
*, , , Sñe˘*, , *, *
aff
);

1560 
Sñe˘
 *
sqlôe3Sñe˘New
(
Ex¥Li°
*,
SrcLi°
*,
Ex¥
*,ExprList*,Expr*,ExprList*,

1561 ,
Ex¥
*,Expr*);

1562 
sqlôe3Sñe˘Dñëe
(
Sñe˘
*);

1563 
sqlôe3Sñe˘Unböd
(
Sñe˘
*);

1564 
TabÀ
 *
sqlôe3SrcLi°Lookup
(
P¨£
*, 
SrcLi°
*);

1565 
sqlôe3IsRódO∆y
(
P¨£
*, 
TabÀ
*, );

1566 
sqlôe3O≥nTabÀ
(
P¨£
*, 
iCur
, 
iDb
, 
TabÀ
*, );

1567 
sqlôe3DñëeFrom
(
P¨£
*, 
SrcLi°
*, 
Ex¥
*);

1568 
sqlôe3Upd©e
(
P¨£
*, 
SrcLi°
*, 
Ex¥Li°
*, 
Ex¥
*, );

1569 
WhîeInfo
 *
sqlôe3WhîeBegö
(
P¨£
*, 
SrcLi°
*, 
Ex¥
*, 
Ex¥Li°
**);

1570 
sqlôe3WhîeEnd
(
WhîeInfo
*);

1571 
sqlôe3Ex¥Code
(
P¨£
*, 
Ex¥
*);

1572 
sqlôe3Ex¥CodeAndCache
(
P¨£
*, 
Ex¥
*);

1573 
sqlôe3Ex¥CodeEx¥Li°
(
P¨£
*, 
Ex¥Li°
*);

1574 
sqlôe3Ex¥IfTrue
(
P¨£
*, 
Ex¥
*, , );

1575 
sqlôe3Ex¥IfFÆ£
(
P¨£
*, 
Ex¥
*, , );

1576 
sqlôe3NexãdP¨£
(
P¨£
*, const *, ...);

1577 
TabÀ
 *
sqlôe3FödTabÀ
(
sqlôe3
*,const *, const *);

1578 
TabÀ
 *
sqlôe3LoˇãTabÀ
(
P¨£
*,const *, const *);

1579 
Index
 *
sqlôe3FödIndex
(
sqlôe3
*,const *, const *);

1580 
sqlôe3U∆ökAndDñëeTabÀ
(
sqlôe3
*,,const *);

1581 
sqlôe3U∆ökAndDñëeIndex
(
sqlôe3
*,,const *);

1582 
sqlôe3Vacuum
(
P¨£
*, 
Tokí
*);

1583 
sqlôe3RunVacuum
(**, 
sqlôe3
*);

1584 *
sqlôe3NameFromTokí
(
Tokí
*);

1585 
sqlôe3Ex¥Check
(
P¨£
*, 
Ex¥
*, , *);

1586 
sqlôe3Ex¥Com∑ª
(
Ex¥
*, Expr*);

1587 
sqlôeFuncId
(
Tokí
*);

1588 
sqlôe3Ex¥ResﬁveNames
(
NameC⁄ãxt
 *, 
Ex¥
 *);

1589 
sqlôe3Ex¥A«lyzeAggªg©es
(
NameC⁄ãxt
*, 
Ex¥
*);

1590 
sqlôe3Ex¥A«lyzeAggLi°
(
NameC⁄ãxt
*,
Ex¥Li°
*);

1591 
Vdbe
 *
sqlôe3GëVdbe
(
P¨£
*);

1592 
sqlôe3R™dom√ss
(, *);

1593 
sqlôe3RﬁlbackAŒ
(
sqlôe3
*);

1594 
sqlôe3CodeVîifySchema
(
P¨£
*, );

1595 
sqlôe3BegöTønß˘i⁄
(
P¨£
*, );

1596 
sqlôe3CommôTønß˘i⁄
(
P¨£
*);

1597 
sqlôe3RﬁlbackTønß˘i⁄
(
P¨£
*);

1598 
sqlôe3Ex¥IsC⁄°™t
(
Ex¥
*);

1599 
sqlôe3Ex¥IsC⁄°™tOrFun˘i⁄
(
Ex¥
*);

1600 
sqlôe3Ex¥IsI¡egî
(
Ex¥
*, *);

1601 
sqlôe3IsRowid
(const *);

1602 
sqlôe3Gíî©eRowDñëe
(
sqlôe3
*, 
Vdbe
*, 
TabÀ
*, , );

1603 
sqlôe3Gíî©eRowIndexDñëe
(
sqlôe3
*, 
Vdbe
*, 
TabÀ
*, , *);

1604 
sqlôe3Gíî©eIndexKey
(
Vdbe
*, 
Index
*, );

1605 
sqlôe3Gíî©eC⁄°øötChecks
(
P¨£
*,
TabÀ
*,,*,,,,);

1606 
sqlôe3Com∂ëeIn£πi⁄
(
P¨£
*, 
TabÀ
*, , *, , , );

1607 
sqlôe3O≥nTabÀAndIndi˚s
(
P¨£
*, 
TabÀ
*, , );

1608 
sqlôe3BegöWrôeO≥øti⁄
(
P¨£
*, , );

1609 
Ex¥
 *
sqlôe3Ex¥Dup
(Expr*);

1610 
sqlôe3TokíC›y
(
Tokí
*, Token*);

1611 
Ex¥Li°
 *
sqlôe3Ex¥Li°Dup
(ExprList*);

1612 
SrcLi°
 *
sqlôe3SrcLi°Dup
(SrcList*);

1613 
IdLi°
 *
sqlôe3IdLi°Dup
(IdList*);

1614 
Sñe˘
 *
sqlôe3Sñe˘Dup
(Select*);

1615 
FuncDef
 *
sqlôe3FödFun˘i⁄
(
sqlôe3
*,c⁄° *,,,
u8
,);

1616 
sqlôe3Regi°îBuûtöFun˘i⁄s
(
sqlôe3
*);

1617 
sqlôe3Regi°îD©eTimeFun˘i⁄s
(
sqlôe3
*);

1618 
sqlôe3Sa„tyOn
(
sqlôe3
*);

1619 
sqlôe3Sa„tyOff
(
sqlôe3
*);

1620 
sqlôe3Sa„tyCheck
(
sqlôe3
*);

1621 
sqlôe3Ch™geCookõ
(
sqlôe3
*, 
Vdbe
*, );

1623 #i‚de‡
SQLITE_OMIT_TRIGGER


1624 
sqlôe3BegöTriggî
(
P¨£
*, 
Tokí
*,Tokí*,,,
IdLi°
*,
SrcLi°
*,

1625 ,
Ex¥
*,);

1626 
sqlôe3FöishTriggî
(
P¨£
*, 
TriggîSãp
*, 
Tokí
*);

1627 
sqlôe3Dr›Triggî
(
P¨£
*, 
SrcLi°
*);

1628 
sqlôe3Dr›TriggîPå
(
P¨£
*, 
Triggî
*, );

1629 
sqlôe3TriggîsExi°
(
P¨£
*, 
TabÀ
*, , 
Ex¥Li°
*);

1630 
sqlôe3CodeRowTriggî
(
P¨£
*, , 
Ex¥Li°
*, , 
TabÀ
 *, , ,

1632 
sqlôeVõwTriggîs
(
P¨£
*, 
TabÀ
*, 
Ex¥
*, , 
Ex¥Li°
*);

1633 
sqlôe3DñëeTriggîSãp
(
TriggîSãp
*);

1634 
TriggîSãp
 *
sqlôe3TriggîSñe˘Sãp
(
Sñe˘
*);

1635 
TriggîSãp
 *
sqlôe3TriggîIn£πSãp
(
Tokí
*, 
IdLi°
*, 
Ex¥Li°
*,
Sñe˘
*,);

1636 
TriggîSãp
 *
sqlôe3TriggîUpd©eSãp
(
Tokí
*, 
Ex¥Li°
*, 
Ex¥
*, );

1637 
TriggîSãp
 *
sqlôe3TriggîDñëeSãp
(
Tokí
*, 
Ex¥
*);

1638 
sqlôe3DñëeTriggî
(
Triggî
*);

1639 
sqlôe3U∆ökAndDñëeTriggî
(
sqlôe3
*,,const *);

1641 
	#sqlôe3TriggîsExi°
(
A
,
B
,
C
,
D
,
E
,
F
Ë0

	)

1642 
	#sqlôe3DñëeTriggî
(
A
)

	)

1643 
	#sqlôe3Dr›TriggîPå
(
A
,
B
,
C
)

	)

1644 
	#sqlôe3U∆ökAndDñëeTriggî
(
A
,
B
,
C
)

	)

1645 
	#sqlôe3CodeRowTriggî
(
A
,
B
,
C
,
D
,
E
,
F
,
G
,
H
,
I
Ë0

	)

1648 
sqlôe3JoöTy≥
(
P¨£
*, 
Tokí
*, Token*, Token*);

1649 
sqlôe3Cª©eF‹eignKey
(
P¨£
*, 
Ex¥Li°
*, 
Tokí
*, ExprList*, );

1650 
sqlôe3De„rF‹eignKey
(
P¨£
*, );

1651 #i‚de‡
SQLITE_OMIT_AUTHORIZATION


1652 
sqlôe3AuthRód
(
P¨£
*,
Ex¥
*,
SrcLi°
*);

1653 
sqlôe3AuthCheck
(
P¨£
*,, const *, const *, const *);

1654 
sqlôe3AuthC⁄ãxtPush
(
P¨£
*, 
AuthC⁄ãxt
*, const *);

1655 
sqlôe3AuthC⁄ãxtP›
(
AuthC⁄ãxt
*);

1657 
	#sqlôe3AuthRód
(
a
,
b
,
c
)

	)

1658 
	#sqlôe3AuthCheck
(
a
,
b
,
c
,
d
,
e
Ë
SQLITE_OK


	)

1659 
	#sqlôe3AuthC⁄ãxtPush
(
a
,
b
,
c
)

	)

1660 
	#sqlôe3AuthC⁄ãxtP›
(
a
Ë(()◊))

	)

1662 
sqlôe3Aâach
(
P¨£
*, 
Ex¥
*, Expr*, Expr*);

1663 
sqlôe3Dëach
(
P¨£
*, 
Ex¥
*);

1664 
sqlôe3BåìFa˘‹y
(c⁄° 
sqlôe3
 *
db
, c⁄° *
zFûíame
,

1665 
omôJou∫Æ
, 
nCache
, 
Båì
 **
µBåì
);

1666 
sqlôe3FixInô
(
DbFixî
*, 
P¨£
*, , c⁄° *, c⁄° 
Tokí
*);

1667 
sqlôe3FixSrcLi°
(
DbFixî
*, 
SrcLi°
*);

1668 
sqlôe3FixSñe˘
(
DbFixî
*, 
Sñe˘
*);

1669 
sqlôe3FixEx¥
(
DbFixî
*, 
Ex¥
*);

1670 
sqlôe3FixEx¥Li°
(
DbFixî
*, 
Ex¥Li°
*);

1671 
sqlôe3FixTriggîSãp
(
DbFixî
*, 
TriggîSãp
*);

1672 
sqlôe3AtoF
(c⁄° *
z
, *);

1673 *
sqlôe3_¢¥ötf
(,*,const *,...);

1674 
sqlôe3GëI¡32
(const *, *);

1675 
sqlôe3FôsIn64Bôs
(const *);

1676 
sqlôe3utf16ByãLí
(c⁄° *
pD©a
, 
nCh¨
);

1677 
sqlôe3utf8Ch¨Lí
(c⁄° *
pD©a
, 
nByã
);

1678 
sqlôe3RódUtf8
(const *);

1679 
sqlôe3PutV¨öt
(*, 
u64
);

1680 
sqlôe3GëV¨öt
(c⁄° *, 
u64
 *);

1681 
sqlôe3GëV¨öt32
(c⁄° *, 
u32
 *);

1682 
sqlôe3V¨ötLí
(
u64
 
v
);

1683 
sqlôe3IndexAfföôySå
(
Vdbe
 *, 
Index
 *);

1684 
sqlôe3TabÀAfföôySå
(
Vdbe
 *, 
TabÀ
 *);

1685 
sqlôe3Com∑ªAfföôy
(
Ex¥
 *
pEx¥
, 
aff2
);

1686 
sqlôe3IndexAfföôyOk
(
Ex¥
 *
pEx¥
, 
idx_afföôy
);

1687 
sqlôe3Ex¥Afföôy
(
Ex¥
 *
pEx¥
);

1688 
sqlôe3©oi64
(c⁄° *, 
i64
*);

1689 
sqlôe3Eº‹
(
sqlôe3
*, , const *,...);

1690 *
sqlôe3HexToBlob
(c⁄° *
z
);

1691 
sqlôe3TwoP¨tName
(
P¨£
 *, 
Tokí
 *, Token *, Token **);

1692 c⁄° *
sqlôe3EºSå
();

1693 
sqlôe3RódUniCh¨
(c⁄° *
zSå
, *
pOff£t
, 
u8
 *
pEnc
, 
fﬁd
);

1694 
sqlôe3RódSchema
(
P¨£
 *
pP¨£
);

1695 
CﬁlSeq
 *
sqlôe3FödCﬁlSeq
(
sqlôe3
*,
u8
 
íc
, const *,,);

1696 
CﬁlSeq
 *
sqlôe3LoˇãCﬁlSeq
(
P¨£
 *
pP¨£
, c⁄° *
zName
, 
nName
);

1697 
CﬁlSeq
 *
sqlôe3Ex¥CﬁlSeq
(
P¨£
 *
pP¨£
, 
Ex¥
 *
pEx¥
);

1698 
sqlôe3CheckCﬁlSeq
(
P¨£
 *, 
CﬁlSeq
 *);

1699 
sqlôe3CheckIndexCﬁlSeq
(
P¨£
 *, 
Index
 *);

1700 
sqlôe3CheckObje˘Name
(
P¨£
 *, const *);

1701 
sqlôe3VdbeSëCh™ges
(
sqlôe3
 *, );

1702 
sqlôe3utf16Sub°r
(
sqlôe3_c⁄ãxt
 *,,
sqlôe3_vÆue
 **);

1704 c⁄° *
sqlôe3VÆueText
(
sqlôe3_vÆue
*, 
u8
);

1705 
sqlôe3VÆueByãs
(
sqlôe3_vÆue
*, 
u8
);

1706 
sqlôe3VÆueSëSå
(
sqlôe3_vÆue
*, , c⁄° *,
u8
, (*)(*));

1707 
	`sqlôe3VÆueFªe
(
sqlôe3_vÆue
*);

1708 
sqlôe3_vÆue
 *
	`sqlôe3VÆueNew
();

1709 *
	`sqlôe3utf16to8
(const *, );

1710 
	`sqlôe3VÆueFromEx¥
(
Ex¥
 *, 
u8
, u8, 
sqlôe3_vÆue
 **);

1711 
	`sqlôe3VÆueAµlyAfföôy
(
sqlôe3_vÆue
 *, 
u8
, u8);

1712 c⁄° 
sqlôe3UµîToLowî
[];

1713 
	`sqlôe3RoŸPageMoved
(
Db
*, , );

1714 
	`sqlôe3Reödex
(
P¨£
*, 
Tokí
*, Token*);

1715 
	`sqlôe3A…îFun˘i⁄s
(
sqlôe3
*);

1716 
	`sqlôe3A…îRíameTabÀ
(
P¨£
*, 
SrcLi°
*, 
Tokí
*);

1717 
	`sqlôe3GëTokí
(const *, *);

1718 
	`sqlôe3Ne°edP¨£
(
P¨£
*, const *, ...);

1719 
	`sqlôe3ExpúePª∑ªdSèãmíts
(
sqlôe3
*);

1720 
	`sqlôe3CodeSub£À˘
(
P¨£
 *, 
Ex¥
 *);

1721 
	`sqlôe3Sñe˘Resﬁve
(
P¨£
 *, 
Sñe˘
 *, 
NameC⁄ãxt
 *);

1722 
	`sqlôe3CﬁumnDeÁu…
(
Vdbe
 *, 
TabÀ
 *, );

1723 
	`sqlôe3A…îFöishAddCﬁumn
(
P¨£
 *, 
Tokí
 *);

1724 
	`sqlôe3A…îBegöAddCﬁumn
(
P¨£
 *, 
SrcLi°
 *);

1725 c⁄° *
	`sqlôe3Te°Eº‹Name
();

1726 
CﬁlSeq
 *
	`sqlôe3GëCﬁlSeq
(
sqlôe3
*, CollSeq *, const *, );

1727 
	`sqlôe3AfföôyTy≥
(c⁄° 
Tokí
*);

1728 
	`sqlôe3A«lyze
(
P¨£
*, 
Tokí
*, Token*);

1729 
	`sqlôe3InvokeBusyH™dÀr
(
BusyH™dÀr
*);

1730 
	`sqlôe3FödDb
(
sqlôe3
*, 
Tokí
*);

1731 
	`sqlôe3A«lysisLﬂd
(
sqlôe3
*,
iDB
);

1732 
	`sqlôe3DeÁu…RowE°
(
Index
*);

1733 
	`sqlôe3Regi°îLikeFun˘i⁄s
(
sqlôe3
*, );

1734 
	`sqlôe3IsLikeFun˘i⁄
(
sqlôe3
*,
Ex¥
*,*,*);

1735 
ThªadD©a
 *
	`sqlôe3ThªadD©a
();

1736 c⁄° 
ThªadD©a
 *
	`sqlôe3ThªadD©aRódO∆y
();

1737 
	`sqlôe3Rñó£ThªadD©a
();

1738 
	`sqlôe3AâachFun˘i⁄s
(
sqlôe3
 *);

1739 
	`sqlôe3MöimumFûeF‹m©
(
P¨£
*, , );

1740 
	`sqlôe3SchemaFªe
(*);

1741 
Schema
 *
	`sqlôe3SchemaGë
(
Båì
 *);

1742 
	`sqlôe3SchemaToIndex
(
sqlôe3
 *
db
, 
Schema
 *);

1743 
KeyInfo
 *
	`sqlôe3IndexKeyöfo
(
P¨£
 *, 
Index
 *);

1744 
	`sqlôe3Cª©eFunc
(
sqlôe3
 *, const *, , , *,

1745 (*)(
sqlôe3_c⁄ãxt
*,,
sqlôe3_vÆue
 **),

1746 (*)(
sqlôe3_c⁄ãxt
*,,
sqlôe3_vÆue
 **), (*)(sqlite3_context*));

1747 
	`sqlôe3ApiExô
(
sqlôe3
 *
db
, );

1748 
	`sqlôe3MÆlocFaûed
();

1749 
	`sqlôe3FaûedMÆloc
();

1750 
	`sqlôe3Ab‹tOthîA˘iveVdbes
(
sqlôe3
 *, 
Vdbe
 *);

1752 #i‚de‡
SQLITE_OMIT_SHARED_CACHE


1753 
	`sqlôe3TabÀLock
(
P¨£
 *, , , 
u8
, const *);

1755 
	#sqlôe3TabÀLock
(
v
,
w
,
x
,
y
,
z
)

	)

1758 #ifde‡
SQLITE_MEMDEBUG


1759 
	`sqlôe3MÆlocDißŒow
();

1760 
	`sqlôe3MÆlocAŒow
();

1761 
	`sqlôe3Te°MÆlocFaû
();

1763 
	#sqlôe3Te°MÆlocFaû
(Ë0

	)

1764 
	#sqlôe3MÆlocDißŒow
()

	)

1765 
	#sqlôe3MÆlocAŒow
()

	)

1768 #ifde‡
SQLITE_SSE


1769 
	~"s£I¡.h
"

	@table.c

19 
	~"sqlôeI¡.h
"

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

23 #i‚de‡
SQLITE_OMIT_GET_TABLE


29 
	sTabResu…
 {

30 **
	mazResu…
;

31 *
	mzEºMsg
;

32 
	mnResu…
;

33 
	mnAŒoc
;

34 
	mnRow
;

35 
	mnCﬁumn
;

36 
	mnD©a
;

37 
	mrc
;

38 } 
	tTabResu…
;

45 
	$sqlôe3_gë_èbÀ_cb
(*
pArg
, 
nCﬁ
, **
¨gv
, **
cﬁv
){

46 
TabResu…
 *
p
 = (TabResu…*)
pArg
;

47 
√ed
;

48 
i
;

49 *
z
;

54 if–
p
->
nRow
==0 && 
¨gv
!=0 ){

55 
√ed
 = 
nCﬁ
*2;

57 
√ed
 = 
nCﬁ
;

59 if–
p
->
nD©a
 + 
√ed
 >p->
nAŒoc
 ){

60 **
azNew
;

61 
p
->
nAŒoc
 =Ö->nAŒoc*2 + 
√ed
 + 1;

62 
azNew
 = 
	`ªÆloc
–
p
->
azResu…
, (*)*p->
nAŒoc
 );

63 if–
azNew
==0 ) 
mÆloc_Áûed
;

64 
p
->
azResu…
 = 
azNew
;

70 if–
p
->
nRow
==0 ){

71 
p
->
nCﬁumn
 = 
nCﬁ
;

72 
i
=0; i<
nCﬁ
; i++){

73 if–
cﬁv
[
i
]==0 ){

74 
z
 = 0;

76 
z
 = 
	`mÆloc
–
	`°æí
(
cﬁv
[
i
])+1 );

77 if–
z
==0 ) 
mÆloc_Áûed
;

78 
	`°r˝y
(
z
, 
cﬁv
[
i
]);

80 
p
->
azResu…
[p->
nD©a
++] = 
z
;

82 }if–
p
->
nCﬁumn
!=
nCﬁ
 ){

83 
	`sqlôe3SëSåög
(&
p
->
zEºMsg
,

86 
p
->
rc
 = 
SQLITE_ERROR
;

92 if–
¨gv
!=0 ){

93 
i
=0; i<
nCﬁ
; i++){

94 if–
¨gv
[
i
]==0 ){

95 
z
 = 0;

97 
z
 = 
	`mÆloc
–
	`°æí
(
¨gv
[
i
])+1 );

98 if–
z
==0 ) 
mÆloc_Áûed
;

99 
	`°r˝y
(
z
, 
¨gv
[
i
]);

101 
p
->
azResu…
[p->
nD©a
++] = 
z
;

103 
p
->
nRow
++;

107 
mÆloc_Áûed
:

108 
p
->
rc
 = 
SQLITE_NOMEM
;

110 
	}
}

122 
	$sqlôe3_gë_èbÀ
(

123 
sqlôe3
 *
db
,

124 c⁄° *
zSql
,

125 ***
∑zResu…
,

126 *
≤Row
,

127 *
≤Cﬁumn
,

128 **
pzEºMsg


130 
rc
;

131 
TabResu…
 
ªs
;

132 if–
∑zResu…
==0 ){  
SQLITE_ERROR
; }

133 *
∑zResu…
 = 0;

134 if–
≤Cﬁumn
 ) *pnColumn = 0;

135 if–
≤Row
 ) *pnRow = 0;

136 
ªs
.
zEºMsg
 = 0;

137 
ªs
.
nResu…
 = 0;

138 
ªs
.
nRow
 = 0;

139 
ªs
.
nCﬁumn
 = 0;

140 
ªs
.
nD©a
 = 1;

141 
ªs
.
nAŒoc
 = 20;

142 
ªs
.
rc
 = 
SQLITE_OK
;

143 
ªs
.
azResu…
 = 
	`mÆloc
–(*)*ªs.
nAŒoc
 );

144 if–
ªs
.
azResu…
==0 )  
SQLITE_NOMEM
;

145 
ªs
.
azResu…
[0] = 0;

146 
rc
 = 
	`sqlôe3_exec
(
db
, 
zSql
, 
sqlôe3_gë_èbÀ_cb
, &
ªs
, 
pzEºMsg
);

147 if–
ªs
.
azResu…
 ){

148 
ªs
.
azResu…
[0] = (*Ïes.
nD©a
;

150 if–
rc
==
SQLITE_ABORT
 ){

151 
	`sqlôe3_‰ì_èbÀ
(&
ªs
.
azResu…
[1]);

152 if–
ªs
.
zEºMsg
 ){

153 if–
pzEºMsg
 ){

154 
	`‰ì
(*
pzEºMsg
);

155 *
pzEºMsg
 = 
	`sqlôe3_m¥ötf
("%s",
ªs
.
zEºMsg
);

157 
	`sqlôeFªe
(
ªs
.
zEºMsg
);

159 
db
->
îrCode
 = 
ªs
.
rc
;

160  
ªs
.
rc
;

162 
	`sqlôeFªe
(
ªs
.
zEºMsg
);

163 if–
rc
!=
SQLITE_OK
 ){

164 
	`sqlôe3_‰ì_èbÀ
(&
ªs
.
azResu…
[1]);

165  
rc
;

167 if–
ªs
.
nAŒoc
>ªs.
nD©a
 ){

168 **
azNew
;

169 
azNew
 = 
	`ªÆloc
–
ªs
.
azResu…
, (*)*‘es.
nD©a
+1) );

170 if–
azNew
==0 ){

171 
	`sqlôe3_‰ì_èbÀ
(&
ªs
.
azResu…
[1]);

172  
SQLITE_NOMEM
;

174 
ªs
.
nAŒoc
 =Ñes.
nD©a
+1;

175 
ªs
.
azResu…
 = 
azNew
;

177 *
∑zResu…
 = &
ªs
.
azResu…
[1];

178 if–
≤Cﬁumn
 ) *≤Cﬁum¿
ªs
.
nCﬁumn
;

179 if–
≤Row
 ) *≤Row = 
ªs
.
nRow
;

180  
rc
;

181 
	}
}

186 
	$sqlôe3_‰ì_èbÀ
(

187 **
azResu…


189 if–
azResu…
 ){

190 
i
, 
n
;

191 
azResu…
--;

192 if–
azResu…
==0 ) ;

193 
n
 = ()
azResu…
[0];

194 
i
=1; i<
n
; i++){ if–
azResu…
[i] ) 
	`‰ì
(azResult[i]); }

195 
	`‰ì
(
azResu…
);

197 
	}
}

	@tclsqlite.c

16 #i‚de‡
NO_TCL


18 
	~"sqlôeI¡.h
"

19 
	~"hash.h
"

20 
	~"t˛.h
"

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<as£π.h
>

24 
	~<˘y≥.h
>

31 #ifde‡
BUILD_sqlôe


32 #unde‡
TCL_STORAGE_CLASS


33 
	#TCL_STORAGE_CLASS
 
DLLEXPORT


	)

36 
	#NUM_PREPARED_STMTS
 10

	)

37 
	#MAX_PREPARED_STMTS
 100

	)

45 #i‡
deföed
(
TCL_UTF_MAX
Ë&& !deföed(
SQLITE_UTF8
)

46 
	#UTF_TRANSLATION_NEEDED
 1

	)

53 
SqlFunc
 
	tSqlFunc
;

54 
	sSqlFunc
 {

55 
T˛_I¡îp
 *
	möãΩ
;

56 
T˛_Obj
 *
	mpS¸ùt
;

57 
	mu£EvÆObjv
;

58 *
	mzName
;

59 
SqlFunc
 *
	mpNext
;

66 
SqlCﬁœã
 
	tSqlCﬁœã
;

67 
	sSqlCﬁœã
 {

68 
T˛_I¡îp
 *
	möãΩ
;

69 *
	mzS¸ùt
;

70 
SqlCﬁœã
 *
	mpNext
;

77 
SqlPª∑ªdStmt
 
	tSqlPª∑ªdStmt
;

78 
	sSqlPª∑ªdStmt
 {

79 
SqlPª∑ªdStmt
 *
	mpNext
;

80 
SqlPª∑ªdStmt
 *
	mpPªv
;

81 
sqlôe3_°mt
 *
	mpStmt
;

82 
	mnSql
;

83 
	mzSql
[1];

90 
SqlôeDb
 
	tSqlôeDb
;

91 
	sSqlôeDb
 {

92 
sqlôe3
 *
	mdb
;

93 
T˛_I¡îp
 *
	möãΩ
;

94 *
	mzBusy
;

95 *
	mzCommô
;

96 *
	mzTø˚
;

97 *
	mzProfûe
;

98 *
	mzProgªss
;

99 *
	mzAuth
;

100 *
	mzNuŒ
;

101 
SqlFunc
 *
	mpFunc
;

102 
T˛_Obj
 *
	mpUpd©eHook
;

103 
T˛_Obj
 *
	mpRﬁlbackHook
;

104 
SqlCﬁœã
 *
	mpCﬁœã
;

105 
	mrc
;

106 
T˛_Obj
 *
	mpCﬁœãNìded
;

107 
SqlPª∑ªdStmt
 *
	m°mtLi°
;

108 
SqlPª∑ªdStmt
 *
	m°mtLa°
;

109 
	mmaxStmt
;

110 
	mnStmt
;

125 
	$ß„ToU£EvÆObjv
(
T˛_I¡îp
 *
öãΩ
, 
T˛_Obj
 *
pCmd
){

130 c⁄° *
z
;

131 
n
;

132 
z
 = 
	`T˛_GëSåögFromObj
(
pCmd
, &
n
);

133  
n
-- > 0 ){

134 
c
 = *(
z
++);

135 if–
c
=='$' || c=='[' || c==';' )  0;

138 
	}
}

145 
SqlFunc
 *
	$födSqlFunc
(
SqlôeDb
 *
pDb
, c⁄° *
zName
){

146 
SqlFunc
 *
p
, *
pNew
;

147 
i
;

148 
pNew
 = (
SqlFunc
*)
	`T˛_AŒoc
–(*pNewË+ 
	`°æí
(
zName
) + 1 );

149 
pNew
->
zName
 = (*)&pNew[1];

150 
i
=0; 
zName
[i]; i++){ 
pNew
->zName[i] = 
	`tﬁowî
(zName[i]); }

151 
pNew
->
zName
[
i
] = 0;

152 
p
=
pDb
->
pFunc
;Ö;Öı->
pNext
){

153 if–
	`°rcmp
(
p
->
zName
, 
pNew
->zName)==0 ){

154 
	`T˛_Fªe
((*)
pNew
);

155  
p
;

158 
pNew
->
öãΩ
 = 
pDb
->interp;

159 
pNew
->
pS¸ùt
 = 0;

160 
pNew
->
pNext
 = 
pDb
->
pFunc
;

161 
pDb
->
pFunc
 = 
pNew
;

162  
pNew
;

163 
	}
}

168 
	$ÊushStmtCache
–
SqlôeDb
 *
pDb
 ){

169 
SqlPª∑ªdStmt
 *
pPªStmt
;

171  
pDb
->
°mtLi°
 ){

172 
	`sqlôe3_föÆize
–
pDb
->
°mtLi°
->
pStmt
 );

173 
pPªStmt
 = 
pDb
->
°mtLi°
;

174 
pDb
->
°mtLi°
 =ÖDb->°mtLi°->
pNext
;

175 
	`T˛_Fªe
–(*)
pPªStmt
 );

177 
pDb
->
nStmt
 = 0;

178 
pDb
->
°mtLa°
 = 0;

179 
	}
}

185 
	$DbDñëeCmd
(*
db
){

186 
SqlôeDb
 *
pDb
 = (SqlôeDb*)
db
;

187 
	`ÊushStmtCache
(
pDb
);

188 
	`sqlôe3_˛o£
(
pDb
->
db
);

189  
pDb
->
pFunc
 ){

190 
SqlFunc
 *
pFunc
 = 
pDb
->pFunc;

191 
pDb
->
pFunc
 =ÖFunc->
pNext
;

192 
	`T˛_De¸RefCou¡
(
pFunc
->
pS¸ùt
);

193 
	`T˛_Fªe
((*)
pFunc
);

195  
pDb
->
pCﬁœã
 ){

196 
SqlCﬁœã
 *
pCﬁœã
 = 
pDb
->pCollate;

197 
pDb
->
pCﬁœã
 =ÖCﬁœã->
pNext
;

198 
	`T˛_Fªe
((*)
pCﬁœã
);

200 if–
pDb
->
zBusy
 ){

201 
	`T˛_Fªe
(
pDb
->
zBusy
);

203 if–
pDb
->
zTø˚
 ){

204 
	`T˛_Fªe
(
pDb
->
zTø˚
);

206 if–
pDb
->
zProfûe
 ){

207 
	`T˛_Fªe
(
pDb
->
zProfûe
);

209 if–
pDb
->
zAuth
 ){

210 
	`T˛_Fªe
(
pDb
->
zAuth
);

212 if–
pDb
->
zNuŒ
 ){

213 
	`T˛_Fªe
(
pDb
->
zNuŒ
);

215 if–
pDb
->
pUpd©eHook
 ){

216 
	`T˛_De¸RefCou¡
(
pDb
->
pUpd©eHook
);

218 if–
pDb
->
pRﬁlbackHook
 ){

219 
	`T˛_De¸RefCou¡
(
pDb
->
pRﬁlbackHook
);

221 if–
pDb
->
pCﬁœãNìded
 ){

222 
	`T˛_De¸RefCou¡
(
pDb
->
pCﬁœãNìded
);

224 
	`T˛_Fªe
((*)
pDb
);

225 
	}
}

231 
	$DbBusyH™dÀr
(*
cd
, 
nTrõs
){

232 
SqlôeDb
 *
pDb
 = (SqlôeDb*)
cd
;

233 
rc
;

234 
zVÆ
[30];

236 
	`•rötf
(
zVÆ
, "%d", 
nTrõs
);

237 
rc
 = 
	`T˛_V¨EvÆ
(
pDb
->
öãΩ
,ÖDb->
zBusy
, " ", 
zVÆ
, (*)0);

238 if–
rc
!=
TCL_OK
 || 
	`©oi
(
	`T˛_GëSåögResu…
(
pDb
->
öãΩ
)) ){

242 
	}
}

247 
	$DbProgªssH™dÀr
(*
cd
){

248 
SqlôeDb
 *
pDb
 = (SqlôeDb*)
cd
;

249 
rc
;

251 
	`as£π
–
pDb
->
zProgªss
 );

252 
rc
 = 
	`T˛_EvÆ
(
pDb
->
öãΩ
,ÖDb->
zProgªss
);

253 if–
rc
!=
TCL_OK
 || 
	`©oi
(
	`T˛_GëSåögResu…
(
pDb
->
öãΩ
)) ){

257 
	}
}

259 #i‚de‡
SQLITE_OMIT_TRACE


264 
	$DbTø˚H™dÀr
(*
cd
, c⁄° *
zSql
){

265 
SqlôeDb
 *
pDb
 = (SqlôeDb*)
cd
;

266 
T˛_DSåög
 
°r
;

268 
	`T˛_DSåögInô
(&
°r
);

269 
	`T˛_DSåögAµíd
(&
°r
, 
pDb
->
zTø˚
, -1);

270 
	`T˛_DSåögAµídEÀmít
(&
°r
, 
zSql
);

271 
	`T˛_EvÆ
(
pDb
->
öãΩ
, 
	`T˛_DSåögVÆue
(&
°r
));

272 
	`T˛_DSåögFªe
(&
°r
);

273 
	`T˛_Re£tResu…
(
pDb
->
öãΩ
);

274 
	}
}

277 #i‚de‡
SQLITE_OMIT_TRACE


282 
	$DbProfûeH™dÀr
(*
cd
, c⁄° *
zSql
, 
sqlôe_uöt64
 
tm
){

283 
SqlôeDb
 *
pDb
 = (SqlôeDb*)
cd
;

284 
T˛_DSåög
 
°r
;

285 
zTm
[100];

287 
	`sqlôe3_¢¥ötf
((
zTm
)-1, zTm, "%Œd", 
tm
);

288 
	`T˛_DSåögInô
(&
°r
);

289 
	`T˛_DSåögAµíd
(&
°r
, 
pDb
->
zProfûe
, -1);

290 
	`T˛_DSåögAµídEÀmít
(&
°r
, 
zSql
);

291 
	`T˛_DSåögAµídEÀmít
(&
°r
, 
zTm
);

292 
	`T˛_EvÆ
(
pDb
->
öãΩ
, 
	`T˛_DSåögVÆue
(&
°r
));

293 
	`T˛_DSåögFªe
(&
°r
);

294 
	`T˛_Re£tResu…
(
pDb
->
öãΩ
);

295 
	}
}

304 
	$DbCommôH™dÀr
(*
cd
){

305 
SqlôeDb
 *
pDb
 = (SqlôeDb*)
cd
;

306 
rc
;

308 
rc
 = 
	`T˛_EvÆ
(
pDb
->
öãΩ
,ÖDb->
zCommô
);

309 if–
rc
!=
TCL_OK
 || 
	`©oi
(
	`T˛_GëSåögResu…
(
pDb
->
öãΩ
)) ){

313 
	}
}

315 
	$DbRﬁlbackH™dÀr
(*
˛õ¡D©a
){

316 
SqlôeDb
 *
pDb
 = (SqlôeDb*)
˛õ¡D©a
;

317 
	`as£π
(
pDb
->
pRﬁlbackHook
);

318 if–
TCL_OK
!=
	`T˛_EvÆObjEx
(
pDb
->
öãΩ
,ÖDb->
pRﬁlbackHook
, 0) ){

319 
	`T˛_BackgroundEº‹
(
pDb
->
öãΩ
);

321 
	}
}

323 
	$DbUpd©eH™dÀr
(

324 *
p
,

325 
›
,

326 c⁄° *
zDb
,

327 c⁄° *
zTbl
,

328 
sqlôe_öt64
 
rowid


330 
SqlôeDb
 *
pDb
 = (SqlôeDb *)
p
;

331 
T˛_Obj
 *
pCmd
;

333 
	`as£π
–
pDb
->
pUpd©eHook
 );

334 
	`as£π
–
›
==
SQLITE_INSERT
 || op==
SQLITE_UPDATE
 || op==
SQLITE_DELETE
 );

336 
pCmd
 = 
	`T˛_Du∂iˇãObj
(
pDb
->
pUpd©eHook
);

337 
	`T˛_In¸RefCou¡
(
pCmd
);

338 
	`T˛_Li°ObjAµídEÀmít
(0, 
pCmd
, 
	`T˛_NewSåögObj
(

339 –(
›
==
SQLITE_INSERT
)?"INSERT":(›==
SQLITE_UPDATE
)?"UPDATE":"DELETE"), -1));

340 
	`T˛_Li°ObjAµídEÀmít
(0, 
pCmd
, 
	`T˛_NewSåögObj
(
zDb
, -1));

341 
	`T˛_Li°ObjAµídEÀmít
(0, 
pCmd
, 
	`T˛_NewSåögObj
(
zTbl
, -1));

342 
	`T˛_Li°ObjAµídEÀmít
(0, 
pCmd
, 
	`T˛_NewWideI¡Obj
(
rowid
));

343 
	`T˛_EvÆObjEx
(
pDb
->
öãΩ
, 
pCmd
, 
TCL_EVAL_DIRECT
);

344 
	}
}

346 
	$t˛CﬁœãNìded
(

347 *
pCtx
,

348 
sqlôe3
 *
db
,

349 
íc
,

350 c⁄° *
zName


352 
SqlôeDb
 *
pDb
 = (SqlôeDb *)
pCtx
;

353 
T˛_Obj
 *
pS¸ùt
 = 
	`T˛_Du∂iˇãObj
(
pDb
->
pCﬁœãNìded
);

354 
	`T˛_In¸RefCou¡
(
pS¸ùt
);

355 
	`T˛_Li°ObjAµídEÀmít
(0, 
pS¸ùt
, 
	`T˛_NewSåögObj
(
zName
, -1));

356 
	`T˛_EvÆObjEx
(
pDb
->
öãΩ
, 
pS¸ùt
, 0);

357 
	`T˛_De¸RefCou¡
(
pS¸ùt
);

358 
	}
}

364 
	$t˛SqlCﬁœã
(

365 *
pCtx
,

366 
nA
,

367 c⁄° *
zA
,

368 
nB
,

369 c⁄° *
zB


371 
SqlCﬁœã
 *
p
 = (SqlCﬁœã *)
pCtx
;

372 
T˛_Obj
 *
pCmd
;

374 
pCmd
 = 
	`T˛_NewSåögObj
(
p
->
zS¸ùt
, -1);

375 
	`T˛_In¸RefCou¡
(
pCmd
);

376 
	`T˛_Li°ObjAµídEÀmít
(
p
->
öãΩ
, 
pCmd
, 
	`T˛_NewSåögObj
(
zA
, 
nA
));

377 
	`T˛_Li°ObjAµídEÀmít
(
p
->
öãΩ
, 
pCmd
, 
	`T˛_NewSåögObj
(
zB
, 
nB
));

378 
	`T˛_EvÆObjEx
(
p
->
öãΩ
, 
pCmd
, 
TCL_EVAL_DIRECT
);

379 
	`T˛_De¸RefCou¡
(
pCmd
);

380  (
	`©oi
(
	`T˛_GëSåögResu…
(
p
->
öãΩ
)));

381 
	}
}

387 
	$t˛SqlFunc
(
sqlôe3_c⁄ãxt
 *
c⁄ãxt
, 
¨gc
, 
sqlôe3_vÆue
**
¨gv
){

388 
SqlFunc
 *
p
 = 
	`sqlôe3_u£r_d©a
(
c⁄ãxt
);

389 
T˛_Obj
 *
pCmd
;

390 
i
;

391 
rc
;

393 if–
¨gc
==0 ){

398 
pCmd
 = 
p
->
pS¸ùt
;

399 
	`T˛_In¸RefCou¡
(
pCmd
);

400 
rc
 = 
	`T˛_EvÆObjEx
(
p
->
öãΩ
, 
pCmd
, 0);

401 
	`T˛_De¸RefCou¡
(
pCmd
);

412 
T˛_Obj
 **
aArg
;

413 
nArg
;

414 if–
	`T˛_Li°ObjGëEÀmíts
(
p
->
öãΩ
,Ö->
pS¸ùt
, &
nArg
, &
aArg
) ){

415 
	`sqlôe3_ªsu…_îr‹
(
c⁄ãxt
, 
	`T˛_GëSåögResu…
(
p
->
öãΩ
), -1);

418 
pCmd
 = 
	`T˛_NewLi°Obj
(
nArg
, 
aArg
);

419 
	`T˛_In¸RefCou¡
(
pCmd
);

420 
i
=0; i<
¨gc
; i++){

421 
sqlôe3_vÆue
 *
pIn
 = 
¨gv
[
i
];

422 
T˛_Obj
 *
pVÆ
;

425  
	`sqlôe3_vÆue_ty≥
(
pIn
) ){

426 
SQLITE_BLOB
: {

427 
byãs
 = 
	`sqlôe3_vÆue_byãs
(
pIn
);

428 
pVÆ
 = 
	`T˛_NewByãAºayObj
(
	`sqlôe3_vÆue_blob
(
pIn
), 
byãs
);

431 
SQLITE_INTEGER
: {

432 
sqlôe_öt64
 
v
 = 
	`sqlôe3_vÆue_öt64
(
pIn
);

433 if–
v
>=-2147483647 && v<=2147483647 ){

434 
pVÆ
 = 
	`T˛_NewI¡Obj
(
v
);

436 
pVÆ
 = 
	`T˛_NewWideI¡Obj
(
v
);

440 
SQLITE_FLOAT
: {

441 
r
 = 
	`sqlôe3_vÆue_doubÀ
(
pIn
);

442 
pVÆ
 = 
	`T˛_NewDoubÀObj
(
r
);

445 
SQLITE_NULL
: {

446 
pVÆ
 = 
	`T˛_NewSåögObj
("", 0);

450 
byãs
 = 
	`sqlôe3_vÆue_byãs
(
pIn
);

451 
pVÆ
 = 
	`T˛_NewSåögObj
((*)
	`sqlôe3_vÆue_ãxt
(
pIn
), 
byãs
);

455 
rc
 = 
	`T˛_Li°ObjAµídEÀmít
(
p
->
öãΩ
, 
pCmd
, 
pVÆ
);

456 if–
rc
 ){

457 
	`T˛_De¸RefCou¡
(
pCmd
);

458 
	`sqlôe3_ªsu…_îr‹
(
c⁄ãxt
, 
	`T˛_GëSåögResu…
(
p
->
öãΩ
), -1);

462 if–!
p
->
u£EvÆObjv
 ){

466 
	`T˛_GëSåög
(
pCmd
);

468 
rc
 = 
	`T˛_EvÆObjEx
(
p
->
öãΩ
, 
pCmd
, 
TCL_EVAL_DIRECT
);

469 
	`T˛_De¸RefCou¡
(
pCmd
);

472 if–
rc
 &&Ñc!=
TCL_RETURN
 ){

473 
	`sqlôe3_ªsu…_îr‹
(
c⁄ãxt
, 
	`T˛_GëSåögResu…
(
p
->
öãΩ
), -1);

475 
T˛_Obj
 *
pV¨
 = 
	`T˛_GëObjResu…
(
p
->
öãΩ
);

476 
n
;

477 
u8
 *
d©a
;

478 *
zTy≥
 = 
pV¨
->
ty≥På
 ?ÖV¨->ty≥På->
«me
 : "";

479 
c
 = 
zTy≥
[0];

480 if–
c
=='b' && 
	`°rcmp
(
zTy≥
,"byã¨øy")==0 && 
pV¨
->
byãs
==0 ){

483 
d©a
 = 
	`T˛_GëByãAºayFromObj
(
pV¨
, &
n
);

484 
	`sqlôe3_ªsu…_blob
(
c⁄ãxt
, 
d©a
, 
n
, 
SQLITE_TRANSIENT
);

485 }if–(
c
=='b' && 
	`°rcmp
(
zTy≥
,"boolean")==0) ||

486 (
c
=='i' && 
	`°rcmp
(
zTy≥
,"int")==0) ){

487 
	`T˛_GëI¡FromObj
(0, 
pV¨
, &
n
);

488 
	`sqlôe3_ªsu…_öt
(
c⁄ãxt
, 
n
);

489 }if–
c
=='d' && 
	`°rcmp
(
zTy≥
,"double")==0 ){

490 
r
;

491 
	`T˛_GëDoubÀFromObj
(0, 
pV¨
, &
r
);

492 
	`sqlôe3_ªsu…_doubÀ
(
c⁄ãxt
, 
r
);

493 }if–
c
=='w' && 
	`°rcmp
(
zTy≥
,"wideInt")==0 ){

494 
T˛_WideI¡
 
v
;

495 
	`T˛_GëWideI¡FromObj
(0, 
pV¨
, &
v
);

496 
	`sqlôe3_ªsu…_öt64
(
c⁄ãxt
, 
v
);

498 
d©a
 = (*)
	`T˛_GëSåögFromObj
(
pV¨
, &
n
);

499 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, (*)
d©a
, 
n
, 
SQLITE_TRANSIENT
);

502 
	}
}

504 #i‚de‡
SQLITE_OMIT_AUTHORIZATION


511 
	$auth_ˇŒback
(

512 *
pArg
,

513 
code
,

514 c⁄° *
zArg1
,

515 c⁄° *
zArg2
,

516 c⁄° *
zArg3
,

517 c⁄° *
zArg4


519 *
zCode
;

520 
T˛_DSåög
 
°r
;

521 
rc
;

522 c⁄° *
zRïly
;

523 
SqlôeDb
 *
pDb
 = (SqlôeDb*)
pArg
;

525  
code
 ){

526 
SQLITE_COPY
 : 
zCode
="SQLITE_COPY"; ;

527 
SQLITE_CREATE_INDEX
 : 
zCode
="SQLITE_CREATE_INDEX"; ;

528 
SQLITE_CREATE_TABLE
 : 
zCode
="SQLITE_CREATE_TABLE"; ;

529 
SQLITE_CREATE_TEMP_INDEX
 : 
zCode
="SQLITE_CREATE_TEMP_INDEX"; ;

530 
SQLITE_CREATE_TEMP_TABLE
 : 
zCode
="SQLITE_CREATE_TEMP_TABLE"; ;

531 
SQLITE_CREATE_TEMP_TRIGGER
: 
zCode
="SQLITE_CREATE_TEMP_TRIGGER"; ;

532 
SQLITE_CREATE_TEMP_VIEW
 : 
zCode
="SQLITE_CREATE_TEMP_VIEW"; ;

533 
SQLITE_CREATE_TRIGGER
 : 
zCode
="SQLITE_CREATE_TRIGGER"; ;

534 
SQLITE_CREATE_VIEW
 : 
zCode
="SQLITE_CREATE_VIEW"; ;

535 
SQLITE_DELETE
 : 
zCode
="SQLITE_DELETE"; ;

536 
SQLITE_DROP_INDEX
 : 
zCode
="SQLITE_DROP_INDEX"; ;

537 
SQLITE_DROP_TABLE
 : 
zCode
="SQLITE_DROP_TABLE"; ;

538 
SQLITE_DROP_TEMP_INDEX
 : 
zCode
="SQLITE_DROP_TEMP_INDEX"; ;

539 
SQLITE_DROP_TEMP_TABLE
 : 
zCode
="SQLITE_DROP_TEMP_TABLE"; ;

540 
SQLITE_DROP_TEMP_TRIGGER
 : 
zCode
="SQLITE_DROP_TEMP_TRIGGER"; ;

541 
SQLITE_DROP_TEMP_VIEW
 : 
zCode
="SQLITE_DROP_TEMP_VIEW"; ;

542 
SQLITE_DROP_TRIGGER
 : 
zCode
="SQLITE_DROP_TRIGGER"; ;

543 
SQLITE_DROP_VIEW
 : 
zCode
="SQLITE_DROP_VIEW"; ;

544 
SQLITE_INSERT
 : 
zCode
="SQLITE_INSERT"; ;

545 
SQLITE_PRAGMA
 : 
zCode
="SQLITE_PRAGMA"; ;

546 
SQLITE_READ
 : 
zCode
="SQLITE_READ"; ;

547 
SQLITE_SELECT
 : 
zCode
="SQLITE_SELECT"; ;

548 
SQLITE_TRANSACTION
 : 
zCode
="SQLITE_TRANSACTION"; ;

549 
SQLITE_UPDATE
 : 
zCode
="SQLITE_UPDATE"; ;

550 
SQLITE_ATTACH
 : 
zCode
="SQLITE_ATTACH"; ;

551 
SQLITE_DETACH
 : 
zCode
="SQLITE_DETACH"; ;

552 
SQLITE_ALTER_TABLE
 : 
zCode
="SQLITE_ALTER_TABLE"; ;

553 
SQLITE_REINDEX
 : 
zCode
="SQLITE_REINDEX"; ;

554 
SQLITE_ANALYZE
 : 
zCode
="SQLITE_ANALYZE"; ;

555  : 
zCode
="????"; ;

557 
	`T˛_DSåögInô
(&
°r
);

558 
	`T˛_DSåögAµíd
(&
°r
, 
pDb
->
zAuth
, -1);

559 
	`T˛_DSåögAµídEÀmít
(&
°r
, 
zCode
);

560 
	`T˛_DSåögAµídEÀmít
(&
°r
, 
zArg1
 ? zArg1 : "");

561 
	`T˛_DSåögAµídEÀmít
(&
°r
, 
zArg2
 ? zArg2 : "");

562 
	`T˛_DSåögAµídEÀmít
(&
°r
, 
zArg3
 ? zArg3 : "");

563 
	`T˛_DSåögAµídEÀmít
(&
°r
, 
zArg4
 ? zArg4 : "");

564 
rc
 = 
	`T˛_GlobÆEvÆ
(
pDb
->
öãΩ
, 
	`T˛_DSåögVÆue
(&
°r
));

565 
	`T˛_DSåögFªe
(&
°r
);

566 
zRïly
 = 
	`T˛_GëSåögResu…
(
pDb
->
öãΩ
);

567 if–
	`°rcmp
(
zRïly
,"SQLITE_OK")==0 ){

568 
rc
 = 
SQLITE_OK
;

569 }if–
	`°rcmp
(
zRïly
,"SQLITE_DENY")==0 ){

570 
rc
 = 
SQLITE_DENY
;

571 }if–
	`°rcmp
(
zRïly
,"SQLITE_IGNORE")==0 ){

572 
rc
 = 
SQLITE_IGNORE
;

574 
rc
 = 999;

576  
rc
;

577 
	}
}

586 
T˛_Obj
 *
	$dbTextToObj
(c⁄° *
zText
){

587 
T˛_Obj
 *
pVÆ
;

588 #ifde‡
UTF_TRANSLATION_NEEDED


589 
T˛_DSåög
 
dCﬁ
;

590 
	`T˛_DSåögInô
(&
dCﬁ
);

591 
	`T˛_Exã∫ÆToUtfDSåög
(
NULL
, 
zText
, -1, &
dCﬁ
);

592 
pVÆ
 = 
	`T˛_NewSåögObj
(
	`T˛_DSåögVÆue
(&
dCﬁ
), -1);

593 
	`T˛_DSåögFªe
(&
dCﬁ
);

595 
pVÆ
 = 
	`T˛_NewSåögObj
(
zText
, -1);

597  
pVÆ
;

598 
	}
}

611 *
	$loˇl_gëlöe
(*
zProm±
, 
FILE
 *
ö
){

612 *
zLöe
;

613 
nLöe
;

614 
n
;

615 
eﬁ
;

617 
nLöe
 = 100;

618 
zLöe
 = 
	`mÆloc
–
nLöe
 );

619 if–
zLöe
==0 )  0;

620 
n
 = 0;

621 
eﬁ
 = 0;

622  !
eﬁ
 ){

623 if–
n
+100>
nLöe
 ){

624 
nLöe
 =ÇLine*2 + 100;

625 
zLöe
 = 
	`ªÆloc
(zLöe, 
nLöe
);

626 if–
zLöe
==0 )  0;

628 if–
	`fgës
(&
zLöe
[
n
], 
nLöe
 -Ç, 
ö
)==0 ){

629 if–
n
==0 ){

630 
	`‰ì
(
zLöe
);

633 
zLöe
[
n
] = 0;

634 
eﬁ
 = 1;

637  
zLöe
[
n
] ){Ç++; }

638 if–
n
>0 && 
zLöe
[n-1]=='\n' ){

639 
n
--;

640 
zLöe
[
n
] = 0;

641 
eﬁ
 = 1;

644 
zLöe
 = 
	`ªÆloc
–zLöe, 
n
+1 );

645  
zLöe
;

646 
	}
}

661 
	$DbObjCmd
(*
cd
, 
T˛_I¡îp
 *
öãΩ
, 
objc
,
T˛_Obj
 *c⁄°*
objv
){

662 
SqlôeDb
 *
pDb
 = (SqlôeDb*)
cd
;

663 
choi˚
;

664 
rc
 = 
TCL_OK
;

665 c⁄° *
DB_°rs
[] = {

677 
	eDB_íum
 {

678 
DB_AUTHORIZER
, 
DB_BUSY
, 
DB_CACHE
,

679 
DB_CHANGES
, 
DB_CLOSE
, 
DB_COLLATE
,

680 
DB_COLLATION_NEEDED
, 
DB_COMMIT_HOOK
, 
DB_COMPLETE
,

681 
DB_COPY
, 
DB_ERRORCODE
, 
DB_EVAL
,

682 
DB_EXISTS
, 
DB_FUNCTION
, 
DB_LAST_INSERT_ROWID
,

683 
DB_NULLVALUE
, 
DB_ONECOLUMN
, 
DB_PROFILE
,

684 
DB_PROGRESS
, 
DB_REKEY
, 
DB_ROLLBACK_HOOK
,

685 
DB_TIMEOUT
, 
DB_TOTAL_CHANGES
, 
DB_TRACE
,

686 
DB_TRANSACTION
, 
DB_UPDATE_HOOK
, 
DB_VERSION


690 if–
objc
<2 ){

691 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "SUBCOMMAND ...");

692  
TCL_ERROR
;

694 if–
	`T˛_GëIndexFromObj
(
öãΩ
, 
objv
[1], 
DB_°rs
, "›ti⁄", 0, &
choi˚
) ){

695  
TCL_ERROR
;

698  (
DB_íum
)
choi˚
 ){

718 
DB_AUTHORIZER
: {

719 #ifde‡
SQLITE_OMIT_AUTHORIZATION


720 
	`T˛_AµídResu…
(
öãΩ
, "authorizationÇotávailable inÅhis build", 0);

721  
TCL_ERROR
;

723 if–
objc
>3 ){

724 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "?CALLBACK?");

725  
TCL_ERROR
;

726 }if–
objc
==2 ){

727 if–
pDb
->
zAuth
 ){

728 
	`T˛_AµídResu…
(
öãΩ
, 
pDb
->
zAuth
, 0);

731 *
zAuth
;

732 
Àn
;

733 if–
pDb
->
zAuth
 ){

734 
	`T˛_Fªe
(
pDb
->
zAuth
);

736 
zAuth
 = 
	`T˛_GëSåögFromObj
(
objv
[2], &
Àn
);

737 if–
zAuth
 && 
Àn
>0 ){

738 
pDb
->
zAuth
 = 
	`T˛_AŒoc
–
Àn
 + 1 );

739 
	`°r˝y
(
pDb
->
zAuth
, zAuth);

741 
pDb
->
zAuth
 = 0;

743 if–
pDb
->
zAuth
 ){

744 
pDb
->
öãΩ
 = interp;

745 
	`sqlôe3_£t_auth‹izî
(
pDb
->
db
, 
auth_ˇŒback
,ÖDb);

747 
	`sqlôe3_£t_auth‹izî
(
pDb
->
db
, 0, 0);

759 
DB_BUSY
: {

760 if–
objc
>3 ){

761 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "CALLBACK");

762  
TCL_ERROR
;

763 }if–
objc
==2 ){

764 if–
pDb
->
zBusy
 ){

765 
	`T˛_AµídResu…
(
öãΩ
, 
pDb
->
zBusy
, 0);

768 *
zBusy
;

769 
Àn
;

770 if–
pDb
->
zBusy
 ){

771 
	`T˛_Fªe
(
pDb
->
zBusy
);

773 
zBusy
 = 
	`T˛_GëSåögFromObj
(
objv
[2], &
Àn
);

774 if–
zBusy
 && 
Àn
>0 ){

775 
pDb
->
zBusy
 = 
	`T˛_AŒoc
–
Àn
 + 1 );

776 
	`°r˝y
(
pDb
->
zBusy
, zBusy);

778 
pDb
->
zBusy
 = 0;

780 if–
pDb
->
zBusy
 ){

781 
pDb
->
öãΩ
 = interp;

782 
	`sqlôe3_busy_h™dÀr
(
pDb
->
db
, 
DbBusyH™dÀr
,ÖDb);

784 
	`sqlôe3_busy_h™dÀr
(
pDb
->
db
, 0, 0);

796 
DB_CACHE
: {

797 *
subCmd
;

798 
n
;

800 if–
objc
<=2 ){

801 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "cache option ?arg?");

802  
TCL_ERROR
;

804 
subCmd
 = 
	`T˛_GëSåögFromObj
–
objv
[2], 0 );

805 if–*
subCmd
=='f' && 
	`°rcmp
(subCmd,"flush")==0 ){

806 if–
objc
!=3 ){

807 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "flush");

808  
TCL_ERROR
;

810 
	`ÊushStmtCache
–
pDb
 );

812 }if–*
subCmd
=='s' && 
	`°rcmp
(subCmd,"size")==0 ){

813 if–
objc
!=4 ){

814 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "sizeÇ");

815  
TCL_ERROR
;

817 if–
TCL_ERROR
==
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[3], &
n
) ){

818 
	`T˛_AµídResu…
–
öãΩ
, "cannot convert \"",

819 
	`T˛_GëSåögFromObj
(
objv
[3],0), "\"Åo integer", 0);

820  
TCL_ERROR
;

822 if–
n
<0 ){

823 
	`ÊushStmtCache
–
pDb
 );

824 
n
 = 0;

825 }if–
n
>
MAX_PREPARED_STMTS
 ){

826 
n
 = 
MAX_PREPARED_STMTS
;

828 
pDb
->
maxStmt
 = 
n
;

832 
	`T˛_AµídResu…
–
öãΩ
, "bad option \"",

833 
	`T˛_GëSåögFromObj
(
objv
[0],0), "\": must be flush or size", 0);

834  
TCL_ERROR
;

845 
DB_CHANGES
: {

846 
T˛_Obj
 *
pResu…
;

847 if–
objc
!=2 ){

848 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "");

849  
TCL_ERROR
;

851 
pResu…
 = 
	`T˛_GëObjResu…
(
öãΩ
);

852 
	`T˛_SëI¡Obj
(
pResu…
, 
	`sqlôe3_ch™ges
(
pDb
->
db
));

860 
DB_CLOSE
: {

861 
	`T˛_DñëeComm™d
(
öãΩ
, 
	`T˛_GëSåögFromObj
(
objv
[0], 0));

871 
DB_COLLATE
: {

872 
SqlCﬁœã
 *
pCﬁœã
;

873 *
zName
;

874 *
zS¸ùt
;

875 
nS¸ùt
;

876 if–
objc
!=4 ){

877 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "NAME SCRIPT");

878  
TCL_ERROR
;

880 
zName
 = 
	`T˛_GëSåögFromObj
(
objv
[2], 0);

881 
zS¸ùt
 = 
	`T˛_GëSåögFromObj
(
objv
[3], &
nS¸ùt
);

882 
pCﬁœã
 = (
SqlCﬁœã
*)
	`T˛_AŒoc
–(*pCﬁœãË+ 
nS¸ùt
 + 1 );

883 if–
pCﬁœã
==0 )  
TCL_ERROR
;

884 
pCﬁœã
->
öãΩ
 = interp;

885 
pCﬁœã
->
pNext
 = 
pDb
->pCollate;

886 
pCﬁœã
->
zS¸ùt
 = (*)&pCollate[1];

887 
pDb
->
pCﬁœã
 =ÖCollate;

888 
	`°r˝y
(
pCﬁœã
->
zS¸ùt
, zScript);

889 if–
	`sqlôe3_¸óã_cﬁœti⁄
(
pDb
->
db
, 
zName
, 
SQLITE_UTF8
,

890 
pCﬁœã
, 
t˛SqlCﬁœã
) ){

891 
	`T˛_SëResu…
(
öãΩ
, (*)
	`sqlôe3_îrmsg
(
pDb
->
db
), 
TCL_VOLATILE
);

892  
TCL_ERROR
;

903 
DB_COLLATION_NEEDED
: {

904 if–
objc
!=3 ){

905 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "SCRIPT");

906  
TCL_ERROR
;

908 if–
pDb
->
pCﬁœãNìded
 ){

909 
	`T˛_De¸RefCou¡
(
pDb
->
pCﬁœãNìded
);

911 
pDb
->
pCﬁœãNìded
 = 
	`T˛_Du∂iˇãObj
(
objv
[2]);

912 
	`T˛_In¸RefCou¡
(
pDb
->
pCﬁœãNìded
);

913 
	`sqlôe3_cﬁœti⁄_√eded
(
pDb
->
db
,ÖDb, 
t˛CﬁœãNìded
);

924 
DB_COMMIT_HOOK
: {

925 if–
objc
>3 ){

926 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "?CALLBACK?");

927  
TCL_ERROR
;

928 }if–
objc
==2 ){

929 if–
pDb
->
zCommô
 ){

930 
	`T˛_AµídResu…
(
öãΩ
, 
pDb
->
zCommô
, 0);

933 *
zCommô
;

934 
Àn
;

935 if–
pDb
->
zCommô
 ){

936 
	`T˛_Fªe
(
pDb
->
zCommô
);

938 
zCommô
 = 
	`T˛_GëSåögFromObj
(
objv
[2], &
Àn
);

939 if–
zCommô
 && 
Àn
>0 ){

940 
pDb
->
zCommô
 = 
	`T˛_AŒoc
–
Àn
 + 1 );

941 
	`°r˝y
(
pDb
->
zCommô
, zCommit);

943 
pDb
->
zCommô
 = 0;

945 if–
pDb
->
zCommô
 ){

946 
pDb
->
öãΩ
 = interp;

947 
	`sqlôe3_commô_hook
(
pDb
->
db
, 
DbCommôH™dÀr
,ÖDb);

949 
	`sqlôe3_commô_hook
(
pDb
->
db
, 0, 0);

961 
DB_COMPLETE
: {

962 #i‚de‡
SQLITE_OMIT_COMPLETE


963 
T˛_Obj
 *
pResu…
;

964 
isCom∂ëe
;

965 if–
objc
!=3 ){

966 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "SQL");

967  
TCL_ERROR
;

969 
isCom∂ëe
 = 
	`sqlôe3_com∂ëe
–
	`T˛_GëSåögFromObj
(
objv
[2], 0) );

970 
pResu…
 = 
	`T˛_GëObjResu…
(
öãΩ
);

971 
	`T˛_SëBoﬁónObj
(
pResu…
, 
isCom∂ëe
);

993 
DB_COPY
: {

994 *
zTabÀ
;

995 *
zFûe
;

996 *
zC⁄Êi˘
;

997 
sqlôe3_°mt
 *
pStmt
;

998 
rc
;

999 
nCﬁ
;

1000 
nByã
;

1001 
i
, 
j
;

1002 
nSï
;

1003 
nNuŒ
;

1004 *
zSql
;

1005 *
zLöe
;

1006 **
azCﬁ
;

1007 *
zCommô
;

1008 
FILE
 *
ö
;

1009 
löío
 = 0;

1010 
zLöeNum
[80];

1011 
T˛_Obj
 *
pResu…
;

1013 *
zSï
;

1014 *
zNuŒ
;

1015 if–
objc
<5 || objc>7 ){

1016 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
,

1018  
TCL_ERROR
;

1020 if–
objc
>=6 ){

1021 
zSï
 = 
	`T˛_GëSåögFromObj
(
objv
[5], 0);

1023 
zSï
 = "\t";

1025 if–
objc
>=7 ){

1026 
zNuŒ
 = 
	`T˛_GëSåögFromObj
(
objv
[6], 0);

1028 
zNuŒ
 = "";

1030 
zC⁄Êi˘
 = 
	`T˛_GëSåögFromObj
(
objv
[2], 0);

1031 
zTabÀ
 = 
	`T˛_GëSåögFromObj
(
objv
[3], 0);

1032 
zFûe
 = 
	`T˛_GëSåögFromObj
(
objv
[4], 0);

1033 
nSï
 = 
	`°æí
(
zSï
);

1034 
nNuŒ
 = 
	`°æí
(
zNuŒ
);

1035 if–
nSï
==0 ){

1036 
	`T˛_AµídResu…
(
öãΩ
, "Error:Çon-null separatorÑequired for copy", 0);

1037  
TCL_ERROR
;

1039 if(
	`sqlôe3SåICmp
(
zC⁄Êi˘
, "rollback") != 0 &&

1040 
	`sqlôe3SåICmp
(
zC⁄Êi˘
, "abort" ) != 0 &&

1041 
	`sqlôe3SåICmp
(
zC⁄Êi˘
, "fail" ) != 0 &&

1042 
	`sqlôe3SåICmp
(
zC⁄Êi˘
, "ignore" ) != 0 &&

1043 
	`sqlôe3SåICmp
(
zC⁄Êi˘
, "replace" ) != 0 ) {

1044 
	`T˛_AµídResu…
(
öãΩ
, "Eº‹: \"", 
zC⁄Êi˘
,

1047  
TCL_ERROR
;

1049 
zSql
 = 
	`sqlôe3_m¥ötf
("SELECT * FROM '%q'", 
zTabÀ
);

1050 if–
zSql
==0 ){

1051 
	`T˛_AµídResu…
(
öãΩ
, "Eº‹:ÇÿsuchÅabÀ: ", 
zTabÀ
, 0);

1052  
TCL_ERROR
;

1054 
nByã
 = 
	`°æí
(
zSql
);

1055 
rc
 = 
	`sqlôe3_¥ï¨e
(
pDb
->
db
, 
zSql
, 0, &
pStmt
, 0);

1056 
	`sqlôe3_‰ì
(
zSql
);

1057 if–
rc
 ){

1058 
	`T˛_AµídResu…
(
öãΩ
, "Eº‹: ", 
	`sqlôe3_îrmsg
(
pDb
->
db
), 0);

1059 
nCﬁ
 = 0;

1061 
nCﬁ
 = 
	`sqlôe3_cﬁumn_cou¡
(
pStmt
);

1063 
	`sqlôe3_föÆize
(
pStmt
);

1064 if–
nCﬁ
==0 ) {

1065  
TCL_ERROR
;

1067 
zSql
 = 
	`mÆloc
–
nByã
 + 50 + 
nCﬁ
*2 );

1068 if–
zSql
==0 ) {

1069 
	`T˛_AµídResu…
(
öãΩ
, "Error: can't malloc()", 0);

1070  
TCL_ERROR
;

1072 
	`sqlôe3_¢¥ötf
(
nByã
+50, 
zSql
, "INSERT OR %q INTO '%q' VALUES(?",

1073 
zC⁄Êi˘
, 
zTabÀ
);

1074 
j
 = 
	`°æí
(
zSql
);

1075 
i
=1; i<
nCﬁ
; i++){

1076 
zSql
[
j
++] = ',';

1077 
zSql
[
j
++] = '?';

1079 
zSql
[
j
++] = ')';

1080 
zSql
[
j
] = 0;

1081 
rc
 = 
	`sqlôe3_¥ï¨e
(
pDb
->
db
, 
zSql
, 0, &
pStmt
, 0);

1082 
	`‰ì
(
zSql
);

1083 if–
rc
 ){

1084 
	`T˛_AµídResu…
(
öãΩ
, "Eº‹: ", 
	`sqlôe3_îrmsg
(
pDb
->
db
), 0);

1085 
	`sqlôe3_föÆize
(
pStmt
);

1086  
TCL_ERROR
;

1088 
ö
 = 
	`f›í
(
zFûe
, "rb");

1089 if–
ö
==0 ){

1090 
	`T˛_AµídResu…
(
öãΩ
, "Eº‹: c™nŸ o≥¿fûe: ", 
zFûe
, 
NULL
);

1091 
	`sqlôe3_föÆize
(
pStmt
);

1092  
TCL_ERROR
;

1094 
azCﬁ
 = 
	`mÆloc
–◊zCﬁ[0])*(
nCﬁ
+1) );

1095 if–
azCﬁ
==0 ) {

1096 
	`T˛_AµídResu…
(
öãΩ
, "Error: can't malloc()", 0);

1097  
TCL_ERROR
;

1099 
	`sqlôe3_exec
(
pDb
->
db
, "BEGIN", 0, 0, 0);

1100 
zCommô
 = "COMMIT";

1101  (
zLöe
 = 
	`loˇl_gëlöe
(0, 
ö
))!=0 ){

1102 *
z
;

1103 
i
 = 0;

1104 
löío
++;

1105 
azCﬁ
[0] = 
zLöe
;

1106 
i
=0, 
z
=
zLöe
; *z; z++){

1107 if–*
z
==
zSï
[0] && 
	`°∫cmp
(z, zSï, 
nSï
)==0 ){

1108 *
z
 = 0;

1109 
i
++;

1110 if–
i
<
nCﬁ
 ){

1111 
azCﬁ
[
i
] = &
z
[
nSï
];

1112 
z
 +
nSï
-1;

1116 if–
i
+1!=
nCﬁ
 ){

1117 *
zEº
;

1118 
zEº
 = 
	`mÆloc
(200 + 
	`°æí
(
zFûe
));

1119 
	`•rötf
(
zEº
,"Error: %sÜine %d:Éxpected %d columns of data but found %d",

1120 
zFûe
, 
löío
, 
nCﬁ
, 
i
+1);

1121 
	`T˛_AµídResu…
(
öãΩ
, 
zEº
, 0);

1122 
	`‰ì
(
zEº
);

1123 
zCommô
 = "ROLLBACK";

1126 
i
=0; i<
nCﬁ
; i++){

1128 i‡((
nNuŒ
>0 && 
	`°rcmp
(
azCﬁ
[
i
], 
zNuŒ
)==0Ë|| 
	`°æí
(azCol[i])==0) {

1129 
	`sqlôe3_böd_nuŒ
(
pStmt
, 
i
+1);

1131 
	`sqlôe3_böd_ãxt
(
pStmt
, 
i
+1, 
azCﬁ
[i], -1, 
SQLITE_STATIC
);

1134 
	`sqlôe3_°ï
(
pStmt
);

1135 
rc
 = 
	`sqlôe3_ª£t
(
pStmt
);

1136 
	`‰ì
(
zLöe
);

1137 if–
rc
!=
SQLITE_OK
 ){

1138 
	`T˛_AµídResu…
(
öãΩ
,"Eº‹: ", 
	`sqlôe3_îrmsg
(
pDb
->
db
), 0);

1139 
zCommô
 = "ROLLBACK";

1143 
	`‰ì
(
azCﬁ
);

1144 
	`f˛o£
(
ö
);

1145 
	`sqlôe3_föÆize
(
pStmt
);

1146 
	`sqlôe3_exec
(
pDb
->
db
, 
zCommô
, 0, 0, 0);

1148 if–
zCommô
[0] == 'C' ){

1150 
pResu…
 = 
	`T˛_GëObjResu…
(
öãΩ
);

1151 
	`T˛_SëI¡Obj
(
pResu…
, 
löío
);

1152 
rc
 = 
TCL_OK
;

1155 
	`•rötf
(
zLöeNum
,"%d",
löío
);

1156 
	`T˛_AµídResu…
(
öãΩ
,", faûed whûê¥o˚ssögÜöe: ",
zLöeNum
,0);

1157 
rc
 = 
TCL_ERROR
;

1168 
DB_ERRORCODE
: {

1169 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
	`sqlôe3_îrcode
(
pDb
->
db
)));

1186 
DB_ONECOLUMN
:

1187 
DB_EVAL
:

1188 
DB_EXISTS
: {

1189 c⁄° *
zSql
;

1190 c⁄° *
zLe·
;

1191 
sqlôe3_°mt
 *
pStmt
;

1192 
T˛_Obj
 *
pAºay
;

1193 
T˛_Obj
 *
pS¸ùt
;

1194 
T˛_Obj
 **
≠P¨m
;

1195 
nP¨m
;

1196 
T˛_Obj
 *
aP¨m
[10];

1197 
T˛_Obj
 *
pRë
;

1198 
SqlPª∑ªdStmt
 *
pPªStmt
;

1199 
rc2
;

1201 if–
choi˚
==
DB_EVAL
 ){

1202 if–
objc
<3 || objc>5 ){

1203 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "SQL ?ARRAY-NAME? ?SCRIPT?");

1204  
TCL_ERROR
;

1206 
pRë
 = 
	`T˛_NewObj
();

1207 
	`T˛_In¸RefCou¡
(
pRë
);

1209 if–
objc
!=3 ){

1210 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "SQL");

1211  
TCL_ERROR
;

1213 if–
choi˚
==
DB_EXISTS
 ){

1214 
pRë
 = 
	`T˛_NewBoﬁónObj
(0);

1215 
	`T˛_In¸RefCou¡
(
pRë
);

1217 
pRë
 = 0;

1220 if–
objc
==3 ){

1221 
pAºay
 = 
pS¸ùt
 = 0;

1222 }if–
objc
==4 ){

1223 
pAºay
 = 0;

1224 
pS¸ùt
 = 
objv
[3];

1226 
pAºay
 = 
objv
[3];

1227 if–
	`T˛_GëSåög
(
pAºay
)[0]==0 )ÖArray = 0;

1228 
pS¸ùt
 = 
objv
[4];

1231 
	`T˛_In¸RefCou¡
(
objv
[2]);

1232 
zSql
 = 
	`T˛_GëSåögFromObj
(
objv
[2], 0);

1233  
rc
==
TCL_OK
 && 
zSql
[0] ){

1234 
i
;

1235 
nV¨
;

1236 
nCﬁ
;

1237 
T˛_Obj
 **
≠CﬁName
 = 0;

1238 
Àn
;

1243 
pStmt
 = 0;

1244 
pPªStmt
 = 
pDb
->
°mtLi°
;

1245 
Àn
 = 
	`°æí
(
zSql
);

1246 if–
pPªStmt
 && 
	`sqlôe3_expúed
’PªStmt->
pStmt
) ){

1247 
	`ÊushStmtCache
(
pDb
);

1248 
pPªStmt
 = 0;

1250 ; 
pPªStmt
;ÖPªStmtıPªStmt->
pNext
){

1251 
n
 = 
pPªStmt
->
nSql
;

1252 if–
Àn
>=
n


1253 && 
	`memcmp
(
pPªStmt
->
zSql
, zSql, 
n
)==0

1254 && (
zSql
[
n
]==0 || zSql[n-1]==';')

1256 
pStmt
 = 
pPªStmt
->pStmt;

1257 
zLe·
 = &
zSql
[
pPªStmt
->
nSql
];

1263 if–
pPªStmt
->
pPªv
 ){

1264 
pPªStmt
->
pPªv
->
pNext
 =ÖPreStmt->pNext;

1266 
pDb
->
°mtLi°
 = 
pPªStmt
->
pNext
;

1268 if–
pPªStmt
->
pNext
 ){

1269 
pPªStmt
->
pNext
->
pPªv
 =ÖPreStmt->pPrev;

1271 
pDb
->
°mtLa°
 = 
pPªStmt
->
pPªv
;

1273 
pDb
->
nStmt
--;

1280 if–
pStmt
==0 ){

1281 if–
SQLITE_OK
!=
	`sqlôe3_¥ï¨e
(
pDb
->
db
, 
zSql
, -1, &
pStmt
, &
zLe·
) ){

1282 
	`T˛_SëObjResu…
(
öãΩ
, 
	`dbTextToObj
(
	`sqlôe3_îrmsg
(
pDb
->
db
)));

1283 
rc
 = 
TCL_ERROR
;

1286 if–
pStmt
==0 ){

1287 if–
SQLITE_OK
!=
	`sqlôe3_îrcode
(
pDb
->
db
) ){

1290 
	`T˛_SëObjResu…
(
öãΩ
, 
	`dbTextToObj
(
	`sqlôe3_îrmsg
(
pDb
->
db
)));

1291 
rc
 = 
TCL_ERROR
;

1297 
zSql
 = 
zLe·
;

1301 
	`as£π
–
pPªStmt
==0 );

1306 
nV¨
 = 
	`sqlôe3_böd_∑ømëî_cou¡
(
pStmt
);

1307 
nP¨m
 = 0;

1308 if–
nV¨
>(
aP¨m
)/(aParm[0]) ){

1309 
≠P¨m
 = (
T˛_Obj
**)
	`T˛_AŒoc
(
nV¨
*(apParm[0]));

1311 
≠P¨m
 = 
aP¨m
;

1313 
i
=1; i<=
nV¨
; i++){

1314 c⁄° *
zV¨
 = 
	`sqlôe3_böd_∑ømëî_«me
(
pStmt
, 
i
);

1315 if–
zV¨
!=0 && (zVar[0]=='$' || zVar[0]==':') ){

1316 
T˛_Obj
 *
pV¨
 = 
	`T˛_GëV¨2Ex
(
öãΩ
, &
zV¨
[1], 0, 0);

1317 if–
pV¨
 ){

1318 
n
;

1319 
u8
 *
d©a
;

1320 *
zTy≥
 = 
pV¨
->
ty≥På
 ?ÖV¨->ty≥På->
«me
 : "";

1321 
c
 = 
zTy≥
[0];

1322 if–
c
=='b' && 
	`°rcmp
(
zTy≥
,"byã¨øy")==0 && 
pV¨
->
byãs
==0 ){

1325 
d©a
 = 
	`T˛_GëByãAºayFromObj
(
pV¨
, &
n
);

1326 
	`sqlôe3_böd_blob
(
pStmt
, 
i
, 
d©a
, 
n
, 
SQLITE_STATIC
);

1327 
	`T˛_In¸RefCou¡
(
pV¨
);

1328 
≠P¨m
[
nP¨m
++] = 
pV¨
;

1329 }if–(
c
=='b' && 
	`°rcmp
(
zTy≥
,"boolean")==0) ||

1330 (
c
=='i' && 
	`°rcmp
(
zTy≥
,"int")==0) ){

1331 
	`T˛_GëI¡FromObj
(
öãΩ
, 
pV¨
, &
n
);

1332 
	`sqlôe3_böd_öt
(
pStmt
, 
i
, 
n
);

1333 }if–
c
=='d' && 
	`°rcmp
(
zTy≥
,"double")==0 ){

1334 
r
;

1335 
	`T˛_GëDoubÀFromObj
(
öãΩ
, 
pV¨
, &
r
);

1336 
	`sqlôe3_böd_doubÀ
(
pStmt
, 
i
, 
r
);

1337 }if–
c
=='w' && 
	`°rcmp
(
zTy≥
,"wideInt")==0 ){

1338 
T˛_WideI¡
 
v
;

1339 
	`T˛_GëWideI¡FromObj
(
öãΩ
, 
pV¨
, &
v
);

1340 
	`sqlôe3_böd_öt64
(
pStmt
, 
i
, 
v
);

1342 
d©a
 = (*)
	`T˛_GëSåögFromObj
(
pV¨
, &
n
);

1343 
	`sqlôe3_böd_ãxt
(
pStmt
, 
i
, (*)
d©a
, 
n
, 
SQLITE_STATIC
);

1344 
	`T˛_In¸RefCou¡
(
pV¨
);

1345 
≠P¨m
[
nP¨m
++] = 
pV¨
;

1348 
	`sqlôe3_böd_nuŒ
–
pStmt
, 
i
 );

1354 
nCﬁ
 = 
	`sqlôe3_cﬁumn_cou¡
(
pStmt
);

1355 if–
pS¸ùt
 ){

1356 
≠CﬁName
 = (
T˛_Obj
**)
	`T˛_AŒoc
–(T˛_Obj*)*
nCﬁ
 );

1357 if–
≠CﬁName
==0 ) ;

1358 
i
=0; i<
nCﬁ
; i++){

1359 
≠CﬁName
[
i
] = 
	`dbTextToObj
(
	`sqlôe3_cﬁumn_«me
(
pStmt
,i));

1360 
	`T˛_In¸RefCou¡
(
≠CﬁName
[
i
]);

1367 if–
pAºay
 ){

1368 
T˛_Obj
 *
pCﬁLi°
 = 
	`T˛_NewObj
();

1369 
T˛_Obj
 *
pSèr
 = 
	`T˛_NewSåögObj
("*", -1);

1370 
	`T˛_In¸RefCou¡
(
pCﬁLi°
);

1371 
i
=0; i<
nCﬁ
; i++){

1372 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pCﬁLi°
, 
≠CﬁName
[
i
]);

1374 
	`T˛_ObjSëV¨2
(
öãΩ
, 
pAºay
, 
pSèr
, 
pCﬁLi°
,0);

1375 
	`T˛_De¸RefCou¡
(
pCﬁLi°
);

1376 
	`T˛_De¸RefCou¡
(
pSèr
);

1381  
rc
==
TCL_OK
 && 
pStmt
 && 
SQLITE_ROW
==
	`sqlôe3_°ï
(pStmt) ){

1382 
i
=0; i<
nCﬁ
; i++){

1383 
T˛_Obj
 *
pVÆ
;

1386  
	`sqlôe3_cﬁumn_ty≥
(
pStmt
, 
i
) ){

1387 
SQLITE_BLOB
: {

1388 
byãs
 = 
	`sqlôe3_cﬁumn_byãs
(
pStmt
, 
i
);

1389 
pVÆ
 = 
	`T˛_NewByãAºayObj
(
	`sqlôe3_cﬁumn_blob
(
pStmt
, 
i
), 
byãs
);

1392 
SQLITE_INTEGER
: {

1393 
sqlôe_öt64
 
v
 = 
	`sqlôe3_cﬁumn_öt64
(
pStmt
, 
i
);

1394 if–
v
>=-2147483647 && v<=2147483647 ){

1395 
pVÆ
 = 
	`T˛_NewI¡Obj
(
v
);

1397 
pVÆ
 = 
	`T˛_NewWideI¡Obj
(
v
);

1401 
SQLITE_FLOAT
: {

1402 
r
 = 
	`sqlôe3_cﬁumn_doubÀ
(
pStmt
, 
i
);

1403 
pVÆ
 = 
	`T˛_NewDoubÀObj
(
r
);

1406 
SQLITE_NULL
: {

1407 
pVÆ
 = 
	`dbTextToObj
(
pDb
->
zNuŒ
);

1411 
pVÆ
 = 
	`dbTextToObj
((*)
	`sqlôe3_cﬁumn_ãxt
(
pStmt
, 
i
));

1416 if–
pS¸ùt
 ){

1417 if–
pAºay
==0 ){

1418 
	`T˛_ObjSëV¨2
(
öãΩ
, 
≠CﬁName
[
i
], 0, 
pVÆ
, 0);

1420 
	`T˛_ObjSëV¨2
(
öãΩ
, 
pAºay
, 
≠CﬁName
[
i
], 
pVÆ
, 0);

1422 }if–
choi˚
==
DB_ONECOLUMN
 ){

1423 
	`as£π
–
pRë
==0 );

1424 if–
pRë
==0 ){

1425 
pRë
 = 
pVÆ
;

1426 
	`T˛_In¸RefCou¡
(
pRë
);

1428 
rc
 = 
TCL_BREAK
;

1429 
i
 = 
nCﬁ
;

1430 }if–
choi˚
==
DB_EXISTS
 ){

1431 
	`T˛_De¸RefCou¡
(
pRë
);

1432 
pRë
 = 
	`T˛_NewBoﬁónObj
(1);

1433 
	`T˛_In¸RefCou¡
(
pRë
);

1434 
rc
 = 
TCL_BREAK
;

1435 
i
 = 
nCﬁ
;

1437 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pRë
, 
pVÆ
);

1441 if–
pS¸ùt
 ){

1442 
rc
 = 
	`T˛_EvÆObjEx
(
öãΩ
, 
pS¸ùt
, 0);

1443 if–
rc
==
TCL_CONTINUE
 ){

1444 
rc
 = 
TCL_OK
;

1448 if–
rc
==
TCL_BREAK
 ){

1449 
rc
 = 
TCL_OK
;

1453 if–
pS¸ùt
 ){

1454 
i
=0; i<
nCﬁ
; i++){

1455 
	`T˛_De¸RefCou¡
(
≠CﬁName
[
i
]);

1457 
	`T˛_Fªe
((*)
≠CﬁName
);

1461 
i
=0; i<
nP¨m
; i++){

1462 
	`T˛_De¸RefCou¡
(
≠P¨m
[
i
]);

1464 if–
≠P¨m
!=
aP¨m
 ){

1465 
	`T˛_Fªe
((*)
≠P¨m
);

1471 
rc2
 = 
	`sqlôe3_ª£t
(
pStmt
);

1472 if–
SQLITE_SCHEMA
==
rc2
 ){

1476 
	`ÊushStmtCache
–
pDb
 );

1477 
	`sqlôe3_föÆize
(
pStmt
);

1478 if–
pPªStmt
 ) 
	`T˛_Fªe
((*)pPreStmt);

1480 }if–
SQLITE_OK
!=
rc2
 ){

1484 
	`T˛_SëObjResu…
(
öãΩ
, 
	`dbTextToObj
(
	`sqlôe3_îrmsg
(
pDb
->
db
)));

1485 
	`sqlôe3_föÆize
(
pStmt
);

1486 
rc
 = 
TCL_ERROR
;

1487 if–
pPªStmt
 ) 
	`T˛_Fªe
((*)pPreStmt);

1489 }if–
pDb
->
maxStmt
<=0 ){

1491 if–
pPªStmt
 ) 
	`T˛_Fªe
((*)pPreStmt);

1492 
	`sqlôe3_föÆize
(
pStmt
);

1498 if–
pPªStmt
==0 ){

1499 
Àn
 = 
zLe·
 - 
zSql
;

1500 
pPªStmt
 = (
SqlPª∑ªdStmt
*)
	`T˛_AŒoc
–(*pPªStmtË+ 
Àn
 );

1501 if–
pPªStmt
==0 )  
TCL_ERROR
;

1502 
pPªStmt
->
pStmt
 =ÖStmt;

1503 
pPªStmt
->
nSql
 = 
Àn
;

1504 
	`mem˝y
(
pPªStmt
->
zSql
, zSql, 
Àn
);

1505 
pPªStmt
->
zSql
[
Àn
] = 0;

1510 
pPªStmt
->
pNext
 = 
pDb
->
°mtLi°
;

1511 
pPªStmt
->
pPªv
 = 0;

1512 if–
pDb
->
°mtLi°
 ){

1513 
pDb
->
°mtLi°
->
pPªv
 = 
pPªStmt
;

1515 
pDb
->
°mtLi°
 = 
pPªStmt
;

1516 if–
pDb
->
°mtLa°
==0 ){

1517 
	`as£π
–
pDb
->
nStmt
==0 );

1518 
pDb
->
°mtLa°
 = 
pPªStmt
;

1520 
	`as£π
–
pDb
->
nStmt
>0 );

1522 
pDb
->
nStmt
++;

1527  
pDb
->
nStmt
>pDb->
maxStmt
 ){

1528 
	`sqlôe3_föÆize
(
pDb
->
°mtLa°
->
pStmt
);

1529 
pDb
->
°mtLa°
 =ÖDb->°mtLa°->
pPªv
;

1530 
	`T˛_Fªe
((*)
pDb
->
°mtLa°
->
pNext
);

1531 
pDb
->
°mtLa°
->
pNext
 = 0;

1532 
pDb
->
nStmt
--;

1537 
zSql
 = 
zLe·
;

1539 
	`T˛_De¸RefCou¡
(
objv
[2]);

1541 if–
pRë
 ){

1542 if–
rc
==
TCL_OK
 ){

1543 
	`T˛_SëObjResu…
(
öãΩ
, 
pRë
);

1545 
	`T˛_De¸RefCou¡
(
pRë
);

1556 
DB_FUNCTION
: {

1557 
SqlFunc
 *
pFunc
;

1558 
T˛_Obj
 *
pS¸ùt
;

1559 *
zName
;

1560 if–
objc
!=4 ){

1561 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "NAME SCRIPT");

1562  
TCL_ERROR
;

1564 
zName
 = 
	`T˛_GëSåögFromObj
(
objv
[2], 0);

1565 
pS¸ùt
 = 
objv
[3];

1566 
pFunc
 = 
	`födSqlFunc
(
pDb
, 
zName
);

1567 if–
pFunc
==0 )  
TCL_ERROR
;

1568 if–
pFunc
->
pS¸ùt
 ){

1569 
	`T˛_De¸RefCou¡
(
pFunc
->
pS¸ùt
);

1571 
pFunc
->
pS¸ùt
 =ÖScript;

1572 
	`T˛_In¸RefCou¡
(
pS¸ùt
);

1573 
pFunc
->
u£EvÆObjv
 = 
	`ß„ToU£EvÆObjv
(
öãΩ
, 
pS¸ùt
);

1574 
rc
 = 
	`sqlôe3_¸óã_fun˘i⁄
(
pDb
->
db
, 
zName
, -1, 
SQLITE_UTF8
,

1575 
pFunc
, 
t˛SqlFunc
, 0, 0);

1576 if–
rc
!=
SQLITE_OK
 ){

1577 
rc
 = 
TCL_ERROR
;

1578 
	`T˛_SëResu…
(
öãΩ
, (*)
	`sqlôe3_îrmsg
(
pDb
->
db
), 
TCL_VOLATILE
);

1581 
	`ÊushStmtCache
–
pDb
 );

1594 
DB_NULLVALUE
: {

1595 if–
objc
!=2 && objc!=3 ){

1596 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "NULLVALUE");

1597  
TCL_ERROR
;

1599 if–
objc
==3 ){

1600 
Àn
;

1601 *
zNuŒ
 = 
	`T˛_GëSåögFromObj
(
objv
[2], &
Àn
);

1602 if–
pDb
->
zNuŒ
 ){

1603 
	`T˛_Fªe
(
pDb
->
zNuŒ
);

1605 if–
zNuŒ
 && 
Àn
>0 ){

1606 
pDb
->
zNuŒ
 = 
	`T˛_AŒoc
–
Àn
 + 1 );

1607 
	`°∫˝y
(
pDb
->
zNuŒ
, zNuŒ, 
Àn
);

1608 
pDb
->
zNuŒ
[
Àn
] = '\0';

1610 
pDb
->
zNuŒ
 = 0;

1613 
	`T˛_SëObjResu…
(
öãΩ
, 
	`dbTextToObj
(
pDb
->
zNuŒ
));

1622 
DB_LAST_INSERT_ROWID
: {

1623 
T˛_Obj
 *
pResu…
;

1624 
rowid
;

1625 if–
objc
!=2 ){

1626 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "");

1627  
TCL_ERROR
;

1629 
rowid
 = 
	`sqlôe3_œ°_ö£π_rowid
(
pDb
->
db
);

1630 
pResu…
 = 
	`T˛_GëObjResu…
(
öãΩ
);

1631 
	`T˛_SëI¡Obj
(
pResu…
, 
rowid
);

1644 
DB_PROGRESS
: {

1645 if–
objc
==2 ){

1646 if–
pDb
->
zProgªss
 ){

1647 
	`T˛_AµídResu…
(
öãΩ
, 
pDb
->
zProgªss
, 0);

1649 }if–
objc
==4 ){

1650 *
zProgªss
;

1651 
Àn
;

1652 
N
;

1653 if–
TCL_OK
!=
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
N
) ){

1654  
TCL_ERROR
;

1656 if–
pDb
->
zProgªss
 ){

1657 
	`T˛_Fªe
(
pDb
->
zProgªss
);

1659 
zProgªss
 = 
	`T˛_GëSåögFromObj
(
objv
[3], &
Àn
);

1660 if–
zProgªss
 && 
Àn
>0 ){

1661 
pDb
->
zProgªss
 = 
	`T˛_AŒoc
–
Àn
 + 1 );

1662 
	`°r˝y
(
pDb
->
zProgªss
, zProgress);

1664 
pDb
->
zProgªss
 = 0;

1666 #i‚de‡
SQLITE_OMIT_PROGRESS_CALLBACK


1667 if–
pDb
->
zProgªss
 ){

1668 
pDb
->
öãΩ
 = interp;

1669 
	`sqlôe3_¥ogªss_h™dÀr
(
pDb
->
db
, 
N
, 
DbProgªssH™dÀr
,ÖDb);

1671 
	`sqlôe3_¥ogªss_h™dÀr
(
pDb
->
db
, 0, 0, 0);

1675 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "N CALLBACK");

1676  
TCL_ERROR
;

1687 
DB_PROFILE
: {

1688 if–
objc
>3 ){

1689 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "?CALLBACK?");

1690  
TCL_ERROR
;

1691 }if–
objc
==2 ){

1692 if–
pDb
->
zProfûe
 ){

1693 
	`T˛_AµídResu…
(
öãΩ
, 
pDb
->
zProfûe
, 0);

1696 *
zProfûe
;

1697 
Àn
;

1698 if–
pDb
->
zProfûe
 ){

1699 
	`T˛_Fªe
(
pDb
->
zProfûe
);

1701 
zProfûe
 = 
	`T˛_GëSåögFromObj
(
objv
[2], &
Àn
);

1702 if–
zProfûe
 && 
Àn
>0 ){

1703 
pDb
->
zProfûe
 = 
	`T˛_AŒoc
–
Àn
 + 1 );

1704 
	`°r˝y
(
pDb
->
zProfûe
, zProfile);

1706 
pDb
->
zProfûe
 = 0;

1708 #i‚de‡
SQLITE_OMIT_TRACE


1709 if–
pDb
->
zProfûe
 ){

1710 
pDb
->
öãΩ
 = interp;

1711 
	`sqlôe3_¥ofûe
(
pDb
->
db
, 
DbProfûeH™dÀr
,ÖDb);

1713 
	`sqlôe3_¥ofûe
(
pDb
->
db
, 0, 0);

1725 
DB_REKEY
: {

1726 
nKey
;

1727 *
pKey
;

1728 if–
objc
!=3 ){

1729 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "KEY");

1730  
TCL_ERROR
;

1732 
pKey
 = 
	`T˛_GëByãAºayFromObj
(
objv
[2], &
nKey
);

1733 #ifde‡
SQLITE_HAS_CODEC


1734 
rc
 = 
	`sqlôe3_ªkey
(
pDb
->
db
, 
pKey
, 
nKey
);

1735 if–
rc
 ){

1736 
	`T˛_AµídResu…
(
öãΩ
, 
	`sqlôe3EºSå
(
rc
), 0);

1737 
rc
 = 
TCL_ERROR
;

1748 
DB_TIMEOUT
: {

1749 
ms
;

1750 if–
objc
!=3 ){

1751 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "MILLISECONDS");

1752  
TCL_ERROR
;

1754 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
ms
ËË 
TCL_ERROR
;

1755 
	`sqlôe3_busy_timeout
(
pDb
->
db
, 
ms
);

1765 
DB_TOTAL_CHANGES
: {

1766 
T˛_Obj
 *
pResu…
;

1767 if–
objc
!=2 ){

1768 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "");

1769  
TCL_ERROR
;

1771 
pResu…
 = 
	`T˛_GëObjResu…
(
öãΩ
);

1772 
	`T˛_SëI¡Obj
(
pResu…
, 
	`sqlôe3_tŸÆ_ch™ges
(
pDb
->
db
));

1782 
DB_TRACE
: {

1783 if–
objc
>3 ){

1784 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "?CALLBACK?");

1785  
TCL_ERROR
;

1786 }if–
objc
==2 ){

1787 if–
pDb
->
zTø˚
 ){

1788 
	`T˛_AµídResu…
(
öãΩ
, 
pDb
->
zTø˚
, 0);

1791 *
zTø˚
;

1792 
Àn
;

1793 if–
pDb
->
zTø˚
 ){

1794 
	`T˛_Fªe
(
pDb
->
zTø˚
);

1796 
zTø˚
 = 
	`T˛_GëSåögFromObj
(
objv
[2], &
Àn
);

1797 if–
zTø˚
 && 
Àn
>0 ){

1798 
pDb
->
zTø˚
 = 
	`T˛_AŒoc
–
Àn
 + 1 );

1799 
	`°r˝y
(
pDb
->
zTø˚
, zTrace);

1801 
pDb
->
zTø˚
 = 0;

1803 #i‚de‡
SQLITE_OMIT_TRACE


1804 if–
pDb
->
zTø˚
 ){

1805 
pDb
->
öãΩ
 = interp;

1806 
	`sqlôe3_åa˚
(
pDb
->
db
, 
DbTø˚H™dÀr
,ÖDb);

1808 
	`sqlôe3_åa˚
(
pDb
->
db
, 0, 0);

1826 
DB_TRANSACTION
: {

1827 
öTøns
;

1828 
T˛_Obj
 *
pS¸ùt
;

1829 c⁄° *
zBegö
 = "BEGIN";

1830 if–
objc
!=3 && objc!=4 ){

1831 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "[TYPE] SCRIPT");

1832  
TCL_ERROR
;

1834 if–
objc
==3 ){

1835 
pS¸ùt
 = 
objv
[2];

1837 c⁄° *
TTYPE_°rs
[] = {

1840 
	eTTYPE_íum
 {

1841 
TTYPE_DEFERRED
, 
TTYPE_EXCLUSIVE
, 
TTYPE_IMMEDIATE


1843 
ây≥
;

1844 if–
	`T˛_GëIndexFromObj
(
öãΩ
, 
objv
[2], 
TTYPE_°rs
, "transactionÅype",

1845 0, &
ây≥
) ){

1846  
TCL_ERROR
;

1848  (
TTYPE_íum
)
ây≥
 ){

1849 
TTYPE_DEFERRED
: ; ;

1850 
TTYPE_EXCLUSIVE
: 
zBegö
 = "BEGIN EXCLUSIVE"; ;

1851 
TTYPE_IMMEDIATE
: 
zBegö
 = "BEGIN IMMEDIATE"; ;

1853 
pS¸ùt
 = 
objv
[3];

1855 
öTøns
 = !
	`sqlôe3_gë_autocommô
(
pDb
->
db
);

1856 if–!
öTøns
 ){

1857 
	`sqlôe3_exec
(
pDb
->
db
, 
zBegö
, 0, 0, 0);

1859 
rc
 = 
	`T˛_EvÆObjEx
(
öãΩ
, 
pS¸ùt
, 0);

1860 if–!
öTøns
 ){

1861 c⁄° *
zEnd
;

1862 if–
rc
==
TCL_ERROR
 ){

1863 
zEnd
 = "ROLLBACK";

1865 
zEnd
 = "COMMIT";

1867 
	`sqlôe3_exec
(
pDb
->
db
, 
zEnd
, 0, 0, 0);

1876 
DB_UPDATE_HOOK
:

1877 
DB_ROLLBACK_HOOK
: {

1882 
T˛_Obj
 **
µHook
;

1883 if–
choi˚
==
DB_UPDATE_HOOK
 ){

1884 
µHook
 = &
pDb
->
pUpd©eHook
;

1886 
µHook
 = &
pDb
->
pRﬁlbackHook
;

1889 if–
objc
!=2 && objc!=3 ){

1890 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 2, 
objv
, "?SCRIPT?");

1891  
TCL_ERROR
;

1893 if–*
µHook
 ){

1894 
	`T˛_SëObjResu…
(
öãΩ
, *
µHook
);

1895 if–
objc
==3 ){

1896 
	`T˛_De¸RefCou¡
(*
µHook
);

1897 *
µHook
 = 0;

1900 if–
objc
==3 ){

1901 
	`as£π
–!(*
µHook
) );

1902 if–
	`T˛_GëCh¨Lígth
(
objv
[2])>0 ){

1903 *
µHook
 = 
objv
[2];

1904 
	`T˛_In¸RefCou¡
(*
µHook
);

1908 
	`sqlôe3_upd©e_hook
(
pDb
->
db
, (pDb->
pUpd©eHook
?
DbUpd©eH™dÀr
:0),ÖDb);

1909 
	`sqlôe3_rﬁlback_hook
(
pDb
->
db
,’Db->
pRﬁlbackHook
?
DbRﬁlbackH™dÀr
:0),pDb);

1918 
DB_VERSION
: {

1919 
	`T˛_SëResu…
(
öãΩ
, (*)
	`sqlôe3_libvîsi⁄
(), 
TCL_STATIC
);

1925  
rc
;

1926 
	}
}

1959 
	$DbMaö
(*
cd
, 
T˛_I¡îp
 *
öãΩ
, 
objc
,
T˛_Obj
 *c⁄°*
objv
){

1960 
SqlôeDb
 *
p
;

1961 *
pKey
 = 0;

1962 
nKey
 = 0;

1963 c⁄° *
zArg
;

1964 *
zEºMsg
;

1965 c⁄° *
zFûe
;

1966 if–
objc
==2 ){

1967 
zArg
 = 
	`T˛_GëSåögFromObj
(
objv
[1], 0);

1968 if–
	`°rcmp
(
zArg
,"-version")==0 ){

1969 
	`T˛_AµídResu…
(
öãΩ
,
sqlôe3_vîsi⁄
,0);

1970  
TCL_OK
;

1972 if–
	`°rcmp
(
zArg
,"-has-codec")==0 ){

1973 #ifde‡
SQLITE_HAS_CODEC


1974 
	`T˛_AµídResu…
(
öãΩ
,"1",0);

1976 
	`T˛_AµídResu…
(
öãΩ
,"0",0);

1978  
TCL_OK
;

1980 if–
	`°rcmp
(
zArg
,"-tcl-uses-utf")==0 ){

1981 #ifde‡
TCL_UTF_MAX


1982 
	`T˛_AµídResu…
(
öãΩ
,"1",0);

1984 
	`T˛_AµídResu…
(
öãΩ
,"0",0);

1986  
TCL_OK
;

1989 if–
objc
==5 || objc==6 ){

1990 
zArg
 = 
	`T˛_GëSåögFromObj
(
objv
[
objc
-2], 0);

1991 if–
	`°rcmp
(
zArg
,"-key")==0 ){

1992 
pKey
 = 
	`T˛_GëByãAºayFromObj
(
objv
[
objc
-1], &
nKey
);

1993 
objc
 -= 2;

1996 if–
objc
!=3 && objc!=4 ){

1997 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
,

1998 #ifde‡
SQLITE_HAS_CODEC


2004  
TCL_ERROR
;

2006 
zEºMsg
 = 0;

2007 
p
 = (
SqlôeDb
*)
	`T˛_AŒoc
( (*p) );

2008 if–
p
==0 ){

2009 
	`T˛_SëResu…
(
öãΩ
, "mÆlo¯Áûed", 
TCL_STATIC
);

2010  
TCL_ERROR
;

2012 
	`mem£t
(
p
, 0, (*p));

2013 
zFûe
 = 
	`T˛_GëSåögFromObj
(
objv
[2], 0);

2014 
	`sqlôe3_›í
(
zFûe
, &
p
->
db
);

2015 if–
SQLITE_OK
!=
	`sqlôe3_îrcode
(
p
->
db
) ){

2016 
zEºMsg
 = 
	`°rdup
(
	`sqlôe3_îrmsg
(
p
->
db
));

2017 
	`sqlôe3_˛o£
(
p
->
db
);

2018 
p
->
db
 = 0;

2020 #ifde‡
SQLITE_HAS_CODEC


2021 
	`sqlôe3_key
(
p
->
db
, 
pKey
, 
nKey
);

2023 if–
p
->
db
==0 ){

2024 
	`T˛_SëResu…
(
öãΩ
, 
zEºMsg
, 
TCL_VOLATILE
);

2025 
	`T˛_Fªe
((*)
p
);

2026 
	`‰ì
(
zEºMsg
);

2027  
TCL_ERROR
;

2029 
p
->
maxStmt
 = 
NUM_PREPARED_STMTS
;

2030 
zArg
 = 
	`T˛_GëSåögFromObj
(
objv
[1], 0);

2031 
	`T˛_Cª©eObjComm™d
(
öãΩ
, 
zArg
, 
DbObjCmd
, (*)
p
, 
DbDñëeCmd
);

2036 #ifde‡
SQLITE_TEST


2038 
	`Md5_Regi°î
(
sqlôe3
*);

2039 #ifde‡
SQLITE_MEMDEBUG


2040 
mÆlocÁû
 = 
sqlôe3_iMÆlocFaû
;

2041 
sqlôe3_iMÆlocFaû
 = 0;

2043 
	`Md5_Regi°î
(
p
->
db
);

2044 #ifde‡
SQLITE_MEMDEBUG


2045 
sqlôe3_iMÆlocFaû
 = 
mÆlocÁû
;

2049 
p
->
öãΩ
 = interp;

2050  
TCL_OK
;

2051 
	}
}

2057 #i‚de‡
USE_TCL_STUBS


2058 #unde‡
T˛_InôStubs


2059 
	#T˛_InôStubs
(
a
,
b
,
c
)

	)

2067 #i‚de‡
PACKAGE_VERSION


2068 
	#PACKAGE_VERSION
 
SQLITE_VERSION


	)

2080 
EXTERN
 
	$Sqlôe3_Inô
(
T˛_I¡îp
 *
öãΩ
){

2081 
	`T˛_InôStubs
(
öãΩ
, "8.4", 0);

2082 
	`T˛_Cª©eObjComm™d
(
öãΩ
, "sqlôe3", (
T˛_ObjCmdProc
*)
DbMaö
, 0, 0);

2083 
	`T˛_PkgProvide
(
öãΩ
, "sqlôe3", 
PACKAGE_VERSION
);

2084 
	`T˛_Cª©eObjComm™d
(
öãΩ
, "sqlôe", (
T˛_ObjCmdProc
*)
DbMaö
, 0, 0);

2085 
	`T˛_PkgProvide
(
öãΩ
, "sqlôe", 
PACKAGE_VERSION
);

2086  
TCL_OK
;

2087 
	}
}

2088 
EXTERN
 
	$T˛sqlôe3_Inô
(
T˛_I¡îp
 *
öãΩ
){  
	`Sqlôe3_Inô
(öãΩ); 
	}
}

2089 
EXTERN
 
	$Sqlôe3_Sa„Inô
(
T˛_I¡îp
 *
öãΩ
){  
TCL_OK
; 
	}
}

2090 
EXTERN
 
	$T˛sqlôe3_Sa„Inô
(
T˛_I¡îp
 *
öãΩ
){  
TCL_OK
; 
	}
}

2092 #i‚de‡
SQLITE_3_SUFFIX_ONLY


2093 
EXTERN
 
	$Sqlôe_Inô
(
T˛_I¡îp
 *
öãΩ
){  
	`Sqlôe3_Inô
(öãΩ); 
	}
}

2094 
EXTERN
 
	$T˛sqlôe_Inô
(
T˛_I¡îp
 *
öãΩ
){  
	`Sqlôe3_Inô
(öãΩ); 
	}
}

2095 
EXTERN
 
	$Sqlôe_Sa„Inô
(
T˛_I¡îp
 *
öãΩ
){  
TCL_OK
; 
	}
}

2096 
EXTERN
 
	$T˛sqlôe_Sa„Inô
(
T˛_I¡îp
 *
öãΩ
){  
TCL_OK
; 
	}
}

2099 #ifde‡
TCLSH


2109 #i‡
TCLSH
==1

2110 
	gzMaölo›
[] =

2138 #i‡
TCLSH
==2

2139 
	gzMaölo›
[] =

2140 
	~"•a˚™Æ_t˛.h
"

2144 
	#TCLSH_MAIN
 
maö


	)

2145 
	$TCLSH_MAIN
(
¨gc
, **
¨gv
){

2146 
T˛_I¡îp
 *
öãΩ
;

2147 
	`T˛_FödExecuèbÀ
(
¨gv
[0]);

2148 
öãΩ
 = 
	`T˛_Cª©eI¡îp
();

2149 
	`Sqlôe3_Inô
(
öãΩ
);

2150 #ifde‡
SQLITE_TEST


2152 
	`Sqlôëe°1_Inô
(
T˛_I¡îp
*);

2153 
	`Sqlôëe°2_Inô
(
T˛_I¡îp
*);

2154 
	`Sqlôëe°3_Inô
(
T˛_I¡îp
*);

2155 
	`Sqlôëe°4_Inô
(
T˛_I¡îp
*);

2156 
	`Sqlôëe°5_Inô
(
T˛_I¡îp
*);

2157 
	`Sqlôëe°6_Inô
(
T˛_I¡îp
*);

2158 
	`Sqlôëe°7_Inô
(
T˛_I¡îp
*);

2159 
	`Md5_Inô
(
T˛_I¡îp
*);

2160 
	`Sqlôëe°s£_Inô
(
T˛_I¡îp
*);

2161 
	`Sqlôëe°async_Inô
(
T˛_I¡îp
*);

2163 
	`Sqlôëe°1_Inô
(
öãΩ
);

2164 
	`Sqlôëe°2_Inô
(
öãΩ
);

2165 
	`Sqlôëe°3_Inô
(
öãΩ
);

2166 
	`Sqlôëe°4_Inô
(
öãΩ
);

2167 
	`Sqlôëe°5_Inô
(
öãΩ
);

2168 
	`Sqlôëe°6_Inô
(
öãΩ
);

2169 
	`Sqlôëe°7_Inô
(
öãΩ
);

2170 
	`Sqlôëe°async_Inô
(
öãΩ
);

2171 
	`Md5_Inô
(
öãΩ
);

2172 #ifde‡
SQLITE_SSE


2173 
	`Sqlôëe°s£_Inô
(
öãΩ
);

2177 if–
¨gc
>=2 || 
TCLSH
==2 ){

2178 
i
;

2179 
	`T˛_SëV¨
(
öãΩ
,"¨gv0",
¨gv
[1],
TCL_GLOBAL_ONLY
);

2180 
	`T˛_SëV¨
(
öãΩ
,"¨gv", "", 
TCL_GLOBAL_ONLY
);

2181 
i
=3-
TCLSH
; i<
¨gc
; i++){

2182 
	`T˛_SëV¨
(
öãΩ
, "¨gv", 
¨gv
[
i
],

2183 
TCL_GLOBAL_ONLY
 | 
TCL_LIST_ELEMENT
 | 
TCL_APPEND_VALUE
);

2185 if–
TCLSH
==1 && 
	`T˛_EvÆFûe
(
öãΩ
, 
¨gv
[1])!=
TCL_OK
 ){

2186 c⁄° *
zInfo
 = 
	`T˛_GëV¨
(
öãΩ
, "îr‹Info", 
TCL_GLOBAL_ONLY
);

2187 if–
zInfo
==0 ) zInfÿ
öãΩ
->
ªsu…
;

2188 
	`Ârötf
(
°dîr
,"%s: %s\n", *
¨gv
, 
zInfo
);

2192 if–
¨gc
<=1 || 
TCLSH
==2 ){

2193 
	`T˛_GlobÆEvÆ
(
öãΩ
, 
zMaölo›
);

2196 
	}
}

	@test1.c

18 
	~"sqlôeI¡.h
"

19 
	~"t˛.h
"

20 
	~"os.h
"

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

30 
	sSqlôeDb
 {

31 
sqlôe3
 *
	mdb
;

39 
	$gë_sqlôe_poöãr
(

40 * 
˛õ¡D©a
,

41 
T˛_I¡îp
 *
öãΩ
,

42 
objc
,

43 
T˛_Obj
 *
CONST
 
objv
[]

45 
SqlôeDb
 *
p
;

46 
T˛_CmdInfo
 
cmdInfo
;

47 
zBuf
[100];

48 if–
objc
!=2 ){

49 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "SQLITE-CONNECTION");

50  
TCL_ERROR
;

52 if–!
	`T˛_GëComm™dInfo
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
cmdInfo
) ){

53 
	`T˛_AµídResu…
(
öãΩ
, "commandÇot found: ",

54 
	`T˛_GëSåög
(
objv
[1]), (*)0);

55  
TCL_ERROR
;

57 
p
 = (
SqlôeDb
*)
cmdInfo
.
objClõ¡D©a
;

58 
	`•rötf
(
zBuf
, "%p", 
p
->
db
);

59 if–
	`°∫cmp
(
zBuf
,"0x",2) ){

60 
	`•rötf
(
zBuf
, "0x%p", 
p
->
db
);

62 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

63  
TCL_OK
;

64 
	}
}

66 c⁄° *
	$sqlôe3Te°Eº‹Name
(
rc
){

67 c⁄° *
zName
 = 0;

68  
rc
 ){

69 
SQLITE_OK
: 
zName
 = "SQLITE_OK"; ;

70 
SQLITE_ERROR
: 
zName
 = "SQLITE_ERROR"; ;

71 
SQLITE_PERM
: 
zName
 = "SQLITE_PERM"; ;

72 
SQLITE_ABORT
: 
zName
 = "SQLITE_ABORT"; ;

73 
SQLITE_BUSY
: 
zName
 = "SQLITE_BUSY"; ;

74 
SQLITE_LOCKED
: 
zName
 = "SQLITE_LOCKED"; ;

75 
SQLITE_NOMEM
: 
zName
 = "SQLITE_NOMEM"; ;

76 
SQLITE_READONLY
: 
zName
 = "SQLITE_READONLY"; ;

77 
SQLITE_INTERRUPT
: 
zName
 = "SQLITE_INTERRUPT"; ;

78 
SQLITE_IOERR
: 
zName
 = "SQLITE_IOERR"; ;

79 
SQLITE_CORRUPT
: 
zName
 = "SQLITE_CORRUPT"; ;

80 
SQLITE_FULL
: 
zName
 = "SQLITE_FULL"; ;

81 
SQLITE_CANTOPEN
: 
zName
 = "SQLITE_CANTOPEN"; ;

82 
SQLITE_PROTOCOL
: 
zName
 = "SQLITE_PROTOCOL"; ;

83 
SQLITE_EMPTY
: 
zName
 = "SQLITE_EMPTY"; ;

84 
SQLITE_SCHEMA
: 
zName
 = "SQLITE_SCHEMA"; ;

85 
SQLITE_CONSTRAINT
: 
zName
 = "SQLITE_CONSTRAINT"; ;

86 
SQLITE_MISMATCH
: 
zName
 = "SQLITE_MISMATCH"; ;

87 
SQLITE_MISUSE
: 
zName
 = "SQLITE_MISUSE"; ;

88 
SQLITE_NOLFS
: 
zName
 = "SQLITE_NOLFS"; ;

89 
SQLITE_AUTH
: 
zName
 = "SQLITE_AUTH"; ;

90 
SQLITE_FORMAT
: 
zName
 = "SQLITE_FORMAT"; ;

91 
SQLITE_RANGE
: 
zName
 = "SQLITE_RANGE"; ;

92 
SQLITE_ROW
: 
zName
 = "SQLITE_ROW"; ;

93 
SQLITE_DONE
: 
zName
 = "SQLITE_DONE"; ;

94 
SQLITE_NOTADB
: 
zName
 = "SQLITE_NOTADB"; ;

95 : 
zName
 = "SQLITE_Unknown"; ;

97  
zName
;

98 
	}
}

99 
	#îr‹Name
 
sqlôe3Te°Eº‹Name


	)

105 
	#StmtToDb
(
X
Ë
	`sqlôe3_db_h™dÀ
(X)

	)

111 
	$sqlôe3Te°EºCode
(
T˛_I¡îp
 *
öãΩ
, 
sqlôe3
 *
db
, 
rc
){

112 if–
rc
!=
SQLITE_MISUSE
 &&Ñc!=
SQLITE_OK
 && 
	`sqlôe3_îrcode
(
db
)!=rc ){

113 
zBuf
[200];

114 
r2
 = 
	`sqlôe3_îrcode
(
db
);

115 
	`•rötf
(
zBuf
, "error code %s (%d) doesÇot match sqlite3_errcode %s (%d)",

116 
	`îr‹Name
(
rc
),Ñc,Éº‹Name(
r2
),Ñ2);

117 
	`T˛_Re£tResu…
(
öãΩ
);

118 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

122 
	}
}

127 
	$gëDbPoöãr
(
T˛_I¡îp
 *
öãΩ
, c⁄° *
zA
, 
sqlôe3
 **
µDb
){

128 *
µDb
 = (
sqlôe3
*)
	`sqlôe3TextToPå
(
zA
);

129  
TCL_OK
;

130 
	}
}

135 
	$gëStmtPoöãr
(

136 
T˛_I¡îp
 *
öãΩ
,

137 c⁄° *
zArg
,

138 
sqlôe3_°mt
 **
µStmt


140 *
µStmt
 = (
sqlôe3_°mt
*)
	`sqlôe3TextToPå
(
zArg
);

141  
TCL_OK
;

142 
	}
}

147 
	$gëFûePoöãr
(

148 
T˛_I¡îp
 *
öãΩ
,

149 c⁄° *
zArg
,

150 
OsFûe
 **
µFûe


152 *
µFûe
 = (
OsFûe
*)
	`sqlôe3TextToPå
(
zArg
);

153  
TCL_OK
;

154 
	}
}

169 
	$sqlôe3Te°MakePoöãrSå
(
T˛_I¡îp
 *
öãΩ
, *
zPå
, *
p
){

170 
	`sqlôe3_¢¥ötf
(100, 
zPå
, "%p", 
p
);

171  
TCL_OK
;

172 
	}
}

177 
	$exec_¥ötf_cb
(*
pArg
, 
¨gc
, **
¨gv
, **
«me
){

178 
T˛_DSåög
 *
°r
 = (T˛_DSåög*)
pArg
;

179 
i
;

181 if–
	`T˛_DSåögLígth
(
°r
)==0 ){

182 
i
=0; i<
¨gc
; i++){

183 
	`T˛_DSåögAµídEÀmít
(
°r
, 
«me
[
i
] ?Çame[i] : "NULL");

186 
i
=0; i<
¨gc
; i++){

187 
	`T˛_DSåögAµídEÀmít
(
°r
, 
¨gv
[
i
] ?árgv[i] : "NULL");

190 
	}
}

199 
	$ã°_exec_¥ötf
(

200 *
NŸU£d
,

201 
T˛_I¡îp
 *
öãΩ
,

202 
¨gc
,

203 **
¨gv


205 
sqlôe3
 *
db
;

206 
T˛_DSåög
 
°r
;

207 
rc
;

208 *
zEº
 = 0;

209 *
zSql
;

210 
zBuf
[30];

211 if–
¨gc
!=4 ){

212 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

214  
TCL_ERROR
;

216 if–
	`gëDbPoöãr
(
öãΩ
, 
¨gv
[1], &
db
ËË 
TCL_ERROR
;

217 
	`T˛_DSåögInô
(&
°r
);

218 
zSql
 = 
	`sqlôe3_m¥ötf
(
¨gv
[2],árgv[3]);

219 
rc
 = 
	`sqlôe3_exec
(
db
, 
zSql
, 
exec_¥ötf_cb
, &
°r
, &
zEº
);

220 
	`sqlôe3_‰ì
(
zSql
);

221 
	`•rötf
(
zBuf
, "%d", 
rc
);

222 
	`T˛_AµídEÀmít
(
öãΩ
, 
zBuf
);

223 
	`T˛_AµídEÀmít
(
öãΩ
, 
rc
==
SQLITE_OK
 ? 
	`T˛_DSåögVÆue
(&
°r
Ë: 
zEº
);

224 
	`T˛_DSåögFªe
(&
°r
);

225 if–
zEº
 ) 
	`‰ì
(zErr);

226 if–
	`sqlôe3Te°EºCode
(
öãΩ
, 
db
, 
rc
ËË 
TCL_ERROR
;

227  
TCL_OK
;

228 
	}
}

237 
	$ã°_m¥ötf_z
(

238 *
NŸU£d
,

239 
T˛_I¡îp
 *
öãΩ
,

240 
¨gc
,

241 **
¨gv


243 *
zResu…
 = 0;

244 
i
;

246 
i
=2; i<
¨gc
; i++){

247 
zResu…
 = 
	`sqlôe3MPrötf
("%z%s%s", zResu…, 
¨gv
[1],árgv[
i
]);

249 
	`T˛_AµídResu…
(
öãΩ
, 
zResu…
, 0);

250 
	`sqlôeFªe
(
zResu…
);

251  
TCL_OK
;

252 
	}
}

261 
	$ã°_gë_èbÀ_¥ötf
(

262 *
NŸU£d
,

263 
T˛_I¡îp
 *
öãΩ
,

264 
¨gc
,

265 **
¨gv


267 
sqlôe3
 *
db
;

268 
T˛_DSåög
 
°r
;

269 
rc
;

270 *
zEº
 = 0;

271 
nRow
, 
nCﬁ
;

272 **
aResu…
;

273 
i
;

274 
zBuf
[30];

275 *
zSql
;

276 if–
¨gc
!=4 ){

277 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

279  
TCL_ERROR
;

281 if–
	`gëDbPoöãr
(
öãΩ
, 
¨gv
[1], &
db
ËË 
TCL_ERROR
;

282 
	`T˛_DSåögInô
(&
°r
);

283 
zSql
 = 
	`sqlôe3_m¥ötf
(
¨gv
[2],argv[3]);

284 
rc
 = 
	`sqlôe3_gë_èbÀ
(
db
, 
zSql
, &
aResu…
, &
nRow
, &
nCﬁ
, &
zEº
);

285 
	`sqlôe3_‰ì
(
zSql
);

286 
	`•rötf
(
zBuf
, "%d", 
rc
);

287 
	`T˛_AµídEÀmít
(
öãΩ
, 
zBuf
);

288 if–
rc
==
SQLITE_OK
 ){

289 
	`•rötf
(
zBuf
, "%d", 
nRow
);

290 
	`T˛_AµídEÀmít
(
öãΩ
, 
zBuf
);

291 
	`•rötf
(
zBuf
, "%d", 
nCﬁ
);

292 
	`T˛_AµídEÀmít
(
öãΩ
, 
zBuf
);

293 
i
=0; i<(
nRow
+1)*
nCﬁ
; i++){

294 
	`T˛_AµídEÀmít
(
öãΩ
, 
aResu…
[
i
] ?áResult[i] : "NULL");

297 
	`T˛_AµídEÀmít
(
öãΩ
, 
zEº
);

299 
	`sqlôe3_‰ì_èbÀ
(
aResu…
);

300 if–
zEº
 ) 
	`‰ì
(zErr);

301 if–
	`sqlôe3Te°EºCode
(
öãΩ
, 
db
, 
rc
ËË 
TCL_ERROR
;

302  
TCL_OK
;

303 
	}
}

311 
	$ã°_œ°_rowid
(

312 *
NŸU£d
,

313 
T˛_I¡îp
 *
öãΩ
,

314 
¨gc
,

315 **
¨gv


317 
sqlôe3
 *
db
;

318 
zBuf
[30];

320 if–
¨gc
!=2 ){

321 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0], " DB\"", 0);

322  
TCL_ERROR
;

324 if–
	`gëDbPoöãr
(
öãΩ
, 
¨gv
[1], &
db
ËË 
TCL_ERROR
;

325 
	`•rötf
(
zBuf
, "%Œd", 
	`sqlôe3_œ°_ö£π_rowid
(
db
));

326 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

327  
SQLITE_OK
;

328 
	}
}

335 
	$ã°_key
(

336 *
NŸU£d
,

337 
T˛_I¡îp
 *
öãΩ
,

338 
¨gc
,

339 **
¨gv


341 
sqlôe3
 *
db
;

342 c⁄° *
zKey
;

343 
nKey
;

344 if–
¨gc
!=3 ){

345 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

347  
TCL_ERROR
;

349 if–
	`gëDbPoöãr
(
öãΩ
, 
¨gv
[1], &
db
ËË 
TCL_ERROR
;

350 
zKey
 = 
¨gv
[2];

351 
nKey
 = 
	`°æí
(
zKey
);

352 #ifde‡
SQLITE_HAS_CODEC


353 
	`sqlôe3_key
(
db
, 
zKey
, 
nKey
);

355  
TCL_OK
;

356 
	}
}

363 
	$ã°_ªkey
(

364 *
NŸU£d
,

365 
T˛_I¡îp
 *
öãΩ
,

366 
¨gc
,

367 **
¨gv


369 
sqlôe3
 *
db
;

370 c⁄° *
zKey
;

371 
nKey
;

372 if–
¨gc
!=3 ){

373 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

375  
TCL_ERROR
;

377 if–
	`gëDbPoöãr
(
öãΩ
, 
¨gv
[1], &
db
ËË 
TCL_ERROR
;

378 
zKey
 = 
¨gv
[2];

379 
nKey
 = 
	`°æí
(
zKey
);

380 #ifde‡
SQLITE_HAS_CODEC


381 
	`sqlôe3_ªkey
(
db
, 
zKey
, 
nKey
);

383  
TCL_OK
;

384 
	}
}

391 
	$sqlôe_ã°_˛o£
(

392 *
NŸU£d
,

393 
T˛_I¡îp
 *
öãΩ
,

394 
¨gc
,

395 **
¨gv


397 
sqlôe3
 *
db
;

398 
rc
;

399 if–
¨gc
!=2 ){

400 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

402  
TCL_ERROR
;

404 if–
	`gëDbPoöãr
(
öãΩ
, 
¨gv
[1], &
db
ËË 
TCL_ERROR
;

405 
rc
 = 
	`sqlôe3_˛o£
(
db
);

406 
	`T˛_SëResu…
(
öãΩ
, (*)
	`îr‹Name
(
rc
), 
TCL_STATIC
);

407  
TCL_OK
;

408 
	}
}

414 
	$i‚uŒFunc
(
sqlôe3_c⁄ãxt
 *
c⁄ãxt
, 
¨gc
, 
sqlôe3_vÆue
 **
¨gv
){

415 
i
;

416 
i
=0; i<
¨gc
; i++){

417 if–
SQLITE_NULL
!=
	`sqlôe3_vÆue_ty≥
(
¨gv
[
i
]) ){

418 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, (*)
	`sqlôe3_vÆue_ãxt
(
¨gv
[
i
]),

419 
	`sqlôe3_vÆue_byãs
(
¨gv
[
i
]), 
SQLITE_TRANSIENT
);

423 
	}
}

428 
	sd°r
 {

429 
	mnAŒoc
;

430 
	mnU£d
;

431 *
	mz
;

437 
	$d°rAµíd
(
d°r
 *
p
, c⁄° *
z
, 
dividî
){

438 
n
 = 
	`°æí
(
z
);

439 if–
p
->
nU£d
 + 
n
 + 2 >Ö->
nAŒoc
 ){

440 *
zNew
;

441 
p
->
nAŒoc
 =Ö->nAŒoc*2 + 
n
 + 200;

442 
zNew
 = 
	`sqlôeRóŒoc
(
p
->
z
,Ö->
nAŒoc
);

443 if–
zNew
==0 ){

444 
	`sqlôeFªe
(
p
->
z
);

445 
	`mem£t
(
p
, 0, (*p));

448 
p
->
z
 = 
zNew
;

450 if–
dividî
 && 
p
->
nU£d
>0 ){

451 
p
->
z
[p->
nU£d
++] = 
dividî
;

453 
	`mem˝y
(&
p
->
z
[p->
nU£d
], z, 
n
+1);

454 
p
->
nU£d
 +
n
;

455 
	}
}

460 
	$execFuncCÆlback
(*
pD©a
, 
¨gc
, **
¨gv
, **
NŸU£d
){

461 
d°r
 *
p
 = (d°r*)
pD©a
;

462 
i
;

463 
i
=0; i<
¨gc
; i++){

464 if–
¨gv
[
i
]==0 ){

465 
	`d°rAµíd
(
p
, "NULL", ' ');

467 
	`d°rAµíd
(
p
, 
¨gv
[
i
], ' ');

471 
	}
}

484 
	$sqlôe3ExecFunc
(

485 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

486 
¨gc
,

487 
sqlôe3_vÆue
 **
¨gv


489 
d°r
 
x
;

490 
	`mem£t
(&
x
, 0, (x));

491 
	`sqlôe3_exec
((
sqlôe3
*)
	`sqlôe3_u£r_d©a
(
c⁄ãxt
),

492 (*)
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]),

493 
execFuncCÆlback
, &
x
, 0);

494 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, 
x
.
z
, x.
nU£d
, 
SQLITE_TRANSIENT
);

495 
	`sqlôeFªe
(
x
.
z
);

496 
	}
}

513 
	$ã°_¸óã_fun˘i⁄
(

514 *
NŸU£d
,

515 
T˛_I¡îp
 *
öãΩ
,

516 
¨gc
,

517 **
¨gv


519 
rc
;

520 
sqlôe3
 *
db
;

521 
	`Md5_Regi°î
(
sqlôe3
*);

523 if–
¨gc
!=2 ){

524 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

526  
TCL_ERROR
;

528 if–
	`gëDbPoöãr
(
öãΩ
, 
¨gv
[1], &
db
ËË 
TCL_ERROR
;

529 
rc
 = 
	`sqlôe3_¸óã_fun˘i⁄
(
db
, "x_cﬂÀs˚", -1, 
SQLITE_ANY
, 0,

530 
i‚uŒFunc
, 0, 0);

532 #i‚de‡
SQLITE_OMIT_UTF16


535 if–
rc
==
SQLITE_OK
 ){

536 
sqlôe3_vÆue
 *
pVÆ
;

537 #ifde‡
SQLITE_MEMDEBUG


538 if–
sqlôe3_iMÆlocFaû
>0 ){

539 
sqlôe3_iMÆlocFaû
++;

542 
pVÆ
 = 
	`sqlôe3VÆueNew
();

543 
	`sqlôe3VÆueSëSå
(
pVÆ
, -1, "x_sqlôe_exec", 
SQLITE_UTF8
, 
SQLITE_STATIC
);

544 
rc
 = 
	`sqlôe3_¸óã_fun˘i⁄16
(
db
,

545 
	`sqlôe3VÆueText
(
pVÆ
, 
SQLITE_UTF16NATIVE
),

546 1, 
SQLITE_UTF16
, 
db
, 
sqlôe3ExecFunc
, 0, 0);

547 
	`sqlôe3VÆueFªe
(
pVÆ
);

551 if–
	`sqlôe3Te°EºCode
(
öãΩ
, 
db
, 
rc
ËË 
TCL_ERROR
;

552 
	`T˛_SëResu…
(
öãΩ
, (*)
	`îr‹Name
(
rc
), 0);

553  
TCL_OK
;

554 
	}
}

567 
Cou¡Ctx
 
	tCou¡Ctx
;

568 
	sCou¡Ctx
 {

569 
	mn
;

571 
	$cou¡Sãp
(
sqlôe3_c⁄ãxt
 *
c⁄ãxt
, 
¨gc
, 
sqlôe3_vÆue
 **
¨gv
){

572 
Cou¡Ctx
 *
p
;

573 
p
 = 
	`sqlôe3_aggªg©e_c⁄ãxt
(
c⁄ãxt
, (*p));

574 if–(
¨gc
==0 || 
SQLITE_NULL
!=
	`sqlôe3_vÆue_ty≥
(
¨gv
[0]ËË&& 
p
 ){

575 
p
->
n
++;

577 if–
¨gc
>0 ){

578 
v
 = 
	`sqlôe3_vÆue_öt
(
¨gv
[0]);

579 if–
v
==40 ){

580 
	`sqlôe3_ªsu…_îr‹
(
c⁄ãxt
, "value of 40 handedÅo x_count", -1);

581 #i‚de‡
SQLITE_OMIT_UTF16


582 }if–
v
==41 ){

583 c⁄° 
zUtf16EºMsg
[] = { 0, 0x61, 0, 0x62, 0, 0x63, 0, 0, 0};

584 
	`sqlôe3_ªsu…_îr‹16
(
c⁄ãxt
, &
zUtf16EºMsg
[1-
SQLITE_BIGENDIAN
], -1);

588 
	}
}

589 
	$cou¡FöÆize
(
sqlôe3_c⁄ãxt
 *
c⁄ãxt
){

590 
Cou¡Ctx
 *
p
;

591 
p
 = 
	`sqlôe3_aggªg©e_c⁄ãxt
(
c⁄ãxt
, (*p));

592 if–
p
 ){

593 if–
p
->
n
==42 ){

594 
	`sqlôe3_ªsu…_îr‹
(
c⁄ãxt
, "x_countÅotalsÅo 42", -1);

596 
	`sqlôe3_ªsu…_öt
(
c⁄ãxt
, 
p
 ?Ö->
n
 : 0);

599 
	}
}

615 
	$ã°_¸óã_aggªg©e
(

616 *
NŸU£d
,

617 
T˛_I¡îp
 *
öãΩ
,

618 
¨gc
,

619 **
¨gv


621 
sqlôe3
 *
db
;

622 
rc
;

623 if–
¨gc
!=2 ){

624 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

626  
TCL_ERROR
;

628 if–
	`gëDbPoöãr
(
öãΩ
, 
¨gv
[1], &
db
ËË 
TCL_ERROR
;

629 
rc
 = 
	`sqlôe3_¸óã_fun˘i⁄
(
db
, "x_cou¡", 0, 
SQLITE_UTF8
, 0, 0,

630 
cou¡Sãp
,
cou¡FöÆize
);

631 if–
rc
==
SQLITE_OK
 ){

632 
	`sqlôe3_¸óã_fun˘i⁄
(
db
, "x_cou¡", 1, 
SQLITE_UTF8
, 0, 0,

633 
cou¡Sãp
,
cou¡FöÆize
);

635 if–
	`sqlôe3Te°EºCode
(
öãΩ
, 
db
, 
rc
ËË 
TCL_ERROR
;

636  
TCL_OK
;

637 
	}
}

646 
	$sqlôe3_m¥ötf_öt
(

647 *
NŸU£d
,

648 
T˛_I¡îp
 *
öãΩ
,

649 
¨gc
,

650 **
¨gv


652 
a
[3], 
i
;

653 *
z
;

654 if–
¨gc
!=5 ){

655 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

657  
TCL_ERROR
;

659 
i
=2; i<5; i++){

660 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[
i
], &
a
[i-2]ËË 
TCL_ERROR
;

662 
z
 = 
	`sqlôe3_m¥ötf
(
¨gv
[1], 
a
[0],á[1],á[2]);

663 
	`T˛_AµídResu…
(
öãΩ
, 
z
, 0);

664 
	`sqlôe3_‰ì
(
z
);

665  
TCL_OK
;

666 
	}
}

672 
	$sqlôe3GëI¡64
(c⁄° *
zNum
, 
i64
 *
pVÆue
){

673 if–
	`sqlôe3FôsIn64Bôs
(
zNum
) ){

674 
	`sqlôe3©oi64
(
zNum
, 
pVÆue
);

678 
	}
}

685 
	$sqlôe3_m¥ötf_öt64
(

686 *
NŸU£d
,

687 
T˛_I¡îp
 *
öãΩ
,

688 
¨gc
,

689 **
¨gv


691 
i
;

692 
sqlôe_öt64
 
a
[3];

693 *
z
;

694 if–
¨gc
!=5 ){

695 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

697  
TCL_ERROR
;

699 
i
=2; i<5; i++){

700 if–!
	`sqlôe3GëI¡64
(
¨gv
[
i
], &
a
[i-2]) ){

701 
	`T˛_AµídResu…
(
öãΩ
, "argument isÇotá valid 64-bit integer", 0);

702  
TCL_ERROR
;

705 
z
 = 
	`sqlôe3_m¥ötf
(
¨gv
[1], 
a
[0],á[1],á[2]);

706 
	`T˛_AµídResu…
(
öãΩ
, 
z
, 0);

707 
	`sqlôe3_‰ì
(
z
);

708  
TCL_OK
;

709 
	}
}

716 
	$sqlôe3_m¥ötf_°r
(

717 *
NŸU£d
,

718 
T˛_I¡îp
 *
öãΩ
,

719 
¨gc
,

720 **
¨gv


722 
a
[3], 
i
;

723 *
z
;

724 if–
¨gc
<4 ||árgc>5 ){

725 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

727  
TCL_ERROR
;

729 
i
=2; i<4; i++){

730 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[
i
], &
a
[i-2]ËË 
TCL_ERROR
;

732 
z
 = 
	`sqlôe3_m¥ötf
(
¨gv
[1], 
a
[0],á[1], 
¨gc
>4 ?árgv[4] : 
NULL
);

733 
	`T˛_AµídResu…
(
öãΩ
, 
z
, 0);

734 
	`sqlôe3_‰ì
(
z
);

735  
TCL_OK
;

736 
	}
}

743 
	$sqlôe3_m¥ötf_doubÀ
(

744 *
NŸU£d
,

745 
T˛_I¡îp
 *
öãΩ
,

746 
¨gc
,

747 **
¨gv


749 
a
[3], 
i
;

750 
r
;

751 *
z
;

752 if–
¨gc
!=5 ){

753 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

755  
TCL_ERROR
;

757 
i
=2; i<4; i++){

758 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[
i
], &
a
[i-2]ËË 
TCL_ERROR
;

760 if–
	`T˛_GëDoubÀ
(
öãΩ
, 
¨gv
[4], &
r
ËË 
TCL_ERROR
;

761 
z
 = 
	`sqlôe3_m¥ötf
(
¨gv
[1], 
a
[0],á[1], 
r
);

762 
	`T˛_AµídResu…
(
öãΩ
, 
z
, 0);

763 
	`sqlôe3_‰ì
(
z
);

764  
TCL_OK
;

765 
	}
}

774 
	$sqlôe3_m¥ötf_sˇÀd
(

775 *
NŸU£d
,

776 
T˛_I¡îp
 *
öãΩ
,

777 
¨gc
,

778 **
¨gv


780 
i
;

781 
r
[2];

782 *
z
;

783 if–
¨gc
!=4 ){

784 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

786  
TCL_ERROR
;

788 
i
=2; i<4; i++){

789 if–
	`T˛_GëDoubÀ
(
öãΩ
, 
¨gv
[
i
], &
r
[i-2]ËË 
TCL_ERROR
;

791 
z
 = 
	`sqlôe3_m¥ötf
(
¨gv
[1], 
r
[0]*r[1]);

792 
	`T˛_AµídResu…
(
öãΩ
, 
z
, 0);

793 
	`sqlôe3_‰ì
(
z
);

794  
TCL_OK
;

795 
	}
}

804 
	$sqlôe3_m¥ötf_°r⁄ly
(

805 *
NŸU£d
,

806 
T˛_I¡îp
 *
öãΩ
,

807 
¨gc
,

808 **
¨gv


810 *
z
;

811 if–
¨gc
!=3 ){

812 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

814  
TCL_ERROR
;

816 
z
 = 
	`sqlôe3_m¥ötf
(
¨gv
[1],árgv[2]);

817 
	`T˛_AµídResu…
(
öãΩ
, 
z
, 0);

818 
	`sqlôe3_‰ì
(
z
);

819  
TCL_OK
;

820 
	}
}

828 
	$sqlôe3_m¥ötf_hexdoubÀ
(

829 *
NŸU£d
,

830 
T˛_I¡îp
 *
öãΩ
,

831 
¨gc
,

832 **
¨gv


834 *
z
;

835 
r
;

836 
x1
, 
x2
;

837 
d
;

838 if–
¨gc
!=3 ){

839 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

841  
TCL_ERROR
;

843 if–
	`ssˇnf
(
¨gv
[2], "%08x%08x", &
x2
, &
x1
)!=2 ){

844 
	`T˛_AµídResu…
(
öãΩ
, "2ndárgument should be 16-characters of hex", 0);

845  
TCL_ERROR
;

847 
d
 = 
x2
;

848 
d
 = (d<<32Ë+ 
x1
;

849 
	`mem˝y
(&
r
, &
d
, (r));

850 
z
 = 
	`sqlôe3_m¥ötf
(
¨gv
[1], 
r
);

851 
	`T˛_AµídResu…
(
öãΩ
, 
z
, 0);

852 
	`sqlôe3_‰ì
(
z
);

853  
TCL_OK
;

854 
	}
}

868 #ifde‡
SQLITE_MEMDEBUG


869 
	$sqlôe_mÆloc_Áû
(

870 *
NŸU£d
,

871 
T˛_I¡îp
 *
öãΩ
,

872 
¨gc
,

873 **
¨gv


875 
n
;

876 
ªp
;

877 if–
¨gc
!=2 &&árgc!=3 ){

878 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0], " N\"", 0);

879  
TCL_ERROR
;

881 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[1], &
n
ËË 
TCL_ERROR
;

882 if–
¨gc
==3 ){

883 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[2], &
ªp
ËË 
TCL_ERROR
;

885 
ªp
 = 0;

887 
sqlôe3_iMÆlocFaû
 = 
n
;

888 
sqlôe3_iMÆlocRe£t
 = 
ªp
;

889  
TCL_OK
;

890 
	}
}

898 #ifde‡
SQLITE_MEMDEBUG


899 
	$sqlôe_mÆloc_°©
(

900 *
NŸU£d
,

901 
T˛_I¡îp
 *
öãΩ
,

902 
¨gc
,

903 **
¨gv


905 
zBuf
[200];

906 
	`•rötf
(
zBuf
, "%d %d %d", 
sqlôe3_nMÆloc
,
sqlôe3_nFªe
,
sqlôe3_iMÆlocFaû
);

907 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

908  
TCL_OK
;

909 
	}
}

932 
	$sqlôe_mÆloc_out°™dög
(

933 
Clõ¡D©a
 
˛õ¡D©a
,

934 
T˛_I¡îp
 *
öãΩ
,

935 
objc
,

936 
T˛_Obj
 *
CONST
 
objv
[]

938 
	`sqlôe3Out°™dögMÆlocs
(
T˛_I¡îp
 *
öãΩ
);

940 #i‡
	`deföed
(
SQLITE_DEBUG
Ë&& deföed(
SQLITE_MEMDEBUG
) && SQLITE_MEMDEBUG>1

941 if–
objc
==2 ){

942 c⁄° *
zArg
 = 
	`T˛_GëSåög
(
objv
[1]);

943 #ifde‡
SQLITE_ENABLE_MEMORY_MANAGEMENT


944 
ThªadD©a
 c⁄° *
pTd
 = 
	`sqlôe3ThªadD©aRódO∆y
();

945 if–0==
	`°rcmp
(
zArg
, "-bytes") ){

946 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
pTd
->
nAŒoc
));

947 }if–0==
	`°rcmp
(
zArg
, "-clearmaxbytes") ){

948 
sqlôe3_nMaxAŒoc
 = 
pTd
->
nAŒoc
;

951 if–0==
	`°rcmp
(
zArg
, "-maxbytes") ){

952 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewWideI¡Obj
(
sqlôe3_nMaxAŒoc
));

954 
	`T˛_AµídResu…
(
öãΩ
, "bad o±i⁄ \"", 
zArg
,

957  
TCL_ERROR
;

960  
TCL_OK
;

963 if–
objc
!=1 ){

964 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "?-bytes?");

965  
TCL_ERROR
;

968  
	`sqlôe3Out°™dögMÆlocs
(
öãΩ
);

970  
TCL_OK
;

972 
	}
}

979 #i‡!
deföed
(
SQLITE_OMIT_SHARED_CACHE
)

980 
	$ã°_íabÀ_sh¨ed
(

981 
Clõ¡D©a
 
˛õ¡D©a
,

982 
T˛_I¡îp
 *
öãΩ
,

983 
objc
,

984 
T˛_Obj
 *
CONST
 
objv
[]

986 
rc
;

987 
íabÀ
;

988 
ªt
 = 0;

990 if–
objc
!=2 ){

991 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "BOOLEAN");

992  
TCL_ERROR
;

994 if–
	`T˛_GëBoﬁónFromObj
(
öãΩ
, 
objv
[1], &
íabÀ
) ){

995  
TCL_ERROR
;

997 
ªt
 = 
	`sqlôe3ThªadD©aRódO∆y
()->
u£Sh¨edD©a
;

998 
rc
 = 
	`sqlôe3_íabÀ_sh¨ed_ˇche
(
íabÀ
);

999 if–
rc
!=
SQLITE_OK
 ){

1000 
	`T˛_SëResu…
(
öãΩ
, (*)
	`sqlôe3EºSå
(
rc
), 
TCL_STATIC
);

1001  
TCL_ERROR
;

1003 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewBoﬁónObj
(
ªt
));

1004  
TCL_OK
;

1005 
	}
}

1012 
	$ã°_libvîsi⁄_numbî
(

1013 
Clõ¡D©a
 
˛õ¡D©a
,

1014 
T˛_I¡îp
 *
öãΩ
,

1015 
objc
,

1016 
T˛_Obj
 *
CONST
 
objv
[]

1018 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
	`sqlôe3_libvîsi⁄_numbî
()));

1019  
TCL_OK
;

1020 
	}
}

1026 #ifde‡
SQLITE_ENABLE_COLUMN_METADATA


1027 
	$ã°_èbÀ_cﬁumn_mëad©a
(

1028 
Clõ¡D©a
 
˛õ¡D©a
,

1029 
T˛_I¡îp
 *
öãΩ
,

1030 
objc
,

1031 
T˛_Obj
 *
CONST
 
objv
[]

1033 
sqlôe3
 *
db
;

1034 c⁄° *
zDb
;

1035 c⁄° *
zTbl
;

1036 c⁄° *
zCﬁ
;

1037 
rc
;

1038 
T˛_Obj
 *
pRë
;

1040 c⁄° *
zD©©y≥
;

1041 c⁄° *
zCﬁl£q
;

1042 
nŸnuŒ
;

1043 
¥im¨ykey
;

1044 
autoö¸emít
;

1046 if–
objc
!=5 ){

1047 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "DB dbnameÅblname colname");

1048  
TCL_ERROR
;

1050 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

1051 
zDb
 = 
	`T˛_GëSåög
(
objv
[2]);

1052 
zTbl
 = 
	`T˛_GëSåög
(
objv
[3]);

1053 
zCﬁ
 = 
	`T˛_GëSåög
(
objv
[4]);

1055 if–
	`°æí
(
zDb
)==0 ) zDb = 0;

1057 
rc
 = 
	`sqlôe3_èbÀ_cﬁumn_mëad©a
(
db
, 
zDb
, 
zTbl
, 
zCﬁ
,

1058 &
zD©©y≥
, &
zCﬁl£q
, &
nŸnuŒ
, &
¥im¨ykey
, &
autoö¸emít
);

1060 if–
rc
!=
SQLITE_OK
 ){

1061 
	`T˛_AµídResu…
(
öãΩ
, 
	`sqlôe3_îrmsg
(
db
), 0);

1062  
TCL_ERROR
;

1065 
pRë
 = 
	`T˛_NewObj
();

1066 
	`T˛_Li°ObjAµídEÀmít
(0, 
pRë
, 
	`T˛_NewSåögObj
(
zD©©y≥
, -1));

1067 
	`T˛_Li°ObjAµídEÀmít
(0, 
pRë
, 
	`T˛_NewSåögObj
(
zCﬁl£q
, -1));

1068 
	`T˛_Li°ObjAµídEÀmít
(0, 
pRë
, 
	`T˛_NewI¡Obj
(
nŸnuŒ
));

1069 
	`T˛_Li°ObjAµídEÀmít
(0, 
pRë
, 
	`T˛_NewI¡Obj
(
¥im¨ykey
));

1070 
	`T˛_Li°ObjAµídEÀmít
(0, 
pRë
, 
	`T˛_NewI¡Obj
(
autoö¸emít
));

1071 
	`T˛_SëObjResu…
(
öãΩ
, 
pRë
);

1073  
TCL_OK
;

1074 
	}
}

1084 
	$sqlôe_ab‹t
(

1085 *
NŸU£d
,

1086 
T˛_I¡îp
 *
öãΩ
,

1087 
¨gc
,

1088 **
¨gv


1090 
	`as£π
–
öãΩ
==0 );

1091  
TCL_OK
;

1092 
	}
}

1098 
	$ã°Func
(
sqlôe3_c⁄ãxt
 *
c⁄ãxt
, 
¨gc
, 
sqlôe3_vÆue
 **
¨gv
){

1099  
¨gc
>=2 ){

1100 c⁄° *
zArg0
 = (*)
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]);

1101 if–
zArg0
 ){

1102 if–0==
	`sqlôe3SåICmp
(
zArg0
, "int") ){

1103 
	`sqlôe3_ªsu…_öt
(
c⁄ãxt
, 
	`sqlôe3_vÆue_öt
(
¨gv
[1]));

1104 }if–
	`sqlôe3SåICmp
(
zArg0
,"int64")==0 ){

1105 
	`sqlôe3_ªsu…_öt64
(
c⁄ãxt
, 
	`sqlôe3_vÆue_öt64
(
¨gv
[1]));

1106 }if–
	`sqlôe3SåICmp
(
zArg0
,"string")==0 ){

1107 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, (*)
	`sqlôe3_vÆue_ãxt
(
¨gv
[1]), -1,

1108 
SQLITE_TRANSIENT
);

1109 }if–
	`sqlôe3SåICmp
(
zArg0
,"double")==0 ){

1110 
	`sqlôe3_ªsu…_doubÀ
(
c⁄ãxt
, 
	`sqlôe3_vÆue_doubÀ
(
¨gv
[1]));

1111 }if–
	`sqlôe3SåICmp
(
zArg0
,"null")==0 ){

1112 
	`sqlôe3_ªsu…_nuŒ
(
c⁄ãxt
);

1113 }if–
	`sqlôe3SåICmp
(
zArg0
,"value")==0 ){

1114 
	`sqlôe3_ªsu…_vÆue
(
c⁄ãxt
, 
¨gv
[
	`sqlôe3_vÆue_öt
(argv[1])]);

1116 
îr‹_out
;

1119 
îr‹_out
;

1121 
¨gc
 -= 2;

1122 
¨gv
 += 2;

1126 
îr‹_out
:

1127 
	`sqlôe3_ªsu…_îr‹
(
c⁄ãxt
,"firstárgument should be one of: "

1129 
	}
}

1136 
	$ã°_ªgi°î_func
(

1137 *
NŸU£d
,

1138 
T˛_I¡îp
 *
öãΩ
,

1139 
¨gc
,

1140 **
¨gv


1142 
sqlôe3
 *
db
;

1143 
rc
;

1144 if–
¨gc
!=3 ){

1145 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

1147  
TCL_ERROR
;

1149 if–
	`gëDbPoöãr
(
öãΩ
, 
¨gv
[1], &
db
ËË 
TCL_ERROR
;

1150 
rc
 = 
	`sqlôe3_¸óã_fun˘i⁄
(
db
, 
¨gv
[2], -1, 
SQLITE_UTF8
, 0,

1151 
ã°Func
, 0, 0);

1152 if–
rc
!=0 ){

1153 
	`T˛_AµídResu…
(
öãΩ
, 
	`sqlôe3EºSå
(
rc
), 0);

1154  
TCL_ERROR
;

1156 if–
	`sqlôe3Te°EºCode
(
öãΩ
, 
db
, 
rc
ËË 
TCL_ERROR
;

1157  
TCL_OK
;

1158 
	}
}

1165 
	$ã°_föÆize
(

1166 * 
˛õ¡D©a
,

1167 
T˛_I¡îp
 *
öãΩ
,

1168 
objc
,

1169 
T˛_Obj
 *
CONST
 
objv
[]

1171 
sqlôe3_°mt
 *
pStmt
;

1172 
rc
;

1173 
sqlôe3
 *
db
;

1175 if–
objc
!=2 ){

1176 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

1177 
	`T˛_GëSåögFromObj
(
objv
[0], 0), " <STMT>", 0);

1178  
TCL_ERROR
;

1181 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt
ËË 
TCL_ERROR
;

1183 if–
pStmt
 ){

1184 
db
 = 
	`StmtToDb
(
pStmt
);

1186 
rc
 = 
	`sqlôe3_föÆize
(
pStmt
);

1187 
	`T˛_SëResu…
(
öãΩ
, (*)
	`îr‹Name
(
rc
), 
TCL_STATIC
);

1188 if–
db
 && 
	`sqlôe3Te°EºCode
(
öãΩ
, db, 
rc
ËË 
TCL_ERROR
;

1189  
TCL_OK
;

1190 
	}
}

1197 
	$ã°_ª£t
(

1198 * 
˛õ¡D©a
,

1199 
T˛_I¡îp
 *
öãΩ
,

1200 
objc
,

1201 
T˛_Obj
 *
CONST
 
objv
[]

1203 
sqlôe3_°mt
 *
pStmt
;

1204 
rc
;

1206 if–
objc
!=2 ){

1207 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

1208 
	`T˛_GëSåögFromObj
(
objv
[0], 0), " <STMT>", 0);

1209  
TCL_ERROR
;

1212 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt
ËË 
TCL_ERROR
;

1214 
rc
 = 
	`sqlôe3_ª£t
(
pStmt
);

1215 if–
pStmt
 && 
	`sqlôe3Te°EºCode
(
öãΩ
, 
	`StmtToDb
’Stmt), 
rc
) ){

1216  
TCL_ERROR
;

1218 
	`T˛_SëResu…
(
öãΩ
, (*)
	`îr‹Name
(
rc
), 
TCL_STATIC
);

1224  
TCL_OK
;

1225 
	}
}

1232 
	$ã°_expúed
(

1233 * 
˛õ¡D©a
,

1234 
T˛_I¡îp
 *
öãΩ
,

1235 
objc
,

1236 
T˛_Obj
 *
CONST
 
objv
[]

1238 
sqlôe3_°mt
 *
pStmt
;

1239 if–
objc
!=2 ){

1240 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

1241 
	`T˛_GëSåögFromObj
(
objv
[0], 0), " <STMT>", 0);

1242  
TCL_ERROR
;

1244 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt
ËË 
TCL_ERROR
;

1245 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewBoﬁónObj
(
	`sqlôe3_expúed
(
pStmt
)));

1246  
TCL_OK
;

1247 
	}
}

1254 
	$ã°_å™s„r_böd
(

1255 * 
˛õ¡D©a
,

1256 
T˛_I¡îp
 *
öãΩ
,

1257 
objc
,

1258 
T˛_Obj
 *
CONST
 
objv
[]

1260 
sqlôe3_°mt
 *
pStmt1
, *
pStmt2
;

1261 if–
objc
!=3 ){

1262 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

1263 
	`T˛_GëSåögFromObj
(
objv
[0], 0), " FROM-STMT TO-STMT", 0);

1264  
TCL_ERROR
;

1266 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt1
)Ë 
TCL_ERROR
;

1267 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[2]), &
pStmt2
)Ë 
TCL_ERROR
;

1268 
	`T˛_SëObjResu…
(
öãΩ
,

1269 
	`T˛_NewI¡Obj
(
	`sqlôe3_å™s„r_bödögs
(
pStmt1
,
pStmt2
)));

1270  
TCL_OK
;

1271 
	}
}

1279 
	$ã°_ch™ges
(

1280 * 
˛õ¡D©a
,

1281 
T˛_I¡îp
 *
öãΩ
,

1282 
objc
,

1283 
T˛_Obj
 *
CONST
 
objv
[]

1285 
sqlôe3
 *
db
;

1286 if–
objc
!=2 ){

1287 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

1288 
	`T˛_GëSåög
(
objv
[0]), " DB", 0);

1289  
TCL_ERROR
;

1291 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

1292 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
	`sqlôe3_ch™ges
(
db
)));

1293  
TCL_OK
;

1294 
	}
}

1300 *
	gsqlôe_°©ic_böd_vÆue
 = 0;

1313 
	$ã°_böd
(

1314 *
NŸU£d
,

1315 
T˛_I¡îp
 *
öãΩ
,

1316 
¨gc
,

1317 **
¨gv


1319 
sqlôe3_°mt
 *
pStmt
;

1320 
rc
;

1321 
idx
;

1322 if–
¨gc
!=5 ){

1323 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

1325  
TCL_ERROR
;

1327 if–
	`gëStmtPoöãr
(
öãΩ
, 
¨gv
[1], &
pStmt
ËË 
TCL_ERROR
;

1328 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[2], &
idx
ËË 
TCL_ERROR
;

1329 if–
	`°rcmp
(
¨gv
[4],"null")==0 ){

1330 
rc
 = 
	`sqlôe3_böd_nuŒ
(
pStmt
, 
idx
);

1331 }if–
	`°rcmp
(
¨gv
[4],"static")==0 ){

1332 
rc
 = 
	`sqlôe3_böd_ãxt
(
pStmt
, 
idx
, 
sqlôe_°©ic_böd_vÆue
, -1, 0);

1333 }if–
	`°rcmp
(
¨gv
[4],"normal")==0 ){

1334 
rc
 = 
	`sqlôe3_böd_ãxt
(
pStmt
, 
idx
, 
¨gv
[3], -1, 
SQLITE_TRANSIENT
);

1335 }if–
	`°rcmp
(
¨gv
[4],"blob10")==0 ){

1336 
rc
 = 
	`sqlôe3_böd_ãxt
(
pStmt
, 
idx
, "abc\000xyz\000pq", 10, 
SQLITE_STATIC
);

1338 
	`T˛_AµídResu…
(
öãΩ
, "4thárgument should be "

1340  
TCL_ERROR
;

1342 if–
	`sqlôe3Te°EºCode
(
öãΩ
, 
	`StmtToDb
(
pStmt
), 
rc
ËË 
TCL_ERROR
;

1343 if–
rc
 ){

1344 
zBuf
[50];

1345 
	`•rötf
(
zBuf
, "(%dË", 
rc
);

1346 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 
	`sqlôe3EºSå
(
rc
), 0);

1347  
TCL_ERROR
;

1349  
TCL_OK
;

1350 
	}
}

1352 #i‚de‡
SQLITE_OMIT_UTF16


1381 
T˛_I¡îp
* 
	gpTe°CﬁœãI¡îp
;

1382 
	$ã°_cﬁœã_func
(

1383 *
pCtx
,

1384 
nA
, c⁄° *
zA
,

1385 
nB
, c⁄° *
zB


1387 
T˛_I¡îp
 *
i
 = 
pTe°CﬁœãI¡îp
;

1388 
ícö
 = ()
pCtx
;

1389 
ªs
;

1390 
n
;

1392 
sqlôe3_vÆue
 *
pVÆ
;

1393 
T˛_Obj
 *
pX
;

1395 
pX
 = 
	`T˛_NewSåögObj
("test_collate", -1);

1396 
	`T˛_In¸RefCou¡
(
pX
);

1398  
ícö
 ){

1399 
SQLITE_UTF8
:

1400 
	`T˛_Li°ObjAµídEÀmít
(
i
,
pX
,
	`T˛_NewSåögObj
("UTF-8",-1));

1402 
SQLITE_UTF16LE
:

1403 
	`T˛_Li°ObjAµídEÀmít
(
i
,
pX
,
	`T˛_NewSåögObj
("UTF-16LE",-1));

1405 
SQLITE_UTF16BE
:

1406 
	`T˛_Li°ObjAµídEÀmít
(
i
,
pX
,
	`T˛_NewSåögObj
("UTF-16BE",-1));

1409 
	`as£π
(0);

1412 
pVÆ
 = 
	`sqlôe3VÆueNew
();

1413 
	`sqlôe3VÆueSëSå
(
pVÆ
, 
nA
, 
zA
, 
ícö
, 
SQLITE_STATIC
);

1414 
n
 = 
	`sqlôe3_vÆue_byãs
(
pVÆ
);

1415 
	`T˛_Li°ObjAµídEÀmít
(
i
,
pX
,

1416 
	`T˛_NewSåögObj
((*)
	`sqlôe3_vÆue_ãxt
(
pVÆ
),
n
));

1417 
	`sqlôe3VÆueSëSå
(
pVÆ
, 
nB
, 
zB
, 
ícö
, 
SQLITE_STATIC
);

1418 
n
 = 
	`sqlôe3_vÆue_byãs
(
pVÆ
);

1419 
	`T˛_Li°ObjAµídEÀmít
(
i
,
pX
,

1420 
	`T˛_NewSåögObj
((*)
	`sqlôe3_vÆue_ãxt
(
pVÆ
),
n
));

1421 
	`sqlôe3VÆueFªe
(
pVÆ
);

1423 
	`T˛_EvÆObjEx
(
i
, 
pX
, 0);

1424 
	`T˛_De¸RefCou¡
(
pX
);

1425 
	`T˛_GëI¡FromObj
(
i
, 
	`T˛_GëObjResu…
(i), &
ªs
);

1426  
ªs
;

1427 
	}
}

1428 
	$ã°_cﬁœã
(

1429 * 
˛õ¡D©a
,

1430 
T˛_I¡îp
 *
öãΩ
,

1431 
objc
,

1432 
T˛_Obj
 *
CONST
 
objv
[]

1434 
sqlôe3
 *
db
;

1435 
vÆ
;

1436 
sqlôe3_vÆue
 *
pVÆ
;

1437 
rc
;

1439 if–
objc
!=5 ) 
bad_¨gs
;

1440 
pTe°CﬁœãI¡îp
 = 
öãΩ
;

1441 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

1443 if–
TCL_OK
!=
	`T˛_GëBoﬁónFromObj
(
öãΩ
, 
objv
[2], &
vÆ
ËË 
TCL_ERROR
;

1444 
rc
 = 
	`sqlôe3_¸óã_cﬁœti⁄
(
db
, "ã°_cﬁœã", 
SQLITE_UTF8
,

1445 (*)
SQLITE_UTF8
, 
vÆ
?
ã°_cﬁœã_func
:0);

1446 if–
rc
==
SQLITE_OK
 ){

1447 if–
TCL_OK
!=
	`T˛_GëBoﬁónFromObj
(
öãΩ
, 
objv
[3], &
vÆ
ËË 
TCL_ERROR
;

1448 
rc
 = 
	`sqlôe3_¸óã_cﬁœti⁄
(
db
, "ã°_cﬁœã", 
SQLITE_UTF16LE
,

1449 (*)
SQLITE_UTF16LE
, 
vÆ
?
ã°_cﬁœã_func
:0);

1450 if–
TCL_OK
!=
	`T˛_GëBoﬁónFromObj
(
öãΩ
, 
objv
[4], &
vÆ
ËË 
TCL_ERROR
;

1452 #ifde‡
SQLITE_MEMDEBUG


1453 if–
sqlôe3_iMÆlocFaû
>0 ){

1454 
sqlôe3_iMÆlocFaû
++;

1457 
pVÆ
 = 
	`sqlôe3VÆueNew
();

1458 
	`sqlôe3VÆueSëSå
(
pVÆ
, -1, "ã°_cﬁœã", 
SQLITE_UTF8
, 
SQLITE_STATIC
);

1459 
rc
 = 
	`sqlôe3_¸óã_cﬁœti⁄16
(
db
,

1460 
	`sqlôe3VÆueText
(
pVÆ
, 
SQLITE_UTF16NATIVE
), 
SQLITE_UTF16BE
,

1461 (*)
SQLITE_UTF16BE
, 
vÆ
?
ã°_cﬁœã_func
:0);

1462 
	`sqlôe3VÆueFªe
(
pVÆ
);

1464 if–
	`sqlôe3Te°EºCode
(
öãΩ
, 
db
, 
rc
ËË 
TCL_ERROR
;

1466 if–
rc
!=
SQLITE_OK
 ){

1467 
	`T˛_AµídResu…
(
öãΩ
, 
	`sqlôe3Te°Eº‹Name
(
rc
), 0);

1468  
TCL_ERROR
;

1470  
TCL_OK
;

1472 
bad_¨gs
:

1473 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

1474 
	`T˛_GëSåögFromObj
(
objv
[0], 0), " <DB> <utf8> <utf16le> <utf16be>", 0);

1475  
TCL_ERROR
;

1476 
	}
}

1484 
	gzNìdedCﬁœti⁄
[200];

1485 *
	gpzNìdedCﬁœti⁄
 = 
zNìdedCﬁœti⁄
;

1492 
	$ã°_cﬁœã_√eded_cb
(

1493 *
pCtx
,

1494 
sqlôe3
 *
db
,

1495 
eTextRï
,

1496 c⁄° *
pName


1498 
íc
 = 
	`ENC
(
db
);

1499 
i
;

1500 *
z
;

1501 
z
 = (*)
pName
, 
i
=0; *z || z[1]; z++){

1502 if–*
z
 ) 
zNìdedCﬁœti⁄
[
i
++] = *z;

1504 
zNìdedCﬁœti⁄
[
i
] = 0;

1505 
	`sqlôe3_¸óã_cﬁœti⁄
(

1506 
db
, "ã°_cﬁœã", 
	`ENC
(db), (*)
íc
, 
ã°_cﬁœã_func
);

1507 
	}
}

1512 
	$ã°_cﬁœã_√eded
(

1513 * 
˛õ¡D©a
,

1514 
T˛_I¡îp
 *
öãΩ
,

1515 
objc
,

1516 
T˛_Obj
 *
CONST
 
objv
[]

1518 
sqlôe3
 *
db
;

1519 
rc
;

1521 if–
objc
!=2 ) 
bad_¨gs
;

1522 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

1523 
rc
 = 
	`sqlôe3_cﬁœti⁄_√eded16
(
db
, 0, 
ã°_cﬁœã_√eded_cb
);

1524 
zNìdedCﬁœti⁄
[0] = 0;

1525 if–
	`sqlôe3Te°EºCode
(
öãΩ
, 
db
, 
rc
ËË 
TCL_ERROR
;

1526  
TCL_OK
;

1528 
bad_¨gs
:

1529 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "DB");

1530  
TCL_ERROR
;

1531 
	}
}

1559 #i‚de‡
SQLITE_OMIT_UTF16


1560 
	$ã°_fun˘i⁄_utf8
(

1561 
sqlôe3_c⁄ãxt
 *
pCtx
,

1562 
nArg
,

1563 
sqlôe3_vÆue
 **
¨gv


1565 
T˛_I¡îp
 *
öãΩ
;

1566 
T˛_Obj
 *
pX
;

1567 
sqlôe3_vÆue
 *
pVÆ
;

1568 
öãΩ
 = (
T˛_I¡îp
 *)
	`sqlôe3_u£r_d©a
(
pCtx
);

1569 
pX
 = 
	`T˛_NewSåögObj
("test_function", -1);

1570 
	`T˛_In¸RefCou¡
(
pX
);

1571 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pX
, 
	`T˛_NewSåögObj
("UTF-8", -1));

1572 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pX
,

1573 
	`T˛_NewSåögObj
((*)
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]), -1));

1574 
	`T˛_EvÆObjEx
(
öãΩ
, 
pX
, 0);

1575 
	`T˛_De¸RefCou¡
(
pX
);

1576 
	`sqlôe3_ªsu…_ãxt
(
pCtx
, 
	`T˛_GëSåögResu…
(
öãΩ
), -1, 
SQLITE_TRANSIENT
);

1577 
pVÆ
 = 
	`sqlôe3VÆueNew
();

1578 
	`sqlôe3VÆueSëSå
(
pVÆ
, -1, 
	`T˛_GëSåögResu…
(
öãΩ
),

1579 
SQLITE_UTF8
, 
SQLITE_STATIC
);

1580 
	`sqlôe3_ªsu…_ãxt16be
(
pCtx
, 
	`sqlôe3_vÆue_ãxt16be
(
pVÆ
),

1581 -1, 
SQLITE_TRANSIENT
);

1582 
	`sqlôe3VÆueFªe
(
pVÆ
);

1583 
	}
}

1584 
	$ã°_fun˘i⁄_utf16À
(

1585 
sqlôe3_c⁄ãxt
 *
pCtx
,

1586 
nArg
,

1587 
sqlôe3_vÆue
 **
¨gv


1589 
T˛_I¡îp
 *
öãΩ
;

1590 
T˛_Obj
 *
pX
;

1591 
sqlôe3_vÆue
 *
pVÆ
;

1592 
öãΩ
 = (
T˛_I¡îp
 *)
	`sqlôe3_u£r_d©a
(
pCtx
);

1593 
pX
 = 
	`T˛_NewSåögObj
("test_function", -1);

1594 
	`T˛_In¸RefCou¡
(
pX
);

1595 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pX
, 
	`T˛_NewSåögObj
("UTF-16LE", -1));

1596 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pX
,

1597 
	`T˛_NewSåögObj
((*)
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]), -1));

1598 
	`T˛_EvÆObjEx
(
öãΩ
, 
pX
, 0);

1599 
	`T˛_De¸RefCou¡
(
pX
);

1600 
pVÆ
 = 
	`sqlôe3VÆueNew
();

1601 
	`sqlôe3VÆueSëSå
(
pVÆ
, -1, 
	`T˛_GëSåögResu…
(
öãΩ
),

1602 
SQLITE_UTF8
, 
SQLITE_STATIC
);

1603 
	`sqlôe3_ªsu…_ãxt
(
pCtx
,(*)
	`sqlôe3_vÆue_ãxt
(
pVÆ
),-1,
SQLITE_TRANSIENT
);

1604 
	`sqlôe3VÆueFªe
(
pVÆ
);

1605 
	}
}

1606 
	$ã°_fun˘i⁄_utf16be
(

1607 
sqlôe3_c⁄ãxt
 *
pCtx
,

1608 
nArg
,

1609 
sqlôe3_vÆue
 **
¨gv


1611 
T˛_I¡îp
 *
öãΩ
;

1612 
T˛_Obj
 *
pX
;

1613 
sqlôe3_vÆue
 *
pVÆ
;

1614 
öãΩ
 = (
T˛_I¡îp
 *)
	`sqlôe3_u£r_d©a
(
pCtx
);

1615 
pX
 = 
	`T˛_NewSåögObj
("test_function", -1);

1616 
	`T˛_In¸RefCou¡
(
pX
);

1617 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pX
, 
	`T˛_NewSåögObj
("UTF-16BE", -1));

1618 
	`T˛_Li°ObjAµídEÀmít
(
öãΩ
, 
pX
,

1619 
	`T˛_NewSåögObj
((*)
	`sqlôe3_vÆue_ãxt
(
¨gv
[0]), -1));

1620 
	`T˛_EvÆObjEx
(
öãΩ
, 
pX
, 0);

1621 
	`T˛_De¸RefCou¡
(
pX
);

1622 
pVÆ
 = 
	`sqlôe3VÆueNew
();

1623 
	`sqlôe3VÆueSëSå
(
pVÆ
, -1, 
	`T˛_GëSåögResu…
(
öãΩ
),

1624 
SQLITE_UTF8
, 
SQLITE_STATIC
);

1625 
	`sqlôe3_ªsu…_ãxt16À
(
pCtx
, 
	`sqlôe3_vÆue_ãxt16À
(
pVÆ
),

1626 -1, 
SQLITE_TRANSIENT
);

1627 
	`sqlôe3VÆueFªe
(
pVÆ
);

1628 
	}
}

1630 
	$ã°_fun˘i⁄
(

1631 * 
˛õ¡D©a
,

1632 
T˛_I¡îp
 *
öãΩ
,

1633 
objc
,

1634 
T˛_Obj
 *
CONST
 
objv
[]

1636 #i‚de‡
SQLITE_OMIT_UTF16


1637 
sqlôe3
 *
db
;

1638 
vÆ
;

1640 if–
objc
!=5 ) 
bad_¨gs
;

1641 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

1643 if–
TCL_OK
!=
	`T˛_GëBoﬁónFromObj
(
öãΩ
, 
objv
[2], &
vÆ
ËË 
TCL_ERROR
;

1644 if–
vÆ
 ){

1645 
	`sqlôe3_¸óã_fun˘i⁄
(
db
, "ã°_fun˘i⁄", 1, 
SQLITE_UTF8
,

1646 
öãΩ
, 
ã°_fun˘i⁄_utf8
, 0, 0);

1648 if–
TCL_OK
!=
	`T˛_GëBoﬁónFromObj
(
öãΩ
, 
objv
[3], &
vÆ
ËË 
TCL_ERROR
;

1649 if–
vÆ
 ){

1650 
	`sqlôe3_¸óã_fun˘i⁄
(
db
, "ã°_fun˘i⁄", 1, 
SQLITE_UTF16LE
,

1651 
öãΩ
, 
ã°_fun˘i⁄_utf16À
, 0, 0);

1653 if–
TCL_OK
!=
	`T˛_GëBoﬁónFromObj
(
öãΩ
, 
objv
[4], &
vÆ
ËË 
TCL_ERROR
;

1654 if–
vÆ
 ){

1655 
	`sqlôe3_¸óã_fun˘i⁄
(
db
, "ã°_fun˘i⁄", 1, 
SQLITE_UTF16BE
,

1656 
öãΩ
, 
ã°_fun˘i⁄_utf16be
, 0, 0);

1659  
TCL_OK
;

1660 
bad_¨gs
:

1661 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

1662 
	`T˛_GëSåögFromObj
(
objv
[0], 0), " <DB> <utf8> <utf16le> <utf16be>", 0);

1664  
TCL_ERROR
;

1665 
	}
}

1675 
	$ã°_îr°r
(

1676 * 
˛õ¡D©a
,

1677 
T˛_I¡îp
 *
öãΩ
,

1678 
objc
,

1679 
T˛_Obj
 *
CONST
 
objv
[]

1681 *
zCode
;

1682 
i
;

1683 if–
objc
!=1 ){

1684 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "<error code>");

1687 
zCode
 = 
	`T˛_GëSåög
(
objv
[1]);

1688 
i
=0; i<200; i++){

1689 if–0==
	`°rcmp
(
	`îr‹Name
(
i
), 
zCode
) ) ;

1691 
	`T˛_SëResu…
(
öãΩ
, (*)
	`sqlôe3EºSå
(
i
), 0);

1692  
TCL_OK
;

1693 
	}
}

1708 
	$ã°_bªakpoöt
(

1709 *
NŸU£d
,

1710 
T˛_I¡îp
 *
öãΩ
,

1711 
¨gc
,

1712 **
¨gv


1714  
TCL_OK
;

1715 
	}
}

1724 
	$ã°_böd_öt
(

1725 * 
˛õ¡D©a
,

1726 
T˛_I¡îp
 *
öãΩ
,

1727 
objc
,

1728 
T˛_Obj
 *
CONST
 
objv
[]

1730 
sqlôe3_°mt
 *
pStmt
;

1731 
idx
;

1732 
vÆue
;

1733 
rc
;

1735 if–
objc
!=4 ){

1736 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

1737 
	`T˛_GëSåögFromObj
(
objv
[0], 0), " STMT N VALUE", 0);

1738  
TCL_ERROR
;

1741 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt
ËË 
TCL_ERROR
;

1742 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
idx
ËË 
TCL_ERROR
;

1743 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[3], &
vÆue
ËË 
TCL_ERROR
;

1745 
rc
 = 
	`sqlôe3_böd_öt
(
pStmt
, 
idx
, 
vÆue
);

1746 if–
	`sqlôe3Te°EºCode
(
öãΩ
, 
	`StmtToDb
(
pStmt
), 
rc
ËË 
TCL_ERROR
;

1747 if–
rc
!=
SQLITE_OK
 ){

1748  
TCL_ERROR
;

1751  
TCL_OK
;

1752 
	}
}

1762 
	$ã°_böd_öt64
(

1763 * 
˛õ¡D©a
,

1764 
T˛_I¡îp
 *
öãΩ
,

1765 
objc
,

1766 
T˛_Obj
 *
CONST
 
objv
[]

1768 
sqlôe3_°mt
 *
pStmt
;

1769 
idx
;

1770 
i64
 
vÆue
;

1771 
rc
;

1773 if–
objc
!=4 ){

1774 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

1775 
	`T˛_GëSåögFromObj
(
objv
[0], 0), " STMT N VALUE", 0);

1776  
TCL_ERROR
;

1779 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt
ËË 
TCL_ERROR
;

1780 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
idx
ËË 
TCL_ERROR
;

1781 if–
	`T˛_GëWideI¡FromObj
(
öãΩ
, 
objv
[3], &
vÆue
ËË 
TCL_ERROR
;

1783 
rc
 = 
	`sqlôe3_böd_öt64
(
pStmt
, 
idx
, 
vÆue
);

1784 if–
	`sqlôe3Te°EºCode
(
öãΩ
, 
	`StmtToDb
(
pStmt
), 
rc
ËË 
TCL_ERROR
;

1785 if–
rc
!=
SQLITE_OK
 ){

1786  
TCL_ERROR
;

1789  
TCL_OK
;

1790 
	}
}

1800 
	$ã°_böd_doubÀ
(

1801 * 
˛õ¡D©a
,

1802 
T˛_I¡îp
 *
öãΩ
,

1803 
objc
,

1804 
T˛_Obj
 *
CONST
 
objv
[]

1806 
sqlôe3_°mt
 *
pStmt
;

1807 
idx
;

1808 
vÆue
;

1809 
rc
;

1811 if–
objc
!=4 ){

1812 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

1813 
	`T˛_GëSåögFromObj
(
objv
[0], 0), " STMT N VALUE", 0);

1814  
TCL_ERROR
;

1817 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt
ËË 
TCL_ERROR
;

1818 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
idx
ËË 
TCL_ERROR
;

1819 if–
	`T˛_GëDoubÀFromObj
(
öãΩ
, 
objv
[3], &
vÆue
ËË 
TCL_ERROR
;

1821 
rc
 = 
	`sqlôe3_böd_doubÀ
(
pStmt
, 
idx
, 
vÆue
);

1822 if–
	`sqlôe3Te°EºCode
(
öãΩ
, 
	`StmtToDb
(
pStmt
), 
rc
ËË 
TCL_ERROR
;

1823 if–
rc
!=
SQLITE_OK
 ){

1824  
TCL_ERROR
;

1827  
TCL_OK
;

1828 
	}
}

1837 
	$ã°_böd_nuŒ
(

1838 * 
˛õ¡D©a
,

1839 
T˛_I¡îp
 *
öãΩ
,

1840 
objc
,

1841 
T˛_Obj
 *
CONST
 
objv
[]

1843 
sqlôe3_°mt
 *
pStmt
;

1844 
idx
;

1845 
rc
;

1847 if–
objc
!=3 ){

1848 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

1849 
	`T˛_GëSåögFromObj
(
objv
[0], 0), " STMT N", 0);

1850  
TCL_ERROR
;

1853 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt
ËË 
TCL_ERROR
;

1854 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
idx
ËË 
TCL_ERROR
;

1856 
rc
 = 
	`sqlôe3_böd_nuŒ
(
pStmt
, 
idx
);

1857 if–
	`sqlôe3Te°EºCode
(
öãΩ
, 
	`StmtToDb
(
pStmt
), 
rc
ËË 
TCL_ERROR
;

1858 if–
rc
!=
SQLITE_OK
 ){

1859  
TCL_ERROR
;

1862  
TCL_OK
;

1863 
	}
}

1873 
	$ã°_böd_ãxt
(

1874 * 
˛õ¡D©a
,

1875 
T˛_I¡îp
 *
öãΩ
,

1876 
objc
,

1877 
T˛_Obj
 *
CONST
 
objv
[]

1879 
sqlôe3_°mt
 *
pStmt
;

1880 
idx
;

1881 
byãs
;

1882 *
vÆue
;

1883 
rc
;

1885 if–
objc
!=5 ){

1886 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

1887 
	`T˛_GëSåögFromObj
(
objv
[0], 0), " STMT N VALUE BYTES", 0);

1888  
TCL_ERROR
;

1891 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt
ËË 
TCL_ERROR
;

1892 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
idx
ËË 
TCL_ERROR
;

1893 
vÆue
 = 
	`T˛_GëSåög
(
objv
[3]);

1894 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[4], &
byãs
ËË 
TCL_ERROR
;

1896 
rc
 = 
	`sqlôe3_böd_ãxt
(
pStmt
, 
idx
, 
vÆue
, 
byãs
, 
SQLITE_TRANSIENT
);

1897 if–
	`sqlôe3Te°EºCode
(
öãΩ
, 
	`StmtToDb
(
pStmt
), 
rc
ËË 
TCL_ERROR
;

1898 if–
rc
!=
SQLITE_OK
 ){

1899 
	`T˛_AµídResu…
(
öãΩ
, 
	`sqlôe3Te°Eº‹Name
(
rc
), 0);

1900  
TCL_ERROR
;

1903  
TCL_OK
;

1904 
	}
}

1914 
	$ã°_böd_ãxt16
(

1915 * 
˛õ¡D©a
,

1916 
T˛_I¡îp
 *
öãΩ
,

1917 
objc
,

1918 
T˛_Obj
 *
CONST
 
objv
[]

1920 #i‚de‡
SQLITE_OMIT_UTF16


1921 
sqlôe3_°mt
 *
pStmt
;

1922 
idx
;

1923 
byãs
;

1924 *
vÆue
;

1925 
rc
;

1927 (*
xDñ
)(Ë(
objc
==6?
SQLITE_STATIC
:
SQLITE_TRANSIENT
);

1928 
T˛_Obj
 *
oStmt
 = 
objv
[
objc
-4];

1929 
T˛_Obj
 *
oN
 = 
objv
[
objc
-3];

1930 
T˛_Obj
 *
oSåög
 = 
objv
[
objc
-2];

1931 
T˛_Obj
 *
oByãs
 = 
objv
[
objc
-1];

1933 if–
objc
!=5 && objc!=6){

1934 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

1935 
	`T˛_GëSåögFromObj
(
objv
[0], 0), " STMT N VALUE BYTES", 0);

1936  
TCL_ERROR
;

1939 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
oStmt
), &
pStmt
ËË 
TCL_ERROR
;

1940 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
oN
, &
idx
ËË 
TCL_ERROR
;

1941 
vÆue
 = (*)
	`T˛_GëByãAºayFromObj
(
oSåög
, 0);

1942 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
oByãs
, &
byãs
ËË 
TCL_ERROR
;

1944 
rc
 = 
	`sqlôe3_böd_ãxt16
(
pStmt
, 
idx
, (*)
vÆue
, 
byãs
, 
xDñ
);

1945 if–
	`sqlôe3Te°EºCode
(
öãΩ
, 
	`StmtToDb
(
pStmt
), 
rc
ËË 
TCL_ERROR
;

1946 if–
rc
!=
SQLITE_OK
 ){

1947  
TCL_ERROR
;

1951  
TCL_OK
;

1952 
	}
}

1961 
	$ã°_böd_blob
(

1962 * 
˛õ¡D©a
,

1963 
T˛_I¡îp
 *
öãΩ
,

1964 
objc
,

1965 
T˛_Obj
 *
CONST
 
objv
[]

1967 
sqlôe3_°mt
 *
pStmt
;

1968 
idx
;

1969 
byãs
;

1970 *
vÆue
;

1971 
rc
;

1973 if–
objc
!=5 ){

1974 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

1975 
	`T˛_GëSåögFromObj
(
objv
[0], 0), " STMT N DATA BYTES", 0);

1976  
TCL_ERROR
;

1979 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt
ËË 
TCL_ERROR
;

1980 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
idx
ËË 
TCL_ERROR
;

1981 
vÆue
 = 
	`T˛_GëSåög
(
objv
[3]);

1982 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[4], &
byãs
ËË 
TCL_ERROR
;

1984 
rc
 = 
	`sqlôe3_böd_blob
(
pStmt
, 
idx
, 
vÆue
, 
byãs
, 
SQLITE_TRANSIENT
);

1985 if–
	`sqlôe3Te°EºCode
(
öãΩ
, 
	`StmtToDb
(
pStmt
), 
rc
ËË 
TCL_ERROR
;

1986 if–
rc
!=
SQLITE_OK
 ){

1987  
TCL_ERROR
;

1990  
TCL_OK
;

1991 
	}
}

1998 
	$ã°_böd_∑ømëî_cou¡
(

1999 * 
˛õ¡D©a
,

2000 
T˛_I¡îp
 *
öãΩ
,

2001 
objc
,

2002 
T˛_Obj
 *
CONST
 
objv
[]

2004 
sqlôe3_°mt
 *
pStmt
;

2006 if–
objc
!=2 ){

2007 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "STMT");

2008  
TCL_ERROR
;

2010 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt
ËË 
TCL_ERROR
;

2011 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
	`sqlôe3_böd_∑ømëî_cou¡
(
pStmt
)));

2012  
TCL_OK
;

2013 
	}
}

2022 
	$ã°_böd_∑ømëî_«me
(

2023 * 
˛õ¡D©a
,

2024 
T˛_I¡îp
 *
öãΩ
,

2025 
objc
,

2026 
T˛_Obj
 *
CONST
 
objv
[]

2028 
sqlôe3_°mt
 *
pStmt
;

2029 
i
;

2031 if–
objc
!=3 ){

2032 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "STMT N");

2033  
TCL_ERROR
;

2035 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt
ËË 
TCL_ERROR
;

2036 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
i
ËË 
TCL_ERROR
;

2037 
	`T˛_SëObjResu…
(
öãΩ
,

2038 
	`T˛_NewSåögObj
(
	`sqlôe3_böd_∑ømëî_«me
(
pStmt
,
i
),-1)

2040  
TCL_OK
;

2041 
	}
}

2049 
	$ã°_böd_∑ømëî_ödex
(

2050 * 
˛õ¡D©a
,

2051 
T˛_I¡îp
 *
öãΩ
,

2052 
objc
,

2053 
T˛_Obj
 *
CONST
 
objv
[]

2055 
sqlôe3_°mt
 *
pStmt
;

2057 if–
objc
!=3 ){

2058 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "STMT NAME");

2059  
TCL_ERROR
;

2061 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt
ËË 
TCL_ERROR
;

2062 
	`T˛_SëObjResu…
(
öãΩ
,

2063 
	`T˛_NewI¡Obj
(

2064 
	`sqlôe3_böd_∑ømëî_ödex
(
pStmt
,
	`T˛_GëSåög
(
objv
[2]))

2067  
TCL_OK
;

2068 
	}
}

2075 
	$ã°_˛ór_bödögs
(

2076 * 
˛õ¡D©a
,

2077 
T˛_I¡îp
 *
öãΩ
,

2078 
objc
,

2079 
T˛_Obj
 *
CONST
 
objv
[]

2081 
sqlôe3_°mt
 *
pStmt
;

2083 if–
objc
!=2 ){

2084 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "STMT");

2085  
TCL_ERROR
;

2087 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt
ËË 
TCL_ERROR
;

2088 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
	`sqlôe3_˛ór_bödögs
(
pStmt
)));

2089  
TCL_OK
;

2090 
	}
}

2099 
	$ã°_îrcode
(

2100 * 
˛õ¡D©a
,

2101 
T˛_I¡îp
 *
öãΩ
,

2102 
objc
,

2103 
T˛_Obj
 *
CONST
 
objv
[]

2105 
sqlôe3
 *
db
;

2107 if–
objc
!=2 ){

2108 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

2109 
	`T˛_GëSåög
(
objv
[0]), " DB", 0);

2110  
TCL_ERROR
;

2112 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

2113 
	`T˛_SëResu…
(
öãΩ
, (*)
	`îr‹Name
(
	`sqlôe3_îrcode
(
db
)), 0);

2114  
TCL_OK
;

2115 
	}
}

2123 
	$ã°_îrmsg
(

2124 * 
˛õ¡D©a
,

2125 
T˛_I¡îp
 *
öãΩ
,

2126 
objc
,

2127 
T˛_Obj
 *
CONST
 
objv
[]

2129 
sqlôe3
 *
db
;

2130 c⁄° *
zEº
;

2132 if–
objc
!=2 ){

2133 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

2134 
	`T˛_GëSåög
(
objv
[0]), " DB", 0);

2135  
TCL_ERROR
;

2137 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

2139 
zEº
 = 
	`sqlôe3_îrmsg
(
db
);

2140 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewSåögObj
(
zEº
, -1));

2141  
TCL_OK
;

2142 
	}
}

2152 
	$ã°_îrmsg16
(

2153 * 
˛õ¡D©a
,

2154 
T˛_I¡îp
 *
öãΩ
,

2155 
objc
,

2156 
T˛_Obj
 *
CONST
 
objv
[]

2158 #i‚de‡
SQLITE_OMIT_UTF16


2159 
sqlôe3
 *
db
;

2160 c⁄° *
zEº
;

2161 
byãs
 = 0;

2163 if–
objc
!=2 ){

2164 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

2165 
	`T˛_GëSåög
(
objv
[0]), " DB", 0);

2166  
TCL_ERROR
;

2168 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

2170 
zEº
 = 
	`sqlôe3_îrmsg16
(
db
);

2171 if–
zEº
 ){

2172 
byãs
 = 
	`sqlôe3utf16ByãLí
(
zEº
, -1);

2174 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewByãAºayObj
(
zEº
, 
byãs
));

2176  
TCL_OK
;

2177 
	}
}

2187 
	$ã°_¥ï¨e
(

2188 * 
˛õ¡D©a
,

2189 
T˛_I¡îp
 *
öãΩ
,

2190 
objc
,

2191 
T˛_Obj
 *
CONST
 
objv
[]

2193 
sqlôe3
 *
db
;

2194 c⁄° *
zSql
;

2195 
byãs
;

2196 c⁄° *
zTaû
 = 0;

2197 
sqlôe3_°mt
 *
pStmt
 = 0;

2198 
zBuf
[50];

2199 
rc
;

2201 if–
objc
!=5 ){

2202 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

2203 
	`T˛_GëSåög
(
objv
[0]), " DB sql bytesÅailvar", 0);

2204  
TCL_ERROR
;

2206 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

2207 
zSql
 = 
	`T˛_GëSåög
(
objv
[2]);

2208 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[3], &
byãs
ËË 
TCL_ERROR
;

2210 
rc
 = 
	`sqlôe3_¥ï¨e
(
db
, 
zSql
, 
byãs
, &
pStmt
, &
zTaû
);

2211 if–
	`sqlôe3Te°EºCode
(
öãΩ
, 
db
, 
rc
ËË 
TCL_ERROR
;

2212 if–
zTaû
 ){

2213 if–
byãs
>=0 ){

2214 
byãs
 = byã†- (
zTaû
-
zSql
);

2216 
	`T˛_ObjSëV¨2
(
öãΩ
, 
objv
[4], 0, 
	`T˛_NewSåögObj
(
zTaû
, 
byãs
), 0);

2218 if–
rc
!=
SQLITE_OK
 ){

2219 
	`as£π
–
pStmt
==0 );

2220 
	`•rötf
(
zBuf
, "(%dË", 
rc
);

2221 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 
	`sqlôe3_îrmsg
(
db
), 0);

2222  
TCL_ERROR
;

2225 if–
pStmt
 ){

2226 if–
	`sqlôe3Te°MakePoöãrSå
(
öãΩ
, 
zBuf
, 
pStmt
ËË 
TCL_ERROR
;

2227 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

2229  
TCL_OK
;

2230 
	}
}

2240 
	$ã°_¥ï¨e16
(

2241 * 
˛õ¡D©a
,

2242 
T˛_I¡îp
 *
öãΩ
,

2243 
objc
,

2244 
T˛_Obj
 *
CONST
 
objv
[]

2246 #i‚de‡
SQLITE_OMIT_UTF16


2247 
sqlôe3
 *
db
;

2248 c⁄° *
zSql
;

2249 c⁄° *
zTaû
 = 0;

2250 
T˛_Obj
 *
pTaû
 = 0;

2251 
sqlôe3_°mt
 *
pStmt
 = 0;

2252 
zBuf
[50];

2253 
rc
;

2254 
byãs
;

2255 
objÀn
;

2257 if–
objc
!=5 ){

2258 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

2259 
	`T˛_GëSåög
(
objv
[0]), " DB sql bytesÅailvar", 0);

2260  
TCL_ERROR
;

2262 if–
	`gëDbPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
db
ËË 
TCL_ERROR
;

2263 
zSql
 = 
	`T˛_GëByãAºayFromObj
(
objv
[2], &
objÀn
);

2264 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[3], &
byãs
ËË 
TCL_ERROR
;

2266 
rc
 = 
	`sqlôe3_¥ï¨e16
(
db
, 
zSql
, 
byãs
, &
pStmt
, &
zTaû
);

2267 if–
	`sqlôe3Te°EºCode
(
öãΩ
, 
db
, 
rc
ËË 
TCL_ERROR
;

2268 if–
rc
 ){

2269  
TCL_ERROR
;

2272 if–
zTaû
 ){

2273 
objÀn
 = objÀ¿- ((
u8
 *)
zTaû
-(u8 *)
zSql
);

2275 
objÀn
 = 0;

2277 
pTaû
 = 
	`T˛_NewByãAºayObj
((
u8
 *)
zTaû
, 
objÀn
);

2278 
	`T˛_In¸RefCou¡
(
pTaû
);

2279 
	`T˛_ObjSëV¨2
(
öãΩ
, 
objv
[4], 0, 
pTaû
, 0);

2280 
	`T˛_De¸RefCou¡
(
pTaû
);

2282 if–
pStmt
 ){

2283 if–
	`sqlôe3Te°MakePoöãrSå
(
öãΩ
, 
zBuf
, 
pStmt
ËË 
TCL_ERROR
;

2285 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

2287  
TCL_OK
;

2288 
	}
}

2293 
	$ã°_›í
(

2294 * 
˛õ¡D©a
,

2295 
T˛_I¡îp
 *
öãΩ
,

2296 
objc
,

2297 
T˛_Obj
 *
CONST
 
objv
[]

2299 c⁄° *
zFûíame
;

2300 
sqlôe3
 *
db
;

2301 
rc
;

2302 
zBuf
[100];

2304 if–
objc
!=3 && objc!=2 ){

2305 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

2306 
	`T˛_GëSåög
(
objv
[0]), " filename options-list", 0);

2307  
TCL_ERROR
;

2310 
zFûíame
 = 
	`T˛_GëSåög
(
objv
[1]);

2311 
rc
 = 
	`sqlôe3_›í
(
zFûíame
, &
db
);

2313 if–
	`sqlôe3Te°MakePoöãrSå
(
öãΩ
, 
zBuf
, 
db
ËË 
TCL_ERROR
;

2314 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

2315  
TCL_OK
;

2316 
	}
}

2321 
	$ã°_›í16
(

2322 * 
˛õ¡D©a
,

2323 
T˛_I¡îp
 *
öãΩ
,

2324 
objc
,

2325 
T˛_Obj
 *
CONST
 
objv
[]

2327 #i‚de‡
SQLITE_OMIT_UTF16


2328 c⁄° *
zFûíame
;

2329 
sqlôe3
 *
db
;

2330 
rc
;

2331 
zBuf
[100];

2333 if–
objc
!=3 ){

2334 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

2335 
	`T˛_GëSåög
(
objv
[0]), " filename options-list", 0);

2336  
TCL_ERROR
;

2339 
zFûíame
 = 
	`T˛_GëByãAºayFromObj
(
objv
[1], 0);

2340 
rc
 = 
	`sqlôe3_›í16
(
zFûíame
, &
db
);

2342 if–
	`sqlôe3Te°MakePoöãrSå
(
öãΩ
, 
zBuf
, 
db
ËË 
TCL_ERROR
;

2343 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

2345  
TCL_OK
;

2346 
	}
}

2354 
	$ã°_com∂ëe16
(

2355 * 
˛õ¡D©a
,

2356 
T˛_I¡îp
 *
öãΩ
,

2357 
objc
,

2358 
T˛_Obj
 *
CONST
 
objv
[]

2360 #i‡!
	`deföed
(
SQLITE_OMIT_COMPLETE
Ë&& !deföed(
SQLITE_OMIT_UTF16
)

2361 *
zBuf
;

2363 if–
objc
!=2 ){

2364 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "<utf-16 sql>");

2365  
TCL_ERROR
;

2368 
zBuf
 = (*)
	`T˛_GëByãAºayFromObj
(
objv
[1], 0);

2369 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
	`sqlôe3_com∂ëe16
(
zBuf
)));

2371  
TCL_OK
;

2372 
	}
}

2379 
	$ã°_°ï
(

2380 * 
˛õ¡D©a
,

2381 
T˛_I¡îp
 *
öãΩ
,

2382 
objc
,

2383 
T˛_Obj
 *
CONST
 
objv
[]

2385 
sqlôe3_°mt
 *
pStmt
;

2386 
rc
;

2388 if–
objc
!=2 ){

2389 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

2390 
	`T˛_GëSåög
(
objv
[0]), " STMT", 0);

2391  
TCL_ERROR
;

2394 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt
ËË 
TCL_ERROR
;

2395 
rc
 = 
	`sqlôe3_°ï
(
pStmt
);

2398 
	`T˛_SëResu…
(
öãΩ
, (*)
	`îr‹Name
(
rc
), 0);

2399  
TCL_OK
;

2400 
	}
}

2407 
	$ã°_cﬁumn_cou¡
(

2408 * 
˛õ¡D©a
,

2409 
T˛_I¡îp
 *
öãΩ
,

2410 
objc
,

2411 
T˛_Obj
 *
CONST
 
objv
[]

2413 
sqlôe3_°mt
 *
pStmt
;

2415 if–
objc
!=2 ){

2416 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

2417 
	`T˛_GëSåög
(
objv
[0]), " STMT column", 0);

2418  
TCL_ERROR
;

2421 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt
ËË 
TCL_ERROR
;

2423 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
	`sqlôe3_cﬁumn_cou¡
(
pStmt
)));

2424  
TCL_OK
;

2425 
	}
}

2432 
	$ã°_cﬁumn_ty≥
(

2433 * 
˛õ¡D©a
,

2434 
T˛_I¡îp
 *
öãΩ
,

2435 
objc
,

2436 
T˛_Obj
 *
CONST
 
objv
[]

2438 
sqlôe3_°mt
 *
pStmt
;

2439 
cﬁ
;

2440 
ç
;

2442 if–
objc
!=3 ){

2443 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

2444 
	`T˛_GëSåög
(
objv
[0]), " STMT column", 0);

2445  
TCL_ERROR
;

2448 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt
ËË 
TCL_ERROR
;

2449 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
cﬁ
ËË 
TCL_ERROR
;

2451 
ç
 = 
	`sqlôe3_cﬁumn_ty≥
(
pStmt
, 
cﬁ
);

2452  
ç
 ){

2453 
SQLITE_INTEGER
:

2454 
	`T˛_SëResu…
(
öãΩ
, "INTEGER", 
TCL_STATIC
);

2456 
SQLITE_NULL
:

2457 
	`T˛_SëResu…
(
öãΩ
, "NULL", 
TCL_STATIC
);

2459 
SQLITE_FLOAT
:

2460 
	`T˛_SëResu…
(
öãΩ
, "FLOAT", 
TCL_STATIC
);

2462 
SQLITE_TEXT
:

2463 
	`T˛_SëResu…
(
öãΩ
, "TEXT", 
TCL_STATIC
);

2465 
SQLITE_BLOB
:

2466 
	`T˛_SëResu…
(
öãΩ
, "BLOB", 
TCL_STATIC
);

2469 
	`as£π
(0);

2472  
TCL_OK
;

2473 
	}
}

2481 
	$ã°_cﬁumn_öt64
(

2482 * 
˛õ¡D©a
,

2483 
T˛_I¡îp
 *
öãΩ
,

2484 
objc
,

2485 
T˛_Obj
 *
CONST
 
objv
[]

2487 
sqlôe3_°mt
 *
pStmt
;

2488 
cﬁ
;

2489 
i64
 
iVÆ
;

2491 if–
objc
!=3 ){

2492 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

2493 
	`T˛_GëSåög
(
objv
[0]), " STMT column", 0);

2494  
TCL_ERROR
;

2497 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt
ËË 
TCL_ERROR
;

2498 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
cﬁ
ËË 
TCL_ERROR
;

2500 
iVÆ
 = 
	`sqlôe3_cﬁumn_öt64
(
pStmt
, 
cﬁ
);

2501 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewWideI¡Obj
(
iVÆ
));

2502  
TCL_OK
;

2503 
	}
}

2508 
	$ã°_cﬁumn_blob
(

2509 * 
˛õ¡D©a
,

2510 
T˛_I¡îp
 *
öãΩ
,

2511 
objc
,

2512 
T˛_Obj
 *
CONST
 
objv
[]

2514 
sqlôe3_°mt
 *
pStmt
;

2515 
cﬁ
;

2517 
Àn
;

2518 c⁄° *
pBlob
;

2520 if–
objc
!=3 ){

2521 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

2522 
	`T˛_GëSåög
(
objv
[0]), " STMT column", 0);

2523  
TCL_ERROR
;

2526 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt
ËË 
TCL_ERROR
;

2527 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
cﬁ
ËË 
TCL_ERROR
;

2529 
pBlob
 = 
	`sqlôe3_cﬁumn_blob
(
pStmt
, 
cﬁ
);

2530 
Àn
 = 
	`sqlôe3_cﬁumn_byãs
(
pStmt
, 
cﬁ
);

2531 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewByãAºayObj
(
pBlob
, 
Àn
));

2532  
TCL_OK
;

2533 
	}
}

2540 
	$ã°_cﬁumn_doubÀ
(

2541 * 
˛õ¡D©a
,

2542 
T˛_I¡îp
 *
öãΩ
,

2543 
objc
,

2544 
T˛_Obj
 *
CONST
 
objv
[]

2546 
sqlôe3_°mt
 *
pStmt
;

2547 
cﬁ
;

2548 
rVÆ
;

2550 if–
objc
!=3 ){

2551 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

2552 
	`T˛_GëSåög
(
objv
[0]), " STMT column", 0);

2553  
TCL_ERROR
;

2556 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt
ËË 
TCL_ERROR
;

2557 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
cﬁ
ËË 
TCL_ERROR
;

2559 
rVÆ
 = 
	`sqlôe3_cﬁumn_doubÀ
(
pStmt
, 
cﬁ
);

2560 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewDoubÀObj
(
rVÆ
));

2561  
TCL_OK
;

2562 
	}
}

2569 
	$ã°_d©a_cou¡
(

2570 * 
˛õ¡D©a
,

2571 
T˛_I¡îp
 *
öãΩ
,

2572 
objc
,

2573 
T˛_Obj
 *
CONST
 
objv
[]

2575 
sqlôe3_°mt
 *
pStmt
;

2577 if–
objc
!=2 ){

2578 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

2579 
	`T˛_GëSåög
(
objv
[0]), " STMT column", 0);

2580  
TCL_ERROR
;

2583 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt
ËË 
TCL_ERROR
;

2585 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
	`sqlôe3_d©a_cou¡
(
pStmt
)));

2586  
TCL_OK
;

2587 
	}
}

2596 
	$ã°_°mt_utf8
(

2597 * 
˛õ¡D©a
,

2598 
T˛_I¡îp
 *
öãΩ
,

2599 
objc
,

2600 
T˛_Obj
 *
CONST
 
objv
[]

2602 
sqlôe3_°mt
 *
pStmt
;

2603 
cﬁ
;

2604 c⁄° *(*
xFunc
)(
sqlôe3_°mt
*, Ë
˛õ¡D©a
;

2605 c⁄° *
zRë
;

2607 if–
objc
!=3 ){

2608 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

2609 
	`T˛_GëSåög
(
objv
[0]), " STMT column", 0);

2610  
TCL_ERROR
;

2613 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt
ËË 
TCL_ERROR
;

2614 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
cﬁ
ËË 
TCL_ERROR
;

2615 
zRë
 = 
	`xFunc
(
pStmt
, 
cﬁ
);

2616 if–
zRë
 ){

2617 
	`T˛_SëResu…
(
öãΩ
, (*)
zRë
, 0);

2619  
TCL_OK
;

2620 
	}
}

2622 
	$ã°_globÆ_ªcovî
(

2623 * 
˛õ¡D©a
,

2624 
T˛_I¡îp
 *
öãΩ
,

2625 
objc
,

2626 
T˛_Obj
 *
CONST
 
objv
[]

2628 #i‚de‡
SQLITE_OMIT_GLOBALRECOVER


2629 
rc
;

2630 if–
objc
!=1 ){

2631 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "");

2632  
TCL_ERROR
;

2634 
rc
 = 
	`sqlôe3_globÆ_ªcovî
();

2635 
	`T˛_SëResu…
(
öãΩ
, (*)
	`îr‹Name
(
rc
), 
TCL_STATIC
);

2637  
TCL_OK
;

2638 
	}
}

2647 
	$ã°_°mt_utf16
(

2648 * 
˛õ¡D©a
,

2649 
T˛_I¡îp
 *
öãΩ
,

2650 
objc
,

2651 
T˛_Obj
 *
CONST
 
objv
[]

2653 #i‚de‡
SQLITE_OMIT_UTF16


2654 
sqlôe3_°mt
 *
pStmt
;

2655 
cﬁ
;

2656 
T˛_Obj
 *
pRë
;

2657 c⁄° *
zName16
;

2658 c⁄° *(*
xFunc
)(
sqlôe3_°mt
*, Ë
˛õ¡D©a
;

2660 if–
objc
!=3 ){

2661 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

2662 
	`T˛_GëSåög
(
objv
[0]), " STMT column", 0);

2663  
TCL_ERROR
;

2666 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt
ËË 
TCL_ERROR
;

2667 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
cﬁ
ËË 
TCL_ERROR
;

2669 
zName16
 = 
	`xFunc
(
pStmt
, 
cﬁ
);

2670 if–
zName16
 ){

2671 
pRë
 = 
	`T˛_NewByãAºayObj
(
zName16
, 
	`sqlôe3utf16ByãLí
(zName16, -1)+2);

2672 
	`T˛_SëObjResu…
(
öãΩ
, 
pRë
);

2676  
TCL_OK
;

2677 
	}
}

2687 
	$ã°_°mt_öt
(

2688 * 
˛õ¡D©a
,

2689 
T˛_I¡îp
 *
öãΩ
,

2690 
objc
,

2691 
T˛_Obj
 *
CONST
 
objv
[]

2693 
sqlôe3_°mt
 *
pStmt
;

2694 
cﬁ
;

2695 (*
xFunc
)(
sqlôe3_°mt
*, Ë
˛õ¡D©a
;

2697 if–
objc
!=3 ){

2698 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

2699 
	`T˛_GëSåög
(
objv
[0]), " STMT column", 0);

2700  
TCL_ERROR
;

2703 if–
	`gëStmtPoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pStmt
ËË 
TCL_ERROR
;

2704 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
cﬁ
ËË 
TCL_ERROR
;

2706 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
	`xFunc
(
pStmt
, 
cﬁ
)));

2707  
TCL_OK
;

2708 
	}
}

2710 #i‚de‡
SQLITE_OMIT_DISKIO


2714 
	$ã°_sqlôe3OsO≥nRódWrôe
(

2715 * 
˛õ¡D©a
,

2716 
T˛_I¡îp
 *
öãΩ
,

2717 
objc
,

2718 
T˛_Obj
 *
CONST
 
objv
[]

2720 
OsFûe
 *
pFûe
;

2721 
rc
;

2722 
dummy
;

2723 
zBuf
[100];

2725 if–
objc
!=2 ){

2726 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

2727 
	`T˛_GëSåög
(
objv
[0]), " filename", 0);

2728  
TCL_ERROR
;

2731 
rc
 = 
	`sqlôe3OsO≥nRódWrôe
(
	`T˛_GëSåög
(
objv
[1]), &
pFûe
, &
dummy
);

2732 if–
rc
!=
SQLITE_OK
 ){

2733 
	`T˛_SëResu…
(
öãΩ
, (*)
	`îr‹Name
(
rc
), 
TCL_STATIC
);

2734  
TCL_ERROR
;

2736 
	`sqlôe3Te°MakePoöãrSå
(
öãΩ
, 
zBuf
, 
pFûe
);

2737 
	`T˛_SëResu…
(
öãΩ
, 
zBuf
, 0);

2738  
TCL_ERROR
;

2739 
	}
}

2744 
	$ã°_sqlôe3OsClo£
(

2745 * 
˛õ¡D©a
,

2746 
T˛_I¡îp
 *
öãΩ
,

2747 
objc
,

2748 
T˛_Obj
 *
CONST
 
objv
[]

2750 
OsFûe
 *
pFûe
;

2751 
rc
;

2753 if–
objc
!=2 ){

2754 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

2755 
	`T˛_GëSåög
(
objv
[0]), " filehandle", 0);

2756  
TCL_ERROR
;

2759 if–
	`gëFûePoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pFûe
) ){

2760  
TCL_ERROR
;

2762 
rc
 = 
	`sqlôe3OsClo£
(&
pFûe
);

2763 if–
rc
!=
SQLITE_OK
 ){

2764 
	`T˛_SëResu…
(
öãΩ
, (*)
	`îr‹Name
(
rc
), 
TCL_STATIC
);

2765  
TCL_ERROR
;

2767  
TCL_OK
;

2768 
	}
}

2773 
	$ã°_sqlôe3OsLock
(

2774 * 
˛õ¡D©a
,

2775 
T˛_I¡îp
 *
öãΩ
,

2776 
objc
,

2777 
T˛_Obj
 *
CONST
 
objv
[]

2779 
OsFûe
 * 
pFûe
;

2780 
rc
;

2782 if–
objc
!=3 ){

2783 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

2784 
	`T˛_GëSåög
(
objv
[0]),

2786  
TCL_ERROR
;

2789 if–
	`gëFûePoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pFûe
) ){

2790  
TCL_ERROR
;

2793 if–0==
	`°rcmp
("SHARED", 
	`T˛_GëSåög
(
objv
[2])) ){

2794 
rc
 = 
	`sqlôe3OsLock
(
pFûe
, 
SHARED_LOCK
);

2796 if–0==
	`°rcmp
("RESERVED", 
	`T˛_GëSåög
(
objv
[2])) ){

2797 
rc
 = 
	`sqlôe3OsLock
(
pFûe
, 
RESERVED_LOCK
);

2799 if–0==
	`°rcmp
("PENDING", 
	`T˛_GëSåög
(
objv
[2])) ){

2800 
rc
 = 
	`sqlôe3OsLock
(
pFûe
, 
PENDING_LOCK
);

2802 if–0==
	`°rcmp
("EXCLUSIVE", 
	`T˛_GëSåög
(
objv
[2])) ){

2803 
rc
 = 
	`sqlôe3OsLock
(
pFûe
, 
EXCLUSIVE_LOCK
);

2805 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

2806 
	`T˛_GëSåög
(
objv
[0]),

2808  
TCL_ERROR
;

2811 if–
rc
!=
SQLITE_OK
 ){

2812 
	`T˛_SëResu…
(
öãΩ
, (*)
	`îr‹Name
(
rc
), 
TCL_STATIC
);

2813  
TCL_ERROR
;

2815  
TCL_OK
;

2816 
	}
}

2821 
	$ã°_sqlôe3OsU∆ock
(

2822 * 
˛õ¡D©a
,

2823 
T˛_I¡îp
 *
öãΩ
,

2824 
objc
,

2825 
T˛_Obj
 *
CONST
 
objv
[]

2827 
OsFûe
 * 
pFûe
;

2828 
rc
;

2830 if–
objc
!=2 ){

2831 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

2832 
	`T˛_GëSåög
(
objv
[0]), " filehandle", 0);

2833  
TCL_ERROR
;

2836 if–
	`gëFûePoöãr
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), &
pFûe
) ){

2837  
TCL_ERROR
;

2839 
rc
 = 
	`sqlôe3OsU∆ock
(
pFûe
, 
NO_LOCK
);

2840 if–
rc
!=
SQLITE_OK
 ){

2841 
	`T˛_SëResu…
(
öãΩ
, (*)
	`îr‹Name
(
rc
), 
TCL_STATIC
);

2842  
TCL_ERROR
;

2844  
TCL_OK
;

2845 
	}
}

2850 
	$ã°_sqlôe3OsTempFûeName
(

2851 * 
˛õ¡D©a
,

2852 
T˛_I¡îp
 *
öãΩ
,

2853 
objc
,

2854 
T˛_Obj
 *
CONST
 
objv
[]

2856 
zFûe
[
SQLITE_TEMPNAME_SIZE
];

2857 
rc
;

2859 
rc
 = 
	`sqlôe3OsTempFûeName
(
zFûe
);

2860 if–
rc
!=
SQLITE_OK
 ){

2861 
	`T˛_SëResu…
(
öãΩ
, (*)
	`îr‹Name
(
rc
), 
TCL_STATIC
);

2862  
TCL_ERROR
;

2864 
	`T˛_AµídResu…
(
öãΩ
, 
zFûe
, 0);

2865  
TCL_OK
;

2866 
	}
}

2874 
	$sqlôe_£t_magic
(

2875 * 
˛õ¡D©a
,

2876 
T˛_I¡îp
 *
öãΩ
,

2877 
¨gc
,

2878 **
¨gv


2880 
sqlôe3
 *
db
;

2881 if–
¨gc
!=3 ){

2882 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

2884  
TCL_ERROR
;

2886 if–
	`gëDbPoöãr
(
öãΩ
, 
¨gv
[1], &
db
ËË 
TCL_ERROR
;

2887 if–
	`°rcmp
(
¨gv
[2], "SQLITE_MAGIC_OPEN")==0 ){

2888 
db
->
magic
 = 
SQLITE_MAGIC_OPEN
;

2889 }if–
	`°rcmp
(
¨gv
[2], "SQLITE_MAGIC_CLOSED")==0 ){

2890 
db
->
magic
 = 
SQLITE_MAGIC_CLOSED
;

2891 }if–
	`°rcmp
(
¨gv
[2], "SQLITE_MAGIC_BUSY")==0 ){

2892 
db
->
magic
 = 
SQLITE_MAGIC_BUSY
;

2893 }if–
	`°rcmp
(
¨gv
[2], "SQLITE_MAGIC_ERROR")==0 ){

2894 
db
->
magic
 = 
SQLITE_MAGIC_ERROR
;

2895 }if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[2], &
db
->
magic
) ){

2896  
TCL_ERROR
;

2898  
TCL_OK
;

2899 
	}
}

2906 
	$ã°_öãºu±
(

2907 * 
˛õ¡D©a
,

2908 
T˛_I¡îp
 *
öãΩ
,

2909 
¨gc
,

2910 **
¨gv


2912 
sqlôe3
 *
db
;

2913 if–
¨gc
!=2 ){

2914 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0], " DB", 0);

2915  
TCL_ERROR
;

2917 if–
	`gëDbPoöãr
(
öãΩ
, 
¨gv
[1], &
db
ËË 
TCL_ERROR
;

2918 
	`sqlôe3_öãºu±
(
db
);

2919  
TCL_OK
;

2920 
	}
}

2922 
u8
 *
	gsqlôe3_°ack_ba£löe
 = 0;

2927 
	$¥ïSèck
(){

2928 
i
;

2929 
u32
 
bigBuf
[65536];

2930 
i
=0; i<(
bigBuf
); i++) bigBuf[i] = 0xdeadbeef;

2931 
sqlôe3_°ack_ba£löe
 = (
u8
*)&
bigBuf
[65536];

2932 
	}
}

2937 
u64
 
	$sqlôe3SèckDïth
(){

2938 
u8
 
x
;

2939  (
u64
)(
sqlôe3_°ack_ba£löe
 - &
x
);

2940 
	}
}

2947 
	$ã°_°ack_u£d
(

2948 * 
˛õ¡D©a
,

2949 
T˛_I¡îp
 *
öãΩ
,

2950 
¨gc
,

2951 **
¨gv


2953 
sqlôe3
 *
db
;

2954 
i
;

2955 if–
¨gc
!=3 ){

2956 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

2958  
TCL_ERROR
;

2960 if–
	`gëDbPoöãr
(
öãΩ
, 
¨gv
[1], &
db
ËË 
TCL_ERROR
;

2961 
	`¥ïSèck
();

2962 
	`sqlôe3_exec
(
db
, 
¨gv
[2], 0, 0, 0);

2963 
i
=65535; i>=0 && ((
u32
*)
sqlôe3_°ack_ba£löe
)[-i]==0xdeadbeef; i--){}

2964 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
i
*4));

2965  
TCL_OK
;

2966 
	}
}

2975 
	$dñëe_fun˘i⁄
(

2976 * 
˛õ¡D©a
,

2977 
T˛_I¡îp
 *
öãΩ
,

2978 
¨gc
,

2979 **
¨gv


2981 
rc
;

2982 
sqlôe3
 *
db
;

2983 if–
¨gc
!=3 ){

2984 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

2986  
TCL_ERROR
;

2988 if–
	`gëDbPoöãr
(
öãΩ
, 
¨gv
[1], &
db
ËË 
TCL_ERROR
;

2989 
rc
 = 
	`sqlôe3_¸óã_fun˘i⁄
(
db
, 
¨gv
[2], -1, 
SQLITE_UTF8
, 0, 0, 0, 0);

2990 
	`T˛_SëResu…
(
öãΩ
, (*)
	`îr‹Name
(
rc
), 
TCL_STATIC
);

2991  
TCL_OK
;

2992 
	}
}

3001 
	$dñëe_cﬁœti⁄
(

3002 * 
˛õ¡D©a
,

3003 
T˛_I¡îp
 *
öãΩ
,

3004 
¨gc
,

3005 **
¨gv


3007 
rc
;

3008 
sqlôe3
 *
db
;

3009 if–
¨gc
!=3 ){

3010 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

3012  
TCL_ERROR
;

3014 if–
	`gëDbPoöãr
(
öãΩ
, 
¨gv
[1], &
db
ËË 
TCL_ERROR
;

3015 
rc
 = 
	`sqlôe3_¸óã_cﬁœti⁄
(
db
, 
¨gv
[2], 
SQLITE_UTF8
, 0, 0);

3016 
	`T˛_SëResu…
(
öãΩ
, (*)
	`îr‹Name
(
rc
), 
TCL_STATIC
);

3017  
TCL_OK
;

3018 
	}
}

3026 
	$gë_autocommô
(

3027 * 
˛õ¡D©a
,

3028 
T˛_I¡îp
 *
öãΩ
,

3029 
¨gc
,

3030 **
¨gv


3032 
zBuf
[30];

3033 
sqlôe3
 *
db
;

3034 if–
¨gc
!=2 ){

3035 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

3037  
TCL_ERROR
;

3039 if–
	`gëDbPoöãr
(
öãΩ
, 
¨gv
[1], &
db
ËË 
TCL_ERROR
;

3040 
	`•rötf
(
zBuf
, "%d", 
	`sqlôe3_gë_autocommô
(
db
));

3041 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

3042  
TCL_OK
;

3043 
	}
}

3051 
	$t˛_v¨übÀ_ty≥
(

3052 * 
˛õ¡D©a
,

3053 
T˛_I¡îp
 *
öãΩ
,

3054 
objc
,

3055 
T˛_Obj
 *
CONST
 
objv
[]

3057 
T˛_Obj
 *
pV¨
;

3058 if–
objc
!=2 ){

3059 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "VARIABLE");

3060  
TCL_ERROR
;

3062 
pV¨
 = 
	`T˛_GëV¨2Ex
(
öãΩ
, 
	`T˛_GëSåög
(
objv
[1]), 0, 
TCL_LEAVE_ERR_MSG
);

3063 if–
pV¨
==0 )  
TCL_ERROR
;

3064 if–
pV¨
->
ty≥På
 ){

3065 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewSåögObj
(
pV¨
->
ty≥På
->
«me
, -1));

3067  
TCL_OK
;

3068 
	}
}

3077 
	$ã°_ªÀa£_mem‹y
(

3078 * 
˛õ¡D©a
,

3079 
T˛_I¡îp
 *
öãΩ
,

3080 
objc
,

3081 
T˛_Obj
 *
CONST
 
objv
[]

3083 #i‡
	`deföed
(
SQLITE_ENABLE_MEMORY_MANAGEMENT
Ë&& !deföed(
SQLITE_OMIT_DISKIO
)

3084 
N
;

3085 
amt
;

3086 if–
objc
!=1 && objc!=2 ){

3087 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "?N?");

3088  
TCL_ERROR
;

3090 if–
objc
==2 ){

3091 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[1], &
N
ËË 
TCL_ERROR
;

3093 
N
 = -1;

3095 
amt
 = 
	`sqlôe3_ªÀa£_mem‹y
(
N
);

3096 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
amt
));

3098  
TCL_OK
;

3099 
	}
}

3108 
	$ã°_so·_hóp_limô
(

3109 * 
˛õ¡D©a
,

3110 
T˛_I¡îp
 *
öãΩ
,

3111 
objc
,

3112 
T˛_Obj
 *
CONST
 
objv
[]

3114 #i‡
	`deföed
(
SQLITE_ENABLE_MEMORY_MANAGEMENT
Ë&& !deföed(
SQLITE_OMIT_DISKIO
)

3115 
amt
;

3116 if–
objc
!=1 && objc!=2 ){

3117 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "?N?");

3118  
TCL_ERROR
;

3120 
amt
 = 
	`sqlôe3ThªadD©aRódO∆y
()->
nSo·HópLimô
;

3121 if–
objc
==2 ){

3122 
N
;

3123 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[1], &
N
ËË 
TCL_ERROR
;

3124 
	`sqlôe3_so·_hóp_limô
(
N
);

3126 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
amt
));

3128  
TCL_OK
;

3129 
	}
}

3137 
	$ã°_˛ór_tsd_memdebug
(

3138 * 
˛õ¡D©a
,

3139 
T˛_I¡îp
 *
öãΩ
,

3140 
objc
,

3141 
T˛_Obj
 *
CONST
 
objv
[]

3143  
TCL_OK
;

3144 
	}
}

3151 
	$ã°_tsd_ªÀa£
(

3152 * 
˛õ¡D©a
,

3153 
T˛_I¡îp
 *
öãΩ
,

3154 
objc
,

3155 
T˛_Obj
 *
CONST
 
objv
[]

3157 #i‡
	`deföed
(
SQLITE_MEMDEBUG
)

3158 
	`sqlôe3Rñó£ThªadD©a
();

3160  
TCL_OK
;

3161 
	}
}

3168 
	$ã°_thªad_˛ónup
(

3169 * 
˛õ¡D©a
,

3170 
T˛_I¡îp
 *
öãΩ
,

3171 
objc
,

3172 
T˛_Obj
 *
CONST
 
objv
[]

3174 
	`sqlôe3_thªad_˛ónup
();

3175  
TCL_OK
;

3176 
	}
}

3184 
	$£t_›ti⁄s
(
T˛_I¡îp
 *
öãΩ
){

3185 #ifde‡
SQLITE_32BIT_ROWID


3186 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "rowid32", "1", 
TCL_GLOBAL_ONLY
);

3188 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "rowid32", "0", 
TCL_GLOBAL_ONLY
);

3191 #ifde‡
SQLITE_CASE_SENSITIVE_LIKE


3192 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s","ˇ££nsôivñike","1",
TCL_GLOBAL_ONLY
);

3194 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s","ˇ££nsôivñike","0",
TCL_GLOBAL_ONLY
);

3197 #ifde‡
SQLITE_DISABLE_DIRSYNC


3198 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "dúsync", "0", 
TCL_GLOBAL_ONLY
);

3200 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "dúsync", "1", 
TCL_GLOBAL_ONLY
);

3203 #ifde‡
SQLITE_DISABLE_LFS


3204 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "lfs", "0", 
TCL_GLOBAL_ONLY
);

3206 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "lfs", "1", 
TCL_GLOBAL_ONLY
);

3209 #ifde‡
SQLITE_OMIT_ALTERTABLE


3210 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "ÆãπabÀ", "0", 
TCL_GLOBAL_ONLY
);

3212 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "ÆãπabÀ", "1", 
TCL_GLOBAL_ONLY
);

3215 #ifde‡
SQLITE_OMIT_ANALYZE


3216 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "™Æyze", "0", 
TCL_GLOBAL_ONLY
);

3218 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "™Æyze", "1", 
TCL_GLOBAL_ONLY
);

3221 #ifde‡
SQLITE_OMIT_AUTHORIZATION


3222 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "auth", "0", 
TCL_GLOBAL_ONLY
);

3224 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "auth", "1", 
TCL_GLOBAL_ONLY
);

3227 #ifde‡
SQLITE_OMIT_AUTOINCREMENT


3228 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "autoöc", "0", 
TCL_GLOBAL_ONLY
);

3230 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "autoöc", "1", 
TCL_GLOBAL_ONLY
);

3233 #ifde‡
SQLITE_OMIT_AUTOVACUUM


3234 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "autovacuum", "0", 
TCL_GLOBAL_ONLY
);

3236 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "autovacuum", "1", 
TCL_GLOBAL_ONLY
);

3238 #i‡!
	`deföed
(
SQLITE_DEFAULT_AUTOVACUUM
) || SQLITE_DEFAULT_AUTOVACUUM==0

3239 
	`T˛_SëV¨2
(
öãΩ
,"sqlôe_›ti⁄s","deÁu…_autovacuum","0",
TCL_GLOBAL_ONLY
);

3241 
	`T˛_SëV¨2
(
öãΩ
,"sqlôe_›ti⁄s","deÁu…_autovacuum","1",
TCL_GLOBAL_ONLY
);

3244 #ifde‡
SQLITE_OMIT_BETWEEN_OPTIMIZATION


3245 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "bëwìn_›t", "0", 
TCL_GLOBAL_ONLY
);

3247 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "bëwìn_›t", "1", 
TCL_GLOBAL_ONLY
);

3250 #ifde‡
SQLITE_OMIT_BLOB_LITERAL


3251 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "bloblô", "0", 
TCL_GLOBAL_ONLY
);

3253 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "bloblô", "1", 
TCL_GLOBAL_ONLY
);

3256 #ifde‡
SQLITE_OMIT_CAST


3257 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "ˇ°", "0", 
TCL_GLOBAL_ONLY
);

3259 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "ˇ°", "1", 
TCL_GLOBAL_ONLY
);

3262 #ifde‡
SQLITE_OMIT_CHECK


3263 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "check", "0", 
TCL_GLOBAL_ONLY
);

3265 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "check", "1", 
TCL_GLOBAL_ONLY
);

3268 #ifde‡
SQLITE_ENABLE_COLUMN_METADATA


3269 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "cﬁumnmëad©a", "1", 
TCL_GLOBAL_ONLY
);

3271 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "cﬁumnmëad©a", "0", 
TCL_GLOBAL_ONLY
);

3274 #ifde‡
SQLITE_OMIT_COMPLETE


3275 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "com∂ëe", "0", 
TCL_GLOBAL_ONLY
);

3277 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "com∂ëe", "1", 
TCL_GLOBAL_ONLY
);

3280 #ifde‡
SQLITE_OMIT_COMPOUND_SELECT


3281 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "compound", "0", 
TCL_GLOBAL_ONLY
);

3283 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "compound", "1", 
TCL_GLOBAL_ONLY
);

3286 #ifde‡
SQLITE_OMIT_CONFLICT_CLAUSE


3287 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "c⁄Êi˘", "0", 
TCL_GLOBAL_ONLY
);

3289 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "c⁄Êi˘", "1", 
TCL_GLOBAL_ONLY
);

3292 #i‡
OS_UNIX


3293 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "¸ashã°", "1", 
TCL_GLOBAL_ONLY
);

3295 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "¸ashã°", "0", 
TCL_GLOBAL_ONLY
);

3298 #ifde‡
SQLITE_OMIT_DATETIME_FUNCS


3299 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "d©ëime", "0", 
TCL_GLOBAL_ONLY
);

3301 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "d©ëime", "1", 
TCL_GLOBAL_ONLY
);

3304 #ifde‡
SQLITE_OMIT_DISKIO


3305 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "diskio", "0", 
TCL_GLOBAL_ONLY
);

3307 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "diskio", "1", 
TCL_GLOBAL_ONLY
);

3310 #ifde‡
SQLITE_OMIT_EXPLAIN


3311 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "ex∂aö", "0", 
TCL_GLOBAL_ONLY
);

3313 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "ex∂aö", "1", 
TCL_GLOBAL_ONLY
);

3316 #ifde‡
SQLITE_OMIT_FLOATING_POINT


3317 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "Êﬂtögpoöt", "0", 
TCL_GLOBAL_ONLY
);

3319 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "Êﬂtögpoöt", "1", 
TCL_GLOBAL_ONLY
);

3322 #ifde‡
SQLITE_OMIT_FOREIGN_KEY


3323 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "f‹eignkey", "0", 
TCL_GLOBAL_ONLY
);

3325 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "f‹eignkey", "1", 
TCL_GLOBAL_ONLY
);

3328 #ifde‡
SQLITE_OMIT_GLOBALRECOVER


3329 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "globÆªcovî", "0", 
TCL_GLOBAL_ONLY
);

3331 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "globÆªcovî", "1", 
TCL_GLOBAL_ONLY
);

3334 #ifde‡
SQLITE_OMIT_INTEGRITY_CHECK


3335 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "öãgrôyck", "0", 
TCL_GLOBAL_ONLY
);

3337 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "öãgrôyck", "1", 
TCL_GLOBAL_ONLY
);

3340 #ifde‡
SQLITE_OMIT_LIKE_OPTIMIZATION


3341 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "like_›t", "0", 
TCL_GLOBAL_ONLY
);

3343 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "like_›t", "1", 
TCL_GLOBAL_ONLY
);

3346 #ifde‡
SQLITE_OMIT_MEMORYDB


3347 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "mem‹ydb", "0", 
TCL_GLOBAL_ONLY
);

3349 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "mem‹ydb", "1", 
TCL_GLOBAL_ONLY
);

3352 #ifde‡
SQLITE_ENABLE_MEMORY_MANAGEMENT


3353 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "mem‹ym™age", "1", 
TCL_GLOBAL_ONLY
);

3355 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "mem‹ym™age", "0", 
TCL_GLOBAL_ONLY
);

3358 #ifde‡
SQLITE_OMIT_OR_OPTIMIZATION


3359 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "‹_›t", "0", 
TCL_GLOBAL_ONLY
);

3361 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "‹_›t", "1", 
TCL_GLOBAL_ONLY
);

3364 #ifde‡
SQLITE_OMIT_PAGER_PRAGMAS


3365 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "∑gî_¥agmas", "0", 
TCL_GLOBAL_ONLY
);

3367 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "∑gî_¥agmas", "1", 
TCL_GLOBAL_ONLY
);

3370 #ifde‡
SQLITE_OMIT_PARSER


3371 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "∑r£r", "0", 
TCL_GLOBAL_ONLY
);

3373 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "∑r£r", "1", 
TCL_GLOBAL_ONLY
);

3376 #i‡
	`deföed
(
SQLITE_OMIT_PRAGMA
Ë|| deföed(
SQLITE_OMIT_FLAG_PRAGMAS
)

3377 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "¥agma", "0", 
TCL_GLOBAL_ONLY
);

3378 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "öãgrôyck", "0", 
TCL_GLOBAL_ONLY
);

3380 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "¥agma", "1", 
TCL_GLOBAL_ONLY
);

3383 #ifde‡
SQLITE_OMIT_PROGRESS_CALLBACK


3384 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "¥ogªss", "0", 
TCL_GLOBAL_ONLY
);

3386 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "¥ogªss", "1", 
TCL_GLOBAL_ONLY
);

3389 #ifde‡
SQLITE_ENABLE_REDEF_IO


3390 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "ªdefio", "1", 
TCL_GLOBAL_ONLY
);

3392 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "ªdefio", "0", 
TCL_GLOBAL_ONLY
);

3395 #ifde‡
SQLITE_OMIT_REINDEX


3396 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "ªödex", "0", 
TCL_GLOBAL_ONLY
);

3398 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "ªödex", "1", 
TCL_GLOBAL_ONLY
);

3401 #ifde‡
SQLITE_OMIT_SCHEMA_PRAGMAS


3402 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "schema_¥agmas", "0", 
TCL_GLOBAL_ONLY
);

3404 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "schema_¥agmas", "1", 
TCL_GLOBAL_ONLY
);

3407 #ifde‡
SQLITE_OMIT_SCHEMA_VERSION_PRAGMAS


3408 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "schema_vîsi⁄", "0", 
TCL_GLOBAL_ONLY
);

3410 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "schema_vîsi⁄", "1", 
TCL_GLOBAL_ONLY
);

3413 #ifde‡
SQLITE_OMIT_SHARED_CACHE


3414 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "sh¨ed_ˇche", "0", 
TCL_GLOBAL_ONLY
);

3416 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "sh¨ed_ˇche", "1", 
TCL_GLOBAL_ONLY
);

3419 #ifde‡
SQLITE_OMIT_SUBQUERY


3420 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "subquîy", "0", 
TCL_GLOBAL_ONLY
);

3422 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "subquîy", "1", 
TCL_GLOBAL_ONLY
);

3425 #ifde‡
SQLITE_OMIT_TCL_VARIABLE


3426 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "t˛v¨", "0", 
TCL_GLOBAL_ONLY
);

3428 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "t˛v¨", "1", 
TCL_GLOBAL_ONLY
);

3431 #i‡
	`deföed
(
THREADSAFE
) && THREADSAFE

3432 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "thªadß„", "1", 
TCL_GLOBAL_ONLY
);

3434 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "thªadß„", "0", 
TCL_GLOBAL_ONLY
);

3437 #ifde‡
SQLITE_OMIT_TRACE


3438 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "åa˚", "0", 
TCL_GLOBAL_ONLY
);

3440 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "åa˚", "1", 
TCL_GLOBAL_ONLY
);

3443 #ifde‡
SQLITE_OMIT_TRIGGER


3444 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "åiggî", "0", 
TCL_GLOBAL_ONLY
);

3446 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "åiggî", "1", 
TCL_GLOBAL_ONLY
);

3449 #ifde‡
SQLITE_OMIT_TEMPDB


3450 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "ãmpdb", "0", 
TCL_GLOBAL_ONLY
);

3452 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "ãmpdb", "1", 
TCL_GLOBAL_ONLY
);

3455 #ifde‡
SQLITE_OMIT_UTF16


3456 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "utf16", "0", 
TCL_GLOBAL_ONLY
);

3458 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "utf16", "1", 
TCL_GLOBAL_ONLY
);

3461 #ifde‡
SQLITE_OMIT_VACUUM


3462 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "vacuum", "0", 
TCL_GLOBAL_ONLY
);

3464 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "vacuum", "1", 
TCL_GLOBAL_ONLY
);

3467 #ifde‡
SQLITE_OMIT_VIEW


3468 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "võw", "0", 
TCL_GLOBAL_ONLY
);

3470 
	`T˛_SëV¨2
(
öãΩ
, "sqlôe_›ti⁄s", "võw", "1", 
TCL_GLOBAL_ONLY
);

3472 
	}
}

3477 
	$Sqlôëe°1_Inô
(
T˛_I¡îp
 *
öãΩ
){

3478 
sqlôe3_£¨ch_cou¡
;

3479 
sqlôe3_öãºu±_cou¡
;

3480 
sqlôe3_›í_fûe_cou¡
;

3481 
sqlôe3_s‹t_cou¡
;

3482 
sqlôe3_cuºít_time
;

3484 *
zName
;

3485 
T˛_CmdProc
 *
xProc
;

3486 } 
aCmd
[] = {

3487 { "sqlôe3_m¥ötf_öt", (
T˛_CmdProc
*)
sqlôe3_m¥ötf_öt
 },

3488 { "sqlôe3_m¥ötf_öt64", (
T˛_CmdProc
*)
sqlôe3_m¥ötf_öt64
 },

3489 { "sqlôe3_m¥ötf_°r", (
T˛_CmdProc
*)
sqlôe3_m¥ötf_°r
 },

3490 { "sqlôe3_m¥ötf_°r⁄ly", (
T˛_CmdProc
*)
sqlôe3_m¥ötf_°r⁄ly
},

3491 { "sqlôe3_m¥ötf_doubÀ", (
T˛_CmdProc
*)
sqlôe3_m¥ötf_doubÀ
 },

3492 { "sqlôe3_m¥ötf_sˇÀd", (
T˛_CmdProc
*)
sqlôe3_m¥ötf_sˇÀd
 },

3493 { "sqlôe3_m¥ötf_hexdoubÀ", (
T˛_CmdProc
*)
sqlôe3_m¥ötf_hexdoubÀ
},

3494 { "sqlôe3_m¥ötf_z_ã°", (
T˛_CmdProc
*)
ã°_m¥ötf_z
 },

3495 { "sqlôe3_œ°_ö£π_rowid", (
T˛_CmdProc
*)
ã°_œ°_rowid
 },

3496 { "sqlôe3_exec_¥ötf", (
T˛_CmdProc
*)
ã°_exec_¥ötf
 },

3497 { "sqlôe3_gë_èbÀ_¥ötf", (
T˛_CmdProc
*)
ã°_gë_èbÀ_¥ötf
 },

3498 { "sqlôe3_˛o£", (
T˛_CmdProc
*)
sqlôe_ã°_˛o£
 },

3499 { "sqlôe3_¸óã_fun˘i⁄", (
T˛_CmdProc
*)
ã°_¸óã_fun˘i⁄
 },

3500 { "sqlôe3_¸óã_aggªg©e", (
T˛_CmdProc
*)
ã°_¸óã_aggªg©e
 },

3501 { "sqlôe_ªgi°î_ã°_fun˘i⁄", (
T˛_CmdProc
*)
ã°_ªgi°î_func
 },

3502 { "sqlôe_ab‹t", (
T˛_CmdProc
*)
sqlôe_ab‹t
 },

3503 #ifde‡
SQLITE_MEMDEBUG


3504 { "sqlôe_mÆloc_Áû", (
T˛_CmdProc
*)
sqlôe_mÆloc_Áû
 },

3505 { "sqlôe_mÆloc_°©", (
T˛_CmdProc
*)
sqlôe_mÆloc_°©
 },

3507 { "sqlôe_böd", (
T˛_CmdProc
*)
ã°_böd
 },

3508 { "bªakpoöt", (
T˛_CmdProc
*)
ã°_bªakpoöt
 },

3509 { "sqlôe3_key", (
T˛_CmdProc
*)
ã°_key
 },

3510 { "sqlôe3_ªkey", (
T˛_CmdProc
*)
ã°_ªkey
 },

3511 { "sqlôe_£t_magic", (
T˛_CmdProc
*)
sqlôe_£t_magic
 },

3512 { "sqlôe3_öãºu±", (
T˛_CmdProc
*)
ã°_öãºu±
 },

3514 { "sqlôe3_¶ìp", (
T˛_CmdProc
*)
ã°_¶ìp
 },

3516 { "sqlôe_dñëe_fun˘i⁄", (
T˛_CmdProc
*)
dñëe_fun˘i⁄
 },

3517 { "sqlôe_dñëe_cﬁœti⁄", (
T˛_CmdProc
*)
dñëe_cﬁœti⁄
 },

3518 { "sqlôe3_gë_autocommô", (
T˛_CmdProc
*)
gë_autocommô
 },

3519 { "sqlôe3_°ack_u£d", (
T˛_CmdProc
*)
ã°_°ack_u£d
 },

3522 *
zName
;

3523 
T˛_ObjCmdProc
 *
xProc
;

3524 *
˛õ¡D©a
;

3525 } 
aObjCmd
[] = {

3526 { "sqlôe3_c⁄√˘i⁄_poöãr", 
gë_sqlôe_poöãr
, 0 },

3527 { "sqlôe3_böd_öt", 
ã°_böd_öt
, 0 },

3528 { "sqlôe3_böd_öt64", 
ã°_böd_öt64
, 0 },

3529 { "sqlôe3_böd_doubÀ", 
ã°_böd_doubÀ
, 0 },

3530 { "sqlôe3_böd_nuŒ", 
ã°_böd_nuŒ
 ,0 },

3531 { "sqlôe3_böd_ãxt", 
ã°_böd_ãxt
 ,0 },

3532 { "sqlôe3_böd_ãxt16", 
ã°_böd_ãxt16
 ,0 },

3533 { "sqlôe3_böd_blob", 
ã°_böd_blob
 ,0 },

3534 { "sqlôe3_böd_∑ømëî_cou¡", 
ã°_böd_∑ømëî_cou¡
, 0},

3535 { "sqlôe3_böd_∑ømëî_«me", 
ã°_böd_∑ømëî_«me
, 0},

3536 { "sqlôe3_böd_∑ømëî_ödex", 
ã°_böd_∑ømëî_ödex
, 0},

3538 { "sqlôe3_˛ór_bödögs", 
ã°_˛ór_bödögs
, 0},

3540 { "sqlôe3_îrcode", 
ã°_îrcode
 ,0 },

3541 { "sqlôe3_îrmsg", 
ã°_îrmsg
 ,0 },

3542 { "sqlôe3_îrmsg16", 
ã°_îrmsg16
 ,0 },

3543 { "sqlôe3_›í", 
ã°_›í
 ,0 },

3544 { "sqlôe3_›í16", 
ã°_›í16
 ,0 },

3545 { "sqlôe3_com∂ëe16", 
ã°_com∂ëe16
 ,0 },

3547 { "sqlôe3_¥ï¨e", 
ã°_¥ï¨e
 ,0 },

3548 { "sqlôe3_¥ï¨e16", 
ã°_¥ï¨e16
 ,0 },

3549 { "sqlôe3_föÆize", 
ã°_föÆize
 ,0 },

3550 { "sqlôe3_ª£t", 
ã°_ª£t
 ,0 },

3551 { "sqlôe3_expúed", 
ã°_expúed
 ,0 },

3552 { "sqlôe3_å™s„r_bödögs", 
ã°_å™s„r_böd
 ,0 },

3553 { "sqlôe3_ch™ges", 
ã°_ch™ges
 ,0 },

3554 { "sqlôe3_°ï", 
ã°_°ï
 ,0 },

3556 { "sqlôe3_ªÀa£_mem‹y", 
ã°_ªÀa£_mem‹y
, 0},

3557 { "sqlôe3_so·_hóp_limô", 
ã°_so·_hóp_limô
, 0},

3558 { "sqlôe3_˛ór_tsd_memdebug", 
ã°_˛ór_tsd_memdebug
, 0},

3559 { "sqlôe3_tsd_ªÀa£", 
ã°_tsd_ªÀa£
, 0},

3560 { "sqlôe3_thªad_˛ónup", 
ã°_thªad_˛ónup
, 0},

3563 { "sqlôe3_cﬁumn_cou¡", 
ã°_cﬁumn_cou¡
 ,0 },

3564 { "sqlôe3_d©a_cou¡", 
ã°_d©a_cou¡
 ,0 },

3565 { "sqlôe3_cﬁumn_ty≥", 
ã°_cﬁumn_ty≥
 ,0 },

3566 { "sqlôe3_cﬁumn_blob", 
ã°_cﬁumn_blob
 ,0 },

3567 { "sqlôe3_cﬁumn_doubÀ", 
ã°_cﬁumn_doubÀ
 ,0 },

3568 { "sqlôe3_cﬁumn_öt64", 
ã°_cﬁumn_öt64
 ,0 },

3569 { "sqlôe3_cﬁumn_ãxt", 
ã°_°mt_utf8
, 
sqlôe3_cﬁumn_ãxt
 },

3570 { "sqlôe3_cﬁumn_de˛ty≥", 
ã°_°mt_utf8
, 
sqlôe3_cﬁumn_de˛ty≥
 },

3571 { "sqlôe3_cﬁumn_«me", 
ã°_°mt_utf8
, 
sqlôe3_cﬁumn_«me
 },

3572 { "sqlôe3_cﬁumn_öt", 
ã°_°mt_öt
, 
sqlôe3_cﬁumn_öt
 },

3573 { "sqlôe3_cﬁumn_byãs", 
ã°_°mt_öt
, 
sqlôe3_cﬁumn_byãs
 },

3574 #i‚de‡
SQLITE_OMIT_UTF16


3575 { "sqlôe3_cﬁumn_byãs16", 
ã°_°mt_öt
, 
sqlôe3_cﬁumn_byãs16
 },

3576 { "sqlôe3_cﬁumn_ãxt16", 
ã°_°mt_utf16
, 
sqlôe3_cﬁumn_ãxt16
 },

3577 { "sqlôe3_cﬁumn_de˛ty≥16", 
ã°_°mt_utf16
, 
sqlôe3_cﬁumn_de˛ty≥16
},

3578 { "sqlôe3_cﬁumn_«me16", 
ã°_°mt_utf16
, 
sqlôe3_cﬁumn_«me16
 },

3580 { "sqlôe3_globÆ_ªcovî", 
ã°_globÆ_ªcovî
, 0 },

3583 #i‚de‡
SQLITE_OMIT_DISKIO


3584 { "sqlôe3OsO≥nRódWrôe",
ã°_sqlôe3OsO≥nRódWrôe
, 0 },

3585 { "sqlôe3OsClo£", 
ã°_sqlôe3OsClo£
, 0 },

3586 { "sqlôe3OsLock", 
ã°_sqlôe3OsLock
, 0 },

3587 { "sqlôe3OsTempFûeName", 
ã°_sqlôe3OsTempFûeName
, 0 },

3590 { "sqlôe3OsU∆ock", 
ã°_sqlôe3OsU∆ock
, 0 },

3592 #i‚de‡
SQLITE_OMIT_UTF16


3593 { "add_ã°_cﬁœã", 
ã°_cﬁœã
, 0 },

3594 { "add_ã°_cﬁœã_√eded", 
ã°_cﬁœã_√eded
, 0 },

3595 { "add_ã°_fun˘i⁄", 
ã°_fun˘i⁄
, 0 },

3597 #ifde‡
SQLITE_MEMDEBUG


3598 { "sqlôe_mÆloc_out°™dög", 
sqlôe_mÆloc_out°™dög
, 0},

3600 { "sqlôe3_ã°_îr°r", 
ã°_îr°r
, 0 },

3601 { "t˛_v¨übÀ_ty≥", 
t˛_v¨übÀ_ty≥
, 0 },

3602 #i‚de‡
SQLITE_OMIT_SHARED_CACHE


3603 { "sqlôe3_íabÀ_sh¨ed_ˇche", 
ã°_íabÀ_sh¨ed
, 0 },

3605 { "sqlôe3_libvîsi⁄_numbî", 
ã°_libvîsi⁄_numbî
, 0 },

3606 #ifde‡
SQLITE_ENABLE_COLUMN_METADATA


3607 { "sqlôe3_èbÀ_cﬁumn_mëad©a", 
ã°_èbÀ_cﬁumn_mëad©a
, 0 },

3610 
bômask_size
 = (
Bômask
)*8;

3611 
i
;

3612 
sqlôe3_os_åa˚
;

3613 
sqlôe3_whîe_åa˚
;

3614 
sqlôe3_sync_cou¡
, 
sqlôe3_fuŒsync_cou¡
;

3615 
sqlôe3_›íãmp_cou¡
;

3616 
sqlôe3_memU£d
;

3617 
sqlôe3_mÆloc_id
;

3618 
sqlôe3_memMax
;

3619 
sqlôe3_like_cou¡
;

3620 
sqlôe3_tsd_cou¡
;

3621 #i‡
OS_UNIX
 && 
	`deföed
(
SQLITE_TEST
Ë&& deföed(
THREADSAFE
) && THREADSAFE

3622 
thªadsOvîrideEachOthîsLocks
;

3624 #i‡
OS_WIN


3625 
sqlôe3_os_ty≥
;

3627 #ifde‡
SQLITE_DEBUG


3628 
sqlôe3_vdbe_add›_åa˚
;

3630 #ifde‡
SQLITE_TEST


3631 
sqlôe3_quîy_∂™
[];

3632 *
quîy_∂™
 = 
sqlôe3_quîy_∂™
;

3635 
i
=0; i<(
aCmd
)/(aCmd[0]); i++){

3636 
	`T˛_Cª©eComm™d
(
öãΩ
, 
aCmd
[
i
].
zName
,áCmd[i].
xProc
, 0, 0);

3638 
i
=0; i<(
aObjCmd
)/(aObjCmd[0]); i++){

3639 
	`T˛_Cª©eObjComm™d
(
öãΩ
, 
aObjCmd
[
i
].
zName
,

3640 
aObjCmd
[
i
].
xProc
,áObjCmd[i].
˛õ¡D©a
, 0);

3642 
	`T˛_LökV¨
(
öãΩ
, "sqlite_search_count",

3643 (*)&
sqlôe3_£¨ch_cou¡
, 
TCL_LINK_INT
);

3644 
	`T˛_LökV¨
(
öãΩ
, "sqlite_sort_count",

3645 (*)&
sqlôe3_s‹t_cou¡
, 
TCL_LINK_INT
);

3646 
	`T˛_LökV¨
(
öãΩ
, "sqlite_like_count",

3647 (*)&
sqlôe3_like_cou¡
, 
TCL_LINK_INT
);

3648 
	`T˛_LökV¨
(
öãΩ
, "sqlite_interrupt_count",

3649 (*)&
sqlôe3_öãºu±_cou¡
, 
TCL_LINK_INT
);

3650 
	`T˛_LökV¨
(
öãΩ
, "sqlite_open_file_count",

3651 (*)&
sqlôe3_›í_fûe_cou¡
, 
TCL_LINK_INT
);

3652 
	`T˛_LökV¨
(
öãΩ
, "sqlite_current_time",

3653 (*)&
sqlôe3_cuºít_time
, 
TCL_LINK_INT
);

3654 
	`T˛_LökV¨
(
öãΩ
, "sqlite_os_trace",

3655 (*)&
sqlôe3_os_åa˚
, 
TCL_LINK_INT
);

3656 
	`T˛_LökV¨
(
öãΩ
, "sqlite3_tsd_count",

3657 (*)&
sqlôe3_tsd_cou¡
, 
TCL_LINK_INT
);

3658 #i‡
OS_UNIX
 && 
	`deföed
(
SQLITE_TEST
Ë&& deföed(
THREADSAFE
) && THREADSAFE

3659 
	`T˛_LökV¨
(
öãΩ
, "threadsOverrideEachOthersLocks",

3660 (*)&
thªadsOvîrideEachOthîsLocks
, 
TCL_LINK_INT
);

3662 #i‚de‡
SQLITE_OMIT_UTF16


3663 
	`T˛_LökV¨
(
öãΩ
, "sqlite_last_needed_collation",

3664 (*)&
pzNìdedCﬁœti⁄
, 
TCL_LINK_STRING
|
TCL_LINK_READ_ONLY
);

3666 #ifde‡
SQLITE_MEMDEBUG


3667 
	`T˛_LökV¨
(
öãΩ
, "sqlite_malloc_id",

3668 (*)&
sqlôe3_mÆloc_id
, 
TCL_LINK_STRING
);

3670 #i‡
OS_WIN


3671 
	`T˛_LökV¨
(
öãΩ
, "sqlite_os_type",

3672 (*)&
sqlôe3_os_ty≥
, 
TCL_LINK_INT
);

3674 #ifde‡
SQLITE_TEST


3675 
	`T˛_LökV¨
(
öãΩ
, "sqlite_query_plan",

3676 (*)&
quîy_∂™
, 
TCL_LINK_STRING
|
TCL_LINK_READ_ONLY
);

3678 #ifde‡
SQLITE_DEBUG


3679 
	`T˛_LökV¨
(
öãΩ
, "sqlite_addop_trace",

3680 (*)&
sqlôe3_vdbe_add›_åa˚
, 
TCL_LINK_INT
);

3681 
	`T˛_LökV¨
(
öãΩ
, "sqlite_where_trace",

3682 (*)&
sqlôe3_whîe_åa˚
, 
TCL_LINK_INT
);

3684 #ifde‡
SQLITE_MEMDEBUG


3685 
	`T˛_LökV¨
(
öãΩ
, "sqlite_memused",

3686 (*)&
sqlôe3_memU£d
, 
TCL_LINK_INT
 | 
TCL_LINK_READ_ONLY
);

3687 
	`T˛_LökV¨
(
öãΩ
, "sqlite_memmax",

3688 (*)&
sqlôe3_memMax
, 
TCL_LINK_INT
 | 
TCL_LINK_READ_ONLY
);

3690 #i‚de‡
SQLITE_OMIT_DISKIO


3691 
	`T˛_LökV¨
(
öãΩ
, "sqlite_opentemp_count",

3692 (*)&
sqlôe3_›íãmp_cou¡
, 
TCL_LINK_INT
);

3694 
	`T˛_LökV¨
(
öãΩ
, "sqlite_static_bind_value",

3695 (*)&
sqlôe_°©ic_böd_vÆue
, 
TCL_LINK_STRING
);

3696 
	`T˛_LökV¨
(
öãΩ
, "sqlite_temp_directory",

3697 (*)&
sqlôe3_ãmp_dúe˘‹y
, 
TCL_LINK_STRING
);

3698 
	`T˛_LökV¨
(
öãΩ
, "bitmask_size",

3699 (*)&
bômask_size
, 
TCL_LINK_INT
|
TCL_LINK_READ_ONLY
);

3700 #i‡
OS_UNIX


3701 
	`T˛_LökV¨
(
öãΩ
, "sqlite_sync_count",

3702 (*)&
sqlôe3_sync_cou¡
, 
TCL_LINK_INT
);

3703 
	`T˛_LökV¨
(
öãΩ
, "sqlite_fullsync_count",

3704 (*)&
sqlôe3_fuŒsync_cou¡
, 
TCL_LINK_INT
);

3706 
	`£t_›ti⁄s
(
öãΩ
);

3709 #ifde‡
SQLITE_DEBUG


3710 
	`sqlôe3_sh¨ed_ˇche_ªp‹t
(*, 
T˛_I¡îp
 *,

3711 , 
T˛_Obj
 *
CONST
[]);

3712 
	`T˛_Cª©eObjComm™d
(
öãΩ
, "sqlite_shared_cache_report",

3713 
sqlôe3_sh¨ed_ˇche_ªp‹t
, 0, 0);

3716  
TCL_OK
;

3717 
	}
}

	@test2.c

18 
	~"sqlôeI¡.h
"

19 
	~"os.h
"

20 
	~"∑gî.h
"

21 
	~"t˛.h
"

22 
	~<°dlib.h
>

23 
	~<°rög.h
>

28 *
	$îr‹Name
(
rc
){

29 *
zName
;

30  
rc
 ){

31 
SQLITE_OK
: 
zName
 = "SQLITE_OK"; ;

32 
SQLITE_ERROR
: 
zName
 = "SQLITE_ERROR"; ;

33 
SQLITE_PERM
: 
zName
 = "SQLITE_PERM"; ;

34 
SQLITE_ABORT
: 
zName
 = "SQLITE_ABORT"; ;

35 
SQLITE_BUSY
: 
zName
 = "SQLITE_BUSY"; ;

36 
SQLITE_NOMEM
: 
zName
 = "SQLITE_NOMEM"; ;

37 
SQLITE_READONLY
: 
zName
 = "SQLITE_READONLY"; ;

38 
SQLITE_INTERRUPT
: 
zName
 = "SQLITE_INTERRUPT"; ;

39 
SQLITE_IOERR
: 
zName
 = "SQLITE_IOERR"; ;

40 
SQLITE_CORRUPT
: 
zName
 = "SQLITE_CORRUPT"; ;

41 
SQLITE_FULL
: 
zName
 = "SQLITE_FULL"; ;

42 
SQLITE_CANTOPEN
: 
zName
 = "SQLITE_CANTOPEN"; ;

43 
SQLITE_PROTOCOL
: 
zName
 = "SQLITE_PROTOCOL"; ;

44 
SQLITE_EMPTY
: 
zName
 = "SQLITE_EMPTY"; ;

45 
SQLITE_SCHEMA
: 
zName
 = "SQLITE_SCHEMA"; ;

46 
SQLITE_CONSTRAINT
: 
zName
 = "SQLITE_CONSTRAINT"; ;

47 
SQLITE_MISMATCH
: 
zName
 = "SQLITE_MISMATCH"; ;

48 
SQLITE_MISUSE
: 
zName
 = "SQLITE_MISUSE"; ;

49 
SQLITE_NOLFS
: 
zName
 = "SQLITE_NOLFS"; ;

50 : 
zName
 = "SQLITE_Unknown"; ;

52  
zName
;

53 
	}
}

58 
	gã°_∑gesize
 = 1024;

65 
	$∑gî_›í
(

66 *
NŸU£d
,

67 
T˛_I¡îp
 *
öãΩ
,

68 
¨gc
,

69 c⁄° **
¨gv


71 
Pagî
 *
pPagî
;

72 
nPage
;

73 
rc
;

74 
zBuf
[100];

75 if–
¨gc
!=3 ){

76 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

78  
TCL_ERROR
;

80 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[2], &
nPage
ËË 
TCL_ERROR
;

81 
rc
 = 
	`sqlôe3∑gî_›í
(&
pPagî
, 
¨gv
[1], 0, 0);

82 if–
rc
!=
SQLITE_OK
 ){

83 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

84  
TCL_ERROR
;

86 
	`sqlôe3∑gî_£t_ˇchesize
(
pPagî
, 
nPage
);

87 
	`sqlôe3∑gî_£t_∑gesize
(
pPagî
, 
ã°_∑gesize
);

88 
	`sqlôe3_¢¥ötf
((
zBuf
),zBuf,"%p",
pPagî
);

89 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

90  
TCL_OK
;

91 
	}
}

98 
	$∑gî_˛o£
(

99 *
NŸU£d
,

100 
T˛_I¡îp
 *
öãΩ
,

101 
¨gc
,

102 c⁄° **
¨gv


104 
Pagî
 *
pPagî
;

105 
rc
;

106 if–
¨gc
!=2 ){

107 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

109  
TCL_ERROR
;

111 
pPagî
 = 
	`sqlôe3TextToPå
(
¨gv
[1]);

112 
rc
 = 
	`sqlôe3∑gî_˛o£
(
pPagî
);

113 if–
rc
!=
SQLITE_OK
 ){

114 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

115  
TCL_ERROR
;

117  
TCL_OK
;

118 
	}
}

125 
	$∑gî_rﬁlback
(

126 *
NŸU£d
,

127 
T˛_I¡îp
 *
öãΩ
,

128 
¨gc
,

129 c⁄° **
¨gv


131 
Pagî
 *
pPagî
;

132 
rc
;

133 if–
¨gc
!=2 ){

134 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

136  
TCL_ERROR
;

138 
pPagî
 = 
	`sqlôe3TextToPå
(
¨gv
[1]);

139 
rc
 = 
	`sqlôe3∑gî_rﬁlback
(
pPagî
);

140 if–
rc
!=
SQLITE_OK
 ){

141 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

142  
TCL_ERROR
;

144  
TCL_OK
;

145 
	}
}

152 
	$∑gî_commô
(

153 *
NŸU£d
,

154 
T˛_I¡îp
 *
öãΩ
,

155 
¨gc
,

156 c⁄° **
¨gv


158 
Pagî
 *
pPagî
;

159 
rc
;

160 if–
¨gc
!=2 ){

161 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

163  
TCL_ERROR
;

165 
pPagî
 = 
	`sqlôe3TextToPå
(
¨gv
[1]);

166 
rc
 = 
	`sqlôe3∑gî_commô
(
pPagî
);

167 if–
rc
!=
SQLITE_OK
 ){

168 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

169  
TCL_ERROR
;

171  
TCL_OK
;

172 
	}
}

179 
	$∑gî_°mt_begö
(

180 *
NŸU£d
,

181 
T˛_I¡îp
 *
öãΩ
,

182 
¨gc
,

183 c⁄° **
¨gv


185 
Pagî
 *
pPagî
;

186 
rc
;

187 if–
¨gc
!=2 ){

188 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

190  
TCL_ERROR
;

192 
pPagî
 = 
	`sqlôe3TextToPå
(
¨gv
[1]);

193 
rc
 = 
	`sqlôe3∑gî_°mt_begö
(
pPagî
);

194 if–
rc
!=
SQLITE_OK
 ){

195 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

196  
TCL_ERROR
;

198  
TCL_OK
;

199 
	}
}

206 
	$∑gî_°mt_rﬁlback
(

207 *
NŸU£d
,

208 
T˛_I¡îp
 *
öãΩ
,

209 
¨gc
,

210 c⁄° **
¨gv


212 
Pagî
 *
pPagî
;

213 
rc
;

214 if–
¨gc
!=2 ){

215 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

217  
TCL_ERROR
;

219 
pPagî
 = 
	`sqlôe3TextToPå
(
¨gv
[1]);

220 
rc
 = 
	`sqlôe3∑gî_°mt_rﬁlback
(
pPagî
);

221 if–
rc
!=
SQLITE_OK
 ){

222 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

223  
TCL_ERROR
;

225  
TCL_OK
;

226 
	}
}

233 
	$∑gî_°mt_commô
(

234 *
NŸU£d
,

235 
T˛_I¡îp
 *
öãΩ
,

236 
¨gc
,

237 c⁄° **
¨gv


239 
Pagî
 *
pPagî
;

240 
rc
;

241 if–
¨gc
!=2 ){

242 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

244  
TCL_ERROR
;

246 
pPagî
 = 
	`sqlôe3TextToPå
(
¨gv
[1]);

247 
rc
 = 
	`sqlôe3∑gî_°mt_commô
(
pPagî
);

248 if–
rc
!=
SQLITE_OK
 ){

249 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

250  
TCL_ERROR
;

252  
TCL_OK
;

253 
	}
}

260 
	$∑gî_°©s
(

261 *
NŸU£d
,

262 
T˛_I¡îp
 *
öãΩ
,

263 
¨gc
,

264 c⁄° **
¨gv


266 
Pagî
 *
pPagî
;

267 
i
, *
a
;

268 if–
¨gc
!=2 ){

269 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

271  
TCL_ERROR
;

273 
pPagî
 = 
	`sqlôe3TextToPå
(
¨gv
[1]);

274 
a
 = 
	`sqlôe3∑gî_°©s
(
pPagî
);

275 
i
=0; i<9; i++){

276 *
zName
[] = {

280 
zBuf
[100];

281 
	`T˛_AµídEÀmít
(
öãΩ
, 
zName
[
i
]);

282 
	`sqlôe3_¢¥ötf
((
zBuf
),zBuf,"%d",
a
[
i
]);

283 
	`T˛_AµídEÀmít
(
öãΩ
, 
zBuf
);

285  
TCL_OK
;

286 
	}
}

293 
	$∑gî_∑gecou¡
(

294 *
NŸU£d
,

295 
T˛_I¡îp
 *
öãΩ
,

296 
¨gc
,

297 c⁄° **
¨gv


299 
Pagî
 *
pPagî
;

300 
zBuf
[100];

301 if–
¨gc
!=2 ){

302 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

304  
TCL_ERROR
;

306 
pPagî
 = 
	`sqlôe3TextToPå
(
¨gv
[1]);

307 
	`sqlôe3_¢¥ötf
((
zBuf
),zBuf,"%d",
	`sqlôe3∑gî_∑gecou¡
(
pPagî
));

308 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

309  
TCL_OK
;

310 
	}
}

317 
	$∑ge_gë
(

318 *
NŸU£d
,

319 
T˛_I¡îp
 *
öãΩ
,

320 
¨gc
,

321 c⁄° **
¨gv


323 
Pagî
 *
pPagî
;

324 
zBuf
[100];

325 *
pPage
;

326 
pgno
;

327 
rc
;

328 if–
¨gc
!=3 ){

329 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

331  
TCL_ERROR
;

333 
pPagî
 = 
	`sqlôe3TextToPå
(
¨gv
[1]);

334 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[2], &
pgno
ËË 
TCL_ERROR
;

335 
rc
 = 
	`sqlôe3∑gî_gë
(
pPagî
, 
pgno
, &
pPage
);

336 if–
rc
!=
SQLITE_OK
 ){

337 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

338  
TCL_ERROR
;

340 
	`sqlôe3_¢¥ötf
((
zBuf
),zBuf,"%p",
pPage
);

341 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

342  
TCL_OK
;

343 
	}
}

351 
	$∑ge_lookup
(

352 *
NŸU£d
,

353 
T˛_I¡îp
 *
öãΩ
,

354 
¨gc
,

355 c⁄° **
¨gv


357 
Pagî
 *
pPagî
;

358 
zBuf
[100];

359 *
pPage
;

360 
pgno
;

361 if–
¨gc
!=3 ){

362 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

364  
TCL_ERROR
;

366 
pPagî
 = 
	`sqlôe3TextToPå
(
¨gv
[1]);

367 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[2], &
pgno
ËË 
TCL_ERROR
;

368 
pPage
 = 
	`sqlôe3∑gî_lookup
(
pPagî
, 
pgno
);

369 if–
pPage
 ){

370 
	`sqlôe3_¢¥ötf
((
zBuf
),zBuf,"%p",
pPage
);

371 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

373  
TCL_OK
;

374 
	}
}

379 
	$∑gî_åunˇã
(

380 *
NŸU£d
,

381 
T˛_I¡îp
 *
öãΩ
,

382 
¨gc
,

383 c⁄° **
¨gv


385 
Pagî
 *
pPagî
;

386 
rc
;

387 
pgno
;

388 if–
¨gc
!=3 ){

389 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

391  
TCL_ERROR
;

393 
pPagî
 = 
	`sqlôe3TextToPå
(
¨gv
[1]);

394 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[2], &
pgno
ËË 
TCL_ERROR
;

395 
rc
 = 
	`sqlôe3∑gî_åunˇã
(
pPagî
, 
pgno
);

396 if–
rc
!=
SQLITE_OK
 ){

397 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

398  
TCL_ERROR
;

400  
TCL_OK
;

401 
	}
}

409 
	$∑ge_uƒef
(

410 *
NŸU£d
,

411 
T˛_I¡îp
 *
öãΩ
,

412 
¨gc
,

413 c⁄° **
¨gv


415 *
pPage
;

416 
rc
;

417 if–
¨gc
!=2 ){

418 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

420  
TCL_ERROR
;

422 
pPage
 = 
	`sqlôe3TextToPå
(
¨gv
[1]);

423 
rc
 = 
	`sqlôe3∑gî_uƒef
(
pPage
);

424 if–
rc
!=
SQLITE_OK
 ){

425 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

426  
TCL_ERROR
;

428  
TCL_OK
;

429 
	}
}

436 
	$∑ge_ªad
(

437 *
NŸU£d
,

438 
T˛_I¡îp
 *
öãΩ
,

439 
¨gc
,

440 c⁄° **
¨gv


442 
zBuf
[100];

443 *
pPage
;

444 if–
¨gc
!=2 ){

445 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

447  
TCL_ERROR
;

449 
pPage
 = 
	`sqlôe3TextToPå
(
¨gv
[1]);

450 
	`mem˝y
(
zBuf
, 
pPage
, (zBuf));

451 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

452  
TCL_OK
;

453 
	}
}

460 
	$∑ge_numbî
(

461 *
NŸU£d
,

462 
T˛_I¡îp
 *
öãΩ
,

463 
¨gc
,

464 c⁄° **
¨gv


466 
zBuf
[100];

467 *
pPage
;

468 if–
¨gc
!=2 ){

469 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

471  
TCL_ERROR
;

473 
pPage
 = 
	`sqlôe3TextToPå
(
¨gv
[1]);

474 
	`sqlôe3_¢¥ötf
((
zBuf
), zBuf, "%d", 
	`sqlôe3∑gî_∑gíumbî
(
pPage
));

475 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

476  
TCL_OK
;

477 
	}
}

484 
	$∑ge_wrôe
(

485 *
NŸU£d
,

486 
T˛_I¡îp
 *
öãΩ
,

487 
¨gc
,

488 c⁄° **
¨gv


490 *
pPage
;

491 
rc
;

492 if–
¨gc
!=3 ){

493 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

495  
TCL_ERROR
;

497 
pPage
 = 
	`sqlôe3TextToPå
(
¨gv
[1]);

498 
rc
 = 
	`sqlôe3∑gî_wrôe
(
pPage
);

499 if–
rc
!=
SQLITE_OK
 ){

500 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

501  
TCL_ERROR
;

503 
	`°∫˝y
((*)
pPage
, 
¨gv
[2], 
ã°_∑gesize
-1);

504 ((*)
pPage
)[
ã°_∑gesize
-1] = 0;

505  
TCL_OK
;

506 
	}
}

508 #i‚de‡
SQLITE_OMIT_DISKIO


518 
	$Áke_big_fûe
(

519 *
NŸU£d
,

520 
T˛_I¡îp
 *
öãΩ
,

521 
¨gc
,

522 c⁄° **
¨gv


524 
rc
;

525 
n
;

526 
i64
 
off£t
;

527 
OsFûe
 *
fd
 = 0;

528 
ªadO∆y
 = 0;

529 if–
¨gc
!=3 ){

530 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

532  
TCL_ERROR
;

534 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[1], &
n
ËË 
TCL_ERROR
;

535 
rc
 = 
	`sqlôe3OsO≥nRódWrôe
(
¨gv
[2], &
fd
, &
ªadO∆y
);

536 if–
rc
 ){

537 
	`T˛_AµídResu…
(
öãΩ
, "›í faûed: ", 
	`îr‹Name
(
rc
), 0);

538  
TCL_ERROR
;

540 
off£t
 = 
n
;

541 
off£t
 *= 1024*1024;

542 
rc
 = 
	`sqlôe3OsSìk
(
fd
, 
off£t
);

543 if–
rc
 ){

544 
	`T˛_AµídResu…
(
öãΩ
, "£ek faûed: ", 
	`îr‹Name
(
rc
), 0);

545  
TCL_ERROR
;

547 
rc
 = 
	`sqlôe3OsWrôe
(
fd
, "Hello, World!", 14);

548 
	`sqlôe3OsClo£
(&
fd
);

549 if–
rc
 ){

550 
	`T˛_AµídResu…
(
öãΩ
, "wrôêÁûed: ", 
	`îr‹Name
(
rc
), 0);

551  
TCL_ERROR
;

553  
TCL_OK
;

554 
	}
}

560 
	$Sqlôëe°2_Inô
(
T˛_I¡îp
 *
öãΩ
){

561 
sqlôe3_io_îr‹_≥ndög
;

562 
sqlôe3_io_îr‹_hô
;

563 
sqlôe3_diskfuŒ_≥ndög
;

564 
sqlôe3_diskfuŒ
;

566 *
zName
;

567 
T˛_CmdProc
 *
xProc
;

568 } 
aCmd
[] = {

569 { "∑gî_›í", (
T˛_CmdProc
*)
∑gî_›í
 },

570 { "∑gî_˛o£", (
T˛_CmdProc
*)
∑gî_˛o£
 },

571 { "∑gî_commô", (
T˛_CmdProc
*)
∑gî_commô
 },

572 { "∑gî_rﬁlback", (
T˛_CmdProc
*)
∑gî_rﬁlback
 },

573 { "∑gî_°mt_begö", (
T˛_CmdProc
*)
∑gî_°mt_begö
 },

574 { "∑gî_°mt_commô", (
T˛_CmdProc
*)
∑gî_°mt_commô
 },

575 { "∑gî_°mt_rﬁlback", (
T˛_CmdProc
*)
∑gî_°mt_rﬁlback
 },

576 { "∑gî_°©s", (
T˛_CmdProc
*)
∑gî_°©s
 },

577 { "∑gî_∑gecou¡", (
T˛_CmdProc
*)
∑gî_∑gecou¡
 },

578 { "∑ge_gë", (
T˛_CmdProc
*)
∑ge_gë
 },

579 { "∑ge_lookup", (
T˛_CmdProc
*)
∑ge_lookup
 },

580 { "∑ge_uƒef", (
T˛_CmdProc
*)
∑ge_uƒef
 },

581 { "∑ge_ªad", (
T˛_CmdProc
*)
∑ge_ªad
 },

582 { "∑ge_wrôe", (
T˛_CmdProc
*)
∑ge_wrôe
 },

583 { "∑ge_numbî", (
T˛_CmdProc
*)
∑ge_numbî
 },

584 { "∑gî_åunˇã", (
T˛_CmdProc
*)
∑gî_åunˇã
 },

585 #i‚de‡
SQLITE_OMIT_DISKIO


586 { "Áke_big_fûe", (
T˛_CmdProc
*)
Áke_big_fûe
 },

589 
i
;

590 
i
=0; i<(
aCmd
)/(aCmd[0]); i++){

591 
	`T˛_Cª©eComm™d
(
öãΩ
, 
aCmd
[
i
].
zName
,áCmd[i].
xProc
, 0, 0);

593 
	`T˛_LökV¨
(
öãΩ
, "sqlite_io_error_pending",

594 (*)&
sqlôe3_io_îr‹_≥ndög
, 
TCL_LINK_INT
);

595 
	`T˛_LökV¨
(
öãΩ
, "sqlite_io_error_hit",

596 (*)&
sqlôe3_io_îr‹_hô
, 
TCL_LINK_INT
);

597 
	`T˛_LökV¨
(
öãΩ
, "sqlite_diskfull_pending",

598 (*)&
sqlôe3_diskfuŒ_≥ndög
, 
TCL_LINK_INT
);

599 
	`T˛_LökV¨
(
öãΩ
, "sqlite_diskfull",

600 (*)&
sqlôe3_diskfuŒ
, 
TCL_LINK_INT
);

601 
	`T˛_LökV¨
(
öãΩ
, "sqlite_pending_byte",

602 (*)&
sqlôe3_≥ndög_byã
, 
TCL_LINK_INT
);

603 
	`T˛_LökV¨
(
öãΩ
, "pager_pagesize",

604 (*)&
ã°_∑gesize
, 
TCL_LINK_INT
);

605  
TCL_OK
;

606 
	}
}

	@test3.c

18 
	~"sqlôeI¡.h
"

19 
	~"∑gî.h
"

20 
	~"båì.h
"

21 
	~"t˛.h
"

22 
	~<°dlib.h
>

23 
	~<°rög.h
>

28 *
	$îr‹Name
(
rc
){

29 *
zName
;

30  
rc
 ){

31 
SQLITE_OK
: 
zName
 = "SQLITE_OK"; ;

32 
SQLITE_ERROR
: 
zName
 = "SQLITE_ERROR"; ;

33 
SQLITE_PERM
: 
zName
 = "SQLITE_PERM"; ;

34 
SQLITE_ABORT
: 
zName
 = "SQLITE_ABORT"; ;

35 
SQLITE_BUSY
: 
zName
 = "SQLITE_BUSY"; ;

36 
SQLITE_NOMEM
: 
zName
 = "SQLITE_NOMEM"; ;

37 
SQLITE_READONLY
: 
zName
 = "SQLITE_READONLY"; ;

38 
SQLITE_INTERRUPT
: 
zName
 = "SQLITE_INTERRUPT"; ;

39 
SQLITE_IOERR
: 
zName
 = "SQLITE_IOERR"; ;

40 
SQLITE_CORRUPT
: 
zName
 = "SQLITE_CORRUPT"; ;

41 
SQLITE_FULL
: 
zName
 = "SQLITE_FULL"; ;

42 
SQLITE_CANTOPEN
: 
zName
 = "SQLITE_CANTOPEN"; ;

43 
SQLITE_PROTOCOL
: 
zName
 = "SQLITE_PROTOCOL"; ;

44 
SQLITE_EMPTY
: 
zName
 = "SQLITE_EMPTY"; ;

45 
SQLITE_LOCKED
: 
zName
 = "SQLITE_LOCKED"; ;

46 : 
zName
 = "SQLITE_Unknown"; ;

48  
zName
;

49 
	}
}

56 
	$båì_›í
(

57 *
NŸU£d
,

58 
T˛_I¡îp
 *
öãΩ
,

59 
¨gc
,

60 c⁄° **
¨gv


62 
Båì
 *
pBt
;

63 
rc
, 
nCache
, 
Êags
;

64 
zBuf
[100];

65 if–
¨gc
!=4 ){

66 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

68  
TCL_ERROR
;

70 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[2], &
nCache
ËË 
TCL_ERROR
;

71 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[3], &
Êags
ËË 
TCL_ERROR
;

72 
rc
 = 
	`sqlôe3BåìO≥n
(
¨gv
[1], 0, &
pBt
, 
Êags
);

73 if–
rc
!=
SQLITE_OK
 ){

74 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

75  
TCL_ERROR
;

77 
	`sqlôe3BåìSëCacheSize
(
pBt
, 
nCache
);

78 
	`sqlôe3_¢¥ötf
((
zBuf
), zBuf,"%p", 
pBt
);

79 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

80  
TCL_OK
;

81 
	}
}

88 
	$båì_˛o£
(

89 *
NŸU£d
,

90 
T˛_I¡îp
 *
öãΩ
,

91 
¨gc
,

92 c⁄° **
¨gv


94 
Båì
 *
pBt
;

95 
rc
;

96 if–
¨gc
!=2 ){

97 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

99  
TCL_ERROR
;

101 
pBt
 = 
	`sqlôe3TextToPå
(
¨gv
[1]);

102 
rc
 = 
	`sqlôe3BåìClo£
(
pBt
);

103 if–
rc
!=
SQLITE_OK
 ){

104 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

105  
TCL_ERROR
;

107  
TCL_OK
;

108 
	}
}

115 
	$båì_begö_å™ß˘i⁄
(

116 *
NŸU£d
,

117 
T˛_I¡îp
 *
öãΩ
,

118 
¨gc
,

119 c⁄° **
¨gv


121 
Båì
 *
pBt
;

122 
rc
;

123 if–
¨gc
!=2 ){

124 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

126  
TCL_ERROR
;

128 
pBt
 = 
	`sqlôe3TextToPå
(
¨gv
[1]);

129 
rc
 = 
	`sqlôe3BåìBegöTøns
(
pBt
, 1);

130 if–
rc
!=
SQLITE_OK
 ){

131 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

132  
TCL_ERROR
;

134  
TCL_OK
;

135 
	}
}

142 
	$båì_rﬁlback
(

143 *
NŸU£d
,

144 
T˛_I¡îp
 *
öãΩ
,

145 
¨gc
,

146 c⁄° **
¨gv


148 
Båì
 *
pBt
;

149 
rc
;

150 if–
¨gc
!=2 ){

151 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

153  
TCL_ERROR
;

155 
pBt
 = 
	`sqlôe3TextToPå
(
¨gv
[1]);

156 
rc
 = 
	`sqlôe3BåìRﬁlback
(
pBt
);

157 if–
rc
!=
SQLITE_OK
 ){

158 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

159  
TCL_ERROR
;

161  
TCL_OK
;

162 
	}
}

169 
	$båì_commô
(

170 *
NŸU£d
,

171 
T˛_I¡îp
 *
öãΩ
,

172 
¨gc
,

173 c⁄° **
¨gv


175 
Båì
 *
pBt
;

176 
rc
;

177 if–
¨gc
!=2 ){

178 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

180  
TCL_ERROR
;

182 
pBt
 = 
	`sqlôe3TextToPå
(
¨gv
[1]);

183 
rc
 = 
	`sqlôe3BåìCommô
(
pBt
);

184 if–
rc
!=
SQLITE_OK
 ){

185 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

186  
TCL_ERROR
;

188  
TCL_OK
;

189 
	}
}

196 
	$båì_begö_°©emít
(

197 *
NŸU£d
,

198 
T˛_I¡îp
 *
öãΩ
,

199 
¨gc
,

200 c⁄° **
¨gv


202 
Båì
 *
pBt
;

203 
rc
;

204 if–
¨gc
!=2 ){

205 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

207  
TCL_ERROR
;

209 
pBt
 = 
	`sqlôe3TextToPå
(
¨gv
[1]);

210 
rc
 = 
	`sqlôe3BåìBegöStmt
(
pBt
);

211 if–
rc
!=
SQLITE_OK
 ){

212 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

213  
TCL_ERROR
;

215  
TCL_OK
;

216 
	}
}

223 
	$båì_rﬁlback_°©emít
(

224 *
NŸU£d
,

225 
T˛_I¡îp
 *
öãΩ
,

226 
¨gc
,

227 c⁄° **
¨gv


229 
Båì
 *
pBt
;

230 
rc
;

231 if–
¨gc
!=2 ){

232 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

234  
TCL_ERROR
;

236 
pBt
 = 
	`sqlôe3TextToPå
(
¨gv
[1]);

237 
rc
 = 
	`sqlôe3BåìRﬁlbackStmt
(
pBt
);

238 if–
rc
!=
SQLITE_OK
 ){

239 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

240  
TCL_ERROR
;

242  
TCL_OK
;

243 
	}
}

250 
	$båì_commô_°©emít
(

251 *
NŸU£d
,

252 
T˛_I¡îp
 *
öãΩ
,

253 
¨gc
,

254 c⁄° **
¨gv


256 
Båì
 *
pBt
;

257 
rc
;

258 if–
¨gc
!=2 ){

259 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

261  
TCL_ERROR
;

263 
pBt
 = 
	`sqlôe3TextToPå
(
¨gv
[1]);

264 
rc
 = 
	`sqlôe3BåìCommôStmt
(
pBt
);

265 if–
rc
!=
SQLITE_OK
 ){

266 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

267  
TCL_ERROR
;

269  
TCL_OK
;

270 
	}
}

277 
	$båì_¸óã_èbÀ
(

278 *
NŸU£d
,

279 
T˛_I¡îp
 *
öãΩ
,

280 
¨gc
,

281 c⁄° **
¨gv


283 
Båì
 *
pBt
;

284 
rc
, 
iTabÀ
, 
Êags
;

285 
zBuf
[30];

286 if–
¨gc
!=3 ){

287 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

289  
TCL_ERROR
;

291 
pBt
 = 
	`sqlôe3TextToPå
(
¨gv
[1]);

292 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[2], &
Êags
ËË 
TCL_ERROR
;

293 
rc
 = 
	`sqlôe3BåìCª©eTabÀ
(
pBt
, &
iTabÀ
, 
Êags
);

294 if–
rc
!=
SQLITE_OK
 ){

295 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

296  
TCL_ERROR
;

298 
	`sqlôe3_¢¥ötf
((
zBuf
), zBuf, "%d", 
iTabÀ
);

299 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

300  
TCL_OK
;

301 
	}
}

308 
	$båì_dr›_èbÀ
(

309 *
NŸU£d
,

310 
T˛_I¡îp
 *
öãΩ
,

311 
¨gc
,

312 c⁄° **
¨gv


314 
Båì
 *
pBt
;

315 
iTabÀ
;

316 
rc
;

317 
nŸU£d1
;

318 if–
¨gc
!=3 ){

319 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

321  
TCL_ERROR
;

323 
pBt
 = 
	`sqlôe3TextToPå
(
¨gv
[1]);

324 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[2], &
iTabÀ
ËË 
TCL_ERROR
;

325 
rc
 = 
	`sqlôe3BåìDr›TabÀ
(
pBt
, 
iTabÀ
, &
nŸU£d1
);

326 if–
rc
!=
SQLITE_OK
 ){

327 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

328  
TCL_ERROR
;

330  
TCL_OK
;

331 
	}
}

338 
	$båì_˛ór_èbÀ
(

339 *
NŸU£d
,

340 
T˛_I¡îp
 *
öãΩ
,

341 
¨gc
,

342 c⁄° **
¨gv


344 
Båì
 *
pBt
;

345 
iTabÀ
;

346 
rc
;

347 if–
¨gc
!=3 ){

348 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

350  
TCL_ERROR
;

352 
pBt
 = 
	`sqlôe3TextToPå
(
¨gv
[1]);

353 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[2], &
iTabÀ
ËË 
TCL_ERROR
;

354 
rc
 = 
	`sqlôe3BåìCÀ¨TabÀ
(
pBt
, 
iTabÀ
);

355 if–
rc
!=
SQLITE_OK
 ){

356 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

357  
TCL_ERROR
;

359  
TCL_OK
;

360 
	}
}

367 
	$båì_gë_mëa
(

368 *
NŸU£d
,

369 
T˛_I¡îp
 *
öãΩ
,

370 
¨gc
,

371 c⁄° **
¨gv


373 
Båì
 *
pBt
;

374 
rc
;

375 
i
;

376 if–
¨gc
!=2 ){

377 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

379  
TCL_ERROR
;

381 
pBt
 = 
	`sqlôe3TextToPå
(
¨gv
[1]);

382 
i
=0; i<
SQLITE_N_BTREE_META
; i++){

383 
zBuf
[30];

384 
v
;

385 
rc
 = 
	`sqlôe3BåìGëMëa
(
pBt
, 
i
, &
v
);

386 if–
rc
!=
SQLITE_OK
 ){

387 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

388  
TCL_ERROR
;

390 
	`sqlôe3_¢¥ötf
((
zBuf
), zBuf,"%d",
v
);

391 
	`T˛_AµídEÀmít
(
öãΩ
, 
zBuf
);

393  
TCL_OK
;

394 
	}
}

401 
	$båì_upd©e_mëa
(

402 *
NŸU£d
,

403 
T˛_I¡îp
 *
öãΩ
,

404 
¨gc
,

405 c⁄° **
¨gv


407 
Båì
 *
pBt
;

408 
rc
;

409 
i
;

410 
aMëa
[
SQLITE_N_BTREE_META
];

412 if–
¨gc
!=2+
SQLITE_N_BTREE_META
 ){

413 
zBuf
[30];

414 
	`sqlôe3_¢¥ötf
((
zBuf
), zBuf,"%d",
SQLITE_N_BTREE_META
);

415 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

416 " ID METADATA...\" (METADATA i†", 
zBuf
, " integers)", 0);

417  
TCL_ERROR
;

419 
pBt
 = 
	`sqlôe3TextToPå
(
¨gv
[1]);

420 
i
=1; i<
SQLITE_N_BTREE_META
; i++){

421 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[
i
+2], &
aMëa
[i]ËË 
TCL_ERROR
;

423 
i
=1; i<
SQLITE_N_BTREE_META
; i++){

424 
rc
 = 
	`sqlôe3BåìUpd©eMëa
(
pBt
, 
i
, 
aMëa
[i]);

425 if–
rc
!=
SQLITE_OK
 ){

426 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

427  
TCL_ERROR
;

430  
TCL_OK
;

431 
	}
}

438 
	$båì_∑ge_dump
(

439 *
NŸU£d
,

440 
T˛_I¡îp
 *
öãΩ
,

441 
¨gc
,

442 c⁄° **
¨gv


444 
Båì
 *
pBt
;

445 
iPage
;

446 
rc
;

448 if–
¨gc
!=3 ){

449 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

451  
TCL_ERROR
;

453 
pBt
 = 
	`sqlôe3TextToPå
(
¨gv
[1]);

454 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[2], &
iPage
ËË 
TCL_ERROR
;

455 
rc
 = 
	`sqlôe3BåìPageDump
(
pBt
, 
iPage
, 0);

456 if–
rc
!=
SQLITE_OK
 ){

457 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

458  
TCL_ERROR
;

460  
TCL_OK
;

461 
	}
}

468 
	$båì_åì_dump
(

469 *
NŸU£d
,

470 
T˛_I¡îp
 *
öãΩ
,

471 
¨gc
,

472 c⁄° **
¨gv


474 
Båì
 *
pBt
;

475 
iPage
;

476 
rc
;

478 if–
¨gc
!=3 ){

479 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

481  
TCL_ERROR
;

483 
pBt
 = 
	`sqlôe3TextToPå
(
¨gv
[1]);

484 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[2], &
iPage
ËË 
TCL_ERROR
;

485 
rc
 = 
	`sqlôe3BåìPageDump
(
pBt
, 
iPage
, 1);

486 if–
rc
!=
SQLITE_OK
 ){

487 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

488  
TCL_ERROR
;

490  
TCL_OK
;

491 
	}
}

498 
	$båì_∑gî_°©s
(

499 *
NŸU£d
,

500 
T˛_I¡îp
 *
öãΩ
,

501 
¨gc
,

502 c⁄° **
¨gv


504 
Båì
 *
pBt
;

505 
i
;

506 *
a
;

508 if–
¨gc
!=2 ){

509 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

511  
TCL_ERROR
;

513 
pBt
 = 
	`sqlôe3TextToPå
(
¨gv
[1]);

514 
a
 = 
	`sqlôe3∑gî_°©s
(
	`sqlôe3BåìPagî
(
pBt
));

515 
i
=0; i<11; i++){

516 *
zName
[] = {

520 
zBuf
[100];

521 
	`T˛_AµídEÀmít
(
öãΩ
, 
zName
[
i
]);

522 
	`sqlôe3_¢¥ötf
((
zBuf
), zBuf,"%d",
a
[
i
]);

523 
	`T˛_AµídEÀmít
(
öãΩ
, 
zBuf
);

525  
TCL_OK
;

526 
	}
}

533 
	$båì_∑gî_ªf_dump
(

534 *
NŸU£d
,

535 
T˛_I¡îp
 *
öãΩ
,

536 
¨gc
,

537 c⁄° **
¨gv


539 
Båì
 *
pBt
;

541 if–
¨gc
!=2 ){

542 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

544  
TCL_ERROR
;

546 
pBt
 = 
	`sqlôe3TextToPå
(
¨gv
[1]);

547 #ifde‡
SQLITE_DEBUG


548 
	`sqlôe3∑gî_ªfdump
(
	`sqlôe3BåìPagî
(
pBt
));

550  
TCL_OK
;

551 
	}
}

560 
	$båì_öãgrôy_check
(

561 *
NŸU£d
,

562 
T˛_I¡îp
 *
öãΩ
,

563 
¨gc
,

564 c⁄° **
¨gv


566 
Båì
 *
pBt
;

567 
nRoŸ
;

568 *
aRoŸ
;

569 
i
;

570 *
zResu…
;

572 if–
¨gc
<3 ){

573 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

575  
TCL_ERROR
;

577 
pBt
 = 
	`sqlôe3TextToPå
(
¨gv
[1]);

578 
nRoŸ
 = 
¨gc
-2;

579 
aRoŸ
 = 
	`mÆloc
–()*(
¨gc
-2) );

580 
i
=0; i<
¨gc
-2; i++){

581 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[
i
+2], &
aRoŸ
[i]ËË 
TCL_ERROR
;

583 #i‚de‡
SQLITE_OMIT_INTEGRITY_CHECK


584 
zResu…
 = 
	`sqlôe3BåìI¡egrôyCheck
(
pBt
, 
aRoŸ
, 
nRoŸ
);

586 
zResu…
 = 0;

588 if–
zResu…
 ){

589 
	`T˛_AµídResu…
(
öãΩ
, 
zResu…
, 0);

590 
	`sqlôeFªe
(
zResu…
);

592  
TCL_OK
;

593 
	}
}

600 #ifde‡
SQLITE_DEBUG


601 
	$båì_curs‹_li°
(

602 *
NŸU£d
,

603 
T˛_I¡îp
 *
öãΩ
,

604 
¨gc
,

605 c⁄° **
¨gv


607 
Båì
 *
pBt
;

609 if–
¨gc
!=2 ){

610 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

612  
TCL_ERROR
;

614 
pBt
 = 
	`sqlôe3TextToPå
(
¨gv
[1]);

615 
	`sqlôe3BåìCurs‹Li°
(
pBt
);

616  
SQLITE_OK
;

617 
	}
}

625 
	$båì_curs‹
(

626 *
NŸU£d
,

627 
T˛_I¡îp
 *
öãΩ
,

628 
¨gc
,

629 c⁄° **
¨gv


631 
Båì
 *
pBt
;

632 
iTabÀ
;

633 
BtCurs‹
 *
pCur
;

634 
rc
;

635 
wrFœg
;

636 
zBuf
[30];

638 if–
¨gc
!=4 ){

639 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

641  
TCL_ERROR
;

643 
pBt
 = 
	`sqlôe3TextToPå
(
¨gv
[1]);

644 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[2], &
iTabÀ
ËË 
TCL_ERROR
;

645 if–
	`T˛_GëBoﬁón
(
öãΩ
, 
¨gv
[3], &
wrFœg
ËË 
TCL_ERROR
;

646 
rc
 = 
	`sqlôe3BåìCurs‹
(
pBt
, 
iTabÀ
, 
wrFœg
, 0, 0, &
pCur
);

647 if–
rc
 ){

648 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

649  
TCL_ERROR
;

651 
	`sqlôe3_¢¥ötf
((
zBuf
), zBuf,"%p", 
pCur
);

652 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

653  
SQLITE_OK
;

654 
	}
}

661 
	$båì_˛o£_curs‹
(

662 *
NŸU£d
,

663 
T˛_I¡îp
 *
öãΩ
,

664 
¨gc
,

665 c⁄° **
¨gv


667 
BtCurs‹
 *
pCur
;

668 
rc
;

670 if–
¨gc
!=2 ){

671 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

673  
TCL_ERROR
;

675 
pCur
 = 
	`sqlôe3TextToPå
(
¨gv
[1]);

676 
rc
 = 
	`sqlôe3BåìClo£Curs‹
(
pCur
);

677 if–
rc
 ){

678 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

679  
TCL_ERROR
;

681  
SQLITE_OK
;

682 
	}
}

689 
	$båì_move_to
(

690 *
NŸU£d
,

691 
T˛_I¡îp
 *
öãΩ
,

692 
¨gc
,

693 c⁄° **
¨gv


695 
BtCurs‹
 *
pCur
;

696 
rc
;

697 
ªs
;

698 
zBuf
[20];

700 if–
¨gc
!=3 ){

701 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

703  
TCL_ERROR
;

705 
pCur
 = 
	`sqlôe3TextToPå
(
¨gv
[1]);

706 if–
	`sqlôe3BåìFœgs
(
pCur
Ë& 
BTREE_INTKEY
 ){

707 
iKey
;

708 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[2], &
iKey
ËË 
TCL_ERROR
;

709 
rc
 = 
	`sqlôe3BåìMovëo
(
pCur
, 0, 
iKey
, &
ªs
);

711 
rc
 = 
	`sqlôe3BåìMovëo
(
pCur
, 
¨gv
[2], 
	`°æí
◊rgv[2]), &
ªs
);

713 if–
rc
 ){

714 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

715  
TCL_ERROR
;

717 if–
ªs
<0 )Ñes = -1;

718 if–
ªs
>0 )Ñes = 1;

719 
	`sqlôe3_¢¥ötf
((
zBuf
), zBuf,"%d",
ªs
);

720 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

721  
SQLITE_OK
;

722 
	}
}

729 
	$båì_dñëe
(

730 *
NŸU£d
,

731 
T˛_I¡îp
 *
öãΩ
,

732 
¨gc
,

733 c⁄° **
¨gv


735 
BtCurs‹
 *
pCur
;

736 
rc
;

738 if–
¨gc
!=2 ){

739 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

741  
TCL_ERROR
;

743 
pCur
 = 
	`sqlôe3TextToPå
(
¨gv
[1]);

744 
rc
 = 
	`sqlôe3BåìDñëe
(
pCur
);

745 if–
rc
 ){

746 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

747  
TCL_ERROR
;

749  
SQLITE_OK
;

750 
	}
}

758 
	$båì_ö£π
(

759 * 
˛õ¡D©a
,

760 
T˛_I¡îp
 *
öãΩ
,

761 
objc
,

762 
T˛_Obj
 *
CONST
 
objv
[]

764 
BtCurs‹
 *
pCur
;

765 
rc
;

767 if–
objc
!=4 ){

768 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "ID KEY DATA");

769  
TCL_ERROR
;

771 
pCur
 = 
	`sqlôe3TextToPå
(
	`T˛_GëSåög
(
objv
[1]));

772 if–
	`sqlôe3BåìFœgs
(
pCur
Ë& 
BTREE_INTKEY
 ){

773 
i64
 
iKey
;

774 
Àn
;

775 *
pBuf
;

776 if–
	`T˛_GëWideI¡FromObj
(
öãΩ
, 
objv
[2], &
iKey
ËË 
TCL_ERROR
;

777 
pBuf
 = 
	`T˛_GëByãAºayFromObj
(
objv
[3], &
Àn
);

778 
rc
 = 
	`sqlôe3BåìIn£π
(
pCur
, 0, 
iKey
, 
pBuf
, 
Àn
);

780 
keyÀn
;

781 
dÀn
;

782 *
pKBuf
;

783 *
pDBuf
;

784 
pKBuf
 = 
	`T˛_GëByãAºayFromObj
(
objv
[2], &
keyÀn
);

785 
pDBuf
 = 
	`T˛_GëByãAºayFromObj
(
objv
[3], &
dÀn
);

786 
rc
 = 
	`sqlôe3BåìIn£π
(
pCur
, 
pKBuf
, 
keyÀn
, 
pDBuf
, 
dÀn
);

788 if–
rc
 ){

789 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

790  
TCL_ERROR
;

792  
SQLITE_OK
;

793 
	}
}

802 
	$båì_√xt
(

803 *
NŸU£d
,

804 
T˛_I¡îp
 *
öãΩ
,

805 
¨gc
,

806 c⁄° **
¨gv


808 
BtCurs‹
 *
pCur
;

809 
rc
;

810 
ªs
 = 0;

811 
zBuf
[100];

813 if–
¨gc
!=2 ){

814 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

816  
TCL_ERROR
;

818 
pCur
 = 
	`sqlôe3TextToPå
(
¨gv
[1]);

819 
rc
 = 
	`sqlôe3BåìNext
(
pCur
, &
ªs
);

820 if–
rc
 ){

821 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

822  
TCL_ERROR
;

824 
	`sqlôe3_¢¥ötf
((
zBuf
),zBuf,"%d",
ªs
);

825 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

826  
SQLITE_OK
;

827 
	}
}

836 
	$båì_¥ev
(

837 *
NŸU£d
,

838 
T˛_I¡îp
 *
öãΩ
,

839 
¨gc
,

840 c⁄° **
¨gv


842 
BtCurs‹
 *
pCur
;

843 
rc
;

844 
ªs
 = 0;

845 
zBuf
[100];

847 if–
¨gc
!=2 ){

848 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

850  
TCL_ERROR
;

852 
pCur
 = 
	`sqlôe3TextToPå
(
¨gv
[1]);

853 
rc
 = 
	`sqlôe3BåìPªvious
(
pCur
, &
ªs
);

854 if–
rc
 ){

855 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

856  
TCL_ERROR
;

858 
	`sqlôe3_¢¥ötf
((
zBuf
),zBuf,"%d",
ªs
);

859 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

860  
SQLITE_OK
;

861 
	}
}

869 
	$båì_fú°
(

870 *
NŸU£d
,

871 
T˛_I¡îp
 *
öãΩ
,

872 
¨gc
,

873 c⁄° **
¨gv


875 
BtCurs‹
 *
pCur
;

876 
rc
;

877 
ªs
 = 0;

878 
zBuf
[100];

880 if–
¨gc
!=2 ){

881 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

883  
TCL_ERROR
;

885 
pCur
 = 
	`sqlôe3TextToPå
(
¨gv
[1]);

886 
rc
 = 
	`sqlôe3BåìFú°
(
pCur
, &
ªs
);

887 if–
rc
 ){

888 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

889  
TCL_ERROR
;

891 
	`sqlôe3_¢¥ötf
((
zBuf
),zBuf,"%d",
ªs
);

892 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

893  
SQLITE_OK
;

894 
	}
}

902 
	$båì_œ°
(

903 *
NŸU£d
,

904 
T˛_I¡îp
 *
öãΩ
,

905 
¨gc
,

906 c⁄° **
¨gv


908 
BtCurs‹
 *
pCur
;

909 
rc
;

910 
ªs
 = 0;

911 
zBuf
[100];

913 if–
¨gc
!=2 ){

914 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

916  
TCL_ERROR
;

918 
pCur
 = 
	`sqlôe3TextToPå
(
¨gv
[1]);

919 
rc
 = 
	`sqlôe3BåìLa°
(
pCur
, &
ªs
);

920 if–
rc
 ){

921 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

922  
TCL_ERROR
;

924 
	`sqlôe3_¢¥ötf
((
zBuf
),zBuf,"%d",
ªs
);

925 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

926  
SQLITE_OK
;

927 
	}
}

935 
	$båì_eof
(

936 *
NŸU£d
,

937 
T˛_I¡îp
 *
öãΩ
,

938 
¨gc
,

939 c⁄° **
¨gv


941 
BtCurs‹
 *
pCur
;

942 
zBuf
[50];

944 if–
¨gc
!=2 ){

945 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

947  
TCL_ERROR
;

949 
pCur
 = 
	`sqlôe3TextToPå
(
¨gv
[1]);

950 
	`sqlôe3_¢¥ötf
((
zBuf
),zBuf, "%d", 
	`sqlôe3BåìEof
(
pCur
));

951 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

952  
SQLITE_OK
;

953 
	}
}

961 
	$båì_keysize
(

962 *
NŸU£d
,

963 
T˛_I¡îp
 *
öãΩ
,

964 
¨gc
,

965 c⁄° **
¨gv


967 
BtCurs‹
 *
pCur
;

968 
u64
 
n
;

969 
zBuf
[50];

971 if–
¨gc
!=2 ){

972 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

974  
TCL_ERROR
;

976 
pCur
 = 
	`sqlôe3TextToPå
(
¨gv
[1]);

977 
	`sqlôe3BåìKeySize
(
pCur
, (
i64
*)&
n
);

978 
	`sqlôe3_¢¥ötf
((
zBuf
),zBuf, "%Œu", 
n
);

979 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

980  
SQLITE_OK
;

981 
	}
}

988 
	$båì_key
(

989 *
NŸU£d
,

990 
T˛_I¡îp
 *
öãΩ
,

991 
¨gc
,

992 c⁄° **
¨gv


994 
BtCurs‹
 *
pCur
;

995 
rc
;

996 
u64
 
n
;

997 *
zBuf
;

999 if–
¨gc
!=2 ){

1000 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

1002  
TCL_ERROR
;

1004 
pCur
 = 
	`sqlôe3TextToPå
(
¨gv
[1]);

1005 
	`sqlôe3BåìKeySize
(
pCur
, (
i64
*)&
n
);

1006 if–
	`sqlôe3BåìFœgs
(
pCur
Ë& 
BTREE_INTKEY
 ){

1007 
zBuf2
[60];

1008 
	`sqlôe3_¢¥ötf
((
zBuf2
),zBuf2, "%Œu", 
n
);

1009 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf2
, 0);

1011 
zBuf
 = 
	`mÆloc
–
n
+1 );

1012 
rc
 = 
	`sqlôe3BåìKey
(
pCur
, 0, 
n
, 
zBuf
);

1013 if–
rc
 ){

1014 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

1015  
TCL_ERROR
;

1017 
zBuf
[
n
] = 0;

1018 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

1019 
	`‰ì
(
zBuf
);

1021  
SQLITE_OK
;

1022 
	}
}

1029 
	$båì_d©a
(

1030 *
NŸU£d
,

1031 
T˛_I¡îp
 *
öãΩ
,

1032 
¨gc
,

1033 c⁄° **
¨gv


1035 
BtCurs‹
 *
pCur
;

1036 
rc
;

1037 
u32
 
n
;

1038 *
zBuf
;

1040 if–
¨gc
!=2 &&árgc!=3 ){

1041 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

1043  
TCL_ERROR
;

1045 
pCur
 = 
	`sqlôe3TextToPå
(
¨gv
[1]);

1046 if–
¨gc
==2 ){

1047 
	`sqlôe3BåìD©aSize
(
pCur
, &
n
);

1049 
n
 = 
	`©oi
(
¨gv
[2]);

1051 
zBuf
 = 
	`mÆloc
–
n
+1 );

1052 
rc
 = 
	`sqlôe3BåìD©a
(
pCur
, 0, 
n
, 
zBuf
);

1053 if–
rc
 ){

1054 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

1055  
TCL_ERROR
;

1057 
zBuf
[
n
] = 0;

1058 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

1059 
	`‰ì
(
zBuf
);

1060  
SQLITE_OK
;

1061 
	}
}

1069 
	$båì_„tch_key
(

1070 *
NŸU£d
,

1071 
T˛_I¡îp
 *
öãΩ
,

1072 
¨gc
,

1073 c⁄° **
¨gv


1075 
BtCurs‹
 *
pCur
;

1076 
n
;

1077 
amt
;

1078 
u64
 
nKey
;

1079 c⁄° *
zBuf
;

1080 
zSètic
[1000];

1082 if–
¨gc
!=3 ){

1083 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

1085  
TCL_ERROR
;

1087 
pCur
 = 
	`sqlôe3TextToPå
(
¨gv
[1]);

1088 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[2], &
n
ËË 
TCL_ERROR
;

1089 
	`sqlôe3BåìKeySize
(
pCur
, (
i64
*)&
nKey
);

1090 
zBuf
 = 
	`sqlôe3BåìKeyFëch
(
pCur
, &
amt
);

1091 if–
zBuf
 && 
amt
>=
n
 ){

1092 
	`as£π
–
nKey
<(
zSètic
) );

1093 if–
n
>0 ) 
nKey
 =Ç;

1094 
	`mem˝y
(
zSètic
, 
zBuf
, ()
nKey
);

1095 
zSètic
[
nKey
] = 0;

1096 
	`T˛_AµídResu…
(
öãΩ
, 
zSètic
, 0);

1098  
TCL_OK
;

1099 
	}
}

1107 
	$båì_„tch_d©a
(

1108 *
NŸU£d
,

1109 
T˛_I¡îp
 *
öãΩ
,

1110 
¨gc
,

1111 c⁄° **
¨gv


1113 
BtCurs‹
 *
pCur
;

1114 
n
;

1115 
amt
;

1116 
u32
 
nD©a
;

1117 c⁄° *
zBuf
;

1118 
zSètic
[1000];

1120 if–
¨gc
!=3 ){

1121 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

1123  
TCL_ERROR
;

1125 
pCur
 = 
	`sqlôe3TextToPå
(
¨gv
[1]);

1126 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[2], &
n
ËË 
TCL_ERROR
;

1127 
	`sqlôe3BåìD©aSize
(
pCur
, &
nD©a
);

1128 
zBuf
 = 
	`sqlôe3BåìD©aFëch
(
pCur
, &
amt
);

1129 if–
zBuf
 && 
amt
>=
n
 ){

1130 
	`as£π
–
nD©a
<(
zSètic
) );

1131 if–
n
>0 ) 
nD©a
 =Ç;

1132 
	`mem˝y
(
zSètic
, 
zBuf
, ()
nD©a
);

1133 
zSètic
[
nD©a
] = 0;

1134 
	`T˛_AµídResu…
(
öãΩ
, 
zSètic
, 0);

1136  
TCL_OK
;

1137 
	}
}

1144 
	$båì_∑ylﬂd_size
(

1145 *
NŸU£d
,

1146 
T˛_I¡îp
 *
öãΩ
,

1147 
¨gc
,

1148 c⁄° **
¨gv


1150 
BtCurs‹
 *
pCur
;

1151 
n2
;

1152 
u64
 
n1
;

1153 
zBuf
[50];

1155 if–
¨gc
!=2 ){

1156 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

1158  
TCL_ERROR
;

1160 
pCur
 = 
	`sqlôe3TextToPå
(
¨gv
[1]);

1161 if–
	`sqlôe3BåìFœgs
(
pCur
Ë& 
BTREE_INTKEY
 ){

1162 
n1
 = 0;

1164 
	`sqlôe3BåìKeySize
(
pCur
, (
i64
*)&
n1
);

1166 
	`sqlôe3BåìD©aSize
(
pCur
, (
u32
*)&
n2
);

1167 
	`sqlôe3_¢¥ötf
((
zBuf
),zBuf, "%d", ()(
n1
+
n2
));

1168 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

1169  
SQLITE_OK
;

1170 
	}
}

1189 #ifde‡
SQLITE_DEBUG


1190 
	$båì_curs‹_öfo
(

1191 *
NŸU£d
,

1192 
T˛_I¡îp
 *
öãΩ
,

1193 
¨gc
,

1194 c⁄° **
¨gv


1196 
BtCurs‹
 *
pCur
;

1197 
rc
;

1198 
i
, 
j
;

1199 
up
;

1200 
aResu…
[10];

1201 
zBuf
[400];

1203 if–
¨gc
!=2 &&árgc!=3 ){

1204 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

1206  
TCL_ERROR
;

1208 
pCur
 = 
	`sqlôe3TextToPå
(
¨gv
[1]);

1209 if–
¨gc
==3 ){

1210 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[2], &
up
ËË 
TCL_ERROR
;

1212 
up
 = 0;

1214 
rc
 = 
	`sqlôe3BåìCurs‹Info
(
pCur
, 
aResu…
, 
up
);

1215 if–
rc
 ){

1216 
	`T˛_AµídResu…
(
öãΩ
, 
	`îr‹Name
(
rc
), 0);

1217  
TCL_ERROR
;

1219 
j
 = 0;

1220 
i
=0; i<(
aResu…
)/(aResult[0]); i++){

1221 
	`sqlôe3_¢¥ötf
(40,&
zBuf
[
j
]," %d", 
aResu…
[
i
]);

1222 
j
 +
	`°æí
(&
zBuf
[j]);

1224 
	`T˛_AµídResu…
(
öãΩ
, &
zBuf
[1], 0);

1225  
SQLITE_OK
;

1226 
	}
}

1238 
	$båì_bªakpoöt
(

1239 *
NŸU£d
,

1240 
T˛_I¡îp
 *
öãΩ
,

1241 
¨gc
,

1242 c⁄° **
¨gv


1244  
TCL_OK
;

1245 
	}
}

1261 
	$båì_v¨öt_ã°
(

1262 *
NŸU£d
,

1263 
T˛_I¡îp
 *
öãΩ
,

1264 
¨gc
,

1265 c⁄° **
¨gv


1267 
u32
 
°¨t
, 
mu…
, 
cou¡
, 
ö¸
;

1268 
u64
 
ö
, 
out
;

1269 
n1
, 
n2
, 
i
, 
j
;

1270 
zBuf
[100];

1271 if–
¨gc
!=5 ){

1272 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

1274  
TCL_ERROR
;

1276 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[1], (*)&
°¨t
ËË 
TCL_ERROR
;

1277 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[2], (*)&
mu…
ËË 
TCL_ERROR
;

1278 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[3], (*)&
cou¡
ËË 
TCL_ERROR
;

1279 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[4], (*)&
ö¸
ËË 
TCL_ERROR
;

1280 
ö
 = 
°¨t
;

1281 
ö
 *
mu…
;

1282 
i
=0; i<
cou¡
; i++){

1283 
zEº
[200];

1284 
n1
 = 
	`sqlôe3PutV¨öt
(
zBuf
, 
ö
);

1285 if–
n1
>9 ||Ç1<1 ){

1286 
	`•rötf
(
zEº
, "PutV¨öàªtu∫ed %d - should bêbëwì¿1ánd 9", 
n1
);

1287 
	`T˛_AµídResu…
(
öãΩ
, 
zEº
, 0);

1288  
TCL_ERROR
;

1290 
n2
 = 
	`sqlôe3GëV¨öt
(
zBuf
, &
out
);

1291 if–
n1
!=
n2
 ){

1292 
	`•rötf
(
zEº
, "PutV¨öàªtu∫ed %dánd GëV¨öàªtu∫ed %d", 
n1
, 
n2
);

1293 
	`T˛_AµídResu…
(
öãΩ
, 
zEº
, 0);

1294  
TCL_ERROR
;

1296 if–
ö
!=
out
 ){

1297 
	`•rötf
(
zEº
, "WrŸê0x%016Œxánd gŸ back 0x%016Œx", 
ö
, 
out
);

1298 
	`T˛_AµídResu…
(
öãΩ
, 
zEº
, 0);

1299  
TCL_ERROR
;

1301 if–(
ö
 & 0xffffffff)==in ){

1302 
u32
 
out32
;

1303 
n2
 = 
	`sqlôe3GëV¨öt32
(
zBuf
, &
out32
);

1304 
out
 = 
out32
;

1305 if–
n1
!=
n2
 ){

1306 
	`•rötf
(
zEº
, "PutVarintÑeturned %dánd GetVarint32Ñeturned %d",

1307 
n1
, 
n2
);

1308 
	`T˛_AµídResu…
(
öãΩ
, 
zEº
, 0);

1309  
TCL_ERROR
;

1311 if–
ö
!=
out
 ){

1312 
	`•rötf
(
zEº
, "Wrote 0x%016llxánd got back 0x%016llx from GetVarint32",

1313 
ö
, 
out
);

1314 
	`T˛_AµídResu…
(
öãΩ
, 
zEº
, 0);

1315  
TCL_ERROR
;

1323 
j
=0; j<19; j++){

1324 
	`sqlôe3GëV¨öt
(
zBuf
, &
out
);

1326 
ö
 +
ö¸
;

1328  
TCL_OK
;

1329 
	}
}

1340 
	$båì_‰om_db
(

1341 *
NŸU£d
,

1342 
T˛_I¡îp
 *
öãΩ
,

1343 
¨gc
,

1344 c⁄° **
¨gv


1346 
zBuf
[100];

1347 
T˛_CmdInfo
 
öfo
;

1348 
sqlôe3
 *
db
;

1349 
Båì
 *
pBt
;

1351 if–
¨gc
!=2 ){

1352 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

1354  
TCL_ERROR
;

1357 if–1!=
	`T˛_GëComm™dInfo
(
öãΩ
, 
¨gv
[1], &
öfo
) ){

1358 
	`T˛_AµídResu…
(
öãΩ
, "Nÿsuch db-h™dÀ: \"", 
¨gv
[1], "\"", 0);

1359  
TCL_ERROR
;

1361 
db
 = *((
sqlôe3
 **)
öfo
.
objClõ¡D©a
);

1362 
	`as£π
–
db
 );

1364 
pBt
 = 
db
->
aDb
[0].pBt;

1365 
	`sqlôe3_¢¥ötf
((
zBuf
), zBuf, "%p", 
pBt
);

1366 
	`T˛_SëResu…
(
öãΩ
, 
zBuf
, 
TCL_VOLATILE
);

1367  
TCL_OK
;

1368 
	}
}

1376 
	$båì_£t_ˇche_size
(

1377 *
NŸU£d
,

1378 
T˛_I¡îp
 *
öãΩ
,

1379 
¨gc
,

1380 c⁄° **
¨gv


1382 
nCache
;

1383 
Båì
 *
pBt
;

1385 if–
¨gc
!=3 ){

1386 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

1388  
TCL_ERROR
;

1390 
pBt
 = 
	`sqlôe3TextToPå
(
¨gv
[1]);

1391 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[2], &
nCache
ËË 
TCL_ERROR
;

1392 
	`sqlôe3BåìSëCacheSize
(
pBt
, 
nCache
);

1393  
TCL_OK
;

1394 
	}
}

1400 
	$Sqlôëe°3_Inô
(
T˛_I¡îp
 *
öãΩ
){

1401 
sqlôe3_båì_åa˚
;

1403 *
zName
;

1404 
T˛_CmdProc
 *
xProc
;

1405 } 
aCmd
[] = {

1406 { "båì_›í", (
T˛_CmdProc
*)
båì_›í
 },

1407 { "båì_˛o£", (
T˛_CmdProc
*)
båì_˛o£
 },

1408 { "båì_begö_å™ß˘i⁄", (
T˛_CmdProc
*)
båì_begö_å™ß˘i⁄
 },

1409 { "båì_commô", (
T˛_CmdProc
*)
båì_commô
 },

1410 { "båì_rﬁlback", (
T˛_CmdProc
*)
båì_rﬁlback
 },

1411 { "båì_¸óã_èbÀ", (
T˛_CmdProc
*)
båì_¸óã_èbÀ
 },

1412 { "båì_dr›_èbÀ", (
T˛_CmdProc
*)
båì_dr›_èbÀ
 },

1413 { "båì_˛ór_èbÀ", (
T˛_CmdProc
*)
båì_˛ór_èbÀ
 },

1414 { "båì_gë_mëa", (
T˛_CmdProc
*)
båì_gë_mëa
 },

1415 { "båì_upd©e_mëa", (
T˛_CmdProc
*)
båì_upd©e_mëa
 },

1416 { "båì_∑ge_dump", (
T˛_CmdProc
*)
båì_∑ge_dump
 },

1417 { "båì_åì_dump", (
T˛_CmdProc
*)
båì_åì_dump
 },

1418 { "båì_∑gî_°©s", (
T˛_CmdProc
*)
båì_∑gî_°©s
 },

1419 { "båì_∑gî_ªf_dump", (
T˛_CmdProc
*)
båì_∑gî_ªf_dump
 },

1420 { "båì_curs‹", (
T˛_CmdProc
*)
båì_curs‹
 },

1421 { "båì_˛o£_curs‹", (
T˛_CmdProc
*)
båì_˛o£_curs‹
 },

1422 { "båì_move_to", (
T˛_CmdProc
*)
båì_move_to
 },

1423 { "båì_dñëe", (
T˛_CmdProc
*)
båì_dñëe
 },

1424 { "båì_√xt", (
T˛_CmdProc
*)
båì_√xt
 },

1425 { "båì_¥ev", (
T˛_CmdProc
*)
båì_¥ev
 },

1426 { "båì_eof", (
T˛_CmdProc
*)
båì_eof
 },

1427 { "båì_keysize", (
T˛_CmdProc
*)
båì_keysize
 },

1428 { "båì_key", (
T˛_CmdProc
*)
båì_key
 },

1429 { "båì_d©a", (
T˛_CmdProc
*)
båì_d©a
 },

1430 { "båì_„tch_key", (
T˛_CmdProc
*)
båì_„tch_key
 },

1431 { "båì_„tch_d©a", (
T˛_CmdProc
*)
båì_„tch_d©a
 },

1432 { "båì_∑ylﬂd_size", (
T˛_CmdProc
*)
båì_∑ylﬂd_size
 },

1433 { "båì_fú°", (
T˛_CmdProc
*)
båì_fú°
 },

1434 { "båì_œ°", (
T˛_CmdProc
*)
båì_œ°
 },

1435 { "båì_öãgrôy_check", (
T˛_CmdProc
*)
båì_öãgrôy_check
 },

1436 { "båì_bªakpoöt", (
T˛_CmdProc
*)
båì_bªakpoöt
 },

1437 { "båì_v¨öt_ã°", (
T˛_CmdProc
*)
båì_v¨öt_ã°
 },

1438 { "båì_begö_°©emít", (
T˛_CmdProc
*)
båì_begö_°©emít
 },

1439 { "båì_commô_°©emít", (
T˛_CmdProc
*)
båì_commô_°©emít
 },

1440 { "båì_rﬁlback_°©emít", (
T˛_CmdProc
*)
båì_rﬁlback_°©emít
 },

1441 { "båì_‰om_db", (
T˛_CmdProc
*)
båì_‰om_db
 },

1442 { "båì_£t_ˇche_size", (
T˛_CmdProc
*)
båì_£t_ˇche_size
 },

1443 #ifde‡
SQLITE_DEBUG


1444 { "båì_curs‹_öfo", (
T˛_CmdProc
*)
båì_curs‹_öfo
 },

1445 { "båì_curs‹_li°", (
T˛_CmdProc
*)
båì_curs‹_li°
 },

1448 
i
;

1450 
i
=0; i<(
aCmd
)/(aCmd[0]); i++){

1451 
	`T˛_Cª©eComm™d
(
öãΩ
, 
aCmd
[
i
].
zName
,áCmd[i].
xProc
, 0, 0);

1453 
	`T˛_LökV¨
(
öãΩ
, "∑gî_ªföfo_íabÀ", (*)&
∑gî3_ªföfo_íabÀ
,

1454 
TCL_LINK_INT
);

1455 
	`T˛_LökV¨
(
öãΩ
, "båì_åa˚", (*)&
sqlôe3_båì_åa˚
,

1456 
TCL_LINK_INT
);

1462 
	`T˛_Cª©eObjComm™d
(
öãΩ
, "båì_ö£π", 
båì_ö£π
, 0, 0);

1463  
TCL_OK
;

1464 
	}
}

	@test4.c

16 
	~"sqlôeI¡.h
"

17 
	~"t˛.h
"

18 
	~"os.h
"

19 #i‡
deföed
(
OS_UNIX
Ë&& OS_UNIX==1 && deföed(
THREADSAFE
) && THREADSAFE==1

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<±hªad.h
>

23 
	~<sched.h
>

24 
	~<˘y≥.h
>

30 
Thªad
 
	tThªad
;

31 
	sThªad
 {

34 *
	mzFûíame
;

35 (*
	mxOp
)(
	mThªad
*);

36 *
	mzArg
;

37 
	m›num
;

38 
	mbusy
;

42 
	mcom∂ëed
;

43 
sqlôe3
 *
	mdb
;

44 
sqlôe3_°mt
 *
	mpStmt
;

45 *
	mzEº
;

46 *
	mzSèticEº
;

47 
	mrc
;

48 
	m¨gc
;

49 c⁄° *
	m¨gv
[100];

50 c⁄° *
	mcﬁv
[100];

57 
	#N_THREAD
 26

	)

58 
Thªad
 
	gthªad£t
[
N_THREAD
];

64 *
	$thªad_maö
(*
pArg
){

65 
Thªad
 *
p
 = (Thªad*)
pArg
;

66 if–
p
->
db
 ){

67 
	`sqlôe3_˛o£
(
p
->
db
);

69 
	`sqlôe3_›í
(
p
->
zFûíame
, &p->
db
);

70 if–
SQLITE_OK
!=
	`sqlôe3_îrcode
(
p
->
db
) ){

71 
p
->
zEº
 = 
	`°rdup
(
	`sqlôe3_îrmsg
’->
db
));

72 
	`sqlôe3_˛o£
(
p
->
db
);

73 
p
->
db
 = 0;

75 
p
->
pStmt
 = 0;

76 
p
->
com∂ëed
 = 1;

77  
p
->
›num
<ı->
com∂ëed
 ) 
	`sched_yõld
();

78  
p
->
xOp
 ){

79 if–
p
->
zEº
 &&Ö->zEº!ı->
zSèticEº
 ){

80 
	`sqlôe3_‰ì
(
p
->
zEº
);

81 
p
->
zEº
 = 0;

83 (*
p
->
xOp
)(p);

84 
p
->
com∂ëed
++;

85  
p
->
›num
<ı->
com∂ëed
 ) 
	`sched_yõld
();

87 if–
p
->
pStmt
 ){

88 
	`sqlôe3_föÆize
(
p
->
pStmt
);

89 
p
->
pStmt
 = 0;

91 if–
p
->
db
 ){

92 
	`sqlôe3_˛o£
(
p
->
db
);

93 
p
->
db
 = 0;

95 if–
p
->
zEº
 &&Ö->zEº!ı->
zSèticEº
 ){

96 
	`sqlôe3_‰ì
(
p
->
zEº
);

97 
p
->
zEº
 = 0;

99 
p
->
com∂ëed
++;

100 
	`sqlôe3_thªad_˛ónup
();

102 
	}
}

109 
	$∑r£_thªad_id
(
T˛_I¡îp
 *
öãΩ
, c⁄° *
zArg
){

110 if–
zArg
==0 || zArg[0]==0 || zArg[1]!=0 || !
	`isuµî
(()zArg[0]) ){

111 
	`T˛_AµídResu…
(
öãΩ
, "thread ID must beán upper caseÜetter", 0);

114  
zArg
[0] - 'A';

115 
	}
}

123 
	$t˛_thªad_¸óã
(

124 *
NŸU£d
,

125 
T˛_I¡îp
 *
öãΩ
,

126 
¨gc
,

127 c⁄° **
¨gv


129 
i
;

130 
±hªad_t
 
x
;

131 
rc
;

133 if–
¨gc
!=3 ){

134 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

136  
TCL_ERROR
;

138 
i
 = 
	`∑r£_thªad_id
(
öãΩ
, 
¨gv
[1]);

139 if–
i
<0 )  
TCL_ERROR
;

140 if–
thªad£t
[
i
].
busy
 ){

141 
	`T˛_AµídResu…
(
öãΩ
, "thªad ", 
¨gv
[1], " isálreadyÑunning", 0);

142  
TCL_ERROR
;

144 
thªad£t
[
i
].
busy
 = 1;

145 
	`sqlôeFªe
(
thªad£t
[
i
].
zFûíame
);

146 
thªad£t
[
i
].
zFûíame
 = 
	`sqlôeSåDup
(
¨gv
[2]);

147 
thªad£t
[
i
].
›num
 = 1;

148 
thªad£t
[
i
].
com∂ëed
 = 0;

149 
rc
 = 
	`±hªad_¸óã
(&
x
, 0, 
thªad_maö
, &
thªad£t
[
i
]);

150 if–
rc
 ){

151 
	`T˛_AµídResu…
(
öãΩ
, "failedÅo createÅheÅhread", 0);

152 
	`sqlôeFªe
(
thªad£t
[
i
].
zFûíame
);

153 
thªad£t
[
i
].
busy
 = 0;

154  
TCL_ERROR
;

156 
	`±hªad_dëach
(
x
);

157  
TCL_OK
;

158 
	}
}

163 
	$thªad_waô
(
Thªad
 *
p
){

164  
p
->
›num
>p->
com∂ëed
 ) 
	`sched_yõld
();

165 
	}
}

172 
	$t˛_thªad_waô
(

173 *
NŸU£d
,

174 
T˛_I¡îp
 *
öãΩ
,

175 
¨gc
,

176 c⁄° **
¨gv


178 
i
;

180 if–
¨gc
!=2 ){

181 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

183  
TCL_ERROR
;

185 
i
 = 
	`∑r£_thªad_id
(
öãΩ
, 
¨gv
[1]);

186 if–
i
<0 )  
TCL_ERROR
;

187 if–!
thªad£t
[
i
].
busy
 ){

188 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

189  
TCL_ERROR
;

191 
	`thªad_waô
(&
thªad£t
[
i
]);

192  
TCL_OK
;

193 
	}
}

198 
	$°›_thªad
(
Thªad
 *
p
){

199 
	`thªad_waô
(
p
);

200 
p
->
xOp
 = 0;

201 
p
->
›num
++;

202 
	`thªad_waô
(
p
);

203 
	`sqlôeFªe
(
p
->
zArg
);

204 
p
->
zArg
 = 0;

205 
	`sqlôeFªe
(
p
->
zFûíame
);

206 
p
->
zFûíame
 = 0;

207 
p
->
busy
 = 0;

208 
	}
}

216 
	$t˛_thªad_hÆt
(

217 *
NŸU£d
,

218 
T˛_I¡îp
 *
öãΩ
,

219 
¨gc
,

220 c⁄° **
¨gv


222 
i
;

224 if–
¨gc
!=2 ){

225 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

227  
TCL_ERROR
;

229 if–
¨gv
[1][0]=='*' &&árgv[1][1]==0 ){

230 
i
=0; i<
N_THREAD
; i++){

231 if–
thªad£t
[
i
].
busy
 ) 
	`°›_thªad
(&threadset[i]);

234 
i
 = 
	`∑r£_thªad_id
(
öãΩ
, 
¨gv
[1]);

235 if–
i
<0 )  
TCL_ERROR
;

236 if–!
thªad£t
[
i
].
busy
 ){

237 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

238  
TCL_ERROR
;

240 
	`°›_thªad
(&
thªad£t
[
i
]);

242  
TCL_OK
;

243 
	}
}

251 
	$t˛_thªad_¨gc
(

252 *
NŸU£d
,

253 
T˛_I¡îp
 *
öãΩ
,

254 
¨gc
,

255 c⁄° **
¨gv


257 
i
;

258 
zBuf
[100];

260 if–
¨gc
!=2 ){

261 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

263  
TCL_ERROR
;

265 
i
 = 
	`∑r£_thªad_id
(
öãΩ
, 
¨gv
[1]);

266 if–
i
<0 )  
TCL_ERROR
;

267 if–!
thªad£t
[
i
].
busy
 ){

268 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

269  
TCL_ERROR
;

271 
	`thªad_waô
(&
thªad£t
[
i
]);

272 
	`•rötf
(
zBuf
, "%d", 
thªad£t
[
i
].
¨gc
);

273 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

274  
TCL_OK
;

275 
	}
}

283 
	$t˛_thªad_¨gv
(

284 *
NŸU£d
,

285 
T˛_I¡îp
 *
öãΩ
,

286 
¨gc
,

287 c⁄° **
¨gv


289 
i
;

290 
n
;

292 if–
¨gc
!=3 ){

293 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

295  
TCL_ERROR
;

297 
i
 = 
	`∑r£_thªad_id
(
öãΩ
, 
¨gv
[1]);

298 if–
i
<0 )  
TCL_ERROR
;

299 if–!
thªad£t
[
i
].
busy
 ){

300 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

301  
TCL_ERROR
;

303 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[2], &
n
ËË 
TCL_ERROR
;

304 
	`thªad_waô
(&
thªad£t
[
i
]);

305 if–
n
<0 ||Ç>=
thªad£t
[
i
].
¨gc
 ){

306 
	`T˛_AµídResu…
(
öãΩ
, "columnÇumber out ofÑange", 0);

307  
TCL_ERROR
;

309 
	`T˛_AµídResu…
(
öãΩ
, 
thªad£t
[
i
].
¨gv
[
n
], 0);

310  
TCL_OK
;

311 
	}
}

319 
	$t˛_thªad_cﬁ«me
(

320 *
NŸU£d
,

321 
T˛_I¡îp
 *
öãΩ
,

322 
¨gc
,

323 c⁄° **
¨gv


325 
i
;

326 
n
;

328 if–
¨gc
!=3 ){

329 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

331  
TCL_ERROR
;

333 
i
 = 
	`∑r£_thªad_id
(
öãΩ
, 
¨gv
[1]);

334 if–
i
<0 )  
TCL_ERROR
;

335 if–!
thªad£t
[
i
].
busy
 ){

336 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

337  
TCL_ERROR
;

339 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[2], &
n
ËË 
TCL_ERROR
;

340 
	`thªad_waô
(&
thªad£t
[
i
]);

341 if–
n
<0 ||Ç>=
thªad£t
[
i
].
¨gc
 ){

342 
	`T˛_AµídResu…
(
öãΩ
, "columnÇumber out ofÑange", 0);

343  
TCL_ERROR
;

345 
	`T˛_AµídResu…
(
öãΩ
, 
thªad£t
[
i
].
cﬁv
[
n
], 0);

346  
TCL_OK
;

347 
	}
}

355 
	$t˛_thªad_ªsu…
(

356 *
NŸU£d
,

357 
T˛_I¡îp
 *
öãΩ
,

358 
¨gc
,

359 c⁄° **
¨gv


361 
i
;

362 c⁄° *
zName
;

364 if–
¨gc
!=2 ){

365 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

367  
TCL_ERROR
;

369 
i
 = 
	`∑r£_thªad_id
(
öãΩ
, 
¨gv
[1]);

370 if–
i
<0 )  
TCL_ERROR
;

371 if–!
thªad£t
[
i
].
busy
 ){

372 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

373  
TCL_ERROR
;

375 
	`thªad_waô
(&
thªad£t
[
i
]);

376  
thªad£t
[
i
].
rc
 ){

377 
SQLITE_OK
: 
zName
 = "SQLITE_OK"; ;

378 
SQLITE_ERROR
: 
zName
 = "SQLITE_ERROR"; ;

379 
SQLITE_PERM
: 
zName
 = "SQLITE_PERM"; ;

380 
SQLITE_ABORT
: 
zName
 = "SQLITE_ABORT"; ;

381 
SQLITE_BUSY
: 
zName
 = "SQLITE_BUSY"; ;

382 
SQLITE_LOCKED
: 
zName
 = "SQLITE_LOCKED"; ;

383 
SQLITE_NOMEM
: 
zName
 = "SQLITE_NOMEM"; ;

384 
SQLITE_READONLY
: 
zName
 = "SQLITE_READONLY"; ;

385 
SQLITE_INTERRUPT
: 
zName
 = "SQLITE_INTERRUPT"; ;

386 
SQLITE_IOERR
: 
zName
 = "SQLITE_IOERR"; ;

387 
SQLITE_CORRUPT
: 
zName
 = "SQLITE_CORRUPT"; ;

388 
SQLITE_FULL
: 
zName
 = "SQLITE_FULL"; ;

389 
SQLITE_CANTOPEN
: 
zName
 = "SQLITE_CANTOPEN"; ;

390 
SQLITE_PROTOCOL
: 
zName
 = "SQLITE_PROTOCOL"; ;

391 
SQLITE_EMPTY
: 
zName
 = "SQLITE_EMPTY"; ;

392 
SQLITE_SCHEMA
: 
zName
 = "SQLITE_SCHEMA"; ;

393 
SQLITE_CONSTRAINT
: 
zName
 = "SQLITE_CONSTRAINT"; ;

394 
SQLITE_MISMATCH
: 
zName
 = "SQLITE_MISMATCH"; ;

395 
SQLITE_MISUSE
: 
zName
 = "SQLITE_MISUSE"; ;

396 
SQLITE_NOLFS
: 
zName
 = "SQLITE_NOLFS"; ;

397 
SQLITE_AUTH
: 
zName
 = "SQLITE_AUTH"; ;

398 
SQLITE_FORMAT
: 
zName
 = "SQLITE_FORMAT"; ;

399 
SQLITE_RANGE
: 
zName
 = "SQLITE_RANGE"; ;

400 
SQLITE_ROW
: 
zName
 = "SQLITE_ROW"; ;

401 
SQLITE_DONE
: 
zName
 = "SQLITE_DONE"; ;

402 : 
zName
 = "SQLITE_Unknown"; ;

404 
	`T˛_AµídResu…
(
öãΩ
, 
zName
, 0);

405  
TCL_OK
;

406 
	}
}

414 
	$t˛_thªad_îr‹
(

415 *
NŸU£d
,

416 
T˛_I¡îp
 *
öãΩ
,

417 
¨gc
,

418 c⁄° **
¨gv


420 
i
;

422 if–
¨gc
!=2 ){

423 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

425  
TCL_ERROR
;

427 
i
 = 
	`∑r£_thªad_id
(
öãΩ
, 
¨gv
[1]);

428 if–
i
<0 )  
TCL_ERROR
;

429 if–!
thªad£t
[
i
].
busy
 ){

430 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

431  
TCL_ERROR
;

433 
	`thªad_waô
(&
thªad£t
[
i
]);

434 
	`T˛_AµídResu…
(
öãΩ
, 
thªad£t
[
i
].
zEº
, 0);

435  
TCL_OK
;

436 
	}
}

441 
	$do_compûe
(
Thªad
 *
p
){

442 if–
p
->
db
==0 ){

443 
p
->
zEº
 =Ö->
zSèticEº
 = "no database is open";

444 
p
->
rc
 = 
SQLITE_ERROR
;

447 if–
p
->
pStmt
 ){

448 
	`sqlôe3_föÆize
(
p
->
pStmt
);

449 
p
->
pStmt
 = 0;

451 
p
->
rc
 = 
	`sqlôe3_¥ï¨e
’->
db
,Ö->
zArg
, -1, &p->
pStmt
, 0);

452 
	}
}

459 
	$t˛_thªad_compûe
(

460 *
NŸU£d
,

461 
T˛_I¡îp
 *
öãΩ
,

462 
¨gc
,

463 c⁄° **
¨gv


465 
i
;

466 if–
¨gc
!=3 ){

467 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

469  
TCL_ERROR
;

471 
i
 = 
	`∑r£_thªad_id
(
öãΩ
, 
¨gv
[1]);

472 if–
i
<0 )  
TCL_ERROR
;

473 if–!
thªad£t
[
i
].
busy
 ){

474 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

475  
TCL_ERROR
;

477 
	`thªad_waô
(&
thªad£t
[
i
]);

478 
thªad£t
[
i
].
xOp
 = 
do_compûe
;

479 
	`sqlôeFªe
(
thªad£t
[
i
].
zArg
);

480 
thªad£t
[
i
].
zArg
 = 
	`sqlôeSåDup
(
¨gv
[2]);

481 
thªad£t
[
i
].
›num
++;

482  
TCL_OK
;

483 
	}
}

488 
	$do_°ï
(
Thªad
 *
p
){

489 
i
;

490 if–
p
->
pStmt
==0 ){

491 
p
->
zEº
 =Ö->
zSèticEº
 = "no virtual machineávailable";

492 
p
->
rc
 = 
SQLITE_ERROR
;

495 
p
->
rc
 = 
	`sqlôe3_°ï
’->
pStmt
);

496 if–
p
->
rc
==
SQLITE_ROW
 ){

497 
p
->
¨gc
 = 
	`sqlôe3_cﬁumn_cou¡
’->
pStmt
);

498 
i
=0; i<
	`sqlôe3_d©a_cou¡
(
p
->
pStmt
); i++){

499 
p
->
¨gv
[
i
] = (*)
	`sqlôe3_cﬁumn_ãxt
’->
pStmt
, i);

501 
i
=0; i<
p
->
¨gc
; i++){

502 
p
->
cﬁv
[
i
] = 
	`sqlôe3_cﬁumn_«me
’->
pStmt
, i);

505 
	}
}

512 
	$t˛_thªad_°ï
(

513 *
NŸU£d
,

514 
T˛_I¡îp
 *
öãΩ
,

515 
¨gc
,

516 c⁄° **
¨gv


518 
i
;

519 if–
¨gc
!=2 ){

520 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

522  
TCL_ERROR
;

524 
i
 = 
	`∑r£_thªad_id
(
öãΩ
, 
¨gv
[1]);

525 if–
i
<0 )  
TCL_ERROR
;

526 if–!
thªad£t
[
i
].
busy
 ){

527 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

528  
TCL_ERROR
;

530 
	`thªad_waô
(&
thªad£t
[
i
]);

531 
thªad£t
[
i
].
xOp
 = 
do_°ï
;

532 
thªad£t
[
i
].
›num
++;

533  
TCL_OK
;

534 
	}
}

539 
	$do_föÆize
(
Thªad
 *
p
){

540 if–
p
->
pStmt
==0 ){

541 
p
->
zEº
 =Ö->
zSèticEº
 = "no virtual machineávailable";

542 
p
->
rc
 = 
SQLITE_ERROR
;

545 
p
->
rc
 = 
	`sqlôe3_föÆize
’->
pStmt
);

546 
p
->
pStmt
 = 0;

547 
	}
}

554 
	$t˛_thªad_föÆize
(

555 *
NŸU£d
,

556 
T˛_I¡îp
 *
öãΩ
,

557 
¨gc
,

558 c⁄° **
¨gv


560 
i
;

561 if–
¨gc
!=2 ){

562 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

564  
TCL_ERROR
;

566 
i
 = 
	`∑r£_thªad_id
(
öãΩ
, 
¨gv
[1]);

567 if–
i
<0 )  
TCL_ERROR
;

568 if–!
thªad£t
[
i
].
busy
 ){

569 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

570  
TCL_ERROR
;

572 
	`thªad_waô
(&
thªad£t
[
i
]);

573 
thªad£t
[
i
].
xOp
 = 
do_föÆize
;

574 
	`sqlôeFªe
(
thªad£t
[
i
].
zArg
);

575 
thªad£t
[
i
].
zArg
 = 0;

576 
thªad£t
[
i
].
›num
++;

577  
TCL_OK
;

578 
	}
}

585 
	$t˛_thªad_sw≠
(

586 *
NŸU£d
,

587 
T˛_I¡îp
 *
öãΩ
,

588 
¨gc
,

589 c⁄° **
¨gv


591 
i
, 
j
;

592 
sqlôe3
 *
ãmp
;

593 if–
¨gc
!=3 ){

594 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

596  
TCL_ERROR
;

598 
i
 = 
	`∑r£_thªad_id
(
öãΩ
, 
¨gv
[1]);

599 if–
i
<0 )  
TCL_ERROR
;

600 if–!
thªad£t
[
i
].
busy
 ){

601 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

602  
TCL_ERROR
;

604 
	`thªad_waô
(&
thªad£t
[
i
]);

605 
j
 = 
	`∑r£_thªad_id
(
öãΩ
, 
¨gv
[2]);

606 if–
j
<0 )  
TCL_ERROR
;

607 if–!
thªad£t
[
j
].
busy
 ){

608 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

609  
TCL_ERROR
;

611 
	`thªad_waô
(&
thªad£t
[
j
]);

612 
ãmp
 = 
thªad£t
[
i
].
db
;

613 
thªad£t
[
i
].
db
 =Åhªad£t[
j
].db;

614 
thªad£t
[
j
].
db
 = 
ãmp
;

615  
TCL_OK
;

616 
	}
}

625 
	$t˛_thªad_db_gë
(

626 *
NŸU£d
,

627 
T˛_I¡îp
 *
öãΩ
,

628 
¨gc
,

629 c⁄° **
¨gv


631 
i
;

632 
zBuf
[100];

633 
	`sqlôe3Te°MakePoöãrSå
(
T˛_I¡îp
*, *, *);

634 if–
¨gc
!=2 ){

635 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

637  
TCL_ERROR
;

639 
i
 = 
	`∑r£_thªad_id
(
öãΩ
, 
¨gv
[1]);

640 if–
i
<0 )  
TCL_ERROR
;

641 if–!
thªad£t
[
i
].
busy
 ){

642 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

643  
TCL_ERROR
;

645 
	`thªad_waô
(&
thªad£t
[
i
]);

646 
	`sqlôe3Te°MakePoöãrSå
(
öãΩ
, 
zBuf
, 
thªad£t
[
i
].
db
);

647 
thªad£t
[
i
].
db
 = 0;

648 
	`T˛_SëResu…
(
öãΩ
, 
zBuf
, 0);

649  
TCL_OK
;

650 
	}
}

658 
	$t˛_thªad_°mt_gë
(

659 *
NŸU£d
,

660 
T˛_I¡îp
 *
öãΩ
,

661 
¨gc
,

662 c⁄° **
¨gv


664 
i
;

665 
zBuf
[100];

666 
	`sqlôe3Te°MakePoöãrSå
(
T˛_I¡îp
*, *, *);

667 if–
¨gc
!=2 ){

668 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

670  
TCL_ERROR
;

672 
i
 = 
	`∑r£_thªad_id
(
öãΩ
, 
¨gv
[1]);

673 if–
i
<0 )  
TCL_ERROR
;

674 if–!
thªad£t
[
i
].
busy
 ){

675 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

676  
TCL_ERROR
;

678 
	`thªad_waô
(&
thªad£t
[
i
]);

679 
	`sqlôe3Te°MakePoöãrSå
(
öãΩ
, 
zBuf
, 
thªad£t
[
i
].
pStmt
);

680 
thªad£t
[
i
].
pStmt
 = 0;

681 
	`T˛_SëResu…
(
öãΩ
, 
zBuf
, 0);

682  
TCL_OK
;

683 
	}
}

688 
	$Sqlôëe°4_Inô
(
T˛_I¡îp
 *
öãΩ
){

690 *
zName
;

691 
T˛_CmdProc
 *
xProc
;

692 } 
aCmd
[] = {

693 { "thªad_¸óã", (
T˛_CmdProc
*)
t˛_thªad_¸óã
 },

694 { "thªad_waô", (
T˛_CmdProc
*)
t˛_thªad_waô
 },

695 { "thªad_hÆt", (
T˛_CmdProc
*)
t˛_thªad_hÆt
 },

696 { "thªad_¨gc", (
T˛_CmdProc
*)
t˛_thªad_¨gc
 },

697 { "thªad_¨gv", (
T˛_CmdProc
*)
t˛_thªad_¨gv
 },

698 { "thªad_cﬁ«me", (
T˛_CmdProc
*)
t˛_thªad_cﬁ«me
 },

699 { "thªad_ªsu…", (
T˛_CmdProc
*)
t˛_thªad_ªsu…
 },

700 { "thªad_îr‹", (
T˛_CmdProc
*)
t˛_thªad_îr‹
 },

701 { "thªad_compûe", (
T˛_CmdProc
*)
t˛_thªad_compûe
 },

702 { "thªad_°ï", (
T˛_CmdProc
*)
t˛_thªad_°ï
 },

703 { "thªad_föÆize", (
T˛_CmdProc
*)
t˛_thªad_föÆize
 },

704 { "thªad_sw≠", (
T˛_CmdProc
*)
t˛_thªad_sw≠
 },

705 { "thªad_db_gë", (
T˛_CmdProc
*)
t˛_thªad_db_gë
 },

706 { "thªad_°mt_gë", (
T˛_CmdProc
*)
t˛_thªad_°mt_gë
 },

708 
i
;

710 
i
=0; i<(
aCmd
)/(aCmd[0]); i++){

711 
	`T˛_Cª©eComm™d
(
öãΩ
, 
aCmd
[
i
].
zName
,áCmd[i].
xProc
, 0, 0);

713  
TCL_OK
;

714 
	}
}

716 
	$Sqlôëe°4_Inô
(
T˛_I¡îp
 *
öãΩ
){  
TCL_OK
; 
	}
}

	@test5.c

20 
	~"sqlôeI¡.h
"

21 
	~"vdbeI¡.h
"

22 
	~"os.h
"

23 
	~"t˛.h
"

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

32 
	$bö¨ize
(

33 * 
˛õ¡D©a
,

34 
T˛_I¡îp
 *
öãΩ
,

35 
objc
,

36 
T˛_Obj
 *
CONST
 
objv
[]

38 
Àn
;

39 *
byãs
;

40 
T˛_Obj
 *
pRë
;

41 
	`as£π
(
objc
==2);

43 
byãs
 = 
	`T˛_GëSåögFromObj
(
objv
[1], &
Àn
);

44 
pRë
 = 
	`T˛_NewByãAºayObj
((
u8
*)
byãs
, 
Àn
+1);

45 
	`T˛_SëObjResu…
(
öãΩ
, 
pRë
);

46  
TCL_OK
;

47 
	}
}

60 
	$ã°_vÆue_ovîhód
(

61 * 
˛õ¡D©a
,

62 
T˛_I¡îp
 *
öãΩ
,

63 
objc
,

64 
T˛_Obj
 *
CONST
 
objv
[]

66 
do_ˇŒs
;

67 
ª≥©_cou¡
;

68 
i
;

69 
Mem
 
vÆ
;

70 c⁄° *
zVÆ
;

72 if–
objc
!=3 ){

73 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

74 
	`T˛_GëSåögFromObj
(
objv
[0], 0), " <repeat-count> <do-calls>", 0);

75  
TCL_ERROR
;

78 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[1], &
ª≥©_cou¡
ËË 
TCL_ERROR
;

79 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[2], &
do_ˇŒs
ËË 
TCL_ERROR
;

81 
vÆ
.
Êags
 = 
MEM_Så
|
MEM_Tîm
|
MEM_Sètic
;

82 
vÆ
.
z
 = "hello world";

83 
vÆ
.
ty≥
 = 
SQLITE_TEXT
;

84 
vÆ
.
íc
 = 
SQLITE_UTF8
;

86 
i
=0; i<
ª≥©_cou¡
; i++){

87 if–
do_ˇŒs
 ){

88 
zVÆ
 = (*)
	`sqlôe3_vÆue_ãxt
(&
vÆ
);

92  
TCL_OK
;

93 
	}
}

95 
u8
 
	$«me_to_íc
(
T˛_I¡îp
 *
öãΩ
, 
T˛_Obj
 *
pObj
){

96 
	sEncName
 {

97 *
zName
;

98 
u8
 
íc
;

99 } 
í˙ames
[] = {

100 { "UTF8", 
SQLITE_UTF8
 },

101 { "UTF16LE", 
SQLITE_UTF16LE
 },

102 { "UTF16BE", 
SQLITE_UTF16BE
 },

103 { "UTF16", 
SQLITE_UTF16NATIVE
 },

106 
EncName
 *
pEnc
;

107 *
z
 = 
	`T˛_GëSåög
(
pObj
);

108 
pEnc
=&
í˙ames
[0];ÖEnc->
zName
;ÖEnc++){

109 if–0==
	`sqlôe3SåICmp
(
z
, 
pEnc
->
zName
) ){

113 if–!
pEnc
->
íc
 ){

114 
	`T˛_AµídResu…
(
öãΩ
, "NÿsuchÉncodög: ", 
z
, 0);

116  
pEnc
->
íc
;

117 
	}
}

123 
	$ã°_å™¶©e
(

124 * 
˛õ¡D©a
,

125 
T˛_I¡îp
 *
öãΩ
,

126 
objc
,

127 
T˛_Obj
 *
CONST
 
objv
[]

129 
u8
 
íc_‰om
;

130 
u8
 
íc_to
;

131 
sqlôe3_vÆue
 *
pVÆ
;

133 *
z
;

134 
Àn
;

135 (*
xDñ
)(*
p
Ë
SQLITE_STATIC
;

137 if–
objc
!=4 && objc!=5 ){

138 
	`T˛_AµídResu…
(
öãΩ
, "wrong #árgs: should be \"",

139 
	`T˛_GëSåögFromObj
(
objv
[0], 0),

142  
TCL_ERROR
;

144 if–
objc
==5 ){

145 
xDñ
 = 
sqlôe3FªeX
;

148 
íc_‰om
 = 
	`«me_to_íc
(
öãΩ
, 
objv
[2]);

149 if–!
íc_‰om
 )  
TCL_ERROR
;

150 
íc_to
 = 
	`«me_to_íc
(
öãΩ
, 
objv
[3]);

151 if–!
íc_to
 )  
TCL_ERROR
;

153 
pVÆ
 = 
	`sqlôe3VÆueNew
();

155 if–
íc_‰om
==
SQLITE_UTF8
 ){

156 
z
 = 
	`T˛_GëSåög
(
objv
[1]);

157 if–
objc
==5 ){

158 
z
 = 
	`sqlôeSåDup
(z);

160 
	`sqlôe3VÆueSëSå
(
pVÆ
, -1, 
z
, 
íc_‰om
, 
xDñ
);

162 
z
 = (*)
	`T˛_GëByãAºayFromObj
(
objv
[1], &
Àn
);

163 if–
objc
==5 ){

164 *
zTmp
 = 
z
;

165 
z
 = 
	`sqlôeMÆloc
(
Àn
);

166 
	`mem˝y
(
z
, 
zTmp
, 
Àn
);

168 
	`sqlôe3VÆueSëSå
(
pVÆ
, -1, 
z
, 
íc_‰om
, 
xDñ
);

171 
z
 = (*)
	`sqlôe3VÆueText
(
pVÆ
, 
íc_to
);

172 
Àn
 = 
	`sqlôe3VÆueByãs
(
pVÆ
, 
íc_to
Ë+ (íc_to==
SQLITE_UTF8
?1:2);

173 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewByãAºayObj
((
u8
*)
z
, 
Àn
));

175 
	`sqlôe3VÆueFªe
(
pVÆ
);

177  
TCL_OK
;

178 
	}
}

186 
sqlôe3utfSñfTe°
();

187 
	$ã°_å™¶©e_£l·e°
(

188 * 
˛õ¡D©a
,

189 
T˛_I¡îp
 *
öãΩ
,

190 
objc
,

191 
T˛_Obj
 *
CONST
 
objv
[]

193 #i‚de‡
SQLITE_OMIT_UTF16


194 
	`sqlôe3utfSñfTe°
();

196  
SQLITE_OK
;

197 
	}
}

203 
	$Sqlôëe°5_Inô
(
T˛_I¡îp
 *
öãΩ
){

205 *
zName
;

206 
T˛_ObjCmdProc
 *
xProc
;

207 } 
aCmd
[] = {

208 { "bö¨ize", (
T˛_ObjCmdProc
*)
bö¨ize
 },

209 { "ã°_vÆue_ovîhód", (
T˛_ObjCmdProc
*)
ã°_vÆue_ovîhód
 },

210 { "ã°_å™¶©e", (
T˛_ObjCmdProc
*)
ã°_å™¶©e
 },

211 { "å™¶©e_£l·e°", (
T˛_ObjCmdProc
*)
ã°_å™¶©e_£l·e°
},

213 
i
;

214 
i
=0; i<(
aCmd
)/(aCmd[0]); i++){

215 
	`T˛_Cª©eObjComm™d
(
öãΩ
, 
aCmd
[
i
].
zName
,áCmd[i].
xProc
, 0, 0);

217  
SQLITE_OK
;

218 
	}
}

	@test6.c

17 #i‡
SQLITE_TEST


18 
	~"sqlôeI¡.h
"

19 
	~"os.h
"

20 
	~"t˛.h
"

22 #i‚de‡
SQLITE_OMIT_DISKIO


28 
¸ashFûe
 
	t¸ashFûe
;

29 
	s¸ashFûe
 {

30 
IoMëhod
 c⁄° *
	mpMëhod
;

31 
u8
 **
	m≠Blk
;

32 
	mnBlk
;

33 
i64
 
	moff£t
;

34 
	mnMaxWrôe
;

35 *
	mzName
;

36 
OsFûe
 *
	mpBa£
;

37 
¸ashFûe
 *
	mpNext
;

43 
	#BLOCKSIZE
 512

	)

44 
	#BLOCK_OFFSET
(
x
Ë((xË* 
BLOCKSIZE
)

	)

58 
	giCøshDñay
 = 0;

59 
	gzCøshFûe
[500];

64 
	$£tCøshP¨ams
(
iDñay
, c⁄° *
zFûe
){

65 
	`sqlôe3OsE¡îMuãx
();

66 
	`as£π
–
	`°æí
(
zFûe
)<(
zCøshFûe
) );

67 
	`°r˝y
(
zCøshFûe
, 
zFûe
);

68 
iCøshDñay
 = 
iDñay
;

69 
	`sqlôe3OsLóveMuãx
();

70 
	}
}

76 
	$¸ashRequúed
(c⁄° *
zP©h
){

77 
r
;

78 
n
;

79 
	`sqlôe3OsE¡îMuãx
();

80 
n
 = 
	`°æí
(
zCøshFûe
);

81 if–
zCøshFûe
[
n
-1]=='*' ){

82 
n
--;

83 }if–
	`°æí
(
zP©h
)>
n
 ){

84 
n
 = 
	`°æí
(
zP©h
);

86 
r
 = 0;

87 if–
iCøshDñay
>0 && 
	`°∫cmp
(
zP©h
, 
zCøshFûe
, 
n
)==0 ){

88 
iCøshDñay
--;

89 if–
iCøshDñay
<=0 ){

90 
r
 = 1;

93 
	`sqlôe3OsLóveMuãx
();

94  
r
;

95 
	}
}

100 
¸ashFûe
 *
	gpAŒFûes
 = 0;

103 
öôFûe
(
OsFûe
 **
pId
, c⁄° *
zName
, OsFûê*
pBa£
);

109 
	$˛o£Fûe
(
¸ashFûe
 **
pId
){

110 
¸ashFûe
 *
pFûe
 = *
pId
;

111 if–
pFûe
==
pAŒFûes
 ){

112 
pAŒFûes
 = 
pFûe
->
pNext
;

114 
¸ashFûe
 *
p
;

115 
p
=
pAŒFûes
;Ö->
pNext
!=
pFûe
;Ö=p->pNext ){

116 
	`as£π
–
p
 );

118 
p
->
pNext
 = 
pFûe
->pNext;

120 
	`sqlôeFªe
(*
pId
);

121 *
pId
 = 0;

122 
	}
}

127 
	$ªadBlockI¡oCache
(
¸ashFûe
 *
pFûe
, 
blk
){

128 if–
blk
>=
pFûe
->
nBlk
 ){

129 
n
 = ((
pFûe
->
nBlk
 * 2Ë+ 100 + 
blk
);

131 
pFûe
->
≠Blk
 = (
u8
 **)
	`sqlôeRóŒoc
’Fûe->≠Blk, 
n
 * (u8*));

132 if–!
pFûe
->
≠Blk
 )  
SQLITE_NOMEM
;

133 
	`mem£t
(&
pFûe
->
≠Blk
[pFûe->
nBlk
], 0, (
n
 -ÖFûe->nBlk)*(
u8
*));

134 
pFûe
->
nBlk
 = 
n
;

137 if–!
pFûe
->
≠Blk
[
blk
] ){

138 
i64
 
fûesize
;

139 
rc
;

141 
u8
 *
p
 = 
	`sqlôeMÆloc
(
BLOCKSIZE
);

142 if–!
p
 )  
SQLITE_NOMEM
;

143 
pFûe
->
≠Blk
[
blk
] = 
p
;

145 
rc
 = 
	`sqlôe3OsFûeSize
(
pFûe
->
pBa£
, &
fûesize
);

146 if–
rc
!=
SQLITE_OK
 ) Ñc;

148 if–
	`BLOCK_OFFSET
(
blk
)<
fûesize
 ){

149 
Àn
 = 
BLOCKSIZE
;

150 
rc
 = 
	`sqlôe3OsSìk
(
pFûe
->
pBa£
, 
blk
*
BLOCKSIZE
);

151 if–
	`BLOCK_OFFSET
(
blk
+1)>
fûesize
 ){

152 
Àn
 = 
fûesize
 - 
	`BLOCK_OFFSET
(
blk
);

154 if–
rc
!=
SQLITE_OK
 ) Ñc;

155 
rc
 = 
	`sqlôe3OsRód
(
pFûe
->
pBa£
, 
p
, 
Àn
);

156 if–
rc
!=
SQLITE_OK
 ) Ñc;

160  
SQLITE_OK
;

161 
	}
}

167 
	$wrôeCache2
(
¸ashFûe
 *
pFûe
, 
¸ash
){

168 
i
;

169 
nMax
 = 
pFûe
->
nMaxWrôe
;

170 
rc
 = 
SQLITE_OK
;

172 
i
=0; i<
pFûe
->
nBlk
; i++){

173 
u8
 *
p
 = 
pFûe
->
≠Blk
[
i
];

174 if–
p
 ){

175 
skù
 = 0;

176 
åash
 = 0;

177 if–
¸ash
 ){

178 
øndom
;

179 
	`sqlôe3R™dom√ss
(1, &
øndom
);

180 if–
øndom
 & 0x01 ){

181 if–
øndom
 & 0x02 ){

182 
åash
 = 1;

183 #ifde‡
TRACE_WRITECACHE


184 
	`¥ötf
("Tøshög block %d o‡%s\n", 
i
, 
pFûe
->
zName
);

187 
skù
 = 1;

188 #ifde‡
TRACE_WRITECACHE


189 
	`¥ötf
("Skùög block %d o‡%s\n", 
i
, 
pFûe
->
zName
);

193 #ifde‡
TRACE_WRITECACHE


194 
	`¥ötf
("Wrôög block %d o‡%s\n", 
i
, 
pFûe
->
zName
);

198 if–
rc
==
SQLITE_OK
 ){

199 
rc
 = 
	`sqlôe3OsSìk
(
pFûe
->
pBa£
, 
	`BLOCK_OFFSET
(
i
));

201 if–
rc
==
SQLITE_OK
 && !
skù
 ){

202 
Àn
 = 
BLOCKSIZE
;

203 if–
	`BLOCK_OFFSET
(
i
+1)>
nMax
 ){

204 
Àn
 = 
nMax
-
	`BLOCK_OFFSET
(
i
);

206 if–
Àn
>0 ){

207 if–
åash
 ){

208 
	`sqlôe3R™dom√ss
(
Àn
, 
p
);

210 
rc
 = 
	`sqlôe3OsWrôe
(
pFûe
->
pBa£
, 
p
, 
Àn
);

213 
	`sqlôeFªe
(
p
);

216 
	`sqlôeFªe
(
pFûe
->
≠Blk
);

217 
pFûe
->
nBlk
 = 0;

218 
pFûe
->
≠Blk
 = 0;

219 
pFûe
->
nMaxWrôe
 = 0;

220  
rc
;

221 
	}
}

226 
	$wrôeCache
(
¸ashFûe
 *
pFûe
){

227 if–
pFûe
->
≠Blk
 ){

228 
c
 = 
	`¸ashRequúed
(
pFûe
->
zName
);

229 if–
c
 ){

230 
¸ashFûe
 *
p
;

231 #ifde‡
TRACE_WRITECACHE


232 
	`¥ötf
("\nCøsh durög syn¯o‡%s\n", 
pFûe
->
zName
);

234 
p
=
pAŒFûes
;Ö;Öı->
pNext
){

235 
	`wrôeCache2
(
p
, 1);

237 
	`exô
(-1);

239  
	`wrôeCache2
(
pFûe
, 0);

242  
SQLITE_OK
;

243 
	}
}

248 
	$¸ashClo£
(
OsFûe
 **
pId
){

249 
¸ashFûe
 *
pFûe
 = (¸ashFûe*)*
pId
;

250 if–
pFûe
 ){

252 
	`wrôeCache
(
pFûe
);

253 
	`sqlôe3OsClo£
(&
pFûe
->
pBa£
);

255 
	`˛o£Fûe
(&
pFûe
);

256 *
pId
 = 0;

257  
SQLITE_OK
;

258 
	}
}

260 
	$¸ashSìk
(
OsFûe
 *
id
, 
i64
 
off£t
){

261 ((
¸ashFûe
*)
id
)->
off£t
 = offset;

262  
SQLITE_OK
;

263 
	}
}

265 
	$¸ashRód
(
OsFûe
 *
id
, *
pBuf
, 
amt
){

266 
i64
 
off£t
;

267 
i64
 
íd
;

268 
blk
;

269 
i
;

270 
u8
 *
zC§
;

271 
rc
 = 
SQLITE_OK
;

272 
¸ashFûe
 *
pFûe
 = (¸ashFûe*)
id
;

274 
off£t
 = 
pFûe
->offset;

275 
íd
 = 
off£t
+
amt
;

276 
blk
 = (
off£t
/
BLOCKSIZE
);

278 
zC§
 = (
u8
 *)
pBuf
;

279 
i
=
blk
; i*
BLOCKSIZE
<
íd
; i++){

280 
off
 = 0;

281 
Àn
 = 0;

284 if–
	`BLOCK_OFFSET
(
i
Ë< 
off£t
 ){

285 
off
 = 
off£t
-
	`BLOCK_OFFSET
(
i
);

287 
Àn
 = 
BLOCKSIZE
 - 
off
;

288 if–
	`BLOCK_OFFSET
(
i
+1Ë> 
íd
 ){

289 
Àn
 =Üí - (
	`BLOCK_OFFSET
(
i
+1)-
íd
);

292 if–
i
<
pFûe
->
nBlk
 &&ÖFûe->
≠Blk
[i]){

293 
u8
 *
pBlk
 = 
pFûe
->
≠Blk
[
i
];

294 
	`mem˝y
(
zC§
, &
pBlk
[
off
], 
Àn
);

296 
rc
 = 
	`sqlôe3OsSìk
(
pFûe
->
pBa£
, 
	`BLOCK_OFFSET
(
i
Ë+ 
off
);

297 if–
rc
!=
SQLITE_OK
 ) Ñc;

298 
rc
 = 
	`sqlôe3OsRód
(
pFûe
->
pBa£
, 
zC§
, 
Àn
);

299 if–
rc
!=
SQLITE_OK
 ) Ñc;

302 
zC§
 +
Àn
;

304 
	`as£π
–
zC§
==&((
u8
 *)
pBuf
)[
amt
] );

306 
pFûe
->
off£t
 = 
íd
;

307  
rc
;

308 
	}
}

310 
	$¸ashWrôe
(
OsFûe
 *
id
, c⁄° *
pBuf
, 
amt
){

311 
i64
 
off£t
;

312 
i64
 
íd
;

313 
blk
;

314 
i
;

315 c⁄° 
u8
 *
zC§
;

316 
rc
 = 
SQLITE_OK
;

317 
¸ashFûe
 *
pFûe
 = (¸ashFûe*)
id
;

319 
off£t
 = 
pFûe
->offset;

320 
íd
 = 
off£t
+
amt
;

321 
blk
 = (
off£t
/
BLOCKSIZE
);

323 
zC§
 = (
u8
 *)
pBuf
;

324 
i
=
blk
; i*
BLOCKSIZE
<
íd
; i++){

325 
u8
 *
pBlk
;

326 
off
 = 0;

327 
Àn
 = 0;

330 
rc
 = 
	`ªadBlockI¡oCache
(
pFûe
, 
i
);

331 if–
rc
!=
SQLITE_OK
 ) Ñc;

334 
pBlk
 = 
pFûe
->
≠Blk
[
i
];

335 
	`as£π
–
pBlk
 );

337 if–
	`BLOCK_OFFSET
(
i
Ë< 
off£t
 ){

338 
off
 = 
off£t
-
	`BLOCK_OFFSET
(
i
);

340 
Àn
 = 
BLOCKSIZE
 - 
off
;

341 if–
	`BLOCK_OFFSET
(
i
+1Ë> 
íd
 ){

342 
Àn
 =Üí - (
	`BLOCK_OFFSET
(
i
+1)-
íd
);

344 
	`mem˝y
(&
pBlk
[
off
], 
zC§
, 
Àn
);

345 
zC§
 +
Àn
;

347 if–
pFûe
->
nMaxWrôe
<
íd
 ){

348 
pFûe
->
nMaxWrôe
 = 
íd
;

350 
	`as£π
–
zC§
==&((
u8
 *)
pBuf
)[
amt
] );

351 
pFûe
->
off£t
 = 
íd
;

352  
rc
;

353 
	}
}

359 
	$¸ashSync
(
OsFûe
 *
id
, 
d©aO∆y
){

360  
	`wrôeCache
((
¸ashFûe
*)
id
);

361 
	}
}

368 
	$¸ashTrunˇã
(
OsFûe
 *
id
, 
i64
 
nByã
){

369 
¸ashFûe
 *
pFûe
 = (¸ashFûe*)
id
;

370 
pFûe
->
nMaxWrôe
 = 
nByã
;

371  
	`sqlôe3OsTrunˇã
(
pFûe
->
pBa£
, 
nByã
);

372 
	}
}

378 
	$¸ashFûeSize
(
OsFûe
 *
id
, 
i64
 *
pSize
){

379 
¸ashFûe
 *
pFûe
 = (¸ashFûe*)
id
;

380 
rc
 = 
	`sqlôe3OsFûeSize
(
pFûe
->
pBa£
, 
pSize
);

381 if–
rc
==
SQLITE_OK
 && 
pSize
 && *pSize<
pFûe
->
nMaxWrôe
 ){

382 *
pSize
 = 
pFûe
->
nMaxWrôe
;

384  
rc
;

385 
	}
}

390 
	gsqlôe3CøshTe°E«bÀ
 = 0;

397 
	$sqlôe3CøshO≥nRódWrôe
(c⁄° *
zFûíame
, 
OsFûe
 **
pId
,*
pRd⁄ly
){

398 
OsFûe
 *
pBa£
 = 0;

399 
rc
;

401 
sqlôe3CøshTe°E«bÀ
 = 0;

402 
rc
 = 
	`sqlôe3OsO≥nRódWrôe
(
zFûíame
, &
pBa£
, 
pRd⁄ly
);

403 
sqlôe3CøshTe°E«bÀ
 = 1;

404 if–!
rc
 ){

405 
	`öôFûe
(
pId
, 
zFûíame
, 
pBa£
);

407  
rc
;

408 
	}
}

409 
	$sqlôe3CøshO≥nEx˛usive
(c⁄° *
zFûíame
, 
OsFûe
 **
pId
, 
dñFœg
){

410 
OsFûe
 *
pBa£
 = 0;

411 
rc
;

413 
sqlôe3CøshTe°E«bÀ
 = 0;

414 
rc
 = 
	`sqlôe3OsO≥nEx˛usive
(
zFûíame
, &
pBa£
, 
dñFœg
);

415 
sqlôe3CøshTe°E«bÀ
 = 1;

416 if–!
rc
 ){

417 
	`öôFûe
(
pId
, 
zFûíame
, 
pBa£
);

419  
rc
;

420 
	}
}

421 
	$sqlôe3CøshO≥nRódO∆y
(c⁄° *
zFûíame
, 
OsFûe
 **
pId
, 
NŸU£d
){

422 
OsFûe
 *
pBa£
 = 0;

423 
rc
;

425 
sqlôe3CøshTe°E«bÀ
 = 0;

426 
rc
 = 
	`sqlôe3OsO≥nRódO∆y
(
zFûíame
, &
pBa£
);

427 
sqlôe3CøshTe°E«bÀ
 = 1;

428 if–!
rc
 ){

429 
	`öôFûe
(
pId
, 
zFûíame
, 
pBa£
);

431  
rc
;

432 
	}
}

437 
	$¸ashO≥nDú
(
OsFûe
 *
id
, c⁄° *
zName
){

438  
SQLITE_OK
;

439 
	}
}

445 
	$¸ashLock
(
OsFûe
 *
id
, 
lockTy≥
){

446  
	`sqlôe3OsLock
(((
¸ashFûe
*)
id
)->
pBa£
, 
lockTy≥
);

447 
	}
}

448 
	$¸ashU∆ock
(
OsFûe
 *
id
, 
lockTy≥
){

449  
	`sqlôe3OsU∆ock
(((
¸ashFûe
*)
id
)->
pBa£
, 
lockTy≥
);

450 
	}
}

451 
	$¸ashCheckRe£rvedLock
(
OsFûe
 *
id
){

452  
	`sqlôe3OsCheckRe£rvedLock
(((
¸ashFûe
*)
id
)->
pBa£
);

453 
	}
}

454 
	$¸ashSëFuŒSync
(
OsFûe
 *
id
, 
£âög
){

456 
	}
}

457 
	$¸ashLockSèã
(
OsFûe
 *
id
){

458  
	`sqlôe3OsLockSèã
(((
¸ashFûe
*)
id
)->
pBa£
);

459 
	}
}

464 
	$¸ashFûeH™dÀ
(
OsFûe
 *
id
){

465 #i‡
	`deföed
(
SQLITE_TEST
Ë|| deföed(
SQLITE_DEBUG
)

466  
	`sqlôe3OsFûeH™dÀ
(((
¸ashFûe
*)
id
)->
pBa£
);

469 
	}
}

475 c⁄° 
IoMëhod
 
	g¸ashIoMëhod
 = {

476 
¸ashClo£
,

477 
¸ashO≥nDú
,

478 
¸ashRód
,

479 
¸ashWrôe
,

480 
¸ashSìk
,

481 
¸ashTrunˇã
,

482 
¸ashSync
,

483 
¸ashSëFuŒSync
,

484 
¸ashFûeH™dÀ
,

485 
¸ashFûeSize
,

486 
¸ashLock
,

487 
¸ashU∆ock
,

488 
¸ashLockSèã
,

489 
¸ashCheckRe£rvedLock
,

496 
	$öôFûe
(
OsFûe
 **
pId
, c⁄° *
zName
, OsFûê*
pBa£
){

497 
¸ashFûe
 *
pFûe
 = 
	`sqlôeMÆloc
((¸ashFûeË+ 
	`°æí
(
zName
)+1);

498 
pFûe
->
pMëhod
 = &
¸ashIoMëhod
;

499 
pFûe
->
nMaxWrôe
 = 0;

500 
pFûe
->
off£t
 = 0;

501 
pFûe
->
nBlk
 = 0;

502 
pFûe
->
≠Blk
 = 0;

503 
pFûe
->
zName
 = (*)(&pFile[1]);

504 
	`°r˝y
(
pFûe
->
zName
, zName);

505 
pFûe
->
pBa£
 =ÖBase;

506 
pFûe
->
pNext
 = 
pAŒFûes
;

507 
pAŒFûes
 = 
pFûe
;

508 *
pId
 = (
OsFûe
*)
pFûe
;

509 
	}
}

518 
	$¸ashP¨amsObjCmd
(

519 * 
˛õ¡D©a
,

520 
T˛_I¡îp
 *
öãΩ
,

521 
objc
,

522 
T˛_Obj
 *
CONST
 
objv
[]

524 
dñay
;

525 c⁄° *
zFûe
;

526 
nFûe
;

527 if–
objc
!=3 ){

528 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "DELAY CRASHFILE");

529  
TCL_ERROR
;

531 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[1], &
dñay
ËË 
TCL_ERROR
;

532 
zFûe
 = 
	`T˛_GëSåögFromObj
(
objv
[2], &
nFûe
);

533 if–
nFûe
>=(
zCøshFûe
)-1 ){

534 
	`T˛_AµídResu…
(
öãΩ
, "crash fileÇameÅoo big", 0);

535  
TCL_ERROR
;

537 
	`£tCøshP¨ams
(
dñay
, 
zFûe
);

538 
sqlôe3CøshTe°E«bÀ
 = 1;

539  
TCL_OK
;

540 
	}
}

547 
	$Sqlôëe°6_Inô
(
T˛_I¡îp
 *
öãΩ
){

548 #i‚de‡
SQLITE_OMIT_DISKIO


549 
	`T˛_Cª©eObjComm™d
(
öãΩ
, "sqlôe3_¸ash∑øms", 
¸ashP¨amsObjCmd
, 0, 0);

551  
TCL_OK
;

552 
	}
}

	@test7.c

17 
	~"sqlôeI¡.h
"

18 
	~"t˛.h
"

19 
	~"os.h
"

25 #i‡
OS_UNIX
 && 
deföed
(
THREADSAFE
Ë&& THREADSAFE==1 && deföed(
SQLITE_SERVER
)

27 
	~<°dlib.h
>

28 
	~<°rög.h
>

29 
	~<±hªad.h
>

30 
	~<sched.h
>

31 
	~<˘y≥.h
>

36 
sqlôe3_˛õ¡_›í
(c⁄° *, 
sqlôe3
**);

37 
sqlôe3_˛õ¡_¥ï¨e
(
sqlôe3
*,const *,,

38 
sqlôe3_°mt
**,const **);

39 
sqlôe3_˛õ¡_°ï
(
sqlôe3_°mt
*);

40 
sqlôe3_˛õ¡_ª£t
(
sqlôe3_°mt
*);

41 
sqlôe3_˛õ¡_föÆize
(
sqlôe3_°mt
*);

42 
sqlôe3_˛õ¡_˛o£
(
sqlôe3
*);

43 
sqlôe3_£rvî_°¨t
();

44 
sqlôe3_£rvî_°›
();

50 
Thªad
 
	tThªad
;

51 
	sThªad
 {

55 *
	mzFûíame
;

56 (*
	mxOp
)(
	mThªad
*);

57 *
	mzArg
;

58 vﬁ©ûê
	m›num
;

59 vﬁ©ûê
	mbusy
;

64 vﬁ©ûê
	mcom∂ëed
;

65 
sqlôe3
 *
	mdb
;

66 
sqlôe3_°mt
 *
	mpStmt
;

67 *
	mzEº
;

68 *
	mzSèticEº
;

69 
	mrc
;

70 
	m¨gc
;

71 c⁄° *
	m¨gv
[100];

72 c⁄° *
	mcﬁv
[100];

79 
	#N_THREAD
 26

	)

80 
Thªad
 
	gthªad£t
[
N_THREAD
];

85 *
	$˛õ¡_maö
(*
pArg
){

86 
Thªad
 *
p
 = (Thªad*)
pArg
;

87 if–
p
->
db
 ){

88 
	`sqlôe3_˛õ¡_˛o£
(
p
->
db
);

90 
	`sqlôe3_˛õ¡_›í
(
p
->
zFûíame
, &p->
db
);

91 if–
SQLITE_OK
!=
	`sqlôe3_îrcode
(
p
->
db
) ){

92 
p
->
zEº
 = 
	`°rdup
(
	`sqlôe3_îrmsg
’->
db
));

93 
	`sqlôe3_˛õ¡_˛o£
(
p
->
db
);

94 
p
->
db
 = 0;

96 
p
->
pStmt
 = 0;

97 
p
->
com∂ëed
 = 1;

98  
p
->
›num
<ı->
com∂ëed
 ) 
	`sched_yõld
();

99  
p
->
xOp
 ){

100 if–
p
->
zEº
 &&Ö->zEº!ı->
zSèticEº
 ){

101 
	`sqlôe3_‰ì
(
p
->
zEº
);

102 
p
->
zEº
 = 0;

104 (*
p
->
xOp
)(p);

105 
p
->
com∂ëed
++;

106  
p
->
›num
<ı->
com∂ëed
 ) 
	`sched_yõld
();

108 if–
p
->
pStmt
 ){

109 
	`sqlôe3_˛õ¡_föÆize
(
p
->
pStmt
);

110 
p
->
pStmt
 = 0;

112 if–
p
->
db
 ){

113 
	`sqlôe3_˛õ¡_˛o£
(
p
->
db
);

114 
p
->
db
 = 0;

116 if–
p
->
zEº
 &&Ö->zEº!ı->
zSèticEº
 ){

117 
	`sqlôe3_‰ì
(
p
->
zEº
);

118 
p
->
zEº
 = 0;

120 
p
->
com∂ëed
++;

121 
	`sqlôe3_thªad_˛ónup
();

123 
	}
}

130 
	$∑r£_˛õ¡_id
(
T˛_I¡îp
 *
öãΩ
, c⁄° *
zArg
){

131 if–
zArg
==0 || zArg[0]==0 || zArg[1]!=0 || !
	`isuµî
(()zArg[0]) ){

132 
	`T˛_AµídResu…
(
öãΩ
, "thread ID must beán upper caseÜetter", 0);

135  
zArg
[0] - 'A';

136 
	}
}

144 
	$t˛_˛õ¡_¸óã
(

145 *
NŸU£d
,

146 
T˛_I¡îp
 *
öãΩ
,

147 
¨gc
,

148 c⁄° **
¨gv


150 
i
;

151 
±hªad_t
 
x
;

152 
rc
;

154 if–
¨gc
!=3 ){

155 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

157  
TCL_ERROR
;

159 
i
 = 
	`∑r£_˛õ¡_id
(
öãΩ
, 
¨gv
[1]);

160 if–
i
<0 )  
TCL_ERROR
;

161 if–
thªad£t
[
i
].
busy
 ){

162 
	`T˛_AµídResu…
(
öãΩ
, "thªad ", 
¨gv
[1], " isálreadyÑunning", 0);

163  
TCL_ERROR
;

165 
thªad£t
[
i
].
busy
 = 1;

166 
	`sqlôeFªe
(
thªad£t
[
i
].
zFûíame
);

167 
thªad£t
[
i
].
zFûíame
 = 
	`sqlôeSåDup
(
¨gv
[2]);

168 
thªad£t
[
i
].
›num
 = 1;

169 
thªad£t
[
i
].
com∂ëed
 = 0;

170 
rc
 = 
	`±hªad_¸óã
(&
x
, 0, 
˛õ¡_maö
, &
thªad£t
[
i
]);

171 if–
rc
 ){

172 
	`T˛_AµídResu…
(
öãΩ
, "failedÅo createÅheÅhread", 0);

173 
	`sqlôeFªe
(
thªad£t
[
i
].
zFûíame
);

174 
thªad£t
[
i
].
busy
 = 0;

175  
TCL_ERROR
;

177 
	`±hªad_dëach
(
x
);

178 
	`sqlôe3_£rvî_°¨t
();

179  
TCL_OK
;

180 
	}
}

185 
	$˛õ¡_waô
(
Thªad
 *
p
){

186  
p
->
›num
>p->
com∂ëed
 ) 
	`sched_yõld
();

187 
	}
}

194 
	$t˛_˛õ¡_waô
(

195 *
NŸU£d
,

196 
T˛_I¡îp
 *
öãΩ
,

197 
¨gc
,

198 c⁄° **
¨gv


200 
i
;

202 if–
¨gc
!=2 ){

203 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

205  
TCL_ERROR
;

207 
i
 = 
	`∑r£_˛õ¡_id
(
öãΩ
, 
¨gv
[1]);

208 if–
i
<0 )  
TCL_ERROR
;

209 if–!
thªad£t
[
i
].
busy
 ){

210 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

211  
TCL_ERROR
;

213 
	`˛õ¡_waô
(&
thªad£t
[
i
]);

214  
TCL_OK
;

215 
	}
}

220 
	$°›_thªad
(
Thªad
 *
p
){

221 
	`˛õ¡_waô
(
p
);

222 
p
->
xOp
 = 0;

223 
p
->
›num
++;

224 
	`˛õ¡_waô
(
p
);

225 
	`sqlôeFªe
(
p
->
zArg
);

226 
p
->
zArg
 = 0;

227 
	`sqlôeFªe
(
p
->
zFûíame
);

228 
p
->
zFûíame
 = 0;

229 
p
->
busy
 = 0;

230 
	}
}

238 
	$t˛_˛õ¡_hÆt
(

239 *
NŸU£d
,

240 
T˛_I¡îp
 *
öãΩ
,

241 
¨gc
,

242 c⁄° **
¨gv


244 
i
;

246 if–
¨gc
!=2 ){

247 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

249  
TCL_ERROR
;

251 if–
¨gv
[1][0]=='*' &&árgv[1][1]==0 ){

252 
i
=0; i<
N_THREAD
; i++){

253 if–
thªad£t
[
i
].
busy
 ){

254 
	`°›_thªad
(&
thªad£t
[
i
]);

258 
i
 = 
	`∑r£_˛õ¡_id
(
öãΩ
, 
¨gv
[1]);

259 if–
i
<0 )  
TCL_ERROR
;

260 if–!
thªad£t
[
i
].
busy
 ){

261 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

262  
TCL_ERROR
;

264 
	`°›_thªad
(&
thªad£t
[
i
]);

268 
i
=0; i<
N_THREAD
 && 
thªad£t
[i].
busy
==0; i++){}

269 if–
i
>=
N_THREAD
 ){

270 
	`sqlôe3_£rvî_°›
();

272  
TCL_OK
;

273 
	}
}

281 
	$t˛_˛õ¡_¨gc
(

282 *
NŸU£d
,

283 
T˛_I¡îp
 *
öãΩ
,

284 
¨gc
,

285 c⁄° **
¨gv


287 
i
;

288 
zBuf
[100];

290 if–
¨gc
!=2 ){

291 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

293  
TCL_ERROR
;

295 
i
 = 
	`∑r£_˛õ¡_id
(
öãΩ
, 
¨gv
[1]);

296 if–
i
<0 )  
TCL_ERROR
;

297 if–!
thªad£t
[
i
].
busy
 ){

298 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

299  
TCL_ERROR
;

301 
	`˛õ¡_waô
(&
thªad£t
[
i
]);

302 
	`•rötf
(
zBuf
, "%d", 
thªad£t
[
i
].
¨gc
);

303 
	`T˛_AµídResu…
(
öãΩ
, 
zBuf
, 0);

304  
TCL_OK
;

305 
	}
}

313 
	$t˛_˛õ¡_¨gv
(

314 *
NŸU£d
,

315 
T˛_I¡îp
 *
öãΩ
,

316 
¨gc
,

317 c⁄° **
¨gv


319 
i
;

320 
n
;

322 if–
¨gc
!=3 ){

323 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

325  
TCL_ERROR
;

327 
i
 = 
	`∑r£_˛õ¡_id
(
öãΩ
, 
¨gv
[1]);

328 if–
i
<0 )  
TCL_ERROR
;

329 if–!
thªad£t
[
i
].
busy
 ){

330 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

331  
TCL_ERROR
;

333 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[2], &
n
ËË 
TCL_ERROR
;

334 
	`˛õ¡_waô
(&
thªad£t
[
i
]);

335 if–
n
<0 ||Ç>=
thªad£t
[
i
].
¨gc
 ){

336 
	`T˛_AµídResu…
(
öãΩ
, "columnÇumber out ofÑange", 0);

337  
TCL_ERROR
;

339 
	`T˛_AµídResu…
(
öãΩ
, 
thªad£t
[
i
].
¨gv
[
n
], 0);

340  
TCL_OK
;

341 
	}
}

349 
	$t˛_˛õ¡_cﬁ«me
(

350 *
NŸU£d
,

351 
T˛_I¡îp
 *
öãΩ
,

352 
¨gc
,

353 c⁄° **
¨gv


355 
i
;

356 
n
;

358 if–
¨gc
!=3 ){

359 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

361  
TCL_ERROR
;

363 
i
 = 
	`∑r£_˛õ¡_id
(
öãΩ
, 
¨gv
[1]);

364 if–
i
<0 )  
TCL_ERROR
;

365 if–!
thªad£t
[
i
].
busy
 ){

366 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

367  
TCL_ERROR
;

369 if–
	`T˛_GëI¡
(
öãΩ
, 
¨gv
[2], &
n
ËË 
TCL_ERROR
;

370 
	`˛õ¡_waô
(&
thªad£t
[
i
]);

371 if–
n
<0 ||Ç>=
thªad£t
[
i
].
¨gc
 ){

372 
	`T˛_AµídResu…
(
öãΩ
, "columnÇumber out ofÑange", 0);

373  
TCL_ERROR
;

375 
	`T˛_AµídResu…
(
öãΩ
, 
thªad£t
[
i
].
cﬁv
[
n
], 0);

376  
TCL_OK
;

377 
	}
}

385 
	$t˛_˛õ¡_ªsu…
(

386 *
NŸU£d
,

387 
T˛_I¡îp
 *
öãΩ
,

388 
¨gc
,

389 c⁄° **
¨gv


391 
i
;

392 c⁄° *
zName
;

394 if–
¨gc
!=2 ){

395 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

397  
TCL_ERROR
;

399 
i
 = 
	`∑r£_˛õ¡_id
(
öãΩ
, 
¨gv
[1]);

400 if–
i
<0 )  
TCL_ERROR
;

401 if–!
thªad£t
[
i
].
busy
 ){

402 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

403  
TCL_ERROR
;

405 
	`˛õ¡_waô
(&
thªad£t
[
i
]);

406  
thªad£t
[
i
].
rc
 ){

407 
SQLITE_OK
: 
zName
 = "SQLITE_OK"; ;

408 
SQLITE_ERROR
: 
zName
 = "SQLITE_ERROR"; ;

409 
SQLITE_PERM
: 
zName
 = "SQLITE_PERM"; ;

410 
SQLITE_ABORT
: 
zName
 = "SQLITE_ABORT"; ;

411 
SQLITE_BUSY
: 
zName
 = "SQLITE_BUSY"; ;

412 
SQLITE_LOCKED
: 
zName
 = "SQLITE_LOCKED"; ;

413 
SQLITE_NOMEM
: 
zName
 = "SQLITE_NOMEM"; ;

414 
SQLITE_READONLY
: 
zName
 = "SQLITE_READONLY"; ;

415 
SQLITE_INTERRUPT
: 
zName
 = "SQLITE_INTERRUPT"; ;

416 
SQLITE_IOERR
: 
zName
 = "SQLITE_IOERR"; ;

417 
SQLITE_CORRUPT
: 
zName
 = "SQLITE_CORRUPT"; ;

418 
SQLITE_FULL
: 
zName
 = "SQLITE_FULL"; ;

419 
SQLITE_CANTOPEN
: 
zName
 = "SQLITE_CANTOPEN"; ;

420 
SQLITE_PROTOCOL
: 
zName
 = "SQLITE_PROTOCOL"; ;

421 
SQLITE_EMPTY
: 
zName
 = "SQLITE_EMPTY"; ;

422 
SQLITE_SCHEMA
: 
zName
 = "SQLITE_SCHEMA"; ;

423 
SQLITE_CONSTRAINT
: 
zName
 = "SQLITE_CONSTRAINT"; ;

424 
SQLITE_MISMATCH
: 
zName
 = "SQLITE_MISMATCH"; ;

425 
SQLITE_MISUSE
: 
zName
 = "SQLITE_MISUSE"; ;

426 
SQLITE_NOLFS
: 
zName
 = "SQLITE_NOLFS"; ;

427 
SQLITE_AUTH
: 
zName
 = "SQLITE_AUTH"; ;

428 
SQLITE_FORMAT
: 
zName
 = "SQLITE_FORMAT"; ;

429 
SQLITE_RANGE
: 
zName
 = "SQLITE_RANGE"; ;

430 
SQLITE_ROW
: 
zName
 = "SQLITE_ROW"; ;

431 
SQLITE_DONE
: 
zName
 = "SQLITE_DONE"; ;

432 : 
zName
 = "SQLITE_Unknown"; ;

434 
	`T˛_AµídResu…
(
öãΩ
, 
zName
, 0);

435  
TCL_OK
;

436 
	}
}

444 
	$t˛_˛õ¡_îr‹
(

445 *
NŸU£d
,

446 
T˛_I¡îp
 *
öãΩ
,

447 
¨gc
,

448 c⁄° **
¨gv


450 
i
;

452 if–
¨gc
!=2 ){

453 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

455  
TCL_ERROR
;

457 
i
 = 
	`∑r£_˛õ¡_id
(
öãΩ
, 
¨gv
[1]);

458 if–
i
<0 )  
TCL_ERROR
;

459 if–!
thªad£t
[
i
].
busy
 ){

460 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

461  
TCL_ERROR
;

463 
	`˛õ¡_waô
(&
thªad£t
[
i
]);

464 
	`T˛_AµídResu…
(
öãΩ
, 
thªad£t
[
i
].
zEº
, 0);

465  
TCL_OK
;

466 
	}
}

471 
	$do_compûe
(
Thªad
 *
p
){

472 if–
p
->
db
==0 ){

473 
p
->
zEº
 =Ö->
zSèticEº
 = "no database is open";

474 
p
->
rc
 = 
SQLITE_ERROR
;

477 if–
p
->
pStmt
 ){

478 
	`sqlôe3_˛õ¡_föÆize
(
p
->
pStmt
);

479 
p
->
pStmt
 = 0;

481 
p
->
rc
 = 
	`sqlôe3_˛õ¡_¥ï¨e
’->
db
,Ö->
zArg
, -1, &p->
pStmt
, 0);

482 
	}
}

489 
	$t˛_˛õ¡_compûe
(

490 *
NŸU£d
,

491 
T˛_I¡îp
 *
öãΩ
,

492 
¨gc
,

493 c⁄° **
¨gv


495 
i
;

496 if–
¨gc
!=3 ){

497 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

499  
TCL_ERROR
;

501 
i
 = 
	`∑r£_˛õ¡_id
(
öãΩ
, 
¨gv
[1]);

502 if–
i
<0 )  
TCL_ERROR
;

503 if–!
thªad£t
[
i
].
busy
 ){

504 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

505  
TCL_ERROR
;

507 
	`˛õ¡_waô
(&
thªad£t
[
i
]);

508 
thªad£t
[
i
].
xOp
 = 
do_compûe
;

509 
	`sqlôeFªe
(
thªad£t
[
i
].
zArg
);

510 
thªad£t
[
i
].
zArg
 = 
	`sqlôeSåDup
(
¨gv
[2]);

511 
thªad£t
[
i
].
›num
++;

512  
TCL_OK
;

513 
	}
}

518 
	$do_°ï
(
Thªad
 *
p
){

519 
i
;

520 if–
p
->
pStmt
==0 ){

521 
p
->
zEº
 =Ö->
zSèticEº
 = "no virtual machineávailable";

522 
p
->
rc
 = 
SQLITE_ERROR
;

525 
p
->
rc
 = 
	`sqlôe3_˛õ¡_°ï
’->
pStmt
);

526 if–
p
->
rc
==
SQLITE_ROW
 ){

527 
p
->
¨gc
 = 
	`sqlôe3_cﬁumn_cou¡
’->
pStmt
);

528 
i
=0; i<
	`sqlôe3_d©a_cou¡
(
p
->
pStmt
); i++){

529 
p
->
¨gv
[
i
] = (*)
	`sqlôe3_cﬁumn_ãxt
’->
pStmt
, i);

531 
i
=0; i<
p
->
¨gc
; i++){

532 
p
->
cﬁv
[
i
] = 
	`sqlôe3_cﬁumn_«me
’->
pStmt
, i);

535 
	}
}

542 
	$t˛_˛õ¡_°ï
(

543 *
NŸU£d
,

544 
T˛_I¡îp
 *
öãΩ
,

545 
¨gc
,

546 c⁄° **
¨gv


548 
i
;

549 if–
¨gc
!=2 ){

550 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

552  
TCL_ERROR
;

554 
i
 = 
	`∑r£_˛õ¡_id
(
öãΩ
, 
¨gv
[1]);

555 if–
i
<0 )  
TCL_ERROR
;

556 if–!
thªad£t
[
i
].
busy
 ){

557 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

558  
TCL_ERROR
;

560 
	`˛õ¡_waô
(&
thªad£t
[
i
]);

561 
thªad£t
[
i
].
xOp
 = 
do_°ï
;

562 
thªad£t
[
i
].
›num
++;

563  
TCL_OK
;

564 
	}
}

569 
	$do_föÆize
(
Thªad
 *
p
){

570 if–
p
->
pStmt
==0 ){

571 
p
->
zEº
 =Ö->
zSèticEº
 = "no virtual machineávailable";

572 
p
->
rc
 = 
SQLITE_ERROR
;

575 
p
->
rc
 = 
	`sqlôe3_˛õ¡_föÆize
’->
pStmt
);

576 
p
->
pStmt
 = 0;

577 
	}
}

584 
	$t˛_˛õ¡_föÆize
(

585 *
NŸU£d
,

586 
T˛_I¡îp
 *
öãΩ
,

587 
¨gc
,

588 c⁄° **
¨gv


590 
i
;

591 if–
¨gc
!=2 ){

592 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

594  
TCL_ERROR
;

596 
i
 = 
	`∑r£_˛õ¡_id
(
öãΩ
, 
¨gv
[1]);

597 if–
i
<0 )  
TCL_ERROR
;

598 if–!
thªad£t
[
i
].
busy
 ){

599 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

600  
TCL_ERROR
;

602 
	`˛õ¡_waô
(&
thªad£t
[
i
]);

603 
thªad£t
[
i
].
xOp
 = 
do_föÆize
;

604 
	`sqlôeFªe
(
thªad£t
[
i
].
zArg
);

605 
thªad£t
[
i
].
zArg
 = 0;

606 
thªad£t
[
i
].
›num
++;

607  
TCL_OK
;

608 
	}
}

613 
	$do_ª£t
(
Thªad
 *
p
){

614 if–
p
->
pStmt
==0 ){

615 
p
->
zEº
 =Ö->
zSèticEº
 = "no virtual machineávailable";

616 
p
->
rc
 = 
SQLITE_ERROR
;

619 
p
->
rc
 = 
	`sqlôe3_˛õ¡_ª£t
’->
pStmt
);

620 
p
->
pStmt
 = 0;

621 
	}
}

628 
	$t˛_˛õ¡_ª£t
(

629 *
NŸU£d
,

630 
T˛_I¡îp
 *
öãΩ
,

631 
¨gc
,

632 c⁄° **
¨gv


634 
i
;

635 if–
¨gc
!=2 ){

636 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

638  
TCL_ERROR
;

640 
i
 = 
	`∑r£_˛õ¡_id
(
öãΩ
, 
¨gv
[1]);

641 if–
i
<0 )  
TCL_ERROR
;

642 if–!
thªad£t
[
i
].
busy
 ){

643 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

644  
TCL_ERROR
;

646 
	`˛õ¡_waô
(&
thªad£t
[
i
]);

647 
thªad£t
[
i
].
xOp
 = 
do_ª£t
;

648 
	`sqlôeFªe
(
thªad£t
[
i
].
zArg
);

649 
thªad£t
[
i
].
zArg
 = 0;

650 
thªad£t
[
i
].
›num
++;

651  
TCL_OK
;

652 
	}
}

659 
	$t˛_˛õ¡_sw≠
(

660 *
NŸU£d
,

661 
T˛_I¡îp
 *
öãΩ
,

662 
¨gc
,

663 c⁄° **
¨gv


665 
i
, 
j
;

666 
sqlôe3
 *
ãmp
;

667 if–
¨gc
!=3 ){

668 
	`T˛_AµídResu…
(
öãΩ
, "wr⁄g #árgs: should bê\"", 
¨gv
[0],

670  
TCL_ERROR
;

672 
i
 = 
	`∑r£_˛õ¡_id
(
öãΩ
, 
¨gv
[1]);

673 if–
i
<0 )  
TCL_ERROR
;

674 if–!
thªad£t
[
i
].
busy
 ){

675 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

676  
TCL_ERROR
;

678 
	`˛õ¡_waô
(&
thªad£t
[
i
]);

679 
j
 = 
	`∑r£_˛õ¡_id
(
öãΩ
, 
¨gv
[2]);

680 if–
j
<0 )  
TCL_ERROR
;

681 if–!
thªad£t
[
j
].
busy
 ){

682 
	`T˛_AµídResu…
(
öãΩ
, "no suchÅhread", 0);

683  
TCL_ERROR
;

685 
	`˛õ¡_waô
(&
thªad£t
[
j
]);

686 
ãmp
 = 
thªad£t
[
i
].
db
;

687 
thªad£t
[
i
].
db
 =Åhªad£t[
j
].db;

688 
thªad£t
[
j
].
db
 = 
ãmp
;

689  
TCL_OK
;

690 
	}
}

695 
	$Sqlôëe°7_Inô
(
T˛_I¡îp
 *
öãΩ
){

697 *
zName
;

698 
T˛_CmdProc
 *
xProc
;

699 } 
aCmd
[] = {

700 { "˛õ¡_¸óã", (
T˛_CmdProc
*)
t˛_˛õ¡_¸óã
 },

701 { "˛õ¡_waô", (
T˛_CmdProc
*)
t˛_˛õ¡_waô
 },

702 { "˛õ¡_hÆt", (
T˛_CmdProc
*)
t˛_˛õ¡_hÆt
 },

703 { "˛õ¡_¨gc", (
T˛_CmdProc
*)
t˛_˛õ¡_¨gc
 },

704 { "˛õ¡_¨gv", (
T˛_CmdProc
*)
t˛_˛õ¡_¨gv
 },

705 { "˛õ¡_cﬁ«me", (
T˛_CmdProc
*)
t˛_˛õ¡_cﬁ«me
 },

706 { "˛õ¡_ªsu…", (
T˛_CmdProc
*)
t˛_˛õ¡_ªsu…
 },

707 { "˛õ¡_îr‹", (
T˛_CmdProc
*)
t˛_˛õ¡_îr‹
 },

708 { "˛õ¡_compûe", (
T˛_CmdProc
*)
t˛_˛õ¡_compûe
 },

709 { "˛õ¡_°ï", (
T˛_CmdProc
*)
t˛_˛õ¡_°ï
 },

710 { "˛õ¡_ª£t", (
T˛_CmdProc
*)
t˛_˛õ¡_ª£t
 },

711 { "˛õ¡_föÆize", (
T˛_CmdProc
*)
t˛_˛õ¡_föÆize
 },

712 { "˛õ¡_sw≠", (
T˛_CmdProc
*)
t˛_˛õ¡_sw≠
 },

714 
i
;

716 
i
=0; i<(
aCmd
)/(aCmd[0]); i++){

717 
	`T˛_Cª©eComm™d
(
öãΩ
, 
aCmd
[
i
].
zName
,áCmd[i].
xProc
, 0, 0);

719  
TCL_OK
;

720 
	}
}

722 
	$Sqlôëe°7_Inô
(
T˛_I¡îp
 *
öãΩ
){  
TCL_OK
; 
	}
}

	@test_async.c

73 
	~"sqlôeI¡.h
"

74 
	~"os.h
"

75 
	~<t˛.h
>

78 #i‚de‡
THREADSAFE


79 
	#THREADSAFE
 0

	)

89 #i‡
OS_UNIX
 && 
THREADSAFE
 && 
deföed
(
SQLITE_ENABLE_REDEF_IO
)

96 
	~<±hªad.h
>

97 
	~<sched.h
>

100 
	#MIN
(
x
,
y
Ë((x)<(y)?(x):(y))

	)

101 
	#MAX
(
x
,
y
Ë((x)>(y)?(x):(y))

	)

104 
AsyncWrôe
 
	tAsyncWrôe
;

105 
AsyncFûe
 
	tAsyncFûe
;

109 
	#TRACE
(
X
,
Y
) \

110 
	`Ârötf
(
°dîr
,"THRD=%d: ", ()
	`±hªad_£lf
()); \

111 
	`Ârötf
(
°dîr
,
X
,
Y
);

	)

113 
	#TRACE
(
X
,
Y
Ë

	)

220 #i‚de‡
SQLITE_ASYNC_TWO_FILEHANDLES


222 
	#SQLITE_ASYNC_TWO_FILEHANDLES
 1

	)

229 
	sTe°AsyncSèticD©a
 {

230 
±hªad_muãx_t
 
	mqueueMuãx
;

231 
±hªad_muãx_t
 
	mwrôîMuãx
;

232 
±hªad_c⁄d_t
 
	mqueueSig«l
;

233 
±hªad_c⁄d_t
 
	mem±ySig«l
;

234 
AsyncWrôe
 *
	mpQueueFú°
;

235 
AsyncWrôe
 *
	mpQueueLa°
;

236 vﬁ©ûê
	mioDñay
;

237 vﬁ©ûê
	mwrôîHÆtWhíIdÀ
;

238 vﬁ©ûê
	mwrôîHÆtNow
;

239 } 
	gasync
 = {

240 
PTHREAD_MUTEX_INITIALIZER
,

241 
PTHREAD_MUTEX_INITIALIZER
,

242 
PTHREAD_COND_INITIALIZER
,

243 
PTHREAD_COND_INITIALIZER
,

247 
	#ASYNC_WRITE
 1

	)

248 
	#ASYNC_SYNC
 2

	)

249 
	#ASYNC_TRUNCATE
 3

	)

250 
	#ASYNC_CLOSE
 4

	)

251 
	#ASYNC_OPENDIRECTORY
 5

	)

252 
	#ASYNC_SETFULLSYNC
 6

	)

254 
	#ASYNC_DELETE
 7

	)

255 
	#ASYNC_OPENEXCLUSIVE
 8

	)

256 
	#ASYNC_SYNCDIRECTORY
 9

	)

303 
	sAsyncWrôe
 {

304 
AsyncFûe
 *
	mpFûe
;

305 
	m›
;

306 
i64
 
	miOff£t
;

307 
	mnByã
;

308 *
	mzBuf
;

309 
AsyncWrôe
 *
	mpNext
;

315 
	sAsyncFûe
 {

316 
IoMëhod
 *
	mpMëhod
;

317 
i64
 
	miOff£t
;

318 
OsFûe
 *
	mpBa£Ród
;

319 
OsFûe
 *
	mpBa£Wrôe
;

332 
	$addAsyncWrôe
(
AsyncWrôe
 *
pWrôe
){

334 
	`±hªad_muãx_lock
(&
async
.
queueMuãx
);

337 
	`as£π
–!
pWrôe
->
pNext
 );

338 if–
async
.
pQueueLa°
 ){

339 
	`as£π
–
async
.
pQueueFú°
 );

340 
async
.
pQueueLa°
->
pNext
 = 
pWrôe
;

342 
async
.
pQueueFú°
 = 
pWrôe
;

344 
async
.
pQueueLa°
 = 
pWrôe
;

345 
	`TRACE
("PUSH %p\n", 
pWrôe
);

348 
	`±hªad_muãx_u∆ock
(&
async
.
queueMuãx
);

352 
	`±hªad_c⁄d_sig«l
(&
async
.
queueSig«l
);

353 
	}
}

359 
	$addNewAsyncWrôe
(

360 
AsyncFûe
 *
pFûe
,

361 
›
,

362 
i64
 
iOff£t
,

363 
nByã
,

364 c⁄° *
zByã


366 
AsyncWrôe
 *
p
 = 
	`sqlôe3OsMÆloc
((AsyncWrôeË+ (
zByã
?
nByã
:0));

367 if–!
p
 ){

368  
SQLITE_NOMEM
;

370 
p
->
›
 = op;

371 
p
->
iOff£t
 = iOffset;

372 
p
->
nByã
 =ÇByte;

373 
p
->
pFûe
 =ÖFile;

374 
p
->
pNext
 = 0;

375 if–
zByã
 ){

376 
p
->
zBuf
 = (*)&p[1];

377 
	`mem˝y
(
p
->
zBuf
, 
zByã
, 
nByã
);

379 
p
->
zBuf
 = 0;

381 
	`addAsyncWrôe
(
p
);

382  
SQLITE_OK
;

383 
	}
}

389 
	$asyncClo£
(
OsFûe
 **
pId
){

390  
	`addNewAsyncWrôe
((
AsyncFûe
 *)*
pId
, 
ASYNC_CLOSE
, 0, 0, 0);

391 
	}
}

399 
	$asyncWrôe
(
OsFûe
 *
id
, c⁄° *
pBuf
, 
amt
){

400 
AsyncFûe
 *
pFûe
 = (AsyncFûê*)
id
;

401 
rc
 = 
	`addNewAsyncWrôe
(
pFûe
, 
ASYNC_WRITE
,ÖFûe->
iOff£t
, 
amt
, 
pBuf
);

402 
pFûe
->
iOff£t
 +(
i64
)
amt
;

403  
rc
;

404 
	}
}

410 
	$asyncTrunˇã
(
OsFûe
 *
id
, 
i64
 
nByã
){

411  
	`addNewAsyncWrôe
((
AsyncFûe
 *)
id
, 
ASYNC_TRUNCATE
, 
nByã
, 0, 0);

412 
	}
}

419 
	$asyncO≥nDúe˘‹y
(
OsFûe
 *
id
, c⁄° *
zName
){

420 
AsyncFûe
 *
pFûe
 = (AsyncFûê*)
id
;

421  
	`addNewAsyncWrôe
(
pFûe
, 
ASYNC_OPENDIRECTORY
, 0, 
	`°æí
(
zName
)+1,zName);

422 
	}
}

428 
	$asyncSync
(
OsFûe
 *
id
, 
fuŒsync
){

429  
	`addNewAsyncWrôe
((
AsyncFûe
 *)
id
, 
ASYNC_SYNC
, 0, 
fuŒsync
, 0);

430 
	}
}

436 
	$asyncSëFuŒSync
(
OsFûe
 *
id
, 
vÆue
){

437 
	`addNewAsyncWrôe
((
AsyncFûe
 *)
id
, 
ASYNC_SETFULLSYNC
, 0, 
vÆue
, 0);

438 
	}
}

447 
	$asyncRód
(
OsFûe
 *
id
, *
obuf
, 
amt
){

448 
rc
 = 
SQLITE_OK
;

449 
i64
 
fûesize
;

450 
nRód
;

451 
AsyncFûe
 *
pFûe
 = (AsyncFûê*)
id
;

454 
	`±hªad_muãx_lock
(&
async
.
queueMuãx
);

456 if–
pFûe
->
pBa£Ród
 ){

457 
rc
 = 
	`sqlôe3OsFûeSize
(
pFûe
->
pBa£Ród
, &
fûesize
);

458 if–
rc
!=
SQLITE_OK
 ){

459 
asyn¸ód_out
;

461 
rc
 = 
	`sqlôe3OsSìk
(
pFûe
->
pBa£Ród
,ÖFûe->
iOff£t
);

462 if–
rc
!=
SQLITE_OK
 ){

463 
asyn¸ód_out
;

465 
nRód
 = 
	`MIN
(
fûesize
 - 
pFûe
->
iOff£t
, 
amt
);

466 if–
nRód
>0 ){

467 
rc
 = 
	`sqlôe3OsRód
(((
AsyncFûe
 *)
id
)->
pBa£Ród
, 
obuf
, 
nRód
);

471 if–
rc
==
SQLITE_OK
 ){

472 
AsyncWrôe
 *
p
;

473 
i64
 
iOff£t
 = 
pFûe
->iOffset;

475 
p
=
async
.
pQueueFú°
;Ö;Ö =Ö->
pNext
){

476 if–
p
->
pFûe
=ıFûê&&Ö->
›
==
ASYNC_WRITE
 ){

477 
iBegöIn
 = (
p
->
iOff£t
 - iOffset);

478 
iBegöOut
 = (
iOff£t
 - 
p
->iOffset);

479 
nC›y
;

481 if–
iBegöIn
<0 ) iBeginIn = 0;

482 if–
iBegöOut
<0 ) iBeginOut = 0;

483 
nC›y
 = 
	`MIN
(
p
->
nByã
-
iBegöIn
, 
amt
-
iBegöOut
);

485 if–
nC›y
>0 ){

486 
	`mem˝y
(&((*)
obuf
)[
iBegöOut
], &
p
->
zBuf
[
iBegöIn
], 
nC›y
);

491 
pFûe
->
iOff£t
 +(
i64
)
amt
;

494 
asyn¸ód_out
:

495 
	`±hªad_muãx_u∆ock
(&
async
.
queueMuãx
);

496  
rc
;

497 
	}
}

504 
	$asyncSìk
(
OsFûe
 *
id
, 
i64
 
off£t
){

505 
AsyncFûe
 *
pFûe
 = (AsyncFûê*)
id
;

506 
pFûe
->
iOff£t
 = 
off£t
;

507  
SQLITE_OK
;

508 
	}
}

517 
	$asyncFûeSize
(
OsFûe
 *
id
, 
i64
 *
pSize
){

518 
rc
 = 
SQLITE_OK
;

519 
i64
 
s
 = 0;

520 
OsFûe
 *
pBa£
;

522 
	`±hªad_muãx_lock
(&
async
.
queueMuãx
);

529 
pBa£
 = ((
AsyncFûe
 *)
id
)->
pBa£Ród
;

530 if–
pBa£
 ){

531 
rc
 = 
	`sqlôe3OsFûeSize
(
pBa£
, &
s
);

534 if–
rc
==
SQLITE_OK
 ){

535 
AsyncWrôe
 *
p
;

536 
p
=
async
.
pQueueFú°
;Ö;Ö =Ö->
pNext
){

537 if–
p
->
pFûe
==(
AsyncFûe
 *)
id
 ){

538  
p
->
›
 ){

539 
ASYNC_WRITE
:

540 
s
 = 
	`MAX
(
p
->
iOff£t
 + (
i64
)’->
nByã
), s);

542 
ASYNC_TRUNCATE
:

543 
s
 = 
	`MIN
(s, 
p
->
nByã
);

548 *
pSize
 = 
s
;

550 
	`±hªad_muãx_u∆ock
(&
async
.
queueMuãx
);

551  
rc
;

552 
	}
}

558 
	$asyncFûeH™dÀ
(
OsFûe
 *
id
){

559  
	`sqlôe3OsFûeH™dÀ
(((
AsyncFûe
 *)
id
)->
pBa£Ród
);

560 
	}
}

566 
	$asyncLock
(
OsFûe
 *
id
, 
lockTy≥
){

567  
SQLITE_OK
;

568 
	}
}

569 
	$asyncU∆ock
(
OsFûe
 *
id
, 
lockTy≥
){

570  
SQLITE_OK
;

571 
	}
}

577 
	$asyncCheckRe£rvedLock
(
OsFûe
 *
id
){

578  
SQLITE_OK
;

579 
	}
}

584 
	$asyncLockSèã
(
OsFûe
 *
id
){

585  
SQLITE_OK
;

586 
	}
}

593 (*
xOrigO≥nRódWrôe
)(c⁄° *, 
OsFûe
**, *) = 0;

594 (*
xOrigO≥nEx˛usive
)(c⁄° *, 
OsFûe
**, ) = 0;

595 (*
xOrigO≥nRódO∆y
)(c⁄° *, 
OsFûe
**) = 0;

596 (*
xOrigDñëe
)(const *) = 0;

597 (*
xOrigFûeExi°s
)(const *) = 0;

598 (*
xOrigSyncDúe˘‹y
)(const *) = 0;

604 
	$asyncO≥nFûe
(

605 c⁄° *
zName
,

606 
OsFûe
 **
pFûe
,

607 
OsFûe
 *
pBa£Ród
,

608 
›íF‹Wrôög


610 
rc
;

611 
AsyncFûe
 *
p
;

612 
OsFûe
 *
pBa£Wrôe
 = 0;

614 
IoMëhod
 
iomëhod
 = {

615 
asyncClo£
,

616 
asyncO≥nDúe˘‹y
,

617 
asyncRód
,

618 
asyncWrôe
,

619 
asyncSìk
,

620 
asyncTrunˇã
,

621 
asyncSync
,

622 
asyncSëFuŒSync
,

623 
asyncFûeH™dÀ
,

624 
asyncFûeSize
,

625 
asyncLock
,

626 
asyncU∆ock
,

627 
asyncLockSèã
,

628 
asyncCheckRe£rvedLock


631 if–
›íF‹Wrôög
 && 
SQLITE_ASYNC_TWO_FILEHANDLES
 ){

632 
dummy
;

633 
rc
 = 
	`xOrigO≥nRódWrôe
(
zName
, &
pBa£Wrôe
, &
dummy
);

634 if–
rc
!=
SQLITE_OK
 ){

635 
îr‹_out
;

639 
p
 = (
AsyncFûe
 *)
	`sqlôe3OsMÆloc
((AsyncFile));

640 if–!
p
 ){

641 
rc
 = 
SQLITE_NOMEM
;

642 
îr‹_out
;

644 
	`mem£t
(
p
, 0, (
AsyncFûe
));

646 
p
->
pMëhod
 = &
iomëhod
;

647 
p
->
pBa£Ród
 =ÖBaseRead;

648 
p
->
pBa£Wrôe
 =ÖBaseWrite;

650 *
pFûe
 = (
OsFûe
 *)
p
;

651  
SQLITE_OK
;

653 
îr‹_out
:

654 
	`as£π
(!
p
);

655 
	`sqlôe3OsClo£
(&
pBa£Ród
);

656 
	`sqlôe3OsClo£
(&
pBa£Wrôe
);

657 *
pFûe
 = 0;

658  
rc
;

659 
	}
}

666 
	$asyncO≥nEx˛usive
(c⁄° *
z
, 
OsFûe
 **
µFûe
, 
dñFœg
){

667 
rc
 = 
	`asyncO≥nFûe
(
z
, 
µFûe
, 0, 0);

668 if–
rc
==
SQLITE_OK
 ){

669 
AsyncFûe
 *
pFûe
 = (AsyncFûê*)(*
µFûe
);

670 
nByã
 = 
	`°æí
(
z
)+1;

671 
i64
 
i
 = (i64)(
dñFœg
);

672 
rc
 = 
	`addNewAsyncWrôe
(
pFûe
, 
ASYNC_OPENEXCLUSIVE
, 
i
, 
nByã
, 
z
);

673 if–
rc
!=
SQLITE_OK
 ){

674 
	`sqlôe3OsFªe
(
pFûe
);

675 *
µFûe
 = 0;

678  
rc
;

679 
	}
}

680 
	$asyncO≥nRódO∆y
(c⁄° *
z
, 
OsFûe
 **
µFûe
){

681 
OsFûe
 *
pBa£
 = 0;

682 
rc
 = 
	`xOrigO≥nRódO∆y
(
z
, &
pBa£
);

683 if–
rc
==
SQLITE_OK
 ){

684 
rc
 = 
	`asyncO≥nFûe
(
z
, 
µFûe
, 
pBa£
, 0);

686  
rc
;

687 
	}
}

688 
	$asyncO≥nRódWrôe
(c⁄° *
z
, 
OsFûe
 **
µFûe
, *
pRódO∆y
){

689 
OsFûe
 *
pBa£
 = 0;

690 
rc
 = 
	`xOrigO≥nRódWrôe
(
z
, &
pBa£
, 
pRódO∆y
);

691 if–
rc
==
SQLITE_OK
 ){

692 
rc
 = 
	`asyncO≥nFûe
(
z
, 
µFûe
, 
pBa£
, (*
pRódO∆y
 ? 0 : 1));

694  
rc
;

695 
	}
}

701 
	$asyncDñëe
(c⁄° *
z
){

702  
	`addNewAsyncWrôe
(0, 
ASYNC_DELETE
, 0, 
	`°æí
(
z
)+1, z);

703 
	}
}

709 
	$asyncSyncDúe˘‹y
(c⁄° *
z
){

710  
	`addNewAsyncWrôe
(0, 
ASYNC_SYNCDIRECTORY
, 0, 
	`°æí
(
z
)+1, z);

711 
	}
}

719 
	$asyncFûeExi°s
(c⁄° *
z
){

720 
ªt
;

721 
AsyncWrôe
 *
p
;

723 
	`±hªad_muãx_lock
(&
async
.
queueMuãx
);

726 
ªt
 = 
	`xOrigFûeExi°s
(
z
);

728 
p
=
async
.
pQueueFú°
;Ö;Ö =Ö->
pNext
){

729 if–
p
->
›
==
ASYNC_DELETE
 && 0==
	`°rcmp
’->
zBuf
, 
z
) ){

730 
ªt
 = 0;

731 }if–
p
->
›
==
ASYNC_OPENEXCLUSIVE
 && 0==
	`°rcmp
’->
zBuf
, 
z
) ){

732 
ªt
 = 1;

736 
	`±hªad_muãx_u∆ock
(&
async
.
queueMuãx
);

737  
ªt
;

738 
	}
}

747 
	$asyncE«bÀ
(
íabÀ
){

748 if–
íabÀ
 && 
xOrigO≥nRódWrôe
==0 ){

749 
xOrigO≥nRódWrôe
 = 
sqlôe3Os
.
xO≥nRódWrôe
;

750 
xOrigO≥nRódO∆y
 = 
sqlôe3Os
.
xO≥nRódO∆y
;

751 
xOrigO≥nEx˛usive
 = 
sqlôe3Os
.
xO≥nEx˛usive
;

752 
xOrigDñëe
 = 
sqlôe3Os
.
xDñëe
;

753 
xOrigFûeExi°s
 = 
sqlôe3Os
.
xFûeExi°s
;

754 
xOrigSyncDúe˘‹y
 = 
sqlôe3Os
.
xSyncDúe˘‹y
;

756 
sqlôe3Os
.
xO≥nRódWrôe
 = 
asyncO≥nRódWrôe
;

757 
sqlôe3Os
.
xO≥nRódO∆y
 = 
asyncO≥nRódO∆y
;

758 
sqlôe3Os
.
xO≥nEx˛usive
 = 
asyncO≥nEx˛usive
;

759 
sqlôe3Os
.
xDñëe
 = 
asyncDñëe
;

760 
sqlôe3Os
.
xFûeExi°s
 = 
asyncFûeExi°s
;

761 
sqlôe3Os
.
xSyncDúe˘‹y
 = 
asyncSyncDúe˘‹y
;

763 if–!
íabÀ
 && 
xOrigO≥nRódWrôe
!=0 ){

764 
sqlôe3Os
.
xO≥nRódWrôe
 = 
xOrigO≥nRódWrôe
;

765 
sqlôe3Os
.
xO≥nRódO∆y
 = 
xOrigO≥nRódO∆y
;

766 
sqlôe3Os
.
xO≥nEx˛usive
 = 
xOrigO≥nEx˛usive
;

767 
sqlôe3Os
.
xDñëe
 = 
xOrigDñëe
;

768 
sqlôe3Os
.
xFûeExi°s
 = 
xOrigFûeExi°s
;

769 
sqlôe3Os
.
xSyncDúe˘‹y
 = 
xOrigSyncDúe˘‹y
;

771 
xOrigO≥nRódWrôe
 = 0;

772 
xOrigO≥nRódO∆y
 = 0;

773 
xOrigO≥nEx˛usive
 = 0;

774 
xOrigDñëe
 = 0;

775 
xOrigFûeExi°s
 = 0;

776 
xOrigSyncDúe˘‹y
 = 0;

778 
	}
}

799 *
	$asyncWrôîThªad
(*
NŸU£d
){

800 
AsyncWrôe
 *
p
 = 0;

801 
rc
 = 
SQLITE_OK
;

803 if–
	`±hªad_muãx_åylock
(&
async
.
wrôîMuãx
) ){

806  
async
.
wrôîHÆtNow
==0 ){

807 
hﬁdögMuãx
;

808 
OsFûe
 *
pBa£
 = 0;

810 
	`±hªad_muãx_lock
(&
async
.
queueMuãx
);

811 
hﬁdögMuãx
 = 1;

812  (
p
 = 
async
.
pQueueFú°
)==0 ){

813 
	`±hªad_c⁄d_brﬂdˇ°
(&
async
.
em±ySig«l
);

814 if–
async
.
wrôîHÆtWhíIdÀ
 ){

815 
	`±hªad_muãx_u∆ock
(&
async
.
queueMuãx
);

818 
	`TRACE
("IDLE\n", 0);

819 
	`±hªad_c⁄d_waô
(&
async
.
queueSig«l
, &async.
queueMuãx
);

820 
	`TRACE
("WAKEUP\n", 0);

823 if–
p
==0 ) ;

824 
	`TRACE
("PROCESSING %p\n", 
p
);

845 if–
p
->
pFûe
 ){

846 
pBa£
 = 
p
->
pFûe
->
pBa£Wrôe
;

848 
p
->
›
==
ASYNC_CLOSE
 ||

849 
p
->
›
==
ASYNC_OPENEXCLUSIVE
 ||

850 (
pBa£
 && (
p
->
›
==
ASYNC_SYNC
 ||Ö->›==
ASYNC_WRITE
) )

852 
	`±hªad_muãx_u∆ock
(&
async
.
queueMuãx
);

853 
hﬁdögMuãx
 = 0;

855 if–!
pBa£
 ){

856 
pBa£
 = 
p
->
pFûe
->
pBa£Ród
;

860  
p
->
›
 ){

861 
ASYNC_WRITE
:

862 
	`as£π
–
pBa£
 );

863 
rc
 = 
	`sqlôe3OsSìk
(
pBa£
, 
p
->
iOff£t
);

864 if–
rc
==
SQLITE_OK
 ){

865 
rc
 = 
	`sqlôe3OsWrôe
(
pBa£
, (c⁄° *)(
p
->
zBuf
),Ö->
nByã
);

869 
ASYNC_SYNC
:

870 
	`as£π
–
pBa£
 );

871 
rc
 = 
	`sqlôe3OsSync
(
pBa£
, 
p
->
nByã
);

874 
ASYNC_TRUNCATE
:

875 
	`as£π
–
pBa£
 );

876 
rc
 = 
	`sqlôe3OsTrunˇã
(
pBa£
, 
p
->
nByã
);

879 
ASYNC_CLOSE
:

880 
	`sqlôe3OsClo£
(&
p
->
pFûe
->
pBa£Ród
);

881 
	`sqlôe3OsClo£
(&
p
->
pFûe
->
pBa£Wrôe
);

882 
	`sqlôe3OsFªe
(
p
->
pFûe
);

885 
ASYNC_OPENDIRECTORY
:

886 
	`as£π
–
pBa£
 );

887 
	`sqlôe3OsO≥nDúe˘‹y
(
pBa£
, 
p
->
zBuf
);

890 
ASYNC_SETFULLSYNC
:

891 
	`as£π
–
pBa£
 );

892 
	`sqlôe3OsSëFuŒSync
(
pBa£
, 
p
->
nByã
);

895 
ASYNC_DELETE
:

896 
rc
 = 
	`xOrigDñëe
(
p
->
zBuf
);

899 
ASYNC_SYNCDIRECTORY
:

900 
rc
 = 
	`xOrigSyncDúe˘‹y
(
p
->
zBuf
);

903 
ASYNC_OPENEXCLUSIVE
: {

904 
AsyncFûe
 *
pFûe
 = 
p
->pFile;

905 
dñFœg
 = ((
p
->
iOff£t
)?1:0);

906 
OsFûe
 *
pBa£
 = 0;

907 
rc
 = 
	`xOrigO≥nEx˛usive
(
p
->
zBuf
, &
pBa£
, 
dñFœg
);

908 
	`as£π
–
hﬁdögMuãx
==0 );

909 
	`±hªad_muãx_lock
(&
async
.
queueMuãx
);

910 
hﬁdögMuãx
 = 1;

911 if–
rc
==
SQLITE_OK
 ){

912 
pFûe
->
pBa£Ród
 = 
pBa£
;

917 : 
	`as£π
(!"Illegal value for AsyncWrite.op");

924 if–!
hﬁdögMuãx
 ){

925 
	`±hªad_muãx_lock
(&
async
.
queueMuãx
);

926 
hﬁdögMuãx
 = 1;

928 
	`TRACE
("UNLINK %p\n", 
p
);

929 if–
rc
==
SQLITE_OK
 ){

930 if–
p
==
async
.
pQueueLa°
 ){

931 
async
.
pQueueLa°
 = 0;

933 
async
.
pQueueFú°
 = 
p
->
pNext
;

935 
	`as£π
–
hﬁdögMuãx
 );

940 
	`±hªad_muãx_u∆ock
(&
async
.
queueMuãx
);

941 if–
async
.
ioDñay
>0 ){

942 
	`sqlôe3OsSÀï
(
async
.
ioDñay
);

944 
	`sched_yõld
();

947 
	`±hªad_muãx_u∆ock
(&
async
.
wrôîMuãx
);

949 
	}
}

966 
	$ã°AsyncE«bÀ
(

967 * 
˛õ¡D©a
,

968 
T˛_I¡îp
 *
öãΩ
,

969 
objc
,

970 
T˛_Obj
 *
CONST
 
objv
[]

972 if–
objc
!=1 && objc!=2 ){

973 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "?YES/NO?");

974  
TCL_ERROR
;

976 if–
objc
==1 ){

977 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewBoﬁónObj
(
xOrigO≥nRódWrôe
!=0));

979 
í
;

980 if–
	`T˛_GëBoﬁónFromObj
(
öãΩ
, 
objv
[1], &
í
ËË 
TCL_ERROR
;

981 
	`asyncE«bÀ
(
í
);

983  
TCL_OK
;

984 
	}
}

991 
	$ã°AsyncHÆt
(

992 * 
˛õ¡D©a
,

993 
T˛_I¡îp
 *
öãΩ
,

994 
objc
,

995 
T˛_Obj
 *
CONST
 
objv
[]

997 c⁄° *
zC⁄d
;

998 if–
objc
!=2 ){

999 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "\"now\"|\"idle\"|\"never\"");

1000  
TCL_ERROR
;

1002 
zC⁄d
 = 
	`T˛_GëSåög
(
objv
[1]);

1003 if–
	`°rcmp
(
zC⁄d
, "now")==0 ){

1004 
async
.
wrôîHÆtNow
 = 1;

1005 
	`±hªad_c⁄d_brﬂdˇ°
(&
async
.
queueSig«l
);

1006 }if–
	`°rcmp
(
zC⁄d
, "idle")==0 ){

1007 
async
.
wrôîHÆtWhíIdÀ
 = 1;

1008 
async
.
wrôîHÆtNow
 = 0;

1009 
	`±hªad_c⁄d_brﬂdˇ°
(&
async
.
queueSig«l
);

1010 }if–
	`°rcmp
(
zC⁄d
, "never")==0 ){

1011 
async
.
wrôîHÆtWhíIdÀ
 = 0;

1012 
async
.
wrôîHÆtNow
 = 0;

1014 
	`T˛_AµídResu…
(
öãΩ
,

1016  
TCL_ERROR
;

1018  
TCL_OK
;

1019 
	}
}

1028 
	$ã°AsyncDñay
(

1029 * 
˛õ¡D©a
,

1030 
T˛_I¡îp
 *
öãΩ
,

1031 
objc
,

1032 
T˛_Obj
 *
CONST
 
objv
[]

1034 if–
objc
!=1 && objc!=2 ){

1035 
	`T˛_Wr⁄gNumArgs
(
öãΩ
, 1, 
objv
, "?MS?");

1036  
TCL_ERROR
;

1038 if–
objc
==1 ){

1039 
	`T˛_SëObjResu…
(
öãΩ
, 
	`T˛_NewI¡Obj
(
async
.
ioDñay
));

1041 
ioDñay
;

1042 if–
	`T˛_GëI¡FromObj
(
öãΩ
, 
objv
[1], &
ioDñay
ËË 
TCL_ERROR
;

1043 
async
.
ioDñay
 = ioDelay;

1045  
TCL_OK
;

1046 
	}
}

1053 
	$ã°AsyncSèπ
(

1054 * 
˛õ¡D©a
,

1055 
T˛_I¡îp
 *
öãΩ
,

1056 
objc
,

1057 
T˛_Obj
 *
CONST
 
objv
[]

1059 
±hªad_t
 
x
;

1060 
rc
;

1061 
rc
 = 
	`±hªad_¸óã
(&
x
, 0, 
asyncWrôîThªad
, 0);

1062 if–
rc
 ){

1063 
	`T˛_AµídResu…
(
öãΩ
, "failedÅo createÅheÅhread", 0);

1064  
TCL_ERROR
;

1066 
	`±hªad_dëach
(
x
);

1067  
TCL_OK
;

1068 
	}
}

1078 
	$ã°AsyncWaô
(

1079 * 
˛õ¡D©a
,

1080 
T˛_I¡îp
 *
öãΩ
,

1081 
objc
,

1082 
T˛_Obj
 *
CONST
 
objv
[]

1084 if–
async
.
wrôîHÆtNow
==0 &&ásync.
wrôîHÆtWhíIdÀ
==0 ){

1085 
	`T˛_AµídResu…
(
öãΩ
, "would block forever", (*)0);

1086  
TCL_ERROR
;

1088 
	`TRACE
("WAIT\n",0);

1089 
	`±hªad_c⁄d_brﬂdˇ°
(&
async
.
queueSig«l
);

1090 
	`±hªad_muãx_lock
(&
async
.
wrôîMuãx
);

1091 
	`±hªad_muãx_u∆ock
(&
async
.
wrôîMuãx
);

1092  
TCL_OK
;

1093 
	}
}

1103 
	$Sqlôëe°async_Inô
(
T˛_I¡îp
 *
öãΩ
){

1104 #i‡
OS_UNIX
 && 
THREADSAFE
 && 
	`deföed
(
SQLITE_ENABLE_REDEF_IO
)

1105 
	`T˛_Cª©eObjComm™d
(
öãΩ
,"sqlôe3async_íabÀ",
ã°AsyncE«bÀ
,0,0);

1106 
	`T˛_Cª©eObjComm™d
(
öãΩ
,"sqlôe3async_hÆt",
ã°AsyncHÆt
,0,0);

1107 
	`T˛_Cª©eObjComm™d
(
öãΩ
,"sqlôe3async_dñay",
ã°AsyncDñay
,0,0);

1108 
	`T˛_Cª©eObjComm™d
(
öãΩ
,"sqlôe3async_°¨t",
ã°AsyncSèπ
,0,0);

1109 
	`T˛_Cª©eObjComm™d
(
öãΩ
,"sqlôe3async_waô",
ã°AsyncWaô
,0,0);

1111  
TCL_OK
;

1112 
	}
}

	@test_md5.c

31 
	~<t˛.h
>

32 
	~<°rög.h
>

33 
	~"sqlôe3.h
"

43 #i‚de‡
uöt32


44 
	#uöt32
 

	)

47 
	sC⁄ãxt
 {

48 
	misInô
;

49 
uöt32
 
	mbuf
[4];

50 
uöt32
 
	mbôs
[2];

51 
	mö
[64];

53 
C⁄ãxt
 
	tMD5C⁄ãxt
;

58 
	$byãRevî£
 (*
buf
, 
l⁄gs
){

59 
uöt32
 
t
;

61 
t
 = (
uöt32
)(()
buf
[3]<<8 | buf[2]) << 16 |

62 (()
buf
[1]<<8 | buf[0]);

63 *(
uöt32
 *)
buf
 = 
t
;

64 
buf
 += 4;

65 } --
l⁄gs
);

66 
	}
}

70 
	#F1
(
x
, 
y
, 
z
Ë(z ^ (x & (y ^ z)))

	)

71 
	#F2
(
x
, 
y
, 
z
Ë
	`F1
(z, x, y)

	)

72 
	#F3
(
x
, 
y
, 
z
Ë(x ^ y ^ z)

	)

73 
	#F4
(
x
, 
y
, 
z
Ë(y ^ (x | ~z))

	)

76 
	#MD5STEP
(
f
, 
w
, 
x
, 
y
, 
z
, 
d©a
, 
s
) \

77 –
w
 +
	`f
(
x
, 
y
, 
z
Ë+ 
d©a
, w = w<<
s
 | w>>(32-s), w +x )

	)

84 
	$MD5Tønsf‹m
(
uöt32
 
buf
[4], c⁄° uöt32 
ö
[16]){

85 
uöt32
 
a
, 
b
, 
c
, 
d
;

87 
a
 = 
buf
[0];

88 
b
 = 
buf
[1];

89 
c
 = 
buf
[2];

90 
d
 = 
buf
[3];

92 
	`MD5STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 0]+0xd76aa478, 7);

93 
	`MD5STEP
(
F1
, 
d
, 
a
, 
b
, 
c
, 
ö
[ 1]+0xe8c7b756, 12);

94 
	`MD5STEP
(
F1
, 
c
, 
d
, 
a
, 
b
, 
ö
[ 2]+0x242070db, 17);

95 
	`MD5STEP
(
F1
, 
b
, 
c
, 
d
, 
a
, 
ö
[ 3]+0xc1bdceee, 22);

96 
	`MD5STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 4]+0xf57c0faf, 7);

97 
	`MD5STEP
(
F1
, 
d
, 
a
, 
b
, 
c
, 
ö
[ 5]+0x4787c62a, 12);

98 
	`MD5STEP
(
F1
, 
c
, 
d
, 
a
, 
b
, 
ö
[ 6]+0xa8304613, 17);

99 
	`MD5STEP
(
F1
, 
b
, 
c
, 
d
, 
a
, 
ö
[ 7]+0xfd469501, 22);

100 
	`MD5STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 8]+0x698098d8, 7);

101 
	`MD5STEP
(
F1
, 
d
, 
a
, 
b
, 
c
, 
ö
[ 9]+0x8b44f7af, 12);

102 
	`MD5STEP
(
F1
, 
c
, 
d
, 
a
, 
b
, 
ö
[10]+0xffff5bb1, 17);

103 
	`MD5STEP
(
F1
, 
b
, 
c
, 
d
, 
a
, 
ö
[11]+0x895cd7be, 22);

104 
	`MD5STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
ö
[12]+0x6b901122, 7);

105 
	`MD5STEP
(
F1
, 
d
, 
a
, 
b
, 
c
, 
ö
[13]+0xfd987193, 12);

106 
	`MD5STEP
(
F1
, 
c
, 
d
, 
a
, 
b
, 
ö
[14]+0xa679438e, 17);

107 
	`MD5STEP
(
F1
, 
b
, 
c
, 
d
, 
a
, 
ö
[15]+0x49b40821, 22);

109 
	`MD5STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 1]+0xf61e2562, 5);

110 
	`MD5STEP
(
F2
, 
d
, 
a
, 
b
, 
c
, 
ö
[ 6]+0xc040b340, 9);

111 
	`MD5STEP
(
F2
, 
c
, 
d
, 
a
, 
b
, 
ö
[11]+0x265e5a51, 14);

112 
	`MD5STEP
(
F2
, 
b
, 
c
, 
d
, 
a
, 
ö
[ 0]+0xe9b6c7aa, 20);

113 
	`MD5STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 5]+0xd62f105d, 5);

114 
	`MD5STEP
(
F2
, 
d
, 
a
, 
b
, 
c
, 
ö
[10]+0x02441453, 9);

115 
	`MD5STEP
(
F2
, 
c
, 
d
, 
a
, 
b
, 
ö
[15]+0xd8a1e681, 14);

116 
	`MD5STEP
(
F2
, 
b
, 
c
, 
d
, 
a
, 
ö
[ 4]+0xe7d3fbc8, 20);

117 
	`MD5STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 9]+0x21e1cde6, 5);

118 
	`MD5STEP
(
F2
, 
d
, 
a
, 
b
, 
c
, 
ö
[14]+0xc33707d6, 9);

119 
	`MD5STEP
(
F2
, 
c
, 
d
, 
a
, 
b
, 
ö
[ 3]+0xf4d50d87, 14);

120 
	`MD5STEP
(
F2
, 
b
, 
c
, 
d
, 
a
, 
ö
[ 8]+0x455a14ed, 20);

121 
	`MD5STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
ö
[13]+0xa9e3e905, 5);

122 
	`MD5STEP
(
F2
, 
d
, 
a
, 
b
, 
c
, 
ö
[ 2]+0xfcefa3f8, 9);

123 
	`MD5STEP
(
F2
, 
c
, 
d
, 
a
, 
b
, 
ö
[ 7]+0x676f02d9, 14);

124 
	`MD5STEP
(
F2
, 
b
, 
c
, 
d
, 
a
, 
ö
[12]+0x8d2a4c8a, 20);

126 
	`MD5STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 5]+0xfffa3942, 4);

127 
	`MD5STEP
(
F3
, 
d
, 
a
, 
b
, 
c
, 
ö
[ 8]+0x8771f681, 11);

128 
	`MD5STEP
(
F3
, 
c
, 
d
, 
a
, 
b
, 
ö
[11]+0x6d9d6122, 16);

129 
	`MD5STEP
(
F3
, 
b
, 
c
, 
d
, 
a
, 
ö
[14]+0xfde5380c, 23);

130 
	`MD5STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 1]+0xa4beea44, 4);

131 
	`MD5STEP
(
F3
, 
d
, 
a
, 
b
, 
c
, 
ö
[ 4]+0x4bdecfa9, 11);

132 
	`MD5STEP
(
F3
, 
c
, 
d
, 
a
, 
b
, 
ö
[ 7]+0xf6bb4b60, 16);

133 
	`MD5STEP
(
F3
, 
b
, 
c
, 
d
, 
a
, 
ö
[10]+0xbebfbc70, 23);

134 
	`MD5STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
ö
[13]+0x289b7ec6, 4);

135 
	`MD5STEP
(
F3
, 
d
, 
a
, 
b
, 
c
, 
ö
[ 0]+0xeaa127fa, 11);

136 
	`MD5STEP
(
F3
, 
c
, 
d
, 
a
, 
b
, 
ö
[ 3]+0xd4ef3085, 16);

137 
	`MD5STEP
(
F3
, 
b
, 
c
, 
d
, 
a
, 
ö
[ 6]+0x04881d05, 23);

138 
	`MD5STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 9]+0xd9d4d039, 4);

139 
	`MD5STEP
(
F3
, 
d
, 
a
, 
b
, 
c
, 
ö
[12]+0xe6db99e5, 11);

140 
	`MD5STEP
(
F3
, 
c
, 
d
, 
a
, 
b
, 
ö
[15]+0x1fa27cf8, 16);

141 
	`MD5STEP
(
F3
, 
b
, 
c
, 
d
, 
a
, 
ö
[ 2]+0xc4ac5665, 23);

143 
	`MD5STEP
(
F4
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 0]+0xf4292244, 6);

144 
	`MD5STEP
(
F4
, 
d
, 
a
, 
b
, 
c
, 
ö
[ 7]+0x432aff97, 10);

145 
	`MD5STEP
(
F4
, 
c
, 
d
, 
a
, 
b
, 
ö
[14]+0xab9423a7, 15);

146 
	`MD5STEP
(
F4
, 
b
, 
c
, 
d
, 
a
, 
ö
[ 5]+0xfc93a039, 21);

147 
	`MD5STEP
(
F4
, 
a
, 
b
, 
c
, 
d
, 
ö
[12]+0x655b59c3, 6);

148 
	`MD5STEP
(
F4
, 
d
, 
a
, 
b
, 
c
, 
ö
[ 3]+0x8f0ccc92, 10);

149 
	`MD5STEP
(
F4
, 
c
, 
d
, 
a
, 
b
, 
ö
[10]+0xffeff47d, 15);

150 
	`MD5STEP
(
F4
, 
b
, 
c
, 
d
, 
a
, 
ö
[ 1]+0x85845dd1, 21);

151 
	`MD5STEP
(
F4
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 8]+0x6fa87e4f, 6);

152 
	`MD5STEP
(
F4
, 
d
, 
a
, 
b
, 
c
, 
ö
[15]+0xfe2ce6e0, 10);

153 
	`MD5STEP
(
F4
, 
c
, 
d
, 
a
, 
b
, 
ö
[ 6]+0xa3014314, 15);

154 
	`MD5STEP
(
F4
, 
b
, 
c
, 
d
, 
a
, 
ö
[13]+0x4e0811a1, 21);

155 
	`MD5STEP
(
F4
, 
a
, 
b
, 
c
, 
d
, 
ö
[ 4]+0xf7537e82, 6);

156 
	`MD5STEP
(
F4
, 
d
, 
a
, 
b
, 
c
, 
ö
[11]+0xbd3af235, 10);

157 
	`MD5STEP
(
F4
, 
c
, 
d
, 
a
, 
b
, 
ö
[ 2]+0x2ad7d2bb, 15);

158 
	`MD5STEP
(
F4
, 
b
, 
c
, 
d
, 
a
, 
ö
[ 9]+0xeb86d391, 21);

160 
buf
[0] +
a
;

161 
buf
[1] +
b
;

162 
buf
[2] +
c
;

163 
buf
[3] +
d
;

164 
	}
}

170 
	$MD5Inô
(
MD5C⁄ãxt
 *
˘x
){

171 
˘x
->
isInô
 = 1;

172 
˘x
->
buf
[0] = 0x67452301;

173 
˘x
->
buf
[1] = 0xefcdab89;

174 
˘x
->
buf
[2] = 0x98badcfe;

175 
˘x
->
buf
[3] = 0x10325476;

176 
˘x
->
bôs
[0] = 0;

177 
˘x
->
bôs
[1] = 0;

178 
	}
}

185 
	$MD5Upd©e
(
MD5C⁄ãxt
 *
pCtx
, c⁄° *
buf
, 
Àn
){

186 
C⁄ãxt
 *
˘x
 = (C⁄ãxà*)
pCtx
;

187 
uöt32
 
t
;

191 
t
 = 
˘x
->
bôs
[0];

192 i‡((
˘x
->
bôs
[0] = 
t
 + ((
uöt32
)
Àn
 << 3)) <Å)

193 
˘x
->
bôs
[1]++;

194 
˘x
->
bôs
[1] +
Àn
 >> 29;

196 
t
 = (t >> 3) & 0x3f;

200 i‡–
t
 ) {

201 *
p
 = (*)
˘x
->
ö
 + 
t
;

203 
t
 = 64-t;

204 i‡(
Àn
 < 
t
) {

205 
	`mem˝y
(
p
, 
buf
, 
Àn
);

208 
	`mem˝y
(
p
, 
buf
, 
t
);

209 
	`byãRevî£
(
˘x
->
ö
, 16);

210 
	`MD5Tønsf‹m
(
˘x
->
buf
, (
uöt32
 *)˘x->
ö
);

211 
buf
 +
t
;

212 
Àn
 -
t
;

217 
Àn
 >= 64) {

218 
	`mem˝y
(
˘x
->
ö
, 
buf
, 64);

219 
	`byãRevî£
(
˘x
->
ö
, 16);

220 
	`MD5Tønsf‹m
(
˘x
->
buf
, (
uöt32
 *)˘x->
ö
);

221 
buf
 += 64;

222 
Àn
 -= 64;

227 
	`mem˝y
(
˘x
->
ö
, 
buf
, 
Àn
);

228 
	}
}

234 
	$MD5FöÆ
(
dige°
[16], 
MD5C⁄ãxt
 *
pCtx
){

235 
C⁄ãxt
 *
˘x
 = (C⁄ãxà*)
pCtx
;

236 
cou¡
;

237 *
p
;

240 
cou¡
 = (
˘x
->
bôs
[0] >> 3) & 0x3F;

244 
p
 = 
˘x
->
ö
 + 
cou¡
;

245 *
p
++ = 0x80;

248 
cou¡
 = 64 - 1 - count;

251 i‡(
cou¡
 < 8) {

253 
	`mem£t
(
p
, 0, 
cou¡
);

254 
	`byãRevî£
(
˘x
->
ö
, 16);

255 
	`MD5Tønsf‹m
(
˘x
->
buf
, (
uöt32
 *)˘x->
ö
);

258 
	`mem£t
(
˘x
->
ö
, 0, 56);

261 
	`mem£t
(
p
, 0, 
cou¡
-8);

263 
	`byãRevî£
(
˘x
->
ö
, 14);

266 ((
uöt32
 *)
˘x
->
ö
)[ 14 ] = ctx->
bôs
[0];

267 ((
uöt32
 *)
˘x
->
ö
)[ 15 ] = ctx->
bôs
[1];

269 
	`MD5Tønsf‹m
(
˘x
->
buf
, (
uöt32
 *)˘x->
ö
);

270 
	`byãRevî£
((*)
˘x
->
buf
, 4);

271 
	`mem˝y
(
dige°
, 
˘x
->
buf
, 16);

272 
	`mem£t
(
˘x
, 0, (ctx));

273 
	}
}

281 
	$Dige°ToBa£16
(*
dige°
, *
zBuf
){

282 c⁄° 
zEncode
[] = "0123456789abcdef";

283 
i
, 
j
;

285 
j
=
i
=0; i<16; i++){

286 
a
 = 
dige°
[
i
];

287 
zBuf
[
j
++] = 
zEncode
[(
a
>>4)&0xf];

288 
zBuf
[
j
++] = 
zEncode
[
a
 & 0xf];

290 
zBuf
[
j
] = 0;

291 
	}
}

297 
	$md5_cmd
(*
cd
, 
T˛_I¡îp
 *
öãΩ
, 
¨gc
, c⁄° **
¨gv
){

298 
MD5C⁄ãxt
 
˘x
;

299 
dige°
[16];

301 if–
¨gc
!=2 ){

302 
	`T˛_AµídResu…
(
öãΩ
,"wr⁄g #árgs: should bê\"", 
¨gv
[0],

304  
TCL_ERROR
;

306 
	`MD5Inô
(&
˘x
);

307 
	`MD5Upd©e
(&
˘x
, (*)
¨gv
[1], ()
	`°æí
(argv[1]));

308 
	`MD5FöÆ
(
dige°
, &
˘x
);

309 
	`Dige°ToBa£16
(
dige°
, 
öãΩ
->
ªsu…
);

310  
TCL_OK
;

311 
	}
}

317 
	$md5fûe_cmd
(*
cd
, 
T˛_I¡îp
*
öãΩ
, 
¨gc
, c⁄° **
¨gv
){

318 
FILE
 *
ö
;

319 
MD5C⁄ãxt
 
˘x
;

320 
dige°
[16];

321 
zBuf
[10240];

323 if–
¨gc
!=2 ){

324 
	`T˛_AµídResu…
(
öãΩ
,"wr⁄g #árgs: should bê\"", 
¨gv
[0],

326  
TCL_ERROR
;

328 
ö
 = 
	`f›í
(
¨gv
[1],"rb");

329 if–
ö
==0 ){

330 
	`T˛_AµídResu…
(
öãΩ
,"u«bÀÅÿ›í fûê\"", 
¨gv
[1],

332  
TCL_ERROR
;

334 
	`MD5Inô
(&
˘x
);

336 
n
;

337 
n
 = 
	`‰ód
(
zBuf
, 1, (zBuf), 
ö
);

338 if–
n
<=0 ) ;

339 
	`MD5Upd©e
(&
˘x
, (*)
zBuf
, ()
n
);

341 
	`f˛o£
(
ö
);

342 
	`MD5FöÆ
(
dige°
, &
˘x
);

343 
	`Dige°ToBa£16
(
dige°
, 
öãΩ
->
ªsu…
);

344  
TCL_OK
;

345 
	}
}

350 
	$Md5_Inô
(
T˛_I¡îp
 *
öãΩ
){

351 
	`T˛_Cª©eComm™d
(
öãΩ
, "md5", (
T˛_CmdProc
*)
md5_cmd
, 0, 0);

352 
	`T˛_Cª©eComm™d
(
öãΩ
, "md5fûe", (
T˛_CmdProc
*)
md5fûe_cmd
, 0, 0);

353  
TCL_OK
;

354 
	}
}

360 
	$md5°ï
(
sqlôe3_c⁄ãxt
 *
c⁄ãxt
, 
¨gc
, 
sqlôe3_vÆue
 **
¨gv
){

361 
MD5C⁄ãxt
 *
p
;

362 
i
;

363 if–
¨gc
<1 ) ;

364 
p
 = 
	`sqlôe3_aggªg©e_c⁄ãxt
(
c⁄ãxt
, (*p));

365 if–
p
==0 ) ;

366 if–!
p
->
isInô
 ){

367 
	`MD5Inô
(
p
);

369 
i
=0; i<
¨gc
; i++){

370 c⁄° *
zD©a
 = (*)
	`sqlôe3_vÆue_ãxt
(
¨gv
[
i
]);

371 if–
zD©a
 ){

372 
	`MD5Upd©e
(
p
, (*)
zD©a
, 
	`°æí
(zData));

375 
	}
}

376 
	$md5föÆize
(
sqlôe3_c⁄ãxt
 *
c⁄ãxt
){

377 
MD5C⁄ãxt
 *
p
;

378 
dige°
[16];

379 
zBuf
[33];

380 
p
 = 
	`sqlôe3_aggªg©e_c⁄ãxt
(
c⁄ãxt
, (*p));

381 
	`MD5FöÆ
(
dige°
,
p
);

382 
	`Dige°ToBa£16
(
dige°
, 
zBuf
);

383 
	`sqlôe3_ªsu…_ãxt
(
c⁄ãxt
, 
zBuf
, -1, 
SQLITE_TRANSIENT
);

384 
	}
}

385 
	$Md5_Regi°î
(
sqlôe3
 *
db
){

386 
	`sqlôe3_¸óã_fun˘i⁄
(
db
, "md5sum", -1, 
SQLITE_UTF8
, 0, 0,

387 
md5°ï
, 
md5föÆize
);

388 
	}
}

	@test_server.c

203 #ifde‡
SQLITE_SERVER


204 #i‡
deföed
(
OS_UNIX
Ë&& OS_UNIX && deföed(
THREADSAFE
) && THREADSAFE

209 
	~<±hªad.h
>

210 
	~"sqlôe3.h
"

216 
SqlMesßge
 
	tSqlMesßge
;

217 
	sSqlMesßge
 {

218 
	m›
;

219 
sqlôe3
 *
	mpDb
;

220 
sqlôe3_°mt
 *
	mpStmt
;

221 
	mîrCode
;

222 c⁄° *
	mzIn
;

223 
	mnByã
;

224 c⁄° *
	mzOut
;

225 
SqlMesßge
 *
	mpNext
;

226 
SqlMesßge
 *
	mpPªv
;

227 
±hªad_muãx_t
 
	m˛õ¡Muãx
;

228 
±hªad_c⁄d_t
 
	m˛õ¡Wakeup
;

234 
	#MSG_O≥n
 1

	)

235 
	#MSG_Pª∑ª
 2

	)

236 
	#MSG_Sãp
 3

	)

237 
	#MSG_Re£t
 4

	)

238 
	#MSG_FöÆize
 5

	)

239 
	#MSG_Clo£
 6

	)

240 
	#MSG_D⁄e
 7

	)

247 
	sSîvîSèã
 {

248 
±hªad_muãx_t
 
	mqueueMuãx
;

249 
±hªad_muãx_t
 
	m£rvîMuãx
;

250 
±hªad_c⁄d_t
 
	m£rvîWakeup
;

251 vﬁ©ûê
	m£rvîHÆt
;

252 
SqlMesßge
 *
	mpQueueHód
;

253 
SqlMesßge
 *
	mpQueueTaû
;

254 } 
	gg
 = {

255 
PTHREAD_MUTEX_INITIALIZER
,

256 
PTHREAD_MUTEX_INITIALIZER
,

257 
PTHREAD_COND_INITIALIZER
,

267 
	$£ndToSîvî
(
SqlMesßge
 *
pMsg
){

270 
	`±hªad_muãx_öô
(&
pMsg
->
˛õ¡Muãx
, 0);

271 
	`±hªad_c⁄d_öô
(&
pMsg
->
˛õ¡Wakeup
, 0);

275 
	`±hªad_muãx_lock
(&
g
.
queueMuãx
);

276 
pMsg
->
pNext
 = 
g
.
pQueueHód
;

277 if–
g
.
pQueueHód
==0 ){

278 
g
.
pQueueTaû
 = 
pMsg
;

280 
g
.
pQueueHód
->
pPªv
 = 
pMsg
;

282 
pMsg
->
pPªv
 = 0;

283 
g
.
pQueueHód
 = 
pMsg
;

284 
	`±hªad_muãx_u∆ock
(&
g
.
queueMuãx
);

289 
	`±hªad_muãx_lock
(&
pMsg
->
˛õ¡Muãx
);

290 
	`±hªad_c⁄d_sig«l
(&
g
.
£rvîWakeup
);

291  
pMsg
->
›
!=
MSG_D⁄e
 ){

292 
	`±hªad_c⁄d_waô
(&
pMsg
->
˛õ¡Wakeup
, &pMsg->
˛õ¡Muãx
);

294 
	`±hªad_muãx_u∆ock
(&
pMsg
->
˛õ¡Muãx
);

298 
	`±hªad_muãx_de°roy
(&
pMsg
->
˛õ¡Muãx
);

299 
	`±hªad_c⁄d_de°roy
(&
pMsg
->
˛õ¡Wakeup
);

300 
	}
}

327 
	$sqlôe3_˛õ¡_›í
(c⁄° *
zD©aba£Name
, 
sqlôe3
 **
µDb
){

328 
SqlMesßge
 
msg
;

329 
msg
.
›
 = 
MSG_O≥n
;

330 
msg
.
zIn
 = 
zD©aba£Name
;

331 
	`£ndToSîvî
(&
msg
);

332 *
µDb
 = 
msg
.
pDb
;

333  
msg
.
îrCode
;

334 
	}
}

335 
	$sqlôe3_˛õ¡_¥ï¨e
(

336 
sqlôe3
 *
pDb
,

337 c⁄° *
zSql
,

338 
nByã
,

339 
sqlôe3_°mt
 **
µStmt
,

340 c⁄° **
pzTaû


342 
SqlMesßge
 
msg
;

343 
msg
.
›
 = 
MSG_Pª∑ª
;

344 
msg
.
pDb
 =ÖDb;

345 
msg
.
zIn
 = 
zSql
;

346 
msg
.
nByã
 =ÇByte;

347 
	`£ndToSîvî
(&
msg
);

348 *
µStmt
 = 
msg
.
pStmt
;

349 if–
pzTaû
 ) *pzTaû = 
msg
.
zOut
;

350  
msg
.
îrCode
;

351 
	}
}

352 
	$sqlôe3_˛õ¡_°ï
(
sqlôe3_°mt
 *
pStmt
){

353 
SqlMesßge
 
msg
;

354 
msg
.
›
 = 
MSG_Sãp
;

355 
msg
.
pStmt
 =ÖStmt;

356 
	`£ndToSîvî
(&
msg
);

357  
msg
.
îrCode
;

358 
	}
}

359 
	$sqlôe3_˛õ¡_ª£t
(
sqlôe3_°mt
 *
pStmt
){

360 
SqlMesßge
 
msg
;

361 
msg
.
›
 = 
MSG_Re£t
;

362 
msg
.
pStmt
 =ÖStmt;

363 
	`£ndToSîvî
(&
msg
);

364  
msg
.
îrCode
;

365 
	}
}

366 
	$sqlôe3_˛õ¡_föÆize
(
sqlôe3_°mt
 *
pStmt
){

367 
SqlMesßge
 
msg
;

368 
msg
.
›
 = 
MSG_FöÆize
;

369 
msg
.
pStmt
 =ÖStmt;

370 
	`£ndToSîvî
(&
msg
);

371  
msg
.
îrCode
;

372 
	}
}

373 
	$sqlôe3_˛õ¡_˛o£
(
sqlôe3
 *
pDb
){

374 
SqlMesßge
 
msg
;

375 
msg
.
›
 = 
MSG_Clo£
;

376 
msg
.
pDb
 =ÖDb;

377 
	`£ndToSîvî
(&
msg
);

378  
msg
.
îrCode
;

379 
	}
}

388 *
	$sqlôe3_£rvî
(*
NŸU£d
){

389 
	`sqlôe3_íabÀ_sh¨ed_ˇche
(1);

390 if–
	`±hªad_muãx_åylock
(&
g
.
£rvîMuãx
) ){

391 
	`sqlôe3_íabÀ_sh¨ed_ˇche
(0);

394  !
g
.
£rvîHÆt
 ){

395 
SqlMesßge
 *
pMsg
;

399 
	`±hªad_muãx_lock
(&
g
.
queueMuãx
);

400  
g
.
pQueueTaû
==0 && g.
£rvîHÆt
==0 ){

401 
	`±hªad_c⁄d_waô
(&
g
.
£rvîWakeup
, &g.
queueMuãx
);

403 
pMsg
 = 
g
.
pQueueTaû
;

404 if–
pMsg
 ){

405 if–
pMsg
->
pPªv
 ){

406 
pMsg
->
pPªv
->
pNext
 = 0;

408 
g
.
pQueueHód
 = 0;

410 
g
.
pQueueTaû
 = 
pMsg
->
pPªv
;

412 
	`±hªad_muãx_u∆ock
(&
g
.
queueMuãx
);

413 if–
pMsg
==0 ) ;

417 
	`±hªad_muãx_lock
(&
pMsg
->
˛õ¡Muãx
);

418  
pMsg
->
›
 ){

419 
MSG_O≥n
: {

420 
pMsg
->
îrCode
 = 
	`sqlôe3_›í
’Msg->
zIn
, &pMsg->
pDb
);

423 
MSG_Pª∑ª
: {

424 
pMsg
->
îrCode
 = 
	`sqlôe3_¥ï¨e
’Msg->
pDb
,ÖMsg->
zIn
,ÖMsg->
nByã
,

425 &
pMsg
->
pStmt
, &pMsg->
zOut
);

428 
MSG_Sãp
: {

429 
pMsg
->
îrCode
 = 
	`sqlôe3_°ï
’Msg->
pStmt
);

432 
MSG_Re£t
: {

433 
pMsg
->
îrCode
 = 
	`sqlôe3_ª£t
’Msg->
pStmt
);

436 
MSG_FöÆize
: {

437 
pMsg
->
îrCode
 = 
	`sqlôe3_föÆize
’Msg->
pStmt
);

440 
MSG_Clo£
: {

441 
pMsg
->
îrCode
 = 
	`sqlôe3_˛o£
’Msg->
pDb
);

448 
pMsg
->
›
 = 
MSG_D⁄e
;

449 
	`±hªad_muãx_u∆ock
(&
pMsg
->
˛õ¡Muãx
);

450 
	`±hªad_c⁄d_sig«l
(&
pMsg
->
˛õ¡Wakeup
);

452 
	`±hªad_muãx_u∆ock
(&
g
.
£rvîMuãx
);

453 
	`sqlôe3_thªad_˛ónup
();

455 
	}
}

462 
	$sqlôe3_£rvî_°¨t
(){

463 
±hªad_t
 
x
;

464 
rc
;

465 
g
.
£rvîHÆt
 = 0;

466 
rc
 = 
	`±hªad_¸óã
(&
x
, 0, 
sqlôe3_£rvî
, 0);

467 if–
rc
==0 ){

468 
	`±hªad_dëach
(
x
);

470 
	}
}

479 
	$sqlôe3_£rvî_°›
(){

480 
g
.
£rvîHÆt
 = 1;

481 
	`±hªad_c⁄d_brﬂdˇ°
(&
g
.
£rvîWakeup
);

482 
	}
}

	@tokenize.c

20 
	~"sqlôeI¡.h
"

21 
	~"os.h
"

22 
	~<˘y≥.h
>

23 
	~<°dlib.h
>

36 
	~"keyw‹dhash.h
"

58 c⁄° 
	gsqlôe3IsIdCh¨
[] = {

68 
	#IdCh¨
(
C
Ë(((
c
=C)&0x80)!=0 || (c>0x1‡&& 
sqlôe3IsIdCh¨
[c-0x20]))

	)

74 
	$gëTokí
(c⁄° *
z
, *
tokíTy≥
){

75 
i
, 
c
;

76  *
z
 ){

78 
i
=1; 
	`is•a˚
(
z
[i]); i++){}

79 *
tokíTy≥
 = 
TK_SPACE
;

80  
i
;

83 if–
z
[1]=='-' ){

84 
i
=2; (
c
=
z
[i])!=0 && c!='\n'; i++){}

85 *
tokíTy≥
 = 
TK_COMMENT
;

86  
i
;

88 *
tokíTy≥
 = 
TK_MINUS
;

92 *
tokíTy≥
 = 
TK_LP
;

96 *
tokíTy≥
 = 
TK_RP
;

100 *
tokíTy≥
 = 
TK_SEMI
;

104 *
tokíTy≥
 = 
TK_PLUS
;

108 *
tokíTy≥
 = 
TK_STAR
;

112 if–
z
[1]!='*' || z[2]==0 ){

113 *
tokíTy≥
 = 
TK_SLASH
;

116 
i
=3, 
c
=
z
[2]; (c!='*' || z[i]!='/') && (c=z[i])!=0; i++){}

117 if–
c
 ) 
i
++;

118 *
tokíTy≥
 = 
TK_COMMENT
;

119  
i
;

122 *
tokíTy≥
 = 
TK_REM
;

126 *
tokíTy≥
 = 
TK_EQ
;

127  1 + (
z
[1]=='=');

130 if–(
c
=
z
[1])=='=' ){

131 *
tokíTy≥
 = 
TK_LE
;

133 }if–
c
=='>' ){

134 *
tokíTy≥
 = 
TK_NE
;

136 }if–
c
=='<' ){

137 *
tokíTy≥
 = 
TK_LSHIFT
;

140 *
tokíTy≥
 = 
TK_LT
;

145 if–(
c
=
z
[1])=='=' ){

146 *
tokíTy≥
 = 
TK_GE
;

148 }if–
c
=='>' ){

149 *
tokíTy≥
 = 
TK_RSHIFT
;

152 *
tokíTy≥
 = 
TK_GT
;

157 if–
z
[1]!='=' ){

158 *
tokíTy≥
 = 
TK_ILLEGAL
;

161 *
tokíTy≥
 = 
TK_NE
;

166 if–
z
[1]!='|' ){

167 *
tokíTy≥
 = 
TK_BITOR
;

170 *
tokíTy≥
 = 
TK_CONCAT
;

175 *
tokíTy≥
 = 
TK_COMMA
;

179 *
tokíTy≥
 = 
TK_BITAND
;

183 *
tokíTy≥
 = 
TK_BITNOT
;

189 
dñim
 = 
z
[0];

190 
i
=1; (
c
=
z
[i])!=0; i++){

191 if–
c
==
dñim
 ){

192 if–
z
[
i
+1]==
dñim
 ){

193 
i
++;

199 if–
c
 ){

200 *
tokíTy≥
 = 
TK_STRING
;

201  
i
+1;

203 *
tokíTy≥
 = 
TK_ILLEGAL
;

204  
i
;

208 #i‚de‡
SQLITE_OMIT_FLOATING_POINT


209 if–!
	`isdigô
(
z
[1]) )

212 *
tokíTy≥
 = 
TK_DOT
;

220 *
tokíTy≥
 = 
TK_INTEGER
;

221 
i
=0; 
	`isdigô
(
z
[i]); i++){}

222 #i‚de‡
SQLITE_OMIT_FLOATING_POINT


223 if–
z
[
i
]=='.' ){

224 
i
++;

225  
	`isdigô
(
z
[
i
]) ){ i++; }

226 *
tokíTy≥
 = 
TK_FLOAT
;

228 if–(
z
[
i
]=='e' || z[i]=='E') &&

229 –
	`isdigô
(
z
[
i
+1])

230 || ((
z
[
i
+1]=='+' || z[i+1]=='-'Ë&& 
	`isdigô
(z[i+2]))

233 
i
 += 2;

234  
	`isdigô
(
z
[
i
]) ){ i++; }

235 *
tokíTy≥
 = 
TK_FLOAT
;

238  
i
;

241 
i
=1, 
c
=
z
[0]; c!=']' && (c=z[i])!=0; i++){}

242 *
tokíTy≥
 = 
TK_ID
;

243  
i
;

246 *
tokíTy≥
 = 
TK_VARIABLE
;

247 
i
=1; 
	`isdigô
(
z
[i]); i++){}

248  
i
;

251 
i
=1; 
	`isdigô
(
z
[i]); i++){}

252 if–
i
>1 ){

255 *
tokíTy≥
 = 
TK_REGISTER
;

256  
i
;

261 #i‚de‡
SQLITE_OMIT_TCL_VARIABLE


266 
n
 = 0;

267 *
tokíTy≥
 = 
TK_VARIABLE
;

268 
i
=1; (
c
=
z
[i])!=0; i++){

269 if–
	`IdCh¨
(
c
) ){

270 
n
++;

271 #i‚de‡
SQLITE_OMIT_TCL_VARIABLE


272 }if–
c
=='(' && 
n
>0 ){

274 
i
++;

275 } (
c
=
z
[
i
])!=0 && !
	`is•a˚
(c) && c!=')' );

276 if–
c
==')' ){

277 
i
++;

279 *
tokíTy≥
 = 
TK_ILLEGAL
;

282 }if–
c
==':' && 
z
[
i
+1]==':' ){

283 
i
++;

289 if–
n
==0 ) *
tokíTy≥
 = 
TK_ILLEGAL
;

290  
i
;

292 #i‚de‡
SQLITE_OMIT_BLOB_LITERAL


294 if–(
c
=
z
[1])=='\'' || c=='"' ){

295 
dñim
 = 
c
;

296 *
tokíTy≥
 = 
TK_BLOB
;

297 
i
=2; (
c
=
z
[i])!=0; i++){

298 if–
c
==
dñim
 ){

299 if–
i
%2 ) *
tokíTy≥
 = 
TK_ILLEGAL
;

302 if–!
	`isxdigô
(
c
) ){

303 *
tokíTy≥
 = 
TK_ILLEGAL
;

304  
i
;

307 if–
c
 ) 
i
++;

308  
i
;

314 if–!
	`IdCh¨
(*
z
) ){

317 
i
=1; 
	`IdCh¨
(
z
[i]); i++){}

318 *
tokíTy≥
 = 
	`keyw‹dCode
((*)
z
, 
i
);

319  
i
;

322 *
tokíTy≥
 = 
TK_ILLEGAL
;

324 
	}
}

325 
	$sqlôe3GëTokí
(c⁄° *
z
, *
tokíTy≥
){

326  
	`gëTokí
(
z
, 
tokíTy≥
);

327 
	}
}

336 
	$sqlôe3RunP¨£r
(
P¨£
 *
pP¨£
, c⁄° *
zSql
, **
pzEºMsg
){

337 
nEº
 = 0;

338 
i
;

339 *
pEngöe
;

340 
tokíTy≥
;

341 
œ°TokíP¨£d
 = -1;

342 
sqlôe3
 *
db
 = 
pP¨£
->db;

343 *
	`sqlôe3P¨£rAŒoc
(*(*)());

344 
	`sqlôe3P¨£rFªe
(*, (*)(*));

345 
	`sqlôe3P¨£r
(*, , 
Tokí
, 
P¨£
*);

347 
db
->
Êags
 &~
SQLITE_I¡îru±
;

348 
pP¨£
->
rc
 = 
SQLITE_OK
;

349 
i
 = 0;

350 
pEngöe
 = 
	`sqlôe3P¨£rAŒoc
((*(*)())
sqlôe3MÆlocX
);

351 if–
pEngöe
==0 ){

352  
SQLITE_NOMEM
;

354 
	`as£π
–
pP¨£
->
sLa°Tokí
.
dyn
==0 );

355 
	`as£π
–
pP¨£
->
pNewTabÀ
==0 );

356 
	`as£π
–
pP¨£
->
pNewTriggî
==0 );

357 
	`as£π
–
pP¨£
->
nV¨
==0 );

358 
	`as£π
–
pP¨£
->
nV¨Ex¥
==0 );

359 
	`as£π
–
pP¨£
->
nV¨Ex¥AŒoc
==0 );

360 
	`as£π
–
pP¨£
->
≠V¨Ex¥
==0 );

361 
pP¨£
->
zTaû
 =ÖP¨£->
zSql
 = zSql;

362  !
	`sqlôe3MÆlocFaûed
(Ë&& 
zSql
[
i
]!=0 ){

363 
	`as£π
–
i
>=0 );

364 
pP¨£
->
sLa°Tokí
.
z
 = (
u8
*)&
zSql
[
i
];

365 
	`as£π
–
pP¨£
->
sLa°Tokí
.
dyn
==0 );

366 
pP¨£
->
sLa°Tokí
.
n
 = 
	`gëTokí
((*)&
zSql
[
i
],&
tokíTy≥
);

367 
i
 +
pP¨£
->
sLa°Tokí
.
n
;

368  
tokíTy≥
 ){

369 
TK_SPACE
:

370 
TK_COMMENT
: {

371 if–(
db
->
Êags
 & 
SQLITE_I¡îru±
)!=0 ){

372 
pP¨£
->
rc
 = 
SQLITE_INTERRUPT
;

373 
	`sqlôe3SëSåög
(
pzEºMsg
, "interrupt", (*)0);

374 
ab‹t_∑r£
;

378 
TK_ILLEGAL
: {

379 if–
pzEºMsg
 ){

380 
	`sqlôeFªe
(*
pzEºMsg
);

381 *
pzEºMsg
 = 
	`sqlôe3MPrötf
("unrecognizedÅoken: \"%T\"",

382 &
pP¨£
->
sLa°Tokí
);

384 
nEº
++;

385 
ab‹t_∑r£
;

387 
TK_SEMI
: {

388 
pP¨£
->
zTaû
 = &
zSql
[
i
];

392 
	`sqlôe3P¨£r
(
pEngöe
, 
tokíTy≥
, 
pP¨£
->
sLa°Tokí
,ÖParse);

393 
œ°TokíP¨£d
 = 
tokíTy≥
;

394 if–
pP¨£
->
rc
!=
SQLITE_OK
 ){

395 
ab‹t_∑r£
;

401 
ab‹t_∑r£
:

402 if–
zSql
[
i
]==0 && 
nEº
==0 && 
pP¨£
->
rc
==
SQLITE_OK
 ){

403 if–
œ°TokíP¨£d
!=
TK_SEMI
 ){

404 
	`sqlôe3P¨£r
(
pEngöe
, 
TK_SEMI
, 
pP¨£
->
sLa°Tokí
,ÖParse);

405 
pP¨£
->
zTaû
 = &
zSql
[
i
];

407 
	`sqlôe3P¨£r
(
pEngöe
, 0, 
pP¨£
->
sLa°Tokí
,ÖParse);

409 
	`sqlôe3P¨£rFªe
(
pEngöe
, 
sqlôe3FªeX
);

410 if–
	`sqlôe3MÆlocFaûed
() ){

411 
pP¨£
->
rc
 = 
SQLITE_NOMEM
;

413 if–
pP¨£
->
rc
!=
SQLITE_OK
 &&ÖP¨£->rc!=
SQLITE_DONE
 &&ÖP¨£->
zEºMsg
==0 ){

414 
	`sqlôe3SëSåög
(&
pP¨£
->
zEºMsg
, 
	`sqlôe3EºSå
’P¨£->
rc
), (*)0);

416 if–
pP¨£
->
zEºMsg
 ){

417 if–
pzEºMsg
 && *pzErrMsg==0 ){

418 *
pzEºMsg
 = 
pP¨£
->
zEºMsg
;

420 
	`sqlôeFªe
(
pP¨£
->
zEºMsg
);

422 
pP¨£
->
zEºMsg
 = 0;

423 if–!
nEº
 )ÇErr++;

425 if–
pP¨£
->
pVdbe
 &&ÖP¨£->
nEº
>0 &&ÖP¨£->
√°ed
==0 ){

426 
	`sqlôe3VdbeDñëe
(
pP¨£
->
pVdbe
);

427 
pP¨£
->
pVdbe
 = 0;

429 #i‚de‡
SQLITE_OMIT_SHARED_CACHE


430 if–
pP¨£
->
√°ed
==0 ){

431 
	`sqlôeFªe
(
pP¨£
->
aTabÀLock
);

432 
pP¨£
->
aTabÀLock
 = 0;

433 
pP¨£
->
nTabÀLock
 = 0;

436 
	`sqlôe3DñëeTabÀ
(
pP¨£
->
db
,ÖP¨£->
pNewTabÀ
);

437 
	`sqlôe3DñëeTriggî
(
pP¨£
->
pNewTriggî
);

438 
	`sqlôeFªe
(
pP¨£
->
≠V¨Ex¥
);

439 if–
nEº
>0 && (
pP¨£
->
rc
==
SQLITE_OK
 ||ÖP¨£->rc==
SQLITE_DONE
) ){

440 
pP¨£
->
rc
 = 
SQLITE_ERROR
;

442  
nEº
;

443 
	}
}

	@trigger.c

13 
	~"sqlôeI¡.h
"

15 #i‚de‡
SQLITE_OMIT_TRIGGER


19 
	$sqlôe3DñëeTriggîSãp
(
TriggîSãp
 *
pTriggîSãp
){

20  
pTriggîSãp
 ){

21 
TriggîSãp
 * 
pTmp
 = 
pTriggîSãp
;

22 
pTriggîSãp
 =ÖTriggîSãp->
pNext
;

24 if–
pTmp
->
èrgë
.
dyn
 ) 
	`sqlôeFªe
((*ÌTmp->èrgë.
z
);

25 
	`sqlôe3Ex¥Dñëe
(
pTmp
->
pWhîe
);

26 
	`sqlôe3Ex¥Li°Dñëe
(
pTmp
->
pEx¥Li°
);

27 
	`sqlôe3Sñe˘Dñëe
(
pTmp
->
pSñe˘
);

28 
	`sqlôe3IdLi°Dñëe
(
pTmp
->
pIdLi°
);

30 
	`sqlôeFªe
(
pTmp
);

32 
	}
}

42 
	$sqlôe3BegöTriggî
(

43 
P¨£
 *
pP¨£
,

44 
Tokí
 *
pName1
,

45 
Tokí
 *
pName2
,

46 
å_tm
,

47 
›
,

48 
IdLi°
 *
pCﬁumns
,

49 
SrcLi°
 *
pTabÀName
,

50 
f‹óch
,

51 
Ex¥
 *
pWhí
,

52 
isTemp


54 
Triggî
 *
pTriggî
 = 0;

55 
TabÀ
 *
pTab
;

56 *
zName
 = 0;

57 
sqlôe3
 *
db
 = 
pP¨£
->db;

58 
iDb
;

59 
Tokí
 *
pName
;

60 
DbFixî
 
sFix
;

61 
iTabDb
;

63 if–
isTemp
 ){

65 if–
pName2
 &&ÖName2->
n
>0 ){

66 
	`sqlôe3Eº‹Msg
(
pP¨£
, "temporaryÅrigger mayÇot have qualifiedÇame");

67 
åiggî_˛ónup
;

69 
iDb
 = 1;

70 
pName
 = 
pName1
;

73 
iDb
 = 
	`sqlôe3TwoP¨tName
(
pP¨£
, 
pName1
, 
pName2
, &
pName
);

74 if–
iDb
<0 ){

75 
åiggî_˛ónup
;

84 if–!
pTabÀName
 || 
	`sqlôe3MÆlocFaûed
() ){

85 
åiggî_˛ónup
;

87 
pTab
 = 
	`sqlôe3SrcLi°Lookup
(
pP¨£
, 
pTabÀName
);

88 if–
pName2
->
n
==0 && 
pTab
 &&ÖTab->
pSchema
==
db
->
aDb
[1].pSchema ){

89 
iDb
 = 1;

93 if–
	`sqlôe3MÆlocFaûed
(ËË
åiggî_˛ónup
;

94 
	`as£π
–
pTabÀName
->
nSrc
==1 );

95 if–
	`sqlôe3FixInô
(&
sFix
, 
pP¨£
, 
iDb
, "åiggî", 
pName
) &&

96 
	`sqlôe3FixSrcLi°
(&
sFix
, 
pTabÀName
) ){

97 
åiggî_˛ónup
;

99 
pTab
 = 
	`sqlôe3SrcLi°Lookup
(
pP¨£
, 
pTabÀName
);

100 if–!
pTab
 ){

102 
åiggî_˛ónup
;

107 
zName
 = 
	`sqlôe3NameFromTokí
(
pName
);

108 if–!
zName
 || 
SQLITE_OK
!=
	`sqlôe3CheckObje˘Name
(
pP¨£
, zName) ){

109 
åiggî_˛ónup
;

111 if–
	`sqlôe3HashFöd
(&(
db
->
aDb
[
iDb
].
pSchema
->
åigHash
), 
zName
,
pName
->
n
+1) ){

112 
	`sqlôe3Eº‹Msg
(
pP¨£
, "åiggî %TáÃódyÉxi°s", 
pName
);

113 
åiggî_˛ónup
;

117 if–
	`sqlôe3SåNICmp
(
pTab
->
zName
, "sqlite_", 7)==0 ){

118 
	`sqlôe3Eº‹Msg
(
pP¨£
, "cannot createÅrigger on systemÅable");

119 
pP¨£
->
nEº
++;

120 
åiggî_˛ónup
;

126 if–
pTab
->
pSñe˘
 && 
å_tm
!=
TK_INSTEAD
 ){

127 
	`sqlôe3Eº‹Msg
(
pP¨£
, "cannot create %sÅrigger on view: %S",

128 (
å_tm
 =
TK_BEFORE
)?"BEFORE":"AFTER", 
pTabÀName
, 0);

129 
åiggî_˛ónup
;

131 if–!
pTab
->
pSñe˘
 && 
å_tm
==
TK_INSTEAD
 ){

132 
	`sqlôe3Eº‹Msg
(
pP¨£
, "cannot create INSTEAD OF"

133 "Åriggî o¿èbÀ: %S", 
pTabÀName
, 0);

134 
åiggî_˛ónup
;

136 
iTabDb
 = 
	`sqlôe3SchemaToIndex
(
db
, 
pTab
->
pSchema
);

138 #i‚de‡
SQLITE_OMIT_AUTHORIZATION


140 
code
 = 
SQLITE_CREATE_TRIGGER
;

141 c⁄° *
zDb
 = 
db
->
aDb
[
iTabDb
].
zName
;

142 c⁄° *
zDbTrig
 = 
isTemp
 ? 
db
->
aDb
[1].
zName
 : 
zDb
;

143 if–
iTabDb
==1 || 
isTemp
 ) 
code
 = 
SQLITE_CREATE_TEMP_TRIGGER
;

144 if–
	`sqlôe3AuthCheck
(
pP¨£
, 
code
, 
zName
, 
pTab
->zName, 
zDbTrig
) ){

145 
åiggî_˛ónup
;

147 if–
	`sqlôe3AuthCheck
(
pP¨£
, 
SQLITE_INSERT
, 
	`SCHEMA_TABLE
(
iTabDb
),0,
zDb
)){

148 
åiggî_˛ónup
;

158 i‡(
å_tm
 =
TK_INSTEAD
){

159 
å_tm
 = 
TK_BEFORE
;

163 
pTriggî
 = (
Triggî
*)
	`sqlôeMÆloc
((Trigger));

164 if–
pTriggî
==0 ) 
åiggî_˛ónup
;

165 
pTriggî
->
«me
 = 
zName
;

166 
zName
 = 0;

167 
pTriggî
->
èbÀ
 = 
	`sqlôeSåDup
(
pTabÀName
->
a
[0].
zName
);

168 
pTriggî
->
pSchema
 = 
db
->
aDb
[
iDb
].pSchema;

169 
pTriggî
->
pTabSchema
 = 
pTab
->
pSchema
;

170 
pTriggî
->
›
 = op;

171 
pTriggî
->
å_tm
 =År_tm==
TK_BEFORE
 ? 
TRIGGER_BEFORE
 : 
TRIGGER_AFTER
;

172 
pTriggî
->
pWhí
 = 
	`sqlôe3Ex¥Dup
(pWhen);

173 
pTriggî
->
pCﬁumns
 = 
	`sqlôe3IdLi°Dup
(pColumns);

174 
pTriggî
->
f‹óch
 = foreach;

175 
	`sqlôe3TokíC›y
(&
pTriggî
->
«meTokí
,
pName
);

176 
	`as£π
–
pP¨£
->
pNewTriggî
==0 );

177 
pP¨£
->
pNewTriggî
 = 
pTriggî
;

179 
åiggî_˛ónup
:

180 
	`sqlôeFªe
(
zName
);

181 
	`sqlôe3SrcLi°Dñëe
(
pTabÀName
);

182 
	`sqlôe3IdLi°Dñëe
(
pCﬁumns
);

183 
	`sqlôe3Ex¥Dñëe
(
pWhí
);

184 if–!
pP¨£
->
pNewTriggî
 ){

185 
	`sqlôe3DñëeTriggî
(
pTriggî
);

187 
	`as£π
–
pP¨£
->
pNewTriggî
==
pTriggî
 );

189 
	}
}

195 
	$sqlôe3FöishTriggî
(

196 
P¨£
 *
pP¨£
,

197 
TriggîSãp
 *
pSãpLi°
,

198 
Tokí
 *
pAŒ


200 
Triggî
 *
pTrig
 = 0;

201 
sqlôe3
 *
db
 = 
pP¨£
->db;

202 
DbFixî
 
sFix
;

203 
iDb
;

205 
pTrig
 = 
pP¨£
->
pNewTriggî
;

206 
pP¨£
->
pNewTriggî
 = 0;

207 if–
pP¨£
->
nEº
 || !
pTrig
 ) 
åiggîföish_˛ónup
;

208 
iDb
 = 
	`sqlôe3SchemaToIndex
(
pP¨£
->
db
, 
pTrig
->
pSchema
);

209 
pTrig
->
°ï_li°
 = 
pSãpLi°
;

210  
pSãpLi°
 ){

211 
pSãpLi°
->
pTrig
 =ÖTrig;

212 
pSãpLi°
 =ÖSãpLi°->
pNext
;

214 if–
	`sqlôe3FixInô
(&
sFix
, 
pP¨£
, 
iDb
, "åiggî", &
pTrig
->
«meTokí
)

215 && 
	`sqlôe3FixTriggîSãp
(&
sFix
, 
pTrig
->
°ï_li°
) ){

216 
åiggîföish_˛ónup
;

222 if–!
db
->
öô
.
busy
 ){

223 c⁄° 
VdbeOpLi°
 
ö£πTrig
[] = {

224 { 
OP_NewRowid
, 0, 0, 0 },

225 { 
OP_Såög8
, 0, 0, "trigger" },

226 { 
OP_Såög8
, 0, 0, 0 },

227 { 
OP_Såög8
, 0, 0, 0 },

228 { 
OP_I¡egî
, 0, 0, 0 },

229 { 
OP_Såög8
, 0, 0, "CREATE TRIGGER "},

230 { 
OP_Såög8
, 0, 0, 0 },

231 { 
OP_C⁄ˇt
, 0, 0, 0 },

232 { 
OP_MakeRec‹d
, 5, 0, "aaada" },

233 { 
OP_In£π
, 0, 0, 0 },

235 
addr
;

236 
Vdbe
 *
v
;

239 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

240 if–
v
==0 ) 
åiggîföish_˛ónup
;

241 
	`sqlôe3BegöWrôeO≥øti⁄
(
pP¨£
, 0, 
iDb
);

242 
	`sqlôe3O≥nMa°îTabÀ
(
pP¨£
, 
iDb
);

243 
addr
 = 
	`sqlôe3VdbeAddOpLi°
(
v
, 
	`AºaySize
(
ö£πTrig
), insertTrig);

244 
	`sqlôe3VdbeCh™geP3
(
v
, 
addr
+2, 
pTrig
->
«me
, 0);

245 
	`sqlôe3VdbeCh™geP3
(
v
, 
addr
+3, 
pTrig
->
èbÀ
, 0);

246 
	`sqlôe3VdbeCh™geP3
(
v
, 
addr
+6, (*)
pAŒ
->
z
,ÖAŒ->
n
);

247 
	`sqlôe3Ch™geCookõ
(
db
, 
v
, 
iDb
);

248 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Clo£
, 0, 0);

249 
	`sqlôe3VdbeOp3
(
v
, 
OP_P¨£Schema
, 
iDb
, 0,

250 
	`sqlôe3MPrötf
("ty≥='åiggî' ANDÇame='%q'", 
pTrig
->
«me
), 
P3_DYNAMIC
);

253 if–
db
->
öô
.
busy
 ){

254 
n
;

255 
TabÀ
 *
pTab
;

256 
Triggî
 *
pDñ
;

257 
pDñ
 = 
	`sqlôe3HashIn£π
(&
db
->
aDb
[
iDb
].
pSchema
->
åigHash
,

258 
pTrig
->
«me
, 
	`°æí
(pTrig->name)+1,ÖTrig);

259 if–
pDñ
 ){

260 
	`as£π
–
	`sqlôe3MÆlocFaûed
(Ë&& 
pDñ
==
pTrig
 );

261 
åiggîföish_˛ónup
;

263 
n
 = 
	`°æí
(
pTrig
->
èbÀ
) + 1;

264 
pTab
 = 
	`sqlôe3HashFöd
(&
pTrig
->
pTabSchema
->
tblHash
,ÖTrig->
èbÀ
, 
n
);

265 
	`as£π
–
pTab
!=0 );

266 
pTrig
->
pNext
 = 
pTab
->
pTriggî
;

267 
pTab
->
pTriggî
 = 
pTrig
;

268 
pTrig
 = 0;

271 
åiggîföish_˛ónup
:

272 
	`sqlôe3DñëeTriggî
(
pTrig
);

273 
	`as£π
–!
pP¨£
->
pNewTriggî
 );

274 
	`sqlôe3DñëeTriggîSãp
(
pSãpLi°
);

275 
	}
}

287 
	$sqlôePîsi°TriggîSãp
(
TriggîSãp
 *
p
){

288 if–
p
->
èrgë
.
z
 ){

289 
p
->
èrgë
.
z
 = (
u8
*)
	`sqlôeSåNDup
((*Ì->èrgë.z,Ö->èrgë.
n
);

290 
p
->
èrgë
.
dyn
 = 1;

292 if–
p
->
pSñe˘
 ){

293 
Sñe˘
 *
pNew
 = 
	`sqlôe3Sñe˘Dup
(
p
->
pSñe˘
);

294 
	`sqlôe3Sñe˘Dñëe
(
p
->
pSñe˘
);

295 
p
->
pSñe˘
 = 
pNew
;

297 if–
p
->
pWhîe
 ){

298 
Ex¥
 *
pNew
 = 
	`sqlôe3Ex¥Dup
(
p
->
pWhîe
);

299 
	`sqlôe3Ex¥Dñëe
(
p
->
pWhîe
);

300 
p
->
pWhîe
 = 
pNew
;

302 if–
p
->
pEx¥Li°
 ){

303 
Ex¥Li°
 *
pNew
 = 
	`sqlôe3Ex¥Li°Dup
(
p
->
pEx¥Li°
);

304 
	`sqlôe3Ex¥Li°Dñëe
(
p
->
pEx¥Li°
);

305 
p
->
pEx¥Li°
 = 
pNew
;

307 if–
p
->
pIdLi°
 ){

308 
IdLi°
 *
pNew
 = 
	`sqlôe3IdLi°Dup
(
p
->
pIdLi°
);

309 
	`sqlôe3IdLi°Dñëe
(
p
->
pIdLi°
);

310 
p
->
pIdLi°
 = 
pNew
;

312 
	}
}

321 
TriggîSãp
 *
	$sqlôe3TriggîSñe˘Sãp
(
Sñe˘
 *
pSñe˘
){

322 
TriggîSãp
 *
pTriggîSãp
 = 
	`sqlôeMÆloc
((TriggerStep));

323 if–
pTriggîSãp
==0 ) {

324 
	`sqlôe3Sñe˘Dñëe
(
pSñe˘
);

328 
pTriggîSãp
->
›
 = 
TK_SELECT
;

329 
pTriggîSãp
->
pSñe˘
 =ÖSelect;

330 
pTriggîSãp
->
‹c⁄f
 = 
OE_DeÁu…
;

331 
	`sqlôePîsi°TriggîSãp
(
pTriggîSãp
);

333  
pTriggîSãp
;

334 
	}
}

343 
TriggîSãp
 *
	$sqlôe3TriggîIn£πSãp
(

344 
Tokí
 *
pTabÀName
,

345 
IdLi°
 *
pCﬁumn
,

346 
Ex¥Li°
 *
pELi°
,

347 
Sñe˘
 *
pSñe˘
,

348 
‹c⁄f


350 
TriggîSãp
 *
pTriggîSãp
 = 
	`sqlôeMÆloc
((TriggerStep));

352 
	`as£π
(
pELi°
 =0 || 
pSñe˘
 == 0);

353 
	`as£π
(
pELi°
 !0 || 
pSñe˘
 != 0);

355 if–
pTriggîSãp
 ){

356 
pTriggîSãp
->
›
 = 
TK_INSERT
;

357 
pTriggîSãp
->
pSñe˘
 =ÖSelect;

358 
pTriggîSãp
->
èrgë
 = *
pTabÀName
;

359 
pTriggîSãp
->
pIdLi°
 = 
pCﬁumn
;

360 
pTriggîSãp
->
pEx¥Li°
 = 
pELi°
;

361 
pTriggîSãp
->
‹c⁄f
 = orconf;

362 
	`sqlôePîsi°TriggîSãp
(
pTriggîSãp
);

364 
	`sqlôe3IdLi°Dñëe
(
pCﬁumn
);

365 
	`sqlôe3Ex¥Li°Dñëe
(
pELi°
);

366 
	`sqlôe3Sñe˘Dup
(
pSñe˘
);

369  
pTriggîSãp
;

370 
	}
}

377 
TriggîSãp
 *
	$sqlôe3TriggîUpd©eSãp
(

378 
Tokí
 *
pTabÀName
,

379 
Ex¥Li°
 *
pELi°
,

380 
Ex¥
 *
pWhîe
,

381 
‹c⁄f


383 
TriggîSãp
 *
pTriggîSãp
 = 
	`sqlôeMÆloc
((TriggerStep));

384 if–
pTriggîSãp
==0 )  0;

386 
pTriggîSãp
->
›
 = 
TK_UPDATE
;

387 
pTriggîSãp
->
èrgë
 = *
pTabÀName
;

388 
pTriggîSãp
->
pEx¥Li°
 = 
pELi°
;

389 
pTriggîSãp
->
pWhîe
 =ÖWhere;

390 
pTriggîSãp
->
‹c⁄f
 = orconf;

391 
	`sqlôePîsi°TriggîSãp
(
pTriggîSãp
);

393  
pTriggîSãp
;

394 
	}
}

401 
TriggîSãp
 *
	$sqlôe3TriggîDñëeSãp
(
Tokí
 *
pTabÀName
, 
Ex¥
 *
pWhîe
){

402 
TriggîSãp
 *
pTriggîSãp
 = 
	`sqlôeMÆloc
((TriggerStep));

403 if–
pTriggîSãp
==0 )  0;

405 
pTriggîSãp
->
›
 = 
TK_DELETE
;

406 
pTriggîSãp
->
èrgë
 = *
pTabÀName
;

407 
pTriggîSãp
->
pWhîe
 =ÖWhere;

408 
pTriggîSãp
->
‹c⁄f
 = 
OE_DeÁu…
;

409 
	`sqlôePîsi°TriggîSãp
(
pTriggîSãp
);

411  
pTriggîSãp
;

412 
	}
}

417 
	$sqlôe3DñëeTriggî
(
Triggî
 *
pTriggî
){

418 if–
pTriggî
==0 ) ;

419 
	`sqlôe3DñëeTriggîSãp
(
pTriggî
->
°ï_li°
);

420 
	`sqlôeFªe
(
pTriggî
->
«me
);

421 
	`sqlôeFªe
(
pTriggî
->
èbÀ
);

422 
	`sqlôe3Ex¥Dñëe
(
pTriggî
->
pWhí
);

423 
	`sqlôe3IdLi°Dñëe
(
pTriggî
->
pCﬁumns
);

424 if–
pTriggî
->
«meTokí
.
dyn
 ) 
	`sqlôeFªe
((*ÌTriggî->«meTokí.
z
);

425 
	`sqlôeFªe
(
pTriggî
);

426 
	}
}

436 
	$sqlôe3Dr›Triggî
(
P¨£
 *
pP¨£
, 
SrcLi°
 *
pName
){

437 
Triggî
 *
pTriggî
 = 0;

438 
i
;

439 c⁄° *
zDb
;

440 c⁄° *
zName
;

441 
nName
;

442 
sqlôe3
 *
db
 = 
pP¨£
->db;

444 if–
	`sqlôe3MÆlocFaûed
(ËË
dr›_åiggî_˛ónup
;

445 if–
SQLITE_OK
!=
	`sqlôe3RódSchema
(
pP¨£
) ){

446 
dr›_åiggî_˛ónup
;

449 
	`as£π
–
pName
->
nSrc
==1 );

450 
zDb
 = 
pName
->
a
[0].
zD©aba£
;

451 
zName
 = 
pName
->
a
[0].zName;

452 
nName
 = 
	`°æí
(
zName
);

453 
i
=
OMIT_TEMPDB
; i<
db
->
nDb
; i++){

454 
j
 = (
i
<2) ? i^1 : i;

455 if–
zDb
 && 
	`sqlôe3SåICmp
(
db
->
aDb
[
j
].
zName
, zDb) ) ;

456 
pTriggî
 = 
	`sqlôe3HashFöd
(&(
db
->
aDb
[
j
].
pSchema
->
åigHash
), 
zName
, 
nName
+1);

457 if–
pTriggî
 ) ;

459 if–!
pTriggî
 ){

460 
	`sqlôe3Eº‹Msg
(
pP¨£
, "nÿsuchÅriggî: %S", 
pName
, 0);

461 
dr›_åiggî_˛ónup
;

463 
	`sqlôe3Dr›TriggîPå
(
pP¨£
, 
pTriggî
, 0);

465 
dr›_åiggî_˛ónup
:

466 
	`sqlôe3SrcLi°Dñëe
(
pName
);

467 
	}
}

473 
TabÀ
 *
	$èbÀOfTriggî
(
sqlôe3
 *
db
, 
Triggî
 *
pTriggî
){

474 
n
 = 
	`°æí
(
pTriggî
->
èbÀ
) + 1;

475  
	`sqlôe3HashFöd
(&
pTriggî
->
pTabSchema
->
tblHash
,ÖTriggî->
èbÀ
, 
n
);

476 
	}
}

484 
	$sqlôe3Dr›TriggîPå
(
P¨£
 *
pP¨£
, 
Triggî
 *
pTriggî
, 
√°ed
){

485 
TabÀ
 *
pTabÀ
;

486 
Vdbe
 *
v
;

487 
sqlôe3
 *
db
 = 
pP¨£
->db;

488 
iDb
;

490 
iDb
 = 
	`sqlôe3SchemaToIndex
(
pP¨£
->
db
, 
pTriggî
->
pSchema
);

491 
	`as£π
–
iDb
>=0 && iDb<
db
->
nDb
 );

492 
pTabÀ
 = 
	`èbÀOfTriggî
(
db
, 
pTriggî
);

493 
	`as£π
(
pTabÀ
);

494 
	`as£π
–
pTabÀ
->
pSchema
==
pTriggî
->pSchem®|| 
iDb
==1 );

495 #i‚de‡
SQLITE_OMIT_AUTHORIZATION


497 
code
 = 
SQLITE_DROP_TRIGGER
;

498 c⁄° *
zDb
 = 
db
->
aDb
[
iDb
].
zName
;

499 c⁄° *
zTab
 = 
	`SCHEMA_TABLE
(
iDb
);

500 if–
iDb
==1 ) 
code
 = 
SQLITE_DROP_TEMP_TRIGGER
;

501 if–
	`sqlôe3AuthCheck
(
pP¨£
, 
code
, 
pTriggî
->
«me
, 
pTabÀ
->
zName
, 
zDb
) ||

502 
	`sqlôe3AuthCheck
(
pP¨£
, 
SQLITE_DELETE
, 
zTab
, 0, 
zDb
) ){

510 if–
pTabÀ
!=0 && (
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
))!=0 ){

511 
ba£
;

512 c⁄° 
VdbeOpLi°
 
dr›Triggî
[] = {

513 { 
OP_Rewöd
, 0, 
	`ADDR
(9), 0},

514 { 
OP_Såög8
, 0, 0, 0},

515 { 
OP_Cﬁumn
, 0, 1, 0},

516 { 
OP_Ne
, 0, 
	`ADDR
(8), 0},

517 { 
OP_Såög8
, 0, 0, "trigger"},

518 { 
OP_Cﬁumn
, 0, 0, 0},

519 { 
OP_Ne
, 0, 
	`ADDR
(8), 0},

520 { 
OP_Dñëe
, 0, 0, 0},

521 { 
OP_Next
, 0, 
	`ADDR
(1), 0},

524 
	`sqlôe3BegöWrôeO≥øti⁄
(
pP¨£
, 0, 
iDb
);

525 
	`sqlôe3O≥nMa°îTabÀ
(
pP¨£
, 
iDb
);

526 
ba£
 = 
	`sqlôe3VdbeAddOpLi°
(
v
, 
	`AºaySize
(
dr›Triggî
), dropTrigger);

527 
	`sqlôe3VdbeCh™geP3
(
v
, 
ba£
+1, 
pTriggî
->
«me
, 0);

528 
	`sqlôe3Ch™geCookõ
(
db
, 
v
, 
iDb
);

529 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Clo£
, 0, 0);

530 
	`sqlôe3VdbeOp3
(
v
, 
OP_Dr›Triggî
, 
iDb
, 0, 
pTriggî
->
«me
, 0);

532 
	}
}

537 
	$sqlôe3U∆ökAndDñëeTriggî
(
sqlôe3
 *
db
, 
iDb
, c⁄° *
zName
){

538 
Triggî
 *
pTriggî
;

539 
nName
 = 
	`°æí
(
zName
);

540 
pTriggî
 = 
	`sqlôe3HashIn£π
(&(
db
->
aDb
[
iDb
].
pSchema
->
åigHash
), 
zName
, 
nName
+1, 0);

541 if–
pTriggî
 ){

542 
TabÀ
 *
pTabÀ
 = 
	`èbÀOfTriggî
(
db
, 
pTriggî
);

543 
	`as£π
–
pTabÀ
!=0 );

544 if–
pTabÀ
->
pTriggî
 ==ÖTrigger ){

545 
pTabÀ
->
pTriggî
 =ÖTriggî->
pNext
;

547 
Triggî
 *
cc
 = 
pTabÀ
->
pTriggî
;

548  
cc
 ){

549 if–
cc
->
pNext
 =
pTriggî
 ){

550 
cc
->
pNext
 = cc->pNext->pNext;

553 
cc
 = cc->
pNext
;

555 
	`as£π
(
cc
);

557 
	`sqlôe3DñëeTriggî
(
pTriggî
);

558 
db
->
Êags
 |
SQLITE_I¡înCh™ges
;

560 
	}
}

571 
	$checkCﬁumnOvîL≠
(
IdLi°
 *
pIdLi°
, 
Ex¥Li°
 *
pELi°
){

572 
e
;

573 if–!
pIdLi°
 || !
pELi°
 )  1;

574 
e
=0;É<
pELi°
->
nEx¥
;É++){

575 if–
	`sqlôe3IdLi°Index
(
pIdLi°
, 
pELi°
->
a
[
e
].
zName
)>=0 )  1;

578 
	}
}

589 
	$sqlôe3TriggîsExi°
(

590 
P¨£
 *
pP¨£
,

591 
TabÀ
 *
pTab
,

592 
›
,

593 
Ex¥Li°
 *
pCh™ges


595 
Triggî
 *
pTriggî
 = 
pTab
->pTrigger;

596 
mask
 = 0;

598  
pTriggî
 ){

599 if–
pTriggî
->
›
==› && 
	`checkCﬁumnOvîL≠
’Triggî->
pCﬁumns
, 
pCh™ges
) ){

600 
TriggîSèck
 *
ss
;

601 
ss
 = 
pP¨£
->
åigSèck
;

602  
ss
 && ss->
pTriggî
!=
pTab
->pTrigger ){

603 
ss
 = ss->
pNext
;

605 if–
ss
==0 ){

606 
mask
 |
pTriggî
->
å_tm
;

609 
pTriggî
 =ÖTriggî->
pNext
;

611  
mask
;

612 
	}
}

624 
SrcLi°
 *
	$èrgëSrcLi°
(

625 
P¨£
 *
pP¨£
,

626 
TriggîSãp
 *
pSãp


628 
Tokí
 
sDb
;

629 
iDb
;

630 
SrcLi°
 *
pSrc
;

632 
iDb
 = 
	`sqlôe3SchemaToIndex
(
pP¨£
->
db
, 
pSãp
->
pTrig
->
pSchema
);

633 if–
iDb
==0 || iDb>=2 ){

634 
	`as£π
–
iDb
<
pP¨£
->
db
->
nDb
 );

635 
sDb
.
z
 = (
u8
*)
pP¨£
->
db
->
aDb
[
iDb
].
zName
;

636 
sDb
.
n
 = 
	`°æí
((*)sDb.
z
);

637 
pSrc
 = 
	`sqlôe3SrcLi°Aµíd
(0, &
sDb
, &
pSãp
->
èrgë
);

639 
pSrc
 = 
	`sqlôe3SrcLi°Aµíd
(0, &
pSãp
->
èrgë
, 0);

641  
pSrc
;

642 
	}
}

648 
	$codeTriggîProgøm
(

649 
P¨£
 *
pP¨£
,

650 
TriggîSãp
 *
pSãpLi°
,

651 
‹c⁄fö


653 
TriggîSãp
 * 
pTriggîSãp
 = 
pSãpLi°
;

654 
‹c⁄f
;

655 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

657 
	`as£π
–
pTriggîSãp
!=0 );

658 
	`as£π
–
v
!=0 );

659 
	`sqlôe3VdbeAddOp
(
v
, 
OP_C⁄ãxtPush
, 0, 0);

660 
	`VdbeCommít
((
v
, "# begöÅriggî %s", 
pSãpLi°
->
pTrig
->
«me
));

661  
pTriggîSãp
 ){

662 
‹c⁄f
 = (
‹c⁄fö
 =
OE_DeÁu…
)?
pTriggîSãp
->orconf:orconfin;

663 
pP¨£
->
åigSèck
->
‹c⁄f
 = orconf;

664  
pTriggîSãp
->
›
 ){

665 
TK_SELECT
: {

666 
Sñe˘
 * 
ss
 = 
	`sqlôe3Sñe˘Dup
(
pTriggîSãp
->
pSñe˘
);

667 
	`as£π
(
ss
);

668 
	`as£π
(
ss
->
pSrc
);

669 
	`sqlôe3Sñe˘Resﬁve
(
pP¨£
, 
ss
, 0);

670 
	`sqlôe3Sñe˘
(
pP¨£
, 
ss
, 
SRT_Disˇrd
, 0, 0, 0, 0, 0);

671 
	`sqlôe3Sñe˘Dñëe
(
ss
);

674 
TK_UPDATE
: {

675 
SrcLi°
 *
pSrc
;

676 
pSrc
 = 
	`èrgëSrcLi°
(
pP¨£
, 
pTriggîSãp
);

677 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Re£tCou¡
, 0, 0);

678 
	`sqlôe3Upd©e
(
pP¨£
, 
pSrc
,

679 
	`sqlôe3Ex¥Li°Dup
(
pTriggîSãp
->
pEx¥Li°
),

680 
	`sqlôe3Ex¥Dup
(
pTriggîSãp
->
pWhîe
), 
‹c⁄f
);

681 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Re£tCou¡
, 1, 0);

684 
TK_INSERT
: {

685 
SrcLi°
 *
pSrc
;

686 
pSrc
 = 
	`èrgëSrcLi°
(
pP¨£
, 
pTriggîSãp
);

687 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Re£tCou¡
, 0, 0);

688 
	`sqlôe3In£π
(
pP¨£
, 
pSrc
,

689 
	`sqlôe3Ex¥Li°Dup
(
pTriggîSãp
->
pEx¥Li°
),

690 
	`sqlôe3Sñe˘Dup
(
pTriggîSãp
->
pSñe˘
),

691 
	`sqlôe3IdLi°Dup
(
pTriggîSãp
->
pIdLi°
), 
‹c⁄f
);

692 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Re£tCou¡
, 1, 0);

695 
TK_DELETE
: {

696 
SrcLi°
 *
pSrc
;

697 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Re£tCou¡
, 0, 0);

698 
pSrc
 = 
	`èrgëSrcLi°
(
pP¨£
, 
pTriggîSãp
);

699 
	`sqlôe3DñëeFrom
(
pP¨£
, 
pSrc
, 
	`sqlôe3Ex¥Dup
(
pTriggîSãp
->
pWhîe
));

700 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Re£tCou¡
, 1, 0);

704 
	`as£π
(0);

706 
pTriggîSãp
 =ÖTriggîSãp->
pNext
;

708 
	`sqlôe3VdbeAddOp
(
v
, 
OP_C⁄ãxtP›
, 0, 0);

709 
	`VdbeCommít
((
v
, "#ÉndÅriggî %s", 
pSãpLi°
->
pTrig
->
«me
));

712 
	}
}

734 
	$sqlôe3CodeRowTriggî
(

735 
P¨£
 *
pP¨£
,

736 
›
,

737 
Ex¥Li°
 *
pCh™ges
,

738 
å_tm
,

739 
TabÀ
 *
pTab
,

740 
√wIdx
,

741 
ﬁdIdx
,

742 
‹c⁄f
,

743 
ign‹eJump


745 
Triggî
 *
p
;

746 
TriggîSèck
 
åigSèckE¡ry
;

748 
	`as£π
(
›
 =
TK_UPDATE
 || o∞=
TK_INSERT
 || o∞=
TK_DELETE
);

749 
	`as£π
(
å_tm
 =
TRIGGER_BEFORE
 ||År_tm =
TRIGGER_AFTER
 );

751 
	`as£π
(
√wIdx
 !-1 || 
ﬁdIdx
 != -1);

753 
p
=
pTab
->
pTriggî
;Ö;Öı->
pNext
){

754 
fúe_this
 = 0;

758 
p
->
›
==op &&

759 
p
->
å_tm
==tr_tm &&

760 (
p
->
pSchema
=ı->
pTabSchema
 ||Ö->pSchema==
pP¨£
->
db
->
aDb
[1].pSchema) &&

761 (
›
!=
TK_UPDATE
||!
p
->
pCﬁumns
||
	`checkCﬁumnOvîL≠
’->pCﬁumns,
pCh™ges
))

763 
TriggîSèck
 *
pS
;

764 
pS
=
pP¨£
->
åigSèck
;ÖS && 
p
!ıS->
pTriggî
;ÖSıS->
pNext
);

765 if–!
pS
 ){

766 
fúe_this
 = 1;

770 if–
fúe_this
 ){

771 
ídTriggî
;

772 
Ex¥
 * 
whíEx¥
;

773 
AuthC⁄ãxt
 
sC⁄ãxt
;

774 
NameC⁄ãxt
 
sNC
;

776 
	`mem£t
(&
sNC
, 0, (sNC));

777 
sNC
.
pP¨£
 =ÖParse;

780 
åigSèckE¡ry
.
pTriggî
 = 
p
;

781 
åigSèckE¡ry
.
√wIdx
 =ÇewIdx;

782 
åigSèckE¡ry
.
ﬁdIdx
 = oldIdx;

783 
åigSèckE¡ry
.
pTab
 =ÖTab;

784 
åigSèckE¡ry
.
pNext
 = 
pP¨£
->
åigSèck
;

785 
åigSèckE¡ry
.
ign‹eJump
 = ignoreJump;

786 
pP¨£
->
åigSèck
 = &
åigSèckE¡ry
;

787 
	`sqlôe3AuthC⁄ãxtPush
(
pP¨£
, &
sC⁄ãxt
, 
p
->
«me
);

790 
ídTriggî
 = 
	`sqlôe3VdbeMakeLabñ
(
pP¨£
->
pVdbe
);

791 
whíEx¥
 = 
	`sqlôe3Ex¥Dup
(
p
->
pWhí
);

792 if–
	`sqlôe3Ex¥ResﬁveNames
(&
sNC
, 
whíEx¥
) ){

793 
pP¨£
->
åigSèck
 = 
åigSèckE¡ry
.
pNext
;

794 
	`sqlôe3Ex¥Dñëe
(
whíEx¥
);

797 
	`sqlôe3Ex¥IfFÆ£
(
pP¨£
, 
whíEx¥
, 
ídTriggî
, 1);

798 
	`sqlôe3Ex¥Dñëe
(
whíEx¥
);

800 
	`codeTriggîProgøm
(
pP¨£
, 
p
->
°ï_li°
, 
‹c⁄f
);

803 
pP¨£
->
åigSèck
 = 
åigSèckE¡ry
.
pNext
;

804 
	`sqlôe3AuthC⁄ãxtP›
(&
sC⁄ãxt
);

806 
	`sqlôe3VdbeResﬁveLabñ
(
pP¨£
->
pVdbe
, 
ídTriggî
);

810 
	}
}

	@update.c

17 
	~"sqlôeI¡.h
"

44 
	$sqlôe3CﬁumnDeÁu…
(
Vdbe
 *
v
, 
TabÀ
 *
pTab
, 
i
){

45 if–
pTab
 && !pTab->
pSñe˘
 ){

46 
sqlôe3_vÆue
 *
pVÆue
;

47 
u8
 
íc
 = 
	`ENC
(
	`sqlôe3VdbeDb
(
v
));

48 
Cﬁumn
 *
pCﬁ
 = &
pTab
->
aCﬁ
[
i
];

49 
	`sqlôe3VÆueFromEx¥
(
pCﬁ
->
pDÊt
, 
íc
,ÖCﬁ->
afföôy
, &
pVÆue
);

50 if–
pVÆue
 ){

51 
	`sqlôe3VdbeCh™geP3
(
v
, -1, (c⁄° *)
pVÆue
, 
P3_MEM
);

53 
	`VdbeCommít
((
v
, "# %s.%s", 
pTab
->
zName
, 
pCﬁ
->zName));

56 
	}
}

65 
	$sqlôe3Upd©e
(

66 
P¨£
 *
pP¨£
,

67 
SrcLi°
 *
pTabLi°
,

68 
Ex¥Li°
 *
pCh™ges
,

69 
Ex¥
 *
pWhîe
,

70 
⁄Eº‹


72 
i
, 
j
;

73 
TabÀ
 *
pTab
;

74 
addr
 = 0;

75 
WhîeInfo
 *
pWInfo
;

76 
Vdbe
 *
v
;

77 
Index
 *
pIdx
;

78 
nIdx
;

79 
nIdxTŸÆ
;

80 
iCur
;

81 
sqlôe3
 *
db
;

82 
Index
 **
≠Idx
 = 0;

83 *
aIdxU£d
 = 0;

84 *
aXRef
 = 0;

87 
chngRowid
;

88 
Ex¥
 *
pRowidEx¥
 = 0;

89 
›íAŒ
 = 0;

90 
AuthC⁄ãxt
 
sC⁄ãxt
;

91 
NameC⁄ãxt
 
sNC
;

92 
iDb
;

94 #i‚de‡
SQLITE_OMIT_TRIGGER


95 
isVõw
;

96 
åiggîs_exi°
 = 0;

99 
√wIdx
 = -1;

100 
ﬁdIdx
 = -1;

102 
sC⁄ãxt
.
pP¨£
 = 0;

103 if–
pP¨£
->
nEº
 || 
	`sqlôe3MÆlocFaûed
() ){

104 
upd©e_˛ónup
;

106 
db
 = 
pP¨£
->db;

107 
	`as£π
–
pTabLi°
->
nSrc
==1 );

111 
pTab
 = 
	`sqlôe3SrcLi°Lookup
(
pP¨£
, 
pTabLi°
);

112 if–
pTab
==0 ) 
upd©e_˛ónup
;

113 
iDb
 = 
	`sqlôe3SchemaToIndex
(
pP¨£
->
db
, 
pTab
->
pSchema
);

118 #i‚de‡
SQLITE_OMIT_TRIGGER


119 
åiggîs_exi°
 = 
	`sqlôe3TriggîsExi°
(
pP¨£
, 
pTab
, 
TK_UPDATE
, 
pCh™ges
);

120 
isVõw
 = 
pTab
->
pSñe˘
!=0;

122 
	#åiggîs_exi°
 0

	)

123 
	#isVõw
 0

	)

125 #ifde‡
SQLITE_OMIT_VIEW


126 #unde‡
isVõw


127 
	#isVõw
 0

	)

130 if–
	`sqlôe3IsRódO∆y
(
pP¨£
, 
pTab
, 
åiggîs_exi°
) ){

131 
upd©e_˛ónup
;

133 if–
isVõw
 ){

134 if–
	`sqlôe3VõwGëCﬁumnNames
(
pP¨£
, 
pTab
) ){

135 
upd©e_˛ónup
;

138 
aXRef
 = 
	`sqlôeMÆlocRaw
–(Ë* 
pTab
->
nCﬁ
 );

139 if–
aXRef
==0 ) 
upd©e_˛ónup
;

140 
i
=0; i<
pTab
->
nCﬁ
; i++Ë
aXRef
[i] = -1;

145 if–
åiggîs_exi°
 ){

146 
√wIdx
 = 
pP¨£
->
nTab
++;

147 
ﬁdIdx
 = 
pP¨£
->
nTab
++;

155 
pTabLi°
->
a
[0].
iCurs‹
 = 
iCur
 = 
pP¨£
->
nTab
++;

156 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
){

157 
pP¨£
->
nTab
++;

161 
	`mem£t
(&
sNC
, 0, (sNC));

162 
sNC
.
pP¨£
 =ÖParse;

163 
sNC
.
pSrcLi°
 = 
pTabLi°
;

171 
chngRowid
 = 0;

172 
i
=0; i<
pCh™ges
->
nEx¥
; i++){

173 if–
	`sqlôe3Ex¥ResﬁveNames
(&
sNC
, 
pCh™ges
->
a
[
i
].
pEx¥
) ){

174 
upd©e_˛ónup
;

176 
j
=0; j<
pTab
->
nCﬁ
; j++){

177 if–
	`sqlôe3SåICmp
(
pTab
->
aCﬁ
[
j
].
zName
, 
pCh™ges
->
a
[
i
].zName)==0 ){

178 if–
j
==
pTab
->
iPKey
 ){

179 
chngRowid
 = 1;

180 
pRowidEx¥
 = 
pCh™ges
->
a
[
i
].
pEx¥
;

182 
aXRef
[
j
] = 
i
;

186 if–
j
>=
pTab
->
nCﬁ
 ){

187 if–
	`sqlôe3IsRowid
(
pCh™ges
->
a
[
i
].
zName
) ){

188 
chngRowid
 = 1;

189 
pRowidEx¥
 = 
pCh™ges
->
a
[
i
].
pEx¥
;

191 
	`sqlôe3Eº‹Msg
(
pP¨£
, "nÿsuch cﬁumn: %s", 
pCh™ges
->
a
[
i
].
zName
);

192 
upd©e_˛ónup
;

195 #i‚de‡
SQLITE_OMIT_AUTHORIZATION


197 
rc
;

198 
rc
 = 
	`sqlôe3AuthCheck
(
pP¨£
, 
SQLITE_UPDATE
, 
pTab
->
zName
,

199 
pTab
->
aCﬁ
[
j
].
zName
, 
db
->
aDb
[
iDb
].zName);

200 if–
rc
==
SQLITE_DENY
 ){

201 
upd©e_˛ónup
;

202 }if–
rc
==
SQLITE_IGNORE
 ){

203 
aXRef
[
j
] = -1;

214 
nIdx
=
nIdxTŸÆ
=0, 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
,ÇIdxTotal++){

215 if–
chngRowid
 ){

216 
i
 = 0;

218 
i
=0; i<
pIdx
->
nCﬁumn
; i++){

219 if–
aXRef
[
pIdx
->
aiCﬁumn
[
i
]]>=0 ) ;

222 if–
i
<
pIdx
->
nCﬁumn
 ) 
nIdx
++;

224 if–
nIdxTŸÆ
>0 ){

225 
≠Idx
 = 
	`sqlôeMÆlocRaw
–(
Index
*Ë* 
nIdx
 + 
nIdxTŸÆ
 );

226 if–
≠Idx
==0 ) 
upd©e_˛ónup
;

227 
aIdxU£d
 = (*)&
≠Idx
[
nIdx
];

229 
nIdx
=
j
=0, 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
, j++){

230 if–
chngRowid
 ){

231 
i
 = 0;

233 
i
=0; i<
pIdx
->
nCﬁumn
; i++){

234 if–
aXRef
[
pIdx
->
aiCﬁumn
[
i
]]>=0 ) ;

237 if–
i
<
pIdx
->
nCﬁumn
 ){

238 
≠Idx
[
nIdx
++] = 
pIdx
;

239 
aIdxU£d
[
j
] = 1;

241 
aIdxU£d
[
j
] = 0;

248 if–
	`sqlôe3Ex¥ResﬁveNames
(&
sNC
, 
pWhîe
) ){

249 
upd©e_˛ónup
;

254 if–
isVõw
 ){

255 
	`sqlôe3AuthC⁄ãxtPush
(
pP¨£
, &
sC⁄ãxt
, 
pTab
->
zName
);

260 
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

261 if–
v
==0 ) 
upd©e_˛ónup
;

262 if–
pP¨£
->
√°ed
==0 ) 
	`sqlôe3VdbeCou¡Ch™ges
(
v
);

263 
	`sqlôe3BegöWrôeO≥øti⁄
(
pP¨£
, 1, 
iDb
);

268 if–
isVõw
 ){

269 
Sñe˘
 *
pVõw
;

270 
pVõw
 = 
	`sqlôe3Sñe˘Dup
(
pTab
->
pSñe˘
);

271 
	`sqlôe3Sñe˘
(
pP¨£
, 
pVõw
, 
SRT_VútuÆTab
, 
iCur
, 0, 0, 0, 0);

272 
	`sqlôe3Sñe˘Dñëe
(
pVõw
);

277 
pWInfo
 = 
	`sqlôe3WhîeBegö
(
pP¨£
, 
pTabLi°
, 
pWhîe
, 0);

278 if–
pWInfo
==0 ) 
upd©e_˛ónup
;

282 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Rowid
, 
iCur
, 0);

283 
	`sqlôe3VdbeAddOp
(
v
, 
OP_FifoWrôe
, 0, 0);

287 
	`sqlôe3WhîeEnd
(
pWInfo
);

291 if–
db
->
Êags
 & 
SQLITE_Cou¡Rows
 && !
pP¨£
->
åigSèck
 ){

292 
	`sqlôe3VdbeAddOp
(
v
, 
OP_I¡egî
, 0, 0);

295 if–
åiggîs_exi°
 ){

298 
	`sqlôe3VdbeAddOp
(
v
, 
OP_O≥nP£udo
, 
ﬁdIdx
, 0);

299 
	`sqlôe3VdbeAddOp
(
v
, 
OP_SëNumCﬁumns
, 
ﬁdIdx
, 
pTab
->
nCﬁ
);

300 
	`sqlôe3VdbeAddOp
(
v
, 
OP_O≥nP£udo
, 
√wIdx
, 0);

301 
	`sqlôe3VdbeAddOp
(
v
, 
OP_SëNumCﬁumns
, 
√wIdx
, 
pTab
->
nCﬁ
);

305 
addr
 = 
	`sqlôe3VdbeAddOp
(
v
, 
OP_FifoRód
, 0, 0);

307 if–!
isVõw
 ){

308 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Dup
, 0, 0);

309 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Dup
, 0, 0);

313 
	`sqlôe3O≥nTabÀ
(
pP¨£
, 
iCur
, 
iDb
, 
pTab
, 
OP_O≥nRód
);

315 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MoveGe
, 
iCur
, 0);

319 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Rowid
, 
iCur
, 0);

320 
	`sqlôe3VdbeAddOp
(
v
, 
OP_RowD©a
, 
iCur
, 0);

321 
	`sqlôe3VdbeAddOp
(
v
, 
OP_In£π
, 
ﬁdIdx
, 0);

325 if–
chngRowid
 ){

326 
	`sqlôe3Ex¥CodeAndCache
(
pP¨£
, 
pRowidEx¥
);

328 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Rowid
, 
iCur
, 0);

330 
i
=0; i<
pTab
->
nCﬁ
; i++){

331 if–
i
==
pTab
->
iPKey
 ){

332 
	`sqlôe3VdbeAddOp
(
v
, 
OP_NuŒ
, 0, 0);

335 
j
 = 
aXRef
[
i
];

336 if–
j
<0 ){

337 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Cﬁumn
, 
iCur
, 
i
);

338 
	`sqlôe3CﬁumnDeÁu…
(
v
, 
pTab
, 
i
);

340 
	`sqlôe3Ex¥CodeAndCache
(
pP¨£
, 
pCh™ges
->
a
[
j
].
pEx¥
);

343 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MakeRec‹d
, 
pTab
->
nCﬁ
, 0);

344 if–!
isVõw
 ){

345 
	`sqlôe3TabÀAfföôySå
(
v
, 
pTab
);

347 if–
pP¨£
->
nEº
 ) 
upd©e_˛ónup
;

348 
	`sqlôe3VdbeAddOp
(
v
, 
OP_In£π
, 
√wIdx
, 0);

349 if–!
isVõw
 ){

350 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Clo£
, 
iCur
, 0);

355 if–
	`sqlôe3CodeRowTriggî
(
pP¨£
, 
TK_UPDATE
, 
pCh™ges
, 
TRIGGER_BEFORE
, 
pTab
,

356 
√wIdx
, 
ﬁdIdx
, 
⁄Eº‹
, 
addr
) ){

357 
upd©e_˛ónup
;

361 if–!
isVõw
 ){

368 
	`sqlôe3O≥nTabÀ
(
pP¨£
, 
iCur
, 
iDb
, 
pTab
, 
OP_O≥nWrôe
);

369 if–
⁄Eº‹
==
OE_Rïœ˚
 ){

370 
›íAŒ
 = 1;

372 
›íAŒ
 = 0;

373 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
){

374 if–
pIdx
->
⁄Eº‹
==
OE_Rïœ˚
 ){

375 
›íAŒ
 = 1;

380 
i
=0, 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
, i++){

381 if–
›íAŒ
 || 
aIdxU£d
[
i
] ){

382 
KeyInfo
 *
pKey
 = 
	`sqlôe3IndexKeyöfo
(
pP¨£
, 
pIdx
);

383 
	`sqlôe3VdbeAddOp
(
v
, 
OP_I¡egî
, 
iDb
, 0);

384 
	`sqlôe3VdbeOp3
(
v
, 
OP_O≥nWrôe
, 
iCur
+
i
+1, 
pIdx
->
äum
,

385 (*)
pKey
, 
P3_KEYINFO_HANDOFF
);

386 
	`as£π
–
pP¨£
->
nTab
>
iCur
+
i
+1 );

396 if–!
åiggîs_exi°
 ){

397 
addr
 = 
	`sqlôe3VdbeAddOp
(
v
, 
OP_FifoRód
, 0, 0);

398 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Dup
, 0, 0);

400 
	`sqlôe3VdbeAddOp
(
v
, 
OP_NŸExi°s
, 
iCur
, 
addr
);

406 if–
chngRowid
 ){

407 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pRowidEx¥
);

408 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Mu°BeI¡
, 0, 0);

413 
i
=0; i<
pTab
->
nCﬁ
; i++){

414 if–
i
==
pTab
->
iPKey
 ){

415 
	`sqlôe3VdbeAddOp
(
v
, 
OP_NuŒ
, 0, 0);

418 
j
 = 
aXRef
[
i
];

419 if–
j
<0 ){

420 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Cﬁumn
, 
iCur
, 
i
);

421 
	`sqlôe3CﬁumnDeÁu…
(
v
, 
pTab
, 
i
);

423 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pCh™ges
->
a
[
j
].
pEx¥
);

429 
	`sqlôe3Gíî©eC⁄°øötChecks
(
pP¨£
, 
pTab
, 
iCur
, 
aIdxU£d
, 
chngRowid
, 1,

430 
⁄Eº‹
, 
addr
);

434 
	`sqlôe3Gíî©eRowIndexDñëe
(
db
, 
v
, 
pTab
, 
iCur
, 
aIdxU£d
);

438 if–
chngRowid
 ){

439 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Dñëe
, 
iCur
, 0);

444 
	`sqlôe3Com∂ëeIn£πi⁄
(
pP¨£
, 
pTab
, 
iCur
, 
aIdxU£d
, 
chngRowid
, 1, -1);

449 if–
db
->
Êags
 & 
SQLITE_Cou¡Rows
 && !
pP¨£
->
åigSèck
){

450 
	`sqlôe3VdbeAddOp
(
v
, 
OP_AddImm
, 1, 0);

456 if–
åiggîs_exi°
 ){

457 if–!
isVõw
 ){

458 
i
=0, 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
, i++){

459 if–
›íAŒ
 || 
aIdxU£d
[
i
] )

460 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Clo£
, 
iCur
+
i
+1, 0);

462 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Clo£
, 
iCur
, 0);

464 if–
	`sqlôe3CodeRowTriggî
(
pP¨£
, 
TK_UPDATE
, 
pCh™ges
, 
TRIGGER_AFTER
, 
pTab
,

465 
√wIdx
, 
ﬁdIdx
, 
⁄Eº‹
, 
addr
) ){

466 
upd©e_˛ónup
;

473 
	`sqlôe3VdbeAddOp
(
v
, 
OP_GŸo
, 0, 
addr
);

474 
	`sqlôe3VdbeJumpHîe
(
v
, 
addr
);

477 if–!
åiggîs_exi°
 ){

478 
i
=0, 
pIdx
=
pTab
->
pIndex
;ÖIdx;ÖIdxıIdx->
pNext
, i++){

479 if–
›íAŒ
 || 
aIdxU£d
[
i
] ){

480 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Clo£
, 
iCur
+
i
+1, 0);

483 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Clo£
, 
iCur
, 0);

485 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Clo£
, 
√wIdx
, 0);

486 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Clo£
, 
ﬁdIdx
, 0);

494 if–
db
->
Êags
 & 
SQLITE_Cou¡Rows
 && !
pP¨£
->
åigSèck
 &&ÖP¨£->
√°ed
==0 ){

495 
	`sqlôe3VdbeAddOp
(
v
, 
OP_CÆlback
, 1, 0);

496 
	`sqlôe3VdbeSëNumCﬁs
(
v
, 1);

497 
	`sqlôe3VdbeSëCﬁName
(
v
, 0, "row†upd©ed", 
P3_STATIC
);

500 
upd©e_˛ónup
:

501 
	`sqlôe3AuthC⁄ãxtP›
(&
sC⁄ãxt
);

502 
	`sqlôeFªe
(
≠Idx
);

503 
	`sqlôeFªe
(
aXRef
);

504 
	`sqlôe3SrcLi°Dñëe
(
pTabLi°
);

505 
	`sqlôe3Ex¥Li°Dñëe
(
pCh™ges
);

506 
	`sqlôe3Ex¥Dñëe
(
pWhîe
);

508 
	}
}

	@utf.c

61 
	~"sqlôeI¡.h
"

62 
	~<as£π.h
>

63 
	~"vdbeI¡.h
"

70 c⁄° 
u8
 
	gxåa_utf8_byãs
[256] = {

104 c⁄° 
	gxåa_utf8_bôs
[4] = {

111 
	#READ_UTF8
(
zIn
, 
c
) { \

112 
xåa
; \

113 
c
 = *(
zIn
)++; \

114 
xåa
 = 
xåa_utf8_byãs
[
c
]; \

115  
xåa
 ){ \

116 255: 
c
 = ()0xFFFD; ; \

117 3: 
c
 = (c<<6Ë+ *(
zIn
)++; \

118 2: 
c
 = (c<<6Ë+ *(
zIn
)++; \

119 1: 
c
 = (c<<6Ë+ *(
zIn
)++; \

120 
c
 -
xåa_utf8_bôs
[
xåa
]; \

122 }

	)

123 
	$sqlôe3RódUtf8
(c⁄° *
z
){

124 
c
;

125 
	`READ_UTF8
(
z
, 
c
);

126  
c
;

127 
	}
}

129 
	#SKIP_UTF8
(
zIn
) { \

130 
zIn
 +(
xåa_utf8_byãs
[*(
u8
 *)zIn] + 1); \

131 }

	)

133 
	#WRITE_UTF8
(
zOut
, 
c
) { \

134 if–
c
<0x00080 ){ \

135 *
zOut
++ = (
c
&0xFF); \

137 if–
c
<0x00800 ){ \

138 *
zOut
++ = 0xC0 + ((
c
>>6)&0x1F); \

139 *
zOut
++ = 0x80 + (
c
 & 0x3F); \

141 if–
c
<0x10000 ){ \

142 *
zOut
++ = 0xE0 + ((
c
>>12)&0x0F); \

143 *
zOut
++ = 0x80 + ((
c
>>6) & 0x3F); \

144 *
zOut
++ = 0x80 + (
c
 & 0x3F); \

146 *
zOut
++ = 0xF0 + ((
c
>>18) & 0x07); \

147 *
zOut
++ = 0x80 + ((
c
>>12) & 0x3F); \

148 *
zOut
++ = 0x80 + ((
c
>>6) & 0x3F); \

149 *
zOut
++ = 0x80 + (
c
 & 0x3F); \

151 }

	)

153 
	#WRITE_UTF16LE
(
zOut
, 
c
) { \

154 if–
c
<=0xFFFF ){ \

155 *
zOut
++ = (
c
&0x00FF); \

156 *
zOut
++ = ((
c
>>8)&0x00FF); \

158 *
zOut
++ = (((
c
>>10)&0x003F) + (((c-0x10000)>>10)&0x00C0)); \

159 *
zOut
++ = (0x00D8 + (((
c
-0x10000)>>18)&0x03)); \

160 *
zOut
++ = (
c
&0x00FF); \

161 *
zOut
++ = (0x00DC + ((
c
>>8)&0x03)); \

163 }

	)

165 
	#WRITE_UTF16BE
(
zOut
, 
c
) { \

166 if–
c
<=0xFFFF ){ \

167 *
zOut
++ = ((
c
>>8)&0x00FF); \

168 *
zOut
++ = (
c
&0x00FF); \

170 *
zOut
++ = (0x00D8 + (((
c
-0x10000)>>18)&0x03)); \

171 *
zOut
++ = (((
c
>>10)&0x003F) + (((c-0x10000)>>10)&0x00C0)); \

172 *
zOut
++ = (0x00DC + ((
c
>>8)&0x03)); \

173 *
zOut
++ = (
c
&0x00FF); \

175 }

	)

177 
	#READ_UTF16LE
(
zIn
, 
c
){ \

178 
c
 = (*
zIn
++); \

179 
c
 +((*
zIn
++)<<8); \

180 if–
c
>=0xD800 && c<=0xE000 ){ \

181 
c2
 = (*
zIn
++); \

182 
c2
 +((*
zIn
++)<<8); \

183 
c
 = (
c2
&0x03FF) + ((c&0x003F)<<10) + (((c&0x03C0)+0x0040)<<10); \

185 }

	)

187 
	#READ_UTF16BE
(
zIn
, 
c
){ \

188 
c
 = ((*
zIn
++)<<8); \

189 
c
 +(*
zIn
++); \

190 if–
c
>=0xD800 && c<=0xE000 ){ \

191 
c2
 = ((*
zIn
++)<<8); \

192 
c2
 +(*
zIn
++); \

193 
c
 = (
c2
&0x03FF) + ((c&0x003F)<<10) + (((c&0x03C0)+0x0040)<<10); \

195 }

	)

197 
	#SKIP_UTF16BE
(
zIn
){ \

198 if–*
zIn
>=0xD8 && (*zIn<0xE0 || (*zIn==0xE0 && *(zIn+1)==0x00)) ){ \

199 
zIn
 += 4; \

201 
zIn
 += 2; \

203 }

	)

204 
	#SKIP_UTF16LE
(
zIn
){ \

205 
zIn
++; \

206 if–*
zIn
>=0xD8 && (*zIn<0xE0 || (*zIn==0xE0 && *(zIn-1)==0x00)) ){ \

207 
zIn
 += 3; \

209 
zIn
 += 1; \

211 }

	)

213 
	#RSKIP_UTF16LE
(
zIn
){ \

214 if–*
zIn
>=0xD8 && (*zIn<0xE0 || (*zIn==0xE0 && *(zIn-1)==0x00)) ){ \

215 
zIn
 -= 4; \

217 
zIn
 -= 2; \

219 }

	)

220 
	#RSKIP_UTF16BE
(
zIn
){ \

221 
zIn
--; \

222 if–*
zIn
>=0xD8 && (*zIn<0xE0 || (*zIn==0xE0 && *(zIn+1)==0x00)) ){ \

223 
zIn
 -= 3; \

225 
zIn
 -= 1; \

227 }

	)

235 #i‚de‡
SQLITE_OMIT_UTF16


241 
	$sqlôe3VdbeMemTøn¶©e
(
Mem
 *
pMem
, 
u8
 
desúedEnc
){

242 
zSh‹t
[
NBFS
];

243 
Àn
;

244 *
zOut
;

245 *
zIn
;

246 *
zTîm
;

247 *
z
;

248 
c
;

250 
	`as£π
–
pMem
->
Êags
&
MEM_Så
 );

251 
	`as£π
–
pMem
->
íc
!=
desúedEnc
 );

252 
	`as£π
–
pMem
->
íc
!=0 );

253 
	`as£π
–
pMem
->
n
>=0 );

255 #i‡
	`deföed
(
TRANSLATE_TRACE
Ë&& deföed(
SQLITE_DEBUG
)

257 
zBuf
[100];

258 
	`sqlôe3VdbeMemPªâyPröt
(
pMem
, 
zBuf
, 100);

259 
	`Ârötf
(
°dîr
, "INPUT: %s\n", 
zBuf
);

267 if–
pMem
->
íc
!=
SQLITE_UTF8
 && 
desúedEnc
!=SQLITE_UTF8 ){

268 
u8
 
ãmp
;

269 
rc
;

270 
rc
 = 
	`sqlôe3VdbeMemMakeWrôóbÀ
(
pMem
);

271 if–
rc
!=
SQLITE_OK
 ){

272 
	`as£π
–
rc
==
SQLITE_NOMEM
 );

273  
SQLITE_NOMEM
;

275 
zIn
 = (
u8
*)
pMem
->
z
;

276 
zTîm
 = &
zIn
[
pMem
->
n
];

277  
zIn
<
zTîm
 ){

278 
ãmp
 = *
zIn
;

279 *
zIn
 = *(zIn+1);

280 
zIn
++;

281 *
zIn
++ = 
ãmp
;

283 
pMem
->
íc
 = 
desúedEnc
;

284 
å™¶©e_out
;

288 if–
desúedEnc
==
SQLITE_UTF8
 ){

294 
Àn
 = (
pMem
->
n
/2) * 3 + 1;

301 
Àn
 = 
pMem
->
n
 * 2 + 2;

311 
zIn
 = (
u8
*)
pMem
->
z
;

312 
zTîm
 = &
zIn
[
pMem
->
n
];

313 if–
Àn
>
NBFS
 ){

314 
zOut
 = 
	`sqlôeMÆlocRaw
(
Àn
);

315 if–!
zOut
 )  
SQLITE_NOMEM
;

317 
zOut
 = 
zSh‹t
;

319 
z
 = 
zOut
;

321 if–
pMem
->
íc
==
SQLITE_UTF8
 ){

322 if–
desúedEnc
==
SQLITE_UTF16LE
 ){

324  
zIn
<
zTîm
 ){

325 
	`READ_UTF8
(
zIn
, 
c
);

326 
	`WRITE_UTF16LE
(
z
, 
c
);

329 
	`as£π
–
desúedEnc
==
SQLITE_UTF16BE
 );

331  
zIn
<
zTîm
 ){

332 
	`READ_UTF8
(
zIn
, 
c
);

333 
	`WRITE_UTF16BE
(
z
, 
c
);

336 
pMem
->
n
 = 
z
 - 
zOut
;

337 *
z
++ = 0;

339 
	`as£π
–
desúedEnc
==
SQLITE_UTF8
 );

340 if–
pMem
->
íc
==
SQLITE_UTF16LE
 ){

342  
zIn
<
zTîm
 ){

343 
	`READ_UTF16LE
(
zIn
, 
c
);

344 
	`WRITE_UTF8
(
z
, 
c
);

348  
zIn
<
zTîm
 ){

349 
	`READ_UTF16BE
(
zIn
, 
c
);

350 
	`WRITE_UTF8
(
z
, 
c
);

353 
pMem
->
n
 = 
z
 - 
zOut
;

355 *
z
 = 0;

356 
	`as£π
–(
pMem
->
n
+(
desúedEnc
==
SQLITE_UTF8
?1:2))<=
Àn
 );

358 
	`sqlôe3VdbeMemRñó£
(
pMem
);

359 
pMem
->
Êags
 &~(
MEM_Sètic
|
MEM_Dyn
|
MEM_Ephem
|
MEM_Sh‹t
);

360 
pMem
->
íc
 = 
desúedEnc
;

361 if–
zOut
==
zSh‹t
 ){

362 
	`mem˝y
(
pMem
->
zSh‹t
, 
zOut
, 
Àn
);

363 
zOut
 = (
u8
*)
pMem
->
zSh‹t
;

364 
pMem
->
Êags
 |(
MEM_Tîm
|
MEM_Sh‹t
);

366 
pMem
->
Êags
 |(
MEM_Tîm
|
MEM_Dyn
);

368 
pMem
->
z
 = (*)
zOut
;

370 
å™¶©e_out
:

371 #i‡
	`deföed
(
TRANSLATE_TRACE
Ë&& deföed(
SQLITE_DEBUG
)

373 
zBuf
[100];

374 
	`sqlôe3VdbeMemPªâyPröt
(
pMem
, 
zBuf
, 100);

375 
	`Ârötf
(
°dîr
, "OUTPUT: %s\n", 
zBuf
);

378  
SQLITE_OK
;

379 
	}
}

390 
	$sqlôe3VdbeMemH™dÀBom
(
Mem
 *
pMem
){

391 
rc
 = 
SQLITE_OK
;

392 
u8
 
bom
 = 0;

394 if–
pMem
->
n
<0 ||ÖMem->n>1 ){

395 
u8
 
b1
 = *(u8 *)
pMem
->
z
;

396 
u8
 
b2
 = *(((u8 *)
pMem
->
z
) + 1);

397 if–
b1
==0xFE && 
b2
==0xFF ){

398 
bom
 = 
SQLITE_UTF16BE
;

400 if–
b1
==0xFF && 
b2
==0xFE ){

401 
bom
 = 
SQLITE_UTF16LE
;

405 if–
bom
 ){

411 
	`as£π
–!(
pMem
->
Êags
&
MEM_Sh‹t
) );

412 
	`as£π
–!(
pMem
->
Êags
&
MEM_Dyn
Ë||ÖMem->
xDñ
 );

413 if–
pMem
->
Êags
 & 
MEM_Dyn
 ){

414 (*
xDñ
)(*Ë
pMem
->xDel;

415 *
z
 = 
pMem
->z;

416 
pMem
->
z
 = 0;

417 
pMem
->
xDñ
 = 0;

418 
rc
 = 
	`sqlôe3VdbeMemSëSå
(
pMem
, &
z
[2],ÖMem->
n
-2, 
bom
, 
SQLITE_TRANSIENT
);

419 
	`xDñ
(
z
);

421 
rc
 = 
	`sqlôe3VdbeMemSëSå
(
pMem
, &pMem->
z
[2],ÖMem->
n
-2, 
bom
,

422 
SQLITE_TRANSIENT
);

425  
rc
;

426 
	}
}

436 
	$sqlôe3utf8Ch¨Lí
(c⁄° *
z
, 
nByã
){

437 
r
 = 0;

438 c⁄° *
zTîm
;

439 if–
nByã
>=0 ){

440 
zTîm
 = &
z
[
nByã
];

442 
zTîm
 = (const *)(-1);

444 
	`as£π
–
z
<=
zTîm
 );

445  *
z
!=0 && z<
zTîm
 ){

446 
	`SKIP_UTF8
(
z
);

447 
r
++;

449  
r
;

450 
	}
}

452 #i‚de‡
SQLITE_OMIT_UTF16


460 *
	$sqlôe3utf16to8
(c⁄° *
z
, 
nByã
){

461 
Mem
 
m
;

462 
	`mem£t
(&
m
, 0, (m));

463 
	`sqlôe3VdbeMemSëSå
(&
m
, 
z
, 
nByã
, 
SQLITE_UTF16NATIVE
, 
SQLITE_STATIC
);

464 
	`sqlôe3VdbeCh™geEncodög
(&
m
, 
SQLITE_UTF8
);

465 
	`as£π
–
m
.
Êags
 & 
MEM_Tîm
 );

466 
	`as£π
–
m
.
Êags
 & 
MEM_Så
 );

467  (
m
.
Êags
 & 
MEM_Dyn
)!=0 ? m.
z
 : 
	`sqlôeSåDup
(m.z);

468 
	}
}

477 
	$sqlôe3utf16ByãLí
(c⁄° *
zIn
, 
nCh¨
){

478 
c
 = 1;

479 c⁄° *
z
 = 
zIn
;

480 
n
 = 0;

481 if–
SQLITE_UTF16NATIVE
==
SQLITE_UTF16BE
 ){

491  
c
 && ((
nCh¨
<0Ë|| 
n
<nChar) ){

492 
	`READ_UTF16BE
(
z
, 
c
);

493 
n
++;

496  
c
 && ((
nCh¨
<0Ë|| 
n
<nChar) ){

497 
	`READ_UTF16LE
(
z
, 
c
);

498 
n
++;

501  (
z
-(c⁄° *)
zIn
)-((
c
==0)?2:0);

502 
	}
}

507 
	$sqlôe3utf16Sub°r
(

508 
sqlôe3_c⁄ãxt
 *
c⁄ãxt
,

509 
¨gc
,

510 
sqlôe3_vÆue
 **
¨gv


512 
y
, 
z
;

513 c⁄° *
zSå
;

514 c⁄° *
zSåEnd
;

515 c⁄° *
zSèπ
;

516 c⁄° *
zEnd
;

517 
i
;

519 
zSå
 = (c⁄° *)
	`sqlôe3_vÆue_ãxt16
(
¨gv
[0]);

520 
zSåEnd
 = &
zSå
[
	`sqlôe3_vÆue_byãs16
(
¨gv
[0])];

521 
y
 = 
	`sqlôe3_vÆue_öt
(
¨gv
[1]);

522 
z
 = 
	`sqlôe3_vÆue_öt
(
¨gv
[2]);

524 if–
y
>0 ){

525 
y
 = y-1;

526 
zSèπ
 = 
zSå
;

527 if–
SQLITE_UTF16BE
==
SQLITE_UTF16NATIVE
 ){

528 
i
=0; i<
y
 && 
zSèπ
<
zSåEnd
; i++Ë
	`SKIP_UTF16BE
(zStart);

530 
i
=0; i<
y
 && 
zSèπ
<
zSåEnd
; i++Ë
	`SKIP_UTF16LE
(zStart);

533 
zSèπ
 = 
zSåEnd
;

534 if–
SQLITE_UTF16BE
==
SQLITE_UTF16NATIVE
 ){

535 
i
=
y
; i<0 && 
zSèπ
>
zSå
; i++Ë
	`RSKIP_UTF16BE
(zStart);

537 
i
=
y
; i<0 && 
zSèπ
>
zSå
; i++Ë
	`RSKIP_UTF16LE
(zStart);

539 ; 
i
<0; i++Ë
z
 -= 1;

542 
zEnd
 = 
zSèπ
;

543 if–
SQLITE_UTF16BE
==
SQLITE_UTF16NATIVE
 ){

544 
i
=0; i<
z
 && 
zEnd
<
zSåEnd
; i++Ë
	`SKIP_UTF16BE
(zEnd);

546 
i
=0; i<
z
 && 
zEnd
<
zSåEnd
; i++Ë
	`SKIP_UTF16LE
(zEnd);

549 
	`sqlôe3_ªsu…_ãxt16
(
c⁄ãxt
, 
zSèπ
, 
zEnd
-zSèπ, 
SQLITE_TRANSIENT
);

550 
	}
}

552 #i‡
deföed
(
SQLITE_TEST
)

558 
	$sqlôe3utfSñfTe°
(){

559 
i
;

560 
zBuf
[20];

561 *
z
;

562 
n
;

563 
c
;

565 
i
=0; i<0x00110000; i++){

566 
z
 = 
zBuf
;

567 
	`WRITE_UTF8
(
z
, 
i
);

568 
n
 = 
z
-
zBuf
;

569 
z
 = 
zBuf
;

570 
	`READ_UTF8
(
z
, 
c
);

571 
	`as£π
–
c
==
i
 );

572 
	`as£π
–(
z
-
zBuf
)==
n
 );

574 
i
=0; i<0x00110000; i++){

575 if–
i
>=0xD800 && i<=0xE000 ) ;

576 
z
 = 
zBuf
;

577 
	`WRITE_UTF16LE
(
z
, 
i
);

578 
n
 = 
z
-
zBuf
;

579 
z
 = 
zBuf
;

580 
	`READ_UTF16LE
(
z
, 
c
);

581 
	`as£π
–
c
==
i
 );

582 
	`as£π
–(
z
-
zBuf
)==
n
 );

584 
i
=0; i<0x00110000; i++){

585 if–
i
>=0xD800 && i<=0xE000 ) ;

586 
z
 = 
zBuf
;

587 
	`WRITE_UTF16BE
(
z
, 
i
);

588 
n
 = 
z
-
zBuf
;

589 
z
 = 
zBuf
;

590 
	`READ_UTF16BE
(
z
, 
c
);

591 
	`as£π
–
c
==
i
 );

592 
	`as£π
–(
z
-
zBuf
)==
n
 );

594 
	}
}

	@util.c

19 
	~"sqlôeI¡.h
"

20 
	~"os.h
"

21 
	~<°d¨g.h
>

22 
	~<˘y≥.h
>

67 
	#MAX
(
x
,
y
Ë((x)>(y)?(x):(y))

	)

69 #i‡
deföed
(
SQLITE_ENABLE_MEMORY_MANAGEMENT
Ë&& !deföed(
SQLITE_OMIT_DISKIO
)

74 
	$sqlôe3_so·_hóp_limô
(
n
){

75 
ThªadD©a
 *
pTd
 = 
	`sqlôe3ThªadD©a
();

76 if–
pTd
 ){

77 
pTd
->
nSo·HópLimô
 = 
n
;

79 
	`sqlôe3Rñó£ThªadD©a
();

80 
	}
}

85 
	$sqlôe3_ªÀa£_mem‹y
(
n
){

86  
	`sqlôe3∑gî_ªÀa£_mem‹y
(
n
);

87 
	}
}

94 
	#sqlôe3_ªÀa£_mem‹y
(
x
Ë0

	)

97 #ifde‡
SQLITE_MEMDEBUG


113 #i‡
deföed
(
__GLIBC__
Ë&& 
SQLITE_MEMDEBUG
>2

114 
backåa˚
(**, );

115 
	#TESTALLOC_STACKSIZE
 128

	)

116 
	#TESTALLOC_STACKFRAMES
 ((
TESTALLOC_STACKSIZE
-8)/(*))

	)

118 
	#backåa˚
(
x
, 
y
)

	)

119 
	#TESTALLOC_STACKSIZE
 0

	)

120 
	#TESTALLOC_STACKFRAMES
 0

	)

128 #i‚de‡
TESTALLOC_NGUARD


129 
	#TESTALLOC_NGUARD
 2

	)

135 
	#TESTALLOC_FILESIZE
 64

	)

142 
	#TESTALLOC_USERSIZE
 64

	)

143 c⁄° *
	gsqlôe3_mÆloc_id
 = 0;

158 
	#TESTALLOC_OFFSET_GUARD1
(
p
Ë((*Ë* 2)

	)

159 
	#TESTALLOC_OFFSET_DATA
(
p
) ( \

160 
	`TESTALLOC_OFFSET_GUARD1
(
p
Ë+ (
u32
Ë* 
TESTALLOC_NGUARD
 \

161 )

	)

162 
	#TESTALLOC_OFFSET_GUARD2
(
p
) ( \

163 
	`TESTALLOC_OFFSET_DATA
(
p
Ë+ 
	`sqlôe3OsAŒoˇti⁄Size
’Ë- 
TESTALLOC_OVERHEAD
 \

164 )

	)

165 
	#TESTALLOC_OFFSET_LINENUMBER
(
p
) ( \

166 
	`TESTALLOC_OFFSET_GUARD2
(
p
Ë+ (
u32
Ë* 
TESTALLOC_NGUARD
 \

167 )

	)

168 
	#TESTALLOC_OFFSET_FILENAME
(
p
) ( \

169 
	`TESTALLOC_OFFSET_LINENUMBER
(
p
Ë+ (
u32
) \

170 )

	)

171 
	#TESTALLOC_OFFSET_USER
(
p
) ( \

172 
	`TESTALLOC_OFFSET_FILENAME
(
p
Ë+ 
TESTALLOC_FILESIZE
 \

173 )

	)

174 
	#TESTALLOC_OFFSET_STACK
(
p
) ( \

175 
	`TESTALLOC_OFFSET_USER
(
p
Ë+ 
TESTALLOC_USERSIZE
 + 8 - \

176 (
	`TESTALLOC_OFFSET_USER
(
p
) % 8) \

177 )

	)

179 
	#TESTALLOC_OVERHEAD
 ( \

181 
TESTALLOC_NGUARD
*(
u32
)*2 + \

182 (
u32
Ë+ 
TESTALLOC_FILESIZE
 + \

183 
TESTALLOC_USERSIZE
 + \

184 
TESTALLOC_STACKSIZE
 \

185 )

	)

195 
	gsqlôe3_nMÆloc
;

196 
	gsqlôe3_nFªe
;

197 
	gsqlôe3_memU£d
;

198 
	gsqlôe3_memMax
;

199 
	gsqlôe3_iMÆlocFaû
;

200 
	gsqlôe3_iMÆlocRe£t
 = -1;

202 *
	gsqlôe3_pFú°
 = 0;

203 
	gsqlôe3_nMaxAŒoc
 = 0;

204 
	gsqlôe3_mÆlocDißŒowed
 = 0;

205 
	gsqlôe3_isFaû
 = 0;

206 c⁄° *
	gsqlôe3_zFûe
 = 0;

207 
	gsqlôe3_iLöe
 = 0;

213 
	$sqlôe3Te°MÆlocFaû
(){

214 if–
sqlôe3_isFaû
 ){

217 if–
sqlôe3_iMÆlocFaû
>=0 ){

218 
sqlôe3_iMÆlocFaû
--;

219 if–
sqlôe3_iMÆlocFaû
==0 ){

220 
sqlôe3_iMÆlocFaû
 = 
sqlôe3_iMÆlocRe£t
;

221 
sqlôe3_isFaû
 = 1;

226 
	}
}

233 
	$checkGu¨ds
(
u32
 *
p
)

235 
i
;

236 *
zAŒoc
 = (*)
p
;

237 *
z
;

240 
z
 = &
zAŒoc
[
	`TESTALLOC_OFFSET_GUARD1
(
p
)];

241 
i
=0; i<
TESTALLOC_NGUARD
; i++){

242 
	`as£π
(((
u32
 *)
z
)[
i
]==0xdead1122);

246 
z
 = &
zAŒoc
[
	`TESTALLOC_OFFSET_GUARD2
(
p
)];

247 
i
=0; i<
TESTALLOC_NGUARD
; i++){

248 
u32
 
gu¨d
 = 0;

249 
	`mem˝y
(&
gu¨d
, &
z
[
i
*(
u32
)], (u32));

250 
	`as£π
(
gu¨d
==0xdead3344);

252 
	}
}

259 
	$≠∂yGu¨ds
(
u32
 *
p
)

261 
i
;

262 *
z
;

263 *
zAŒoc
 = (*)
p
;

266 
z
 = &
zAŒoc
[
	`TESTALLOC_OFFSET_GUARD1
(
p
)];

267 
i
=0; i<
TESTALLOC_NGUARD
; i++){

268 ((
u32
 *)
z
)[
i
] = 0xdead1122;

272 
z
 = &
zAŒoc
[
	`TESTALLOC_OFFSET_GUARD2
(
p
)];

273 
i
=0; i<
TESTALLOC_NGUARD
; i++){

274 c⁄° 
gu¨d
 = 0xdead3344;

275 
	`mem˝y
(&
z
[
i
*(
u32
)], &
gu¨d
, (u32));

279 
z
 = &((*)z)[
TESTALLOC_NGUARD
*(
u32
)];

280 
z
 = &
zAŒoc
[
	`TESTALLOC_OFFSET_LINENUMBER
(
p
)];

281 
	`mem˝y
(
z
, &
sqlôe3_iLöe
, (
u32
));

284 
z
 = &
zAŒoc
[
	`TESTALLOC_OFFSET_FILENAME
(
p
)];

285 
	`°∫˝y
(
z
, 
sqlôe3_zFûe
, 
TESTALLOC_FILESIZE
);

286 
z
[
TESTALLOC_FILESIZE
 - 1] = '\0';

289 
z
 = &
zAŒoc
[
	`TESTALLOC_OFFSET_USER
(
p
)];

290 
z
[0] = 0;

291 if–
sqlôe3_mÆloc_id
 ){

292 
	`°∫˝y
(
z
, 
sqlôe3_mÆloc_id
, 
TESTALLOC_USERSIZE
);

293 
z
[
TESTALLOC_USERSIZE
-1] = 0;

297 
z
 = &
zAŒoc
[
	`TESTALLOC_OFFSET_STACK
(
p
)];

298 
	`backåa˚
((**)
z
, 
TESTALLOC_STACKFRAMES
);

301 
	`checkGu¨ds
(
p
);

302 
	}
}

308 *
	$gëOsPoöãr
(*
p
)

310 *
z
 = (*)
p
;

311  (*)(&
z
[-1 * 
	`TESTALLOC_OFFSET_DATA
(
p
)]);

312 
	}
}

315 #i‡
SQLITE_MEMDEBUG
>1

320 
	$lökAŒoc
(*
p
){

321 **
µ
 = (**)
p
;

322 
µ
[0] = 0;

323 
µ
[1] = 
sqlôe3_pFú°
;

324 if–
sqlôe3_pFú°
 ){

325 ((**)
sqlôe3_pFú°
)[0] = 
p
;

327 
sqlôe3_pFú°
 = 
p
;

328 
	}
}

334 
	$u∆ökAŒoc
(*
p
)

336 **
µ
 = (**)
p
;

337 if–
p
==
sqlôe3_pFú°
 ){

338 
	`as£π
(!
µ
[0]);

339 
	`as£π
(!
µ
[1] || ((**)’p[1]))[0]==
p
);

340 
sqlôe3_pFú°
 = 
µ
[1];

341 if–
sqlôe3_pFú°
 ){

342 ((**)
sqlôe3_pFú°
)[0] = 0;

345 **
µªv
 = 
µ
[0];

346 **
≤ext
 = 
µ
[1];

347 
	`as£π
(
µªv
);

348 
	`as£π
(
µªv
[1]==
p
);

349 
µªv
[1] = (*)
≤ext
;

350 if–
≤ext
 ){

351 
	`as£π
(
≤ext
[0]==
p
);

352 
≤ext
[0] = (*)
µªv
;

355 
	}
}

362 
	$ªlökAŒoc
(*
p
)

364 **
µ
 = (**)
p
;

365 if–
µ
[0] ){

366 ((**)(
µ
[0]))[1] = 
p
;

368 
sqlôe3_pFú°
 = 
p
;

370 if–
µ
[1] ){

371 ((**)(
µ
[1]))[0] = 
p
;

373 
	}
}

375 
	#lökAŒoc
(
x
)

	)

376 
	#ªlökAŒoc
(
x
)

	)

377 
	#u∆ökAŒoc
(
x
)

	)

395 #i‡
deföed
(
TCLSH
Ë&& deföed(
SQLITE_DEBUG
Ë&& 
SQLITE_MEMDEBUG
>1

396 
	~<t˛.h
>

397 
	$sqlôe3Out°™dögMÆlocs
(
T˛_I¡îp
 *
öãΩ
){

398 *
p
;

399 
T˛_Obj
 *
pRes
 = 
	`T˛_NewObj
();

400 
	`T˛_In¸RefCou¡
(
pRes
);

403 
p
=
sqlôe3_pFú°
;Ö;Ö=((**)p)[1]){

404 
T˛_Obj
 *
pE¡ry
 = 
	`T˛_NewObj
();

405 
T˛_Obj
 *
pSèck
 = 
	`T˛_NewObj
();

406 *
z
;

407 
u32
 
iLöe
;

408 
nByãs
 = 
	`sqlôe3OsAŒoˇti⁄Size
(
p
Ë- 
TESTALLOC_OVERHEAD
;

409 *
zAŒoc
 = (*)
p
;

410 
i
;

412 
	`T˛_Li°ObjAµídEÀmít
(0, 
pE¡ry
, 
	`T˛_NewI¡Obj
(
nByãs
));

414 
z
 = &
zAŒoc
[
	`TESTALLOC_OFFSET_FILENAME
(
p
)];

415 
	`T˛_Li°ObjAµídEÀmít
(0, 
pE¡ry
, 
	`T˛_NewSåögObj
(
z
, -1));

417 
z
 = &
zAŒoc
[
	`TESTALLOC_OFFSET_LINENUMBER
(
p
)];

418 
	`mem˝y
(&
iLöe
, 
z
, (
u32
));

419 
	`T˛_Li°ObjAµídEÀmít
(0, 
pE¡ry
, 
	`T˛_NewI¡Obj
(
iLöe
));

421 
z
 = &
zAŒoc
[
	`TESTALLOC_OFFSET_USER
(
p
)];

422 
	`T˛_Li°ObjAµídEÀmít
(0, 
pE¡ry
, 
	`T˛_NewSåögObj
(
z
, -1));

424 
z
 = &
zAŒoc
[
	`TESTALLOC_OFFSET_STACK
(
p
)];

425 
i
=0; i<
TESTALLOC_STACKFRAMES
; i++){

426 
zHex
[128];

427 
	`•rötf
(
zHex
, "%p", ((**)
z
)[
i
]);

428 
	`T˛_Li°ObjAµídEÀmít
(0, 
pSèck
, 
	`T˛_NewSåögObj
(
zHex
, -1));

431 
	`T˛_Li°ObjAµídEÀmít
(0, 
pE¡ry
, 
pSèck
);

432 
	`T˛_Li°ObjAµídEÀmít
(0, 
pRes
, 
pE¡ry
);

435 
	`T˛_Re£tResu…
(
öãΩ
);

436 
	`T˛_SëObjResu…
(
öãΩ
, 
pRes
);

437 
	`T˛_De¸RefCou¡
(
pRes
);

438  
TCL_OK
;

439 
	}
}

445 * 
	$OSMALLOC
(
n
){

446 #ifde‡
SQLITE_ENABLE_MEMORY_MANAGEMENT


447 
sqlôe3_nMaxAŒoc
 =

448 
	`MAX
(
sqlôe3_nMaxAŒoc
, 
	`sqlôe3ThªadD©aRódO∆y
()->
nAŒoc
);

450 
	`as£π
–!
sqlôe3_mÆlocDißŒowed
 );

451 if–!
	`sqlôe3Te°MÆlocFaû
() ){

452 
u32
 *
p
;

453 
p
 = (
u32
 *)
	`sqlôe3OsMÆloc
(
n
 + 
TESTALLOC_OVERHEAD
);

454 
	`as£π
(
p
);

455 
sqlôe3_nMÆloc
++;

456 
	`≠∂yGu¨ds
(
p
);

457 
	`lökAŒoc
(
p
);

458  (*)(&
p
[
TESTALLOC_NGUARD
 + 2*(*)/(
u32
)]);

461 
	}
}

463 
	$OSSIZEOF
(*
p
){

464 if–
p
 ){

465 
u32
 *
pOs
 = (u32 *)
	`gëOsPoöãr
(
p
);

466  
	`sqlôe3OsAŒoˇti⁄Size
(
pOs
Ë- 
TESTALLOC_OVERHEAD
;

469 
	}
}

475 
	$OSFREE
(*
pFªe
){

476 
u32
 *
p
 = (u32 *)
	`gëOsPoöãr
(
pFªe
);

477 
	`checkGu¨ds
(
p
);

478 
	`u∆ökAŒoc
(
p
);

479 
	`mem£t
(
pFªe
, 0x55, 
	`OSSIZEOF
(pFree));

480 
	`sqlôe3OsFªe
(
p
);

481 
sqlôe3_nFªe
++;

482 
	}
}

487 * 
	$OSREALLOC
(*
pRóŒoc
, 
n
){

488 #ifde‡
SQLITE_ENABLE_MEMORY_MANAGEMENT


489 
sqlôe3_nMaxAŒoc
 =

490 
	`MAX
(
sqlôe3_nMaxAŒoc
, 
	`sqlôe3ThªadD©aRódO∆y
()->
nAŒoc
);

492 
	`as£π
–!
sqlôe3_mÆlocDißŒowed
 );

493 if–!
	`sqlôe3Te°MÆlocFaû
() ){

494 
u32
 *
p
 = (u32 *)
	`gëOsPoöãr
(
pRóŒoc
);

495 
	`checkGu¨ds
(
p
);

496 
p
 = 
	`sqlôe3OsRóŒoc
’, 
n
 + 
TESTALLOC_OVERHEAD
);

497 
	`≠∂yGu¨ds
(
p
);

498 
	`ªlökAŒoc
(
p
);

499  (*)(&
p
[
TESTALLOC_NGUARD
 + 2*(*)/(
u32
)]);

502 
	}
}

504 
	$OSMALLOC_FAILED
(){

505 
sqlôe3_isFaû
 = 0;

506 
	}
}

512 
	#OSMALLOC
(
x
Ë
	`sqlôe3OsMÆloc
(x)

	)

513 
	#OSREALLOC
(
x
,
y
Ë
	`sqlôe3OsRóŒoc
(x,y)

	)

514 
	#OSFREE
(
x
Ë
	`sqlôe3OsFªe
(x)

	)

515 
	#OSSIZEOF
(
x
Ë
	`sqlôe3OsAŒoˇti⁄Size
(x)

	)

516 
	#OSMALLOC_FAILED
()

	)

537 #ifde‡
SQLITE_ENABLE_MEMORY_MANAGEMENT


538 
	$íf‹˚So·Limô
(
n
){

539 
ThªadD©a
 *
pTsd
 = 
	`sqlôe3ThªadD©a
();

540 if–
pTsd
==0 ){

543 
	`as£π
–
pTsd
->
nAŒoc
>=0 );

544 if–
n
>0 && 
pTsd
->
nSo·HópLimô
>0 ){

545  
pTsd
->
nAŒoc
+
n
>pTsd->
nSo·HópLimô
 && 
	`sqlôe3_ªÀa£_mem‹y
(n) );

548 
	}
}

550 
	#íf‹˚So·Limô
(
X
Ë1

	)

561 #ifde‡
SQLITE_ENABLE_MEMORY_MANAGEMENT


562 
	$upd©eMem‹yU£dCou¡
(
n
){

563 
ThªadD©a
 *
pTsd
 = 
	`sqlôe3ThªadD©a
();

564 if–
pTsd
 ){

565 
pTsd
->
nAŒoc
 +
n
;

566 
	`as£π
–
pTsd
->
nAŒoc
>=0 );

567 if–
pTsd
->
nAŒoc
==0 &&ÖTsd->
nSo·HópLimô
==0 ){

568 
	`sqlôe3Rñó£ThªadD©a
();

571 
	}
}

573 
	#upd©eMem‹yU£dCou¡
(
x
Ë

	)

581 *
	$sqlôe3MÆlocRaw
(
n
){

582 *
p
 = 0;

583 if–
n
>0 && !
	`sqlôe3MÆlocFaûed
(Ë&& 
	`íf‹˚So·Limô
(n) ){

584  (
p
 = 
	`OSMALLOC
(
n
))==0 && 
	`sqlôe3_ªÀa£_mem‹y
(n) );

585 if–!
p
 ){

586 
	`sqlôe3FaûedMÆloc
();

587 
	`OSMALLOC_FAILED
();

589 
	`upd©eMem‹yU£dCou¡
(
	`OSSIZEOF
(
p
));

592  
p
;

593 
	}
}

600 *
	$sqlôe3RóŒoc
(*
p
, 
n
){

601 if–
	`sqlôe3MÆlocFaûed
() ){

605 if–!
p
 ){

606  
	`sqlôe3MÆloc
(
n
);

608 *
≈
 = 0;

609 #ifde‡
SQLITE_ENABLE_MEMORY_MANAGEMENT


610 
‹igSize
 = 
	`OSSIZEOF
(
p
);

612 if–
	`íf‹˚So·Limô
(
n
 - 
‹igSize
) ){

613  (
≈
 = 
	`OSREALLOC
(
p
, 
n
))==0 && 
	`sqlôe3_ªÀa£_mem‹y
(n) );

614 if–!
≈
 ){

615 
	`sqlôe3FaûedMÆloc
();

616 
	`OSMALLOC_FAILED
();

618 
	`upd©eMem‹yU£dCou¡
(
	`OSSIZEOF
(
≈
Ë- 
‹igSize
);

621  
≈
;

623 
	}
}

629 
	$sqlôe3FªeX
(*
p
){

630 if–
p
 ){

631 
	`upd©eMem‹yU£dCou¡
(0 - 
	`OSSIZEOF
(
p
));

632 
	`OSFREE
(
p
);

634 
	}
}

640 *
	$sqlôe3MÆlocX
(
n
){

641  
	`sqlôeMÆloc
(
n
);

642 
	}
}

651 *
	$sqlôe3MÆloc
(
n
){

652 *
p
 = 
	`sqlôe3MÆlocRaw
(
n
);

653 if–
p
 ){

654 
	`mem£t
(
p
, 0, 
n
);

656  
p
;

657 
	}
}

658 
	$sqlôe3RóŒocOrFªe
(**
µ
, 
n
){

659 *
p
 = 
	`sqlôe3RóŒoc
(*
µ
, 
n
);

660 if–!
p
 ){

661 
	`sqlôe3FªeX
(*
µ
);

663 *
µ
 = 
p
;

664 
	}
}

676 #ifde‡
SQLITE_ENABLE_MEMORY_MANAGEMENT


677 
	$sqlôe3AŒocSize
(*
p
){

678  
	`OSSIZEOF
(
p
);

679 
	}
}

689 *
	$sqlôe3SåDup
(c⁄° *
z
){

690 *
zNew
;

691 if–
z
==0 )  0;

692 
zNew
 = 
	`sqlôe3MÆlocRaw
(
	`°æí
(
z
)+1);

693 if–
zNew
 ) 
	`°r˝y
(zNew, 
z
);

694  
zNew
;

695 
	}
}

696 *
	$sqlôe3SåNDup
(c⁄° *
z
, 
n
){

697 *
zNew
;

698 if–
z
==0 )  0;

699 
zNew
 = 
	`sqlôe3MÆlocRaw
(
n
+1);

700 if–
zNew
 ){

701 
	`mem˝y
(
zNew
, 
z
, 
n
);

702 
zNew
[
n
] = 0;

704  
zNew
;

705 
	}
}

714 
	$sqlôe3SëSåög
(**
pz
, ...){

715 
va_li°
 
≠
;

716 
nByã
;

717 c⁄° *
z
;

718 *
zResu…
;

720 if–
pz
==0 ) ;

721 
nByã
 = 1;

722 
	`va_°¨t
(
≠
, 
pz
);

723  (
z
 = 
	`va_¨g
(
≠
, const *))!=0 ){

724 
nByã
 +
	`°æí
(
z
);

726 
	`va_íd
(
≠
);

727 
	`sqlôeFªe
(*
pz
);

728 *
pz
 = 
zResu…
 = 
	`sqlôeMÆlocRaw
–
nByã
 );

729 if–
zResu…
==0 ){

732 *
zResu…
 = 0;

733 
	`va_°¨t
(
≠
, 
pz
);

734  (
z
 = 
	`va_¨g
(
≠
, const *))!=0 ){

735 
	`°r˝y
(
zResu…
, 
z
);

736 
zResu…
 +
	`°æí
(zResult);

738 
	`va_íd
(
≠
);

739 
	}
}

762 
	$sqlôe3Eº‹
(
sqlôe3
 *
db
, 
îr_code
, c⁄° *
zF‹m©
, ...){

763 if–
db
 && (db->
pEº
 || (db->pEº = 
	`sqlôe3VÆueNew
())!=0) ){

764 
db
->
îrCode
 = 
îr_code
;

765 if–
zF‹m©
 ){

766 *
z
;

767 
va_li°
 
≠
;

768 
	`va_°¨t
(
≠
, 
zF‹m©
);

769 
z
 = 
	`sqlôe3VMPrötf
(
zF‹m©
, 
≠
);

770 
	`va_íd
(
≠
);

771 
	`sqlôe3VÆueSëSå
(
db
->
pEº
, -1, 
z
, 
SQLITE_UTF8
, 
sqlôe3FªeX
);

773 
	`sqlôe3VÆueSëSå
(
db
->
pEº
, 0, 0, 
SQLITE_UTF8
, 
SQLITE_STATIC
);

776 
	}
}

795 
	$sqlôe3Eº‹Msg
(
P¨£
 *
pP¨£
, c⁄° *
zF‹m©
, ...){

796 
va_li°
 
≠
;

797 
pP¨£
->
nEº
++;

798 
	`sqlôeFªe
(
pP¨£
->
zEºMsg
);

799 
	`va_°¨t
(
≠
, 
zF‹m©
);

800 
pP¨£
->
zEºMsg
 = 
	`sqlôe3VMPrötf
(
zF‹m©
, 
≠
);

801 
	`va_íd
(
≠
);

802 
	}
}

807 
	$sqlôe3Eº‹CÀ¨
(
P¨£
 *
pP¨£
){

808 
	`sqlôeFªe
(
pP¨£
->
zEºMsg
);

809 
pP¨£
->
zEºMsg
 = 0;

810 
pP¨£
->
nEº
 = 0;

811 
	}
}

823 
	$sqlôe3DequŸe
(*
z
){

824 
quŸe
;

825 
i
, 
j
;

826 if–
z
==0 ) ;

827 
quŸe
 = 
z
[0];

828  
quŸe
 ){

832 '[': 
quŸe
 = ']'; ;

835 
i
=1, 
j
=0; 
z
[i]; i++){

836 if–
z
[
i
]==
quŸe
 ){

837 if–
z
[
i
+1]==
quŸe
 ){

838 
z
[
j
++] = 
quŸe
;

839 
i
++;

841 
z
[
j
++] = 0;

845 
z
[
j
++] = z[
i
];

848 
	}
}

853 c⁄° 
	gsqlôe3UµîToLowî
[] = {

870 
	#UµîToLowî
 
sqlôe3UµîToLowî


	)

876 
	$sqlôe3SåICmp
(c⁄° *
zLe·
, c⁄° *
zRight
){

877 *
a
, *
b
;

878 
a
 = (*)
zLe·
;

879 
b
 = (*)
zRight
;

880  *
a
!=0 && 
UµîToLowî
[*a]==UµîToLowî[*
b
]){á++; b++; }

881  
UµîToLowî
[*
a
] - UµîToLowî[*
b
];

882 
	}
}

883 
	$sqlôe3SåNICmp
(c⁄° *
zLe·
, c⁄° *
zRight
, 
N
){

884 *
a
, *
b
;

885 
a
 = (*)
zLe·
;

886 
b
 = (*)
zRight
;

887  
N
-- > 0 && *
a
!=0 && 
UµîToLowî
[*a]==UµîToLowî[*
b
]){á++; b++; }

888  
N
<0 ? 0 : 
UµîToLowî
[*
a
] - UµîToLowî[*
b
];

889 
	}
}

899 
	$sqlôe3IsNumbî
(c⁄° *
z
, *
ªÆnum
, 
u8
 
íc
){

900 
ö¸
 = (
íc
==
SQLITE_UTF8
?1:2);

901 if–
íc
==
SQLITE_UTF16BE
 ) 
z
++;

902 if–*
z
=='-' || *z=='+' ) z +
ö¸
;

903 if–!
	`isdigô
(*(
u8
*)
z
) ){

906 
z
 +
ö¸
;

907 if–
ªÆnum
 ) *realnum = 0;

908  
	`isdigô
(*(
u8
*)
z
Ë){ z +
ö¸
; }

909 if–*
z
=='.' ){

910 
z
 +
ö¸
;

911 if–!
	`isdigô
(*(
u8
*)
z
) )  0;

912  
	`isdigô
(*(
u8
*)
z
Ë){ z +
ö¸
; }

913 if–
ªÆnum
 ) *realnum = 1;

915 if–*
z
=='e' || *z=='E' ){

916 
z
 +
ö¸
;

917 if–*
z
=='+' || *z=='-' ) z +
ö¸
;

918 if–!
	`isdigô
(*(
u8
*)
z
) )  0;

919  
	`isdigô
(*(
u8
*)
z
Ë){ z +
ö¸
; }

920 if–
ªÆnum
 ) *realnum = 1;

922  *
z
==0;

923 
	}
}

937 
	$sqlôe3AtoF
(c⁄° *
z
, *
pResu…
){

938 #i‚de‡
SQLITE_OMIT_FLOATING_POINT


939 
sign
 = 1;

940 c⁄° *
zBegö
 = 
z
;

941 
LONGDOUBLE_TYPE
 
v1
 = 0.0;

942 if–*
z
=='-' ){

943 
sign
 = -1;

944 
z
++;

945 }if–*
z
=='+' ){

946 
z
++;

948  
	`isdigô
(*(
u8
*)
z
) ){

949 
v1
 = v1*10.0 + (*
z
 - '0');

950 
z
++;

952 if–*
z
=='.' ){

953 
LONGDOUBLE_TYPE
 
divis‹
 = 1.0;

954 
z
++;

955  
	`isdigô
(*(
u8
*)
z
) ){

956 
v1
 = v1*10.0 + (*
z
 - '0');

957 
divis‹
 *= 10.0;

958 
z
++;

960 
v1
 /
divis‹
;

962 if–*
z
=='e' || *z=='E' ){

963 
esign
 = 1;

964 
evÆ
 = 0;

965 
LONGDOUBLE_TYPE
 
sˇÀ
 = 1.0;

966 
z
++;

967 if–*
z
=='-' ){

968 
esign
 = -1;

969 
z
++;

970 }if–*
z
=='+' ){

971 
z
++;

973  
	`isdigô
(*(
u8
*)
z
) ){

974 
evÆ
 =ÉvÆ*10 + *
z
 - '0';

975 
z
++;

977  
evÆ
>=64 ){ 
sˇÀ
 *= 1.0e+64;Éval -= 64; }

978  
evÆ
>=16 ){ 
sˇÀ
 *= 1.0e+16;Éval -= 16; }

979  
evÆ
>=4 ){ 
sˇÀ
 *= 1.0e+4;Éval -= 4; }

980  
evÆ
>=1 ){ 
sˇÀ
 *= 1.0e+1;Éval -= 1; }

981 if–
esign
<0 ){

982 
v1
 /
sˇÀ
;

984 
v1
 *
sˇÀ
;

987 *
pResu…
 = 
sign
<0 ? -
v1
 : v1;

988  
z
 - 
zBegö
;

990  
	`sqlôe3©oi64
(
z
, 
pResu…
);

992 
	}
}

1005 
	$sqlôe3©oi64
(c⁄° *
zNum
, 
i64
 *
pNum
){

1006 
i64
 
v
 = 0;

1007 
√g
;

1008 
i
, 
c
;

1009 if–*
zNum
=='-' ){

1010 
√g
 = 1;

1011 
zNum
++;

1012 }if–*
zNum
=='+' ){

1013 
√g
 = 0;

1014 
zNum
++;

1016 
√g
 = 0;

1018 
i
=0; (
c
=
zNum
[i])>='0' && c<='9'; i++){

1019 
v
 = v*10 + 
c
 - '0';

1021 *
pNum
 = 
√g
 ? -
v
 : v;

1022  
c
==0 && 
i
>0 &&

1023 (
i
<19 || (i==19 && 
	`memcmp
(
zNum
,"9223372036854775807",19)<=0));

1024 
	}
}

1037 
	$sqlôe3FôsIn32Bôs
(c⁄° *
zNum
){

1038 
i
, 
c
;

1039 if–*
zNum
=='-' || *zNum=='+' ) zNum++;

1040 
i
=0; (
c
=
zNum
[i])>='0' && c<='9'; i++){}

1041  
i
<10 || (i==10 && 
	`memcmp
(
zNum
,"2147483647",10)<=0);

1042 
	}
}

1048 
	$sqlôe3GëI¡32
(c⁄° *
zNum
, *
pVÆue
){

1049 if–
	`sqlôe3FôsIn32Bôs
(
zNum
) ){

1050 *
pVÆue
 = 
	`©oi
(
zNum
);

1054 
	}
}

1067 
	$sqlôe3FôsIn64Bôs
(c⁄° *
zNum
){

1068 
i
, 
c
;

1069 if–*
zNum
=='-' || *zNum=='+' ) zNum++;

1070 
i
=0; (
c
=
zNum
[i])>='0' && c<='9'; i++){}

1071  
i
<19 || (i==19 && 
	`memcmp
(
zNum
,"9223372036854775807",19)<=0);

1072 
	}
}

1093 
	$sqlôe3Sa„tyOn
(
sqlôe3
 *
db
){

1094 if–
db
->
magic
==
SQLITE_MAGIC_OPEN
 ){

1095 
db
->
magic
 = 
SQLITE_MAGIC_BUSY
;

1097 }if–
db
->
magic
==
SQLITE_MAGIC_BUSY
 ){

1098 
db
->
magic
 = 
SQLITE_MAGIC_ERROR
;

1099 
db
->
Êags
 |
SQLITE_I¡îru±
;

1102 
	}
}

1109 
	$sqlôe3Sa„tyOff
(
sqlôe3
 *
db
){

1110 if–
db
->
magic
==
SQLITE_MAGIC_BUSY
 ){

1111 
db
->
magic
 = 
SQLITE_MAGIC_OPEN
;

1113 }if–
db
->
magic
==
SQLITE_MAGIC_OPEN
 ){

1114 
db
->
magic
 = 
SQLITE_MAGIC_ERROR
;

1115 
db
->
Êags
 |
SQLITE_I¡îru±
;

1118 
	}
}

1129 
	$sqlôe3Sa„tyCheck
(
sqlôe3
 *
db
){

1130 
magic
;

1131 if–
db
==0 )  1;

1132 
magic
 = 
db
->magic;

1133 if–
magic
!=
SQLITE_MAGIC_CLOSED
 &&

1134 
magic
!=
SQLITE_MAGIC_OPEN
 &&

1135 
magic
!=
SQLITE_MAGIC_BUSY
 )  1;

1137 
	}
}

1168 
	$sqlôe3PutV¨öt
(*
p
, 
u64
 
v
){

1169 
i
, 
j
, 
n
;

1170 
u8
 
buf
[10];

1171 if–
v
 & (((
u64
)0xff000000)<<32) ){

1172 
p
[8] = 
v
;

1173 
v
 >>= 8;

1174 
i
=7; i>=0; i--){

1175 
p
[
i
] = (
v
 & 0x7f) | 0x80;

1176 
v
 >>= 7;

1180 
n
 = 0;

1182 
buf
[
n
++] = (
v
 & 0x7f) | 0x80;

1183 
v
 >>= 7;

1184 } 
v
!=0 );

1185 
buf
[0] &= 0x7f;

1186 
	`as£π
–
n
<=9 );

1187 
i
=0, 
j
=
n
-1; j>=0; j--, i++){

1188 
p
[
i
] = 
buf
[
j
];

1190  
n
;

1191 
	}
}

1197 
	$sqlôe3GëV¨öt
(c⁄° *
p
, 
u64
 *
v
){

1198 
u32
 
x
;

1199 
u64
 
x64
;

1200 
n
;

1201 
c
;

1202 if–((
c
 = 
p
[0]) & 0x80)==0 ){

1203 *
v
 = 
c
;

1206 
x
 = 
c
 & 0x7f;

1207 if–((
c
 = 
p
[1]) & 0x80)==0 ){

1208 *
v
 = (
x
<<7Ë| 
c
;

1211 
x
 = (x<<7Ë| (
c
&0x7f);

1212 if–((
c
 = 
p
[2]) & 0x80)==0 ){

1213 *
v
 = (
x
<<7Ë| 
c
;

1216 
x
 = (x<<7Ë| (
c
&0x7f);

1217 if–((
c
 = 
p
[3]) & 0x80)==0 ){

1218 *
v
 = (
x
<<7Ë| 
c
;

1221 
x64
 = (
x
<<7Ë| (
c
&0x7f);

1222 
n
 = 4;

1224 
c
 = 
p
[
n
++];

1225 if–
n
==9 ){

1226 
x64
 = (x64<<8Ë| 
c
;

1229 
x64
 = (x64<<7Ë| (
c
&0x7f);

1230 } (
c
 & 0x80)!=0 );

1231 *
v
 = 
x64
;

1232  
n
;

1233 
	}
}

1239 
	$sqlôe3GëV¨öt32
(c⁄° *
p
, 
u32
 *
v
){

1240 
u32
 
x
;

1241 
n
;

1242 
c
;

1243 if–((sig√d *)
p
)[0]>=0 ){

1244 *
v
 = 
p
[0];

1247 
x
 = 
p
[0] & 0x7f;

1248 if–((sig√d *)
p
)[1]>=0 ){

1249 *
v
 = (
x
<<7Ë| 
p
[1];

1252 
x
 = (x<<7Ë| (
p
[1] & 0x7f);

1253 
n
 = 2;

1255 
x
 = (x<<7Ë| ((
c
 = 
p
[
n
++])&0x7f);

1256 } (
c
 & 0x80)!=0 && 
n
<9 );

1257 *
v
 = 
x
;

1258  
n
;

1259 
	}
}

1265 
	$sqlôe3V¨ötLí
(
u64
 
v
){

1266 
i
 = 0;

1268 
i
++;

1269 
v
 >>= 7;

1270 } 
v
!=0 && 
i
<9 );

1271  
i
;

1272 
	}
}

1274 #i‡!
deföed
(
SQLITE_OMIT_BLOB_LITERAL
Ë|| deföed(
SQLITE_HAS_CODEC
) \

1275 || 
	$deföed
(
SQLITE_TEST
)

1279 
	$hexToI¡
(
h
){

1280 if–
h
>='0' && h<='9' ){

1281  
h
 - '0';

1282 }if–
h
>='a' && h<='f' ){

1283  
h
 - 'a' + 10;

1285 
	`as£π
–
h
>='A' && h<='F' );

1286  
h
 - 'A' + 10;

1288 
	}
}

1291 #i‡!
deföed
(
SQLITE_OMIT_BLOB_LITERAL
Ë|| deföed(
SQLITE_HAS_CODEC
)

1298 *
	$sqlôe3HexToBlob
(c⁄° *
z
){

1299 *
zBlob
;

1300 
i
;

1301 
n
 = 
	`°æí
(
z
);

1302 if–
n
%2 )  0;

1304 
zBlob
 = (*)
	`sqlôeMÆloc
(
n
/2);

1305 
i
=0; i<
n
; i+=2){

1306 
zBlob
[
i
/2] = (
	`hexToI¡
(
z
[i])<<4) | hexToInt(z[i+1]);

1308  
zBlob
;

1309 
	}
}

1312 #i‡
deföed
(
SQLITE_TEST
)

1317 *
	$sqlôe3TextToPå
(c⁄° *
z
){

1318 *
p
;

1319 
u64
 
v
;

1320 
u32
 
v2
;

1321 if–
z
[0]=='0' && z[1]=='x' ){

1322 
z
 += 2;

1324 
v
 = 0;

1325  *
z
 ){

1326 
v
 = (v<<4Ë+ 
	`hexToI¡
(*
z
);

1327 
z
++;

1329 if–(
p
)==(
v
) ){

1330 
p
 = *(**)&
v
;

1332 
	`as£π
–(
p
)==(
v2
) );

1333 
v2
 = (
u32
)
v
;

1334 
p
 = *(**)&
v2
;

1336  
p
;

1337 
	}
}

1343 
ThªadD©a
 *
	$sqlôe3ThªadD©a
(){

1344 
ThªadD©a
 *
p
 = (ThªadD©a*)
	`sqlôe3OsThªadS≥cificD©a
(1);

1345 if–!
p
 ){

1346 
	`sqlôe3FaûedMÆloc
();

1348  
p
;

1349 
	}
}

1356 c⁄° 
ThªadD©a
 *
	$sqlôe3ThªadD©aRódO∆y
(){

1357 c⁄° 
ThªadD©a
 
zîoD©a
 = {0};

1359 c⁄° 
ThªadD©a
 *
pTd
 = 
	`sqlôe3OsThªadS≥cificD©a
(0);

1360  
pTd
 ?ÖTd : &
zîoD©a
;

1361 
	}
}

1367 
	$sqlôe3Rñó£ThªadD©a
(){

1368 
	`sqlôe3OsThªadS≥cificD©a
(-1);

1369 
	}
}

1384 
	gmÆlocHasFaûed
 = 0;

1385 
	$sqlôe3ApiExô
(
sqlôe3
* 
db
, 
rc
){

1386 if–
	`sqlôe3MÆlocFaûed
() ){

1387 
mÆlocHasFaûed
 = 0;

1388 
	`sqlôe3OsLóveMuãx
();

1389 
	`sqlôe3Eº‹
(
db
, 
SQLITE_NOMEM
, 0);

1390 
rc
 = 
SQLITE_NOMEM
;

1392  
rc
;

1393 
	}
}

1399 
	$sqlôe3MÆlocFaûed
(){

1400  (
mÆlocHasFaûed
 && 
	`sqlôe3OsInMuãx
(1));

1401 
	}
}

1406 
	$sqlôe3FaûedMÆloc
(){

1407 
	`sqlôe3OsE¡îMuãx
();

1408 
	`as£π
–
mÆlocHasFaûed
==0 );

1409 
mÆlocHasFaûed
 = 1;

1410 
	}
}

1412 #ifde‡
SQLITE_MEMDEBUG


1417 
	$sqlôe3MÆlocDißŒow
(){

1418 
	`as£π
–
sqlôe3_mÆlocDißŒowed
>=0 );

1419 
sqlôe3_mÆlocDißŒowed
++;

1420 
	}
}

1426 
	$sqlôe3MÆlocAŒow
(){

1427 
	`as£π
–
sqlôe3_mÆlocDißŒowed
>0 );

1428 
sqlôe3_mÆlocDißŒowed
--;

1429 
	}
}

	@vacuum.c

19 
	~"sqlôeI¡.h
"

20 
	~"vdbeI¡.h
"

21 
	~"os.h
"

23 #i‚de‡
SQLITE_OMIT_VACUUM


27 
	$øndomName
(*
zBuf
){

28 c⁄° 
zCh¨s
[] =

31 
i
;

32 
	`sqlôe3R™dom√ss
(20, 
zBuf
);

33 
i
=0; i<20; i++){

34 
zBuf
[
i
] = 
zCh¨s
[ zBuf[i]%((zChars)-1) ];

36 
	}
}

41 
	$execSql
(
sqlôe3
 *
db
, c⁄° *
zSql
){

42 
sqlôe3_°mt
 *
pStmt
;

43 if–
SQLITE_OK
!=
	`sqlôe3_¥ï¨e
(
db
, 
zSql
, -1, &
pStmt
, 0) ){

44  
	`sqlôe3_îrcode
(
db
);

46  
SQLITE_ROW
==
	`sqlôe3_°ï
(
pStmt
) );

47  
	`sqlôe3_föÆize
(
pStmt
);

48 
	}
}

54 
	$execExecSql
(
sqlôe3
 *
db
, c⁄° *
zSql
){

55 
sqlôe3_°mt
 *
pStmt
;

56 
rc
;

58 
rc
 = 
	`sqlôe3_¥ï¨e
(
db
, 
zSql
, -1, &
pStmt
, 0);

59 if–
rc
!=
SQLITE_OK
 ) Ñc;

61  
SQLITE_ROW
==
	`sqlôe3_°ï
(
pStmt
) ){

62 
rc
 = 
	`execSql
(
db
, (*)
	`sqlôe3_cﬁumn_ãxt
(
pStmt
, 0));

63 if–
rc
!=
SQLITE_OK
 ){

64 
	`sqlôe3_föÆize
(
pStmt
);

65  
rc
;

69  
	`sqlôe3_föÆize
(
pStmt
);

70 
	}
}

84 
	$sqlôe3Vacuum
(
P¨£
 *
pP¨£
, 
Tokí
 *
pTabÀName
){

85 
Vdbe
 *
v
 = 
	`sqlôe3GëVdbe
(
pP¨£
);

86 if–
v
 ){

87 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Vacuum
, 0, 0);

90 
	}
}

95 
	$sqlôe3RunVacuum
(**
pzEºMsg
, 
sqlôe3
 *
db
){

96 
rc
 = 
SQLITE_OK
;

97 #i‚de‡
SQLITE_OMIT_VACUUM


98 c⁄° *
zFûíame
;

99 
nFûíame
;

100 *
zTemp
 = 0;

101 
Båì
 *
pMaö
;

102 
Båì
 *
pTemp
;

103 *
zSql
 = 0;

104 
ßved_Êags
;

105 
Db
 *
pDb
 = 0;

108 
ßved_Êags
 = 
db
->
Êags
;

109 
db
->
Êags
 |
SQLITE_WrôeSchema
 | 
SQLITE_Ign‹eChecks
;

111 if–!
db
->
autoCommô
 ){

112 
	`sqlôe3SëSåög
(
pzEºMsg
, "cannot VACUUM from withináÅransaction",

114 
rc
 = 
SQLITE_ERROR
;

115 
íd_of_vacuum
;

121 
pMaö
 = 
db
->
aDb
[0].
pBt
;

122 
zFûíame
 = 
	`sqlôe3BåìGëFûíame
(
pMaö
);

123 
	`as£π
–
zFûíame
 );

124 if–
zFûíame
[0]=='\0' ){

129  
SQLITE_OK
;

131 
nFûíame
 = 
	`°æí
(
zFûíame
);

132 
zTemp
 = 
	`sqlôeMÆloc
–
nFûíame
+100 );

133 if–
zTemp
==0 ){

134 
rc
 = 
SQLITE_NOMEM
;

135 
íd_of_vacuum
;

137 
	`°r˝y
(
zTemp
, 
zFûíame
);

148 
zTemp
[
nFûíame
] = '-';

149 
	`øndomName
((*)&
zTemp
[
nFûíame
+1]);

150 }  
	`sqlôe3OsFûeExi°s
(
zTemp
) );

160 
zSql
 = 
	`sqlôe3MPrötf
("ATTACH '%q' AS vacuum_db;", 
zTemp
);

161 if–!
zSql
 ){

162 
rc
 = 
SQLITE_NOMEM
;

163 
íd_of_vacuum
;

165 
rc
 = 
	`execSql
(
db
, 
zSql
);

166 
	`sqlôeFªe
(
zSql
);

167 
zSql
 = 0;

168 if–
rc
!=
SQLITE_OK
 ) 
íd_of_vacuum
;

169 
pDb
 = &
db
->
aDb
[db->
nDb
-1];

170 
	`as£π
–
	`°rcmp
(
db
->
aDb
[db->
nDb
-1].
zName
,"vacuum_db")==0 );

171 
pTemp
 = 
db
->
aDb
[db->
nDb
-1].
pBt
;

172 
	`sqlôe3BåìSëPageSize
(
pTemp
, 
	`sqlôe3BåìGëPageSize
(
pMaö
),

173 
	`sqlôe3BåìGëRe£rve
(
pMaö
));

174 
	`as£π
–
	`sqlôe3BåìGëPageSize
(
pTemp
)==sqlôe3BåìGëPageSize(
pMaö
) );

175 
rc
 = 
	`execSql
(
db
, "PRAGMA vacuum_db.synchronous=OFF");

176 if–
rc
!=
SQLITE_OK
 ){

177 
íd_of_vacuum
;

180 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


181 
	`sqlôe3BåìSëAutoVacuum
(
pTemp
, 
	`sqlôe3BåìGëAutoVacuum
(
pMaö
));

185 
rc
 = 
	`execSql
(
db
, "BEGIN EXCLUSIVE;");

186 if–
rc
!=
SQLITE_OK
 ) 
íd_of_vacuum
;

191 
rc
 = 
	`execExecSql
(
db
,

194 if–
rc
!=
SQLITE_OK
 ) 
íd_of_vacuum
;

195 
rc
 = 
	`execExecSql
(
db
,

198 if–
rc
!=
SQLITE_OK
 ) 
íd_of_vacuum
;

199 
rc
 = 
	`execExecSql
(
db
,

202 if–
rc
!=
SQLITE_OK
 ) 
íd_of_vacuum
;

203 
rc
 = 
	`execExecSql
(
db
,

207 if–
rc
!=
SQLITE_OK
 ) 
íd_of_vacuum
;

213 
rc
 = 
	`execExecSql
(
db
,

219 if–
rc
!=
SQLITE_OK
 ) 
íd_of_vacuum
;

223 
rc
 = 
	`execExecSql
(
db
,

227 if–
rc
!=
SQLITE_OK
 ) 
íd_of_vacuum
;

228 
rc
 = 
	`execExecSql
(
db
,

233 if–
rc
!=
SQLITE_OK
 ) 
íd_of_vacuum
;

241 
rc
 = 
	`execExecSql
(
db
,

245 if–
rc
!=
SQLITE_OK
 ) 
íd_of_vacuum
;

256 if–
rc
==
SQLITE_OK
 ){

257 
u32
 
mëa
;

258 
i
;

266 c⁄° 
aC›y
[] = {

273 
	`as£π
–1==
	`sqlôe3BåìIsInTøns
(
pTemp
) );

274 
	`as£π
–1==
	`sqlôe3BåìIsInTøns
(
pMaö
) );

277 
i
=0; i<(
aC›y
)/(aCopy[0]); i+=2){

278 
rc
 = 
	`sqlôe3BåìGëMëa
(
pMaö
, 
aC›y
[
i
], &
mëa
);

279 if–
rc
!=
SQLITE_OK
 ) 
íd_of_vacuum
;

280 
rc
 = 
	`sqlôe3BåìUpd©eMëa
(
pTemp
, 
aC›y
[
i
], 
mëa
+aCopy[i+1]);

281 if–
rc
!=
SQLITE_OK
 ) 
íd_of_vacuum
;

284 
rc
 = 
	`sqlôe3BåìC›yFûe
(
pMaö
, 
pTemp
);

285 if–
rc
!=
SQLITE_OK
 ) 
íd_of_vacuum
;

286 
rc
 = 
	`sqlôe3BåìCommô
(
pTemp
);

287 if–
rc
!=
SQLITE_OK
 ) 
íd_of_vacuum
;

288 
rc
 = 
	`sqlôe3BåìCommô
(
pMaö
);

291 
íd_of_vacuum
:

293 
db
->
Êags
 = 
ßved_Êags
;

302 
db
->
autoCommô
 = 1;

304 if–
pDb
 ){

305 
	`sqlôe3MÆlocDißŒow
();

306 
	`sqlôe3BåìClo£
(
pDb
->
pBt
);

307 
	`sqlôe3MÆlocAŒow
();

308 
pDb
->
pBt
 = 0;

309 
pDb
->
pSchema
 = 0;

316 if–
rc
==
SQLITE_NOMEM
 ){

317 
	`sqlôe3MÆlocFaûed
();

320 if–
zTemp
 ){

321 
	`sqlôe3OsDñëe
(
zTemp
);

322 
	`sqlôeFªe
(
zTemp
);

324 
	`sqlôeFªe
–
zSql
 );

325 
	`sqlôe3Re£tI¡î«lSchema
(
db
, 0);

328  
rc
;

329 
	}
}

	@vdbe.c

48 
	~"sqlôeI¡.h
"

49 
	~"os.h
"

50 
	~<˘y≥.h
>

51 
	~"vdbeI¡.h
"

60 
	gsqlôe3_£¨ch_cou¡
 = 0;

70 
	gsqlôe3_öãºu±_cou¡
 = 0;

79 
	gsqlôe3_s‹t_cou¡
 = 0;

85 
	#Rñó£
(
P
Ëif((P)->
Êags
&
MEM_Dyn
){ 
	`sqlôe3VdbeMemRñó£
(P); }

	)

91 
	#Såögify
(
P
, 
íc
) \

92 if(((
P
)->
Êags
&(
MEM_Så
|
MEM_Blob
))==0 && 
	`sqlôe3VdbeMemSåögify
(P,
íc
)) \

93 { 
no_mem
; }

	)

102 
	#Dy«micify
(
P
,
íc
Ë
	`sqlôe3VdbeMemDy«micify
(P)

	)

119 
	#GëV¨öt
(
A
,
B
Ë((B = *(A))<=0x7‡? 1 : 
	`sqlôe3GëV¨öt32
(A, &B))

	)

132 
	#DìphemîÆize
(
P
) \

133 if–((
P
)->
Êags
&
MEM_Ephem
)!=0 \

134 && 
	`sqlôe3VdbeMemMakeWrôóbÀ
(
P
Ë){ 
no_mem
;}

	)

143 
	#°‹eTy≥Info
(
A
,
B
Ë
	`_°‹eTy≥Info
(A)

	)

144 
	$_°‹eTy≥Info
(
Mem
 *
pMem
){

145 
Êags
 = 
pMem
->flags;

146 if–
Êags
 & 
MEM_NuŒ
 ){

147 
pMem
->
ty≥
 = 
SQLITE_NULL
;

149 if–
Êags
 & 
MEM_I¡
 ){

150 
pMem
->
ty≥
 = 
SQLITE_INTEGER
;

152 if–
Êags
 & 
MEM_Ról
 ){

153 
pMem
->
ty≥
 = 
SQLITE_FLOAT
;

155 if–
Êags
 & 
MEM_Så
 ){

156 
pMem
->
ty≥
 = 
SQLITE_TEXT
;

158 
pMem
->
ty≥
 = 
SQLITE_BLOB
;

160 
	}
}

165 
	$p›Sèck
(
Mem
 **
µTos
, 
N
){

166 
Mem
 *
pTos
 = *
µTos
;

167  
N
>0 ){

168 
N
--;

169 
	`Rñó£
(
pTos
);

170 
pTos
--;

172 *
µTos
 = 
pTos
;

173 
	}
}

179 
Curs‹
 *
	$ÆloˇãCurs‹
(
Vdbe
 *
p
, 
iCur
, 
iDb
){

180 
Curs‹
 *
pCx
;

181 
	`as£π
–
iCur
<
p
->
nCurs‹
 );

182 if–
p
->
≠C§
[
iCur
] ){

183 
	`sqlôe3VdbeFªeCurs‹
(
p
->
≠C§
[
iCur
]);

185 
p
->
≠C§
[
iCur
] = 
pCx
 = 
	`sqlôeMÆloc
–(
Curs‹
) );

186 if–
pCx
 ){

187 
pCx
->
iDb
 = iDb;

189  
pCx
;

190 
	}
}

198 
	$≠∂yNumîicAfföôy
(
Mem
 *
pRec
){

199 if–(
pRec
->
Êags
 & (
MEM_Ról
|
MEM_I¡
))==0 ){

200 
ªÆnum
;

201 
	`sqlôe3VdbeMemNulTîmö©e
(
pRec
);

202 if–(
pRec
->
Êags
&
MEM_Så
)

203 && 
	`sqlôe3IsNumbî
(
pRec
->
z
, &
ªÆnum
,ÖRec->
íc
) ){

204 
i64
 
vÆue
;

205 
	`sqlôe3VdbeCh™geEncodög
(
pRec
, 
SQLITE_UTF8
);

206 if–!
ªÆnum
 && 
	`sqlôe3©oi64
(
pRec
->
z
, &
vÆue
) ){

207 
	`sqlôe3VdbeMemRñó£
(
pRec
);

208 
pRec
->
i
 = 
vÆue
;

209 
pRec
->
Êags
 = 
MEM_I¡
;

211 
	`sqlôe3VdbeMemRólify
(
pRec
);

215 
	}
}

235 
	$≠∂yAfföôy
(
Mem
 *
pRec
, 
afföôy
, 
u8
 
íc
){

236 if–
afföôy
==
SQLITE_AFF_TEXT
 ){

241 if–0==(
pRec
->
Êags
&
MEM_Så
Ë&& (pRec->Êags&(
MEM_Ról
|
MEM_I¡
)) ){

242 
	`sqlôe3VdbeMemSåögify
(
pRec
, 
íc
);

244 
pRec
->
Êags
 &~(
MEM_Ról
|
MEM_I¡
);

245 }if–
afföôy
!=
SQLITE_AFF_NONE
 ){

246 
	`as£π
–
afföôy
==
SQLITE_AFF_INTEGER
 ||áfföôy==
SQLITE_AFF_REAL


247 || 
afföôy
==
SQLITE_AFF_NUMERIC
 );

248 
	`≠∂yNumîicAfföôy
(
pRec
);

249 if–
pRec
->
Êags
 & 
MEM_Ról
 ){

250 
	`sqlôe3VdbeI¡egîAfföôy
(
pRec
);

253 
	}
}

263 
	$sqlôe3_vÆue_numîic_ty≥
(
sqlôe3_vÆue
 *
pVÆ
){

264 
Mem
 *
pMem
 = (Mem*)
pVÆ
;

265 
	`≠∂yNumîicAfföôy
(
pMem
);

266 
	`°‹eTy≥Info
(
pMem
, 0);

267  
pMem
->
ty≥
;

268 
	}
}

274 
	$sqlôe3VÆueAµlyAfföôy
(
sqlôe3_vÆue
 *
pVÆ
, 
u8
 
afföôy
, u8 
íc
){

275 
	`≠∂yAfföôy
((
Mem
 *)
pVÆ
, 
afföôy
, 
íc
);

276 
	}
}

278 #ifde‡
SQLITE_DEBUG


283 
	$sqlôe3VdbeMemPªâyPröt
(
Mem
 *
pMem
, *
zBuf
, 
nBuf
){

284 *
zC§
 = 
zBuf
;

285 
f
 = 
pMem
->
Êags
;

287 c⁄° *c⁄° 
í˙ames
[] = {"(X)", "(8)", "(16LE)", "(16BE)"};

289 if–
f
&
MEM_Blob
 ){

290 
i
;

291 
c
;

292 if–
f
 & 
MEM_Dyn
 ){

293 
c
 = 'z';

294 
	`as£π
–(
f
 & (
MEM_Sètic
|
MEM_Ephem
))==0 );

295 }if–
f
 & 
MEM_Sètic
 ){

296 
c
 = 't';

297 
	`as£π
–(
f
 & (
MEM_Dyn
|
MEM_Ephem
))==0 );

298 }if–
f
 & 
MEM_Ephem
 ){

299 
c
 = 'e';

300 
	`as£π
–(
f
 & (
MEM_Sètic
|
MEM_Dyn
))==0 );

302 
c
 = 's';

305 
zC§
 +
	`•rötf
(zC§, "%c", 
c
);

306 
zC§
 +
	`•rötf
(zC§, "%d[", 
pMem
->
n
);

307 
i
=0; i<16 && i<
pMem
->
n
; i++){

308 
zC§
 +
	`•rötf
(zC§, "%02X ", (()
pMem
->
z
[
i
] & 0xFF));

310 
i
=0; i<16 && i<
pMem
->
n
; i++){

311 
z
 = 
pMem
->z[
i
];

312 if–
z
<32 || z>126 ) *
zC§
++ = '.';

313 *
zC§
++ = 
z
;

316 
zC§
 +
	`•rötf
(zCsr, "]");

317 *
zC§
 = '\0';

318 }if–
f
 & 
MEM_Så
 ){

319 
j
, 
k
;

320 
zBuf
[0] = ' ';

321 if–
f
 & 
MEM_Dyn
 ){

322 
zBuf
[1] = 'z';

323 
	`as£π
–(
f
 & (
MEM_Sètic
|
MEM_Ephem
))==0 );

324 }if–
f
 & 
MEM_Sètic
 ){

325 
zBuf
[1] = 't';

326 
	`as£π
–(
f
 & (
MEM_Dyn
|
MEM_Ephem
))==0 );

327 }if–
f
 & 
MEM_Ephem
 ){

328 
zBuf
[1] = 'e';

329 
	`as£π
–(
f
 & (
MEM_Sètic
|
MEM_Dyn
))==0 );

331 
zBuf
[1] = 's';

333 
k
 = 2;

334 
k
 +
	`•rötf
(&
zBuf
[k], "%d", 
pMem
->
n
);

335 
zBuf
[
k
++] = '[';

336 
j
=0; j<15 && j<
pMem
->
n
; j++){

337 
u8
 
c
 = 
pMem
->
z
[
j
];

338 if–
c
>=0x20 && c<0x7f ){

339 
zBuf
[
k
++] = 
c
;

341 
zBuf
[
k
++] = '.';

344 
zBuf
[
k
++] = ']';

345 
k
 +
	`•rötf
(&
zBuf
[k], 
í˙ames
[
pMem
->
íc
]);

346 
zBuf
[
k
++] = 0;

348 
	}
}

352 #ifde‡
VDBE_PROFILE


359 
__ölöe__
 
	$hwtime
(){

360 
x
;

361 
	`__asm__
("rdtsc\n\t"

363 :"=A" (
x
));

364  
x
;

365 
	}
}

378 
	#CHECK_FOR_INTERRUPT
 \

379 if–
db
->
Êags
 & 
SQLITE_I¡îru±
 ) 
ab‹t_due_to_öãºu±
;

	)

413 
	$sqlôe3VdbeExec
(

414 
Vdbe
 *
p


416 
pc
;

417 
Op
 *
pOp
;

418 
rc
 = 
SQLITE_OK
;

419 
sqlôe3
 *
db
 = 
p
->db;

420 
u8
 
ícodög
 = 
	`ENC
(
db
);

421 
Mem
 *
pTos
;

422 #ifde‡
VDBE_PROFILE


423 
°¨t
;

424 
‹igPc
;

426 #i‚de‡
SQLITE_OMIT_PROGRESS_CALLBACK


427 
nProgªssOps
 = 0;

429 #i‚de‡
NDEBUG


430 
Mem
 *
pSèckLimô
;

433 if–
p
->
magic
!=
VDBE_MAGIC_RUN
 )  
SQLITE_MISUSE
;

434 
	`as£π
–
db
->
magic
==
SQLITE_MAGIC_BUSY
 );

435 
pTos
 = 
p
->pTos;

436 if–
p
->
rc
==
SQLITE_NOMEM
 ){

439 
no_mem
;

441 
	`as£π
–
p
->
rc
==
SQLITE_OK
 ||Ö->rc==
SQLITE_BUSY
 );

442 
p
->
rc
 = 
SQLITE_OK
;

443 
	`as£π
–
p
->
ex∂aö
==0 );

444 if–
p
->
p›Sèck
 ){

445 
	`p›Sèck
(&
pTos
, 
p
->
p›Sèck
);

446 
p
->
p›Sèck
 = 0;

448 
p
->
ªsOnSèck
 = 0;

449 
db
->
busyH™dÀr
.
nBusy
 = 0;

450 
CHECK_FOR_INTERRUPT
;

451 
pc
=
p
->pc; 
rc
==
SQLITE_OK
;Öc++){

452 
	`as£π
–
pc
>=0 &&Öc<
p
->
nOp
 );

453 
	`as£π
–
pTos
<=&
p
->
aSèck
[
pc
] );

454 if–
	`sqlôe3MÆlocFaûed
(ËË
no_mem
;

455 #ifde‡
VDBE_PROFILE


456 
‹igPc
 = 
pc
;

457 
°¨t
 = 
	`hwtime
();

459 
pOp
 = &
p
->
aOp
[
pc
];

463 #ifde‡
SQLITE_DEBUG


464 if–
p
->
åa˚
 ){

465 if–
pc
==0 ){

466 
	`¥ötf
("VDBE Execution Trace:\n");

467 
	`sqlôe3VdbePrötSql
(
p
);

469 
	`sqlôe3VdbePrötOp
(
p
->
åa˚
, 
pc
, 
pOp
);

471 if–
p
->
åa˚
==0 && 
pc
==0 && 
	`sqlôe3OsFûeExi°s
("vdbe_sqltrace") ){

472 
	`sqlôe3VdbePrötSql
(
p
);

480 #ifde‡
SQLITE_TEST


481 if–
sqlôe3_öãºu±_cou¡
>0 ){

482 
sqlôe3_öãºu±_cou¡
--;

483 if–
sqlôe3_öãºu±_cou¡
==0 ){

484 
	`sqlôe3_öãºu±
(
db
);

489 #i‚de‡
SQLITE_OMIT_PROGRESS_CALLBACK


496 if–
db
->
xProgªss
 ){

497 if–
db
->
nProgªssOps
==nProgressOps ){

498 if–
db
->
	`xProgªss
(db->
pProgªssArg
)!=0 ){

499 
rc
 = 
SQLITE_ABORT
;

502 
nProgªssOps
 = 0;

504 
nProgªssOps
++;

508 #i‚de‡
NDEBUG


519 
pSèckLimô
 = 
pTos
;

520 if–!
	`sqlôe3VdbeOpcodeNoPush
(
pOp
->
›code
) ){

521 
pSèckLimô
++;

525  
pOp
->
›code
 ){

569 
OP_GŸo
: {

570 
CHECK_FOR_INTERRUPT
;

571 
pc
 = 
pOp
->
p2
 - 1;

585 
OP_Gosub
: {

586 
	`as£π
–
p
->
ªtu∫Dïth
<’->
ªtu∫Sèck
)/(p->returnStack[0]) );

587 
p
->
ªtu∫Sèck
[p->
ªtu∫Dïth
++] = 
pc
+1;

588 
pc
 = 
pOp
->
p2
 - 1;

598 
OP_Rëu∫
: {

599 
	`as£π
–
p
->
ªtu∫Dïth
>0 );

600 
p
->
ªtu∫Dïth
--;

601 
pc
 = 
p
->
ªtu∫Sèck
[p->
ªtu∫Dïth
] - 1;

624 
OP_HÆt
: {

625 
p
->
pTos
 =ÖTos;

626 
p
->
rc
 = 
pOp
->
p1
;

627 
p
->
pc
 =Öc;

628 
p
->
îr‹A˘i⁄
 = 
pOp
->
p2
;

629 if–
pOp
->
p3
 ){

630 
	`sqlôe3SëSåög
(&
p
->
zEºMsg
, 
pOp
->
p3
, (*)0);

632 
rc
 = 
	`sqlôe3VdbeHÆt
(
p
);

633 
	`as£π
–
rc
==
SQLITE_BUSY
 ||Ñc==
SQLITE_OK
 );

634 if–
rc
==
SQLITE_BUSY
 ){

635 
p
->
rc
 = 
SQLITE_BUSY
;

636  
SQLITE_BUSY
;

638  
p
->
rc
 ? 
SQLITE_ERROR
 : 
SQLITE_DONE
;

645 
OP_I¡egî
: {

646 
pTos
++;

647 
pTos
->
Êags
 = 
MEM_I¡
;

648 
pTos
->
i
 = 
pOp
->
p1
;

657 
OP_I¡64
: {

658 
pTos
++;

659 
	`as£π
–
pOp
->
p3
!=0 );

660 
pTos
->
Êags
 = 
MEM_Så
|
MEM_Sètic
|
MEM_Tîm
;

661 
pTos
->
z
 = 
pOp
->
p3
;

662 
pTos
->
n
 = 
	`°æí
’Tos->
z
);

663 
pTos
->
íc
 = 
SQLITE_UTF8
;

664 
pTos
->
i
 = 
	`sqlôe3VdbeI¡VÆue
(pTos);

665 
pTos
->
Êags
 |
MEM_I¡
;

673 
OP_Ról
: {

674 
pTos
++;

675 
pTos
->
Êags
 = 
MEM_Så
|
MEM_Sètic
|
MEM_Tîm
;

676 
pTos
->
z
 = 
pOp
->
p3
;

677 
pTos
->
n
 = 
	`°æí
’Tos->
z
);

678 
pTos
->
íc
 = 
SQLITE_UTF8
;

679 
pTos
->
r
 = 
	`sqlôe3VdbeRólVÆue
(pTos);

680 
pTos
->
Êags
 |
MEM_Ról
;

681 
	`sqlôe3VdbeCh™geEncodög
(
pTos
, 
ícodög
);

690 
OP_Såög8
: {

691 
	`as£π
–
pOp
->
p3
!=0 );

692 
pOp
->
›code
 = 
OP_Såög
;

693 
pOp
->
p1
 = 
	`°æí
’Op->
p3
);

695 #i‚de‡
SQLITE_OMIT_UTF16


696 if–
ícodög
!=
SQLITE_UTF8
 ){

697 
pTos
++;

698 
	`sqlôe3VdbeMemSëSå
(
pTos
, 
pOp
->
p3
, -1, 
SQLITE_UTF8
, 
SQLITE_STATIC
);

699 if–
SQLITE_OK
!=
	`sqlôe3VdbeCh™geEncodög
(
pTos
, 
ícodög
ËË
no_mem
;

700 if–
SQLITE_OK
!=
	`sqlôe3VdbeMemDy«micify
(
pTos
ËË
no_mem
;

701 
pTos
->
Êags
 &~(
MEM_Dyn
);

702 
pTos
->
Êags
 |
MEM_Sètic
;

703 if–
pOp
->
p3ty≥
==
P3_DYNAMIC
 ){

704 
	`sqlôeFªe
(
pOp
->
p3
);

706 
pOp
->
p3ty≥
 = 
P3_DYNAMIC
;

707 
pOp
->
p3
 = 
pTos
->
z
;

708 
pOp
->
p1
 = 
pTos
->
n
;

719 
OP_Såög
: {

720 
pTos
++;

721 
	`as£π
–
pOp
->
p3
!=0 );

722 
pTos
->
Êags
 = 
MEM_Så
|
MEM_Sètic
|
MEM_Tîm
;

723 
pTos
->
z
 = 
pOp
->
p3
;

724 
pTos
->
n
 = 
pOp
->
p1
;

725 
pTos
->
íc
 = 
ícodög
;

733 
OP_NuŒ
: {

734 
pTos
++;

735 
pTos
->
Êags
 = 
MEM_NuŒ
;

736 
pTos
->
n
 = 0;

741 #i‚de‡
SQLITE_OMIT_BLOB_LITERAL


750 
OP_HexBlob
: {

751 
pOp
->
›code
 = 
OP_Blob
;

752 
pOp
->
p1
 = 
	`°æí
’Op->
p3
)/2;

753 if–
pOp
->
p1
 ){

754 *
zBlob
 = 
	`sqlôe3HexToBlob
(
pOp
->
p3
);

755 if–!
zBlob
 ) 
no_mem
;

756 if–
pOp
->
p3ty≥
==
P3_DYNAMIC
 ){

757 
	`sqlôeFªe
(
pOp
->
p3
);

759 
pOp
->
p3
 = 
zBlob
;

760 
pOp
->
p3ty≥
 = 
P3_DYNAMIC
;

762 if–
pOp
->
p3ty≥
==
P3_DYNAMIC
 ){

763 
	`sqlôeFªe
(
pOp
->
p3
);

765 
pOp
->
p3ty≥
 = 
P3_STATIC
;

766 
pOp
->
p3
 = "";

781 
OP_Blob
: {

782 
pTos
++;

783 
	`sqlôe3VdbeMemSëSå
(
pTos
, 
pOp
->
p3
,ÖOp->
p1
, 0, 0);

797 
OP_V¨übÀ
: {

798 
j
 = 
pOp
->
p1
 - 1;

799 
	`as£π
–
j
>=0 && j<
p
->
nV¨
 );

801 
pTos
++;

802 
	`sqlôe3VdbeMemShÆlowC›y
(
pTos
, &
p
->
aV¨
[
j
], 
MEM_Sètic
);

810 
OP_P›
: {

811 
	`as£π
–
pOp
->
p1
>=0 );

812 
	`p›Sèck
(&
pTos
, 
pOp
->
p1
);

813 
	`as£π
–
pTos
>=&
p
->
aSèck
[-1] );

832 
OP_Dup
: {

833 
Mem
 *
pFrom
 = &
pTos
[-
pOp
->
p1
];

834 
	`as£π
–
pFrom
<=
pTos
 &&ÖFrom>=
p
->
aSèck
 );

835 
pTos
++;

836 
	`sqlôe3VdbeMemShÆlowC›y
(
pTos
, 
pFrom
, 
MEM_Ephem
);

837 if–
pOp
->
p2
 ){

838 
	`DìphemîÆize
(
pTos
);

853 
OP_PuŒ
: {

854 
Mem
 *
pFrom
 = &
pTos
[-
pOp
->
p1
];

855 
i
;

856 
Mem
 
ts
;

858 
ts
 = *
pFrom
;

859 
	`DìphemîÆize
(
pTos
);

860 
i
=0; i<
pOp
->
p1
; i++, 
pFrom
++){

861 
	`DìphemîÆize
(&
pFrom
[1]);

862 
	`as£π
–(
pFrom
->
Êags
 & 
MEM_Ephem
)==0 );

863 *
pFrom
 =ÖFrom[1];

864 if–
pFrom
->
Êags
 & 
MEM_Sh‹t
 ){

865 
	`as£π
–
pFrom
->
Êags
 & (
MEM_Så
|
MEM_Blob
) );

866 
	`as£π
–
pFrom
->
z
=ıFrom[1].
zSh‹t
 );

867 
pFrom
->
z
 =ÖFrom->
zSh‹t
;

870 *
pTos
 = 
ts
;

871 if–
pTos
->
Êags
 & 
MEM_Sh‹t
 ){

872 
	`as£π
–
pTos
->
Êags
 & (
MEM_Så
|
MEM_Blob
) );

873 
	`as£π
–
pTos
->
z
=ıTos[-
pOp
->
p1
].
zSh‹t
 );

874 
pTos
->
z
 =ÖTos->
zSh‹t
;

885 
OP_Push
: {

886 
Mem
 *
pTo
 = &
pTos
[-
pOp
->
p1
];

888 
	`as£π
–
pTo
>=
p
->
aSèck
 );

889 
	`sqlôe3VdbeMemMove
(
pTo
, 
pTos
);

890 
pTos
--;

904 
OP_CÆlback
: {

905 
Mem
 *
pMem
;

906 
Mem
 *
pFú°Cﬁumn
;

907 
	`as£π
–
p
->
nResCﬁumn
==
pOp
->
p1
 );

915 
pFú°Cﬁumn
 = &
pTos
[0-
pOp
->
p1
];

916 
pMem
 = 
p
->
aSèck
;ÖMem<
pFú°Cﬁumn
;ÖMem++){

917 
	`DìphemîÆize
(
pMem
);

921 
p
->
ˇcheCå
 = (p->cacheCtr + 2)|1;

927 ; 
pMem
<=
pTos
;ÖMem++ ){

928 
	`sqlôe3VdbeMemNulTîmö©e
(
pMem
);

929 
	`°‹eTy≥Info
(
pMem
, 
ícodög
);

935 
p
->
ªsOnSèck
 = 1;

936 
p
->
nCÆlback
++;

937 
p
->
p›Sèck
 = 
pOp
->
p1
;

938 
p
->
pc
 =Öc + 1;

939 
p
->
pTos
 =ÖTos;

940  
SQLITE_ROW
;

953 
OP_C⁄ˇt
: {

954 *
zNew
;

955 
nByã
;

956 
nFõld
;

957 
i
, 
j
;

958 
Mem
 *
pTîm
;

961 
nFõld
 = 
pOp
->
p1
 + 2;

962 
pTîm
 = &
pTos
[1-
nFõld
];

963 
nByã
 = 0;

964 
i
=0; i<
nFõld
; i++, 
pTîm
++){

965 
	`as£π
–
pOp
->
p2
==0 || (
pTîm
->
Êags
&
MEM_Så
) );

966 if–
pTîm
->
Êags
&
MEM_NuŒ
 ){

967 
nByã
 = -1;

970 
	`Såögify
(
pTîm
, 
ícodög
);

971 
nByã
 +
pTîm
->
n
;

974 if–
nByã
<0 ){

979 if–
pOp
->
p2
==0 ){

980 
	`p›Sèck
(&
pTos
, 
nFõld
);

982 
pTos
++;

983 
pTos
->
Êags
 = 
MEM_NuŒ
;

988 
zNew
 = 
	`sqlôeMÆlocRaw
–
nByã
+2 );

989 if–
zNew
==0 ) 
no_mem
;

990 
j
 = 0;

991 
pTîm
 = &
pTos
[1-
nFõld
];

992 
i
=
j
=0; i<
nFõld
; i++, 
pTîm
++){

993 
n
 = 
pTîm
->n;

994 
	`as£π
–
pTîm
->
Êags
 & (
MEM_Så
|
MEM_Blob
) );

995 
	`mem˝y
(&
zNew
[
j
], 
pTîm
->
z
, 
n
);

996 
j
 +
n
;

998 
zNew
[
j
] = 0;

999 
zNew
[
j
+1] = 0;

1000 
	`as£π
–
j
==
nByã
 );

1002 if–
pOp
->
p2
==0 ){

1003 
	`p›Sèck
(&
pTos
, 
nFõld
);

1005 
pTos
++;

1006 
pTos
->
n
 = 
j
;

1007 
pTos
->
Êags
 = 
MEM_Så
|
MEM_Dyn
|
MEM_Tîm
;

1008 
pTos
->
xDñ
 = 0;

1009 
pTos
->
íc
 = 
ícodög
;

1010 
pTos
->
z
 = 
zNew
;

1061 
OP_Add
:

1062 
OP_Subåa˘
:

1063 
OP_Mu…ùly
:

1064 
OP_Divide
:

1065 
OP_Remaödî
: {

1066 
Mem
 *
pNos
 = &
pTos
[-1];

1067 
Êags
;

1068 
	`as£π
–
pNos
>=
p
->
aSèck
 );

1069 
Êags
 = 
pTos
->Êag†| 
pNos
->flags;

1070 if–(
Êags
 & 
MEM_NuŒ
)!=0 ){

1071 
	`Rñó£
(
pTos
);

1072 
pTos
--;

1073 
	`Rñó£
(
pTos
);

1074 
pTos
->
Êags
 = 
MEM_NuŒ
;

1075 }if–(
pTos
->
Êags
 & 
pNos
->Êag†& 
MEM_I¡
)==MEM_Int ){

1076 
i64
 
a
, 
b
;

1077 
a
 = 
pTos
->
i
;

1078 
b
 = 
pNos
->
i
;

1079  
pOp
->
›code
 ){

1080 
OP_Add
: 
b
 +
a
; ;

1081 
OP_Subåa˘
: 
b
 -
a
; ;

1082 
OP_Mu…ùly
: 
b
 *
a
; ;

1083 
OP_Divide
: {

1084 if–
a
==0 ) 
divide_by_zîo
;

1085 
b
 /
a
;

1089 if–
a
==0 ) 
divide_by_zîo
;

1090 
b
 %
a
;

1094 
	`Rñó£
(
pTos
);

1095 
pTos
--;

1096 
	`Rñó£
(
pTos
);

1097 
pTos
->
i
 = 
b
;

1098 
pTos
->
Êags
 = 
MEM_I¡
;

1100 
a
, 
b
;

1101 
a
 = 
	`sqlôe3VdbeRólVÆue
(
pTos
);

1102 
b
 = 
	`sqlôe3VdbeRólVÆue
(
pNos
);

1103  
pOp
->
›code
 ){

1104 
OP_Add
: 
b
 +
a
; ;

1105 
OP_Subåa˘
: 
b
 -
a
; ;

1106 
OP_Mu…ùly
: 
b
 *
a
; ;

1107 
OP_Divide
: {

1108 if–
a
==0.0 ) 
divide_by_zîo
;

1109 
b
 /
a
;

1113 
ü
 = ()
a
;

1114 
ib
 = ()
b
;

1115 if–
ü
==0.0 ) 
divide_by_zîo
;

1116 
b
 = 
ib
 % 
ü
;

1120 
	`Rñó£
(
pTos
);

1121 
pTos
--;

1122 
	`Rñó£
(
pTos
);

1123 
pTos
->
r
 = 
b
;

1124 
pTos
->
Êags
 = 
MEM_Ról
;

1125 if–(
Êags
 & 
MEM_Ról
)==0 ){

1126 
	`sqlôe3VdbeI¡egîAfföôy
(
pTos
);

1131 
divide_by_zîo
:

1132 
	`Rñó£
(
pTos
);

1133 
pTos
--;

1134 
	`Rñó£
(
pTos
);

1135 
pTos
->
Êags
 = 
MEM_NuŒ
;

1150 
OP_CﬁlSeq
: {

1151 
	`as£π
–
pOp
->
p3ty≥
==
P3_COLLSEQ
 );

1170 
OP_Fun˘i⁄
: {

1171 
i
;

1172 
Mem
 *
pArg
;

1173 
sqlôe3_c⁄ãxt
 
˘x
;

1174 
sqlôe3_vÆue
 **
≠VÆ
;

1175 
n
 = 
pOp
->
p2
;

1177 
≠VÆ
 = 
p
->
≠Arg
;

1178 
	`as£π
–
≠VÆ
 || 
n
==0 );

1180 
pArg
 = &
pTos
[1-
n
];

1181 
i
=0; i<
n
; i++, 
pArg
++){

1182 
≠VÆ
[
i
] = 
pArg
;

1183 
	`°‹eTy≥Info
(
pArg
, 
ícodög
);

1186 
	`as£π
–
pOp
->
p3ty≥
==
P3_FUNCDEF
 ||ÖOp->p3ty≥==
P3_VDBEFUNC
 );

1187 if–
pOp
->
p3ty≥
==
P3_FUNCDEF
 ){

1188 
˘x
.
pFunc
 = (
FuncDef
*)
pOp
->
p3
;

1189 
˘x
.
pVdbeFunc
 = 0;

1191 
˘x
.
pVdbeFunc
 = (
VdbeFunc
*)
pOp
->
p3
;

1192 
˘x
.
pFunc
 = ctx.
pVdbeFunc
->pFunc;

1195 
˘x
.
s
.
Êags
 = 
MEM_NuŒ
;

1196 
˘x
.
s
.
z
 = 0;

1197 
˘x
.
s
.
xDñ
 = 0;

1198 
˘x
.
isEº‹
 = 0;

1199 if–
˘x
.
pFunc
->
√edCﬁlSeq
 ){

1200 
	`as£π
–
pOp
>
p
->
aOp
 );

1201 
	`as£π
–
pOp
[-1].
p3ty≥
==
P3_COLLSEQ
 );

1202 
	`as£π
–
pOp
[-1].
›code
==
OP_CﬁlSeq
 );

1203 
˘x
.
pCﬁl
 = (
CﬁlSeq
 *)
pOp
[-1].
p3
;

1205 if–
	`sqlôe3Sa„tyOff
(
db
ËË
ab‹t_due_to_misu£
;

1206 (*
˘x
.
pFunc
->
xFunc
)(&˘x, 
n
, 
≠VÆ
);

1207 if–
	`sqlôe3Sa„tyOn
(
db
ËË
ab‹t_due_to_misu£
;

1208 if–
	`sqlôe3MÆlocFaûed
(ËË
no_mem
;

1209 
	`p›Sèck
(&
pTos
, 
n
);

1214 if–
˘x
.
pVdbeFunc
 ){

1215 
	`sqlôe3VdbeDñëeAuxD©a
(
˘x
.
pVdbeFunc
, 
pOp
->
p1
);

1216 
pOp
->
p3
 = (*)
˘x
.
pVdbeFunc
;

1217 
pOp
->
p3ty≥
 = 
P3_VDBEFUNC
;

1221 if–
˘x
.
isEº‹
 ){

1222 
	`sqlôe3SëSåög
(&
p
->
zEºMsg
, 
	`sqlôe3_vÆue_ãxt
(&
˘x
.
s
), (*)0);

1223 
rc
 = 
SQLITE_ERROR
;

1227 
	`sqlôe3VdbeCh™geEncodög
(&
˘x
.
s
, 
ícodög
);

1228 
pTos
++;

1229 
pTos
->
Êags
 = 0;

1230 
	`sqlôe3VdbeMemMove
(
pTos
, &
˘x
.
s
);

1262 
OP_BôAnd
:

1263 
OP_BôOr
:

1264 
OP_Shi·Le·
:

1265 
OP_Shi·Right
: {

1266 
Mem
 *
pNos
 = &
pTos
[-1];

1267 
i64
 
a
, 
b
;

1269 
	`as£π
–
pNos
>=
p
->
aSèck
 );

1270 if–(
pTos
->
Êags
 | 
pNos
->ÊagsË& 
MEM_NuŒ
 ){

1271 
	`p›Sèck
(&
pTos
, 2);

1272 
pTos
++;

1273 
pTos
->
Êags
 = 
MEM_NuŒ
;

1276 
a
 = 
	`sqlôe3VdbeI¡VÆue
(
pNos
);

1277 
b
 = 
	`sqlôe3VdbeI¡VÆue
(
pTos
);

1278  
pOp
->
›code
 ){

1279 
OP_BôAnd
: 
a
 &
b
; ;

1280 
OP_BôOr
: 
a
 |
b
; ;

1281 
OP_Shi·Le·
: 
a
 <<
b
; ;

1282 
OP_Shi·Right
: 
a
 >>
b
; ;

1285 
	`Rñó£
(
pTos
);

1286 
pTos
--;

1287 
	`Rñó£
(
pTos
);

1288 
pTos
->
i
 = 
a
;

1289 
pTos
->
Êags
 = 
MEM_I¡
;

1300 
OP_AddImm
: {

1301 
	`as£π
–
pTos
>=
p
->
aSèck
 );

1302 
	`sqlôe3VdbeMemI¡egîify
(
pTos
);

1303 
pTos
->
i
 +
pOp
->
p1
;

1317 
OP_F‹˚I¡
: {

1318 
i64
 
v
;

1319 
	`as£π
–
pTos
>=
p
->
aSèck
 );

1320 
	`≠∂yAfföôy
(
pTos
, 
SQLITE_AFF_NUMERIC
, 
ícodög
);

1321 if–(
pTos
->
Êags
 & (
MEM_I¡
|
MEM_Ról
))==0 ){

1322 
	`Rñó£
(
pTos
);

1323 
pTos
--;

1324 
pc
 = 
pOp
->
p2
 - 1;

1327 if–
pTos
->
Êags
 & 
MEM_I¡
 ){

1328 
v
 = 
pTos
->
i
 + (
pOp
->
p1
!=0);

1331 
	`sqlôe3VdbeMemRólify
(
pTos
);

1332 
v
 = ()
pTos
->
r
;

1333 if–
pTos
->
r
>()
v
 ) v++;

1334 if–
pOp
->
p1
 && 
pTos
->
r
==()
v
 ) v++;

1336 
	`Rñó£
(
pTos
);

1337 
pTos
->
i
 = 
v
;

1338 
pTos
->
Êags
 = 
MEM_I¡
;

1353 
OP_Mu°BeI¡
: {

1354 
	`as£π
–
pTos
>=
p
->
aSèck
 );

1355 
	`≠∂yAfföôy
(
pTos
, 
SQLITE_AFF_NUMERIC
, 
ícodög
);

1356 if–(
pTos
->
Êags
 & 
MEM_I¡
)==0 ){

1357 if–
pOp
->
p2
==0 ){

1358 
rc
 = 
SQLITE_MISMATCH
;

1359 
ab‹t_due_to_îr‹
;

1361 if–
pOp
->
p1
 ) 
	`p›Sèck
(&
pTos
, 1);

1362 
pc
 = 
pOp
->
p2
 - 1;

1365 
	`Rñó£
(
pTos
);

1366 
pTos
->
Êags
 = 
MEM_I¡
;

1380 
OP_RólAfföôy
: {

1381 
	`as£π
–
pTos
>=
p
->
aSèck
 );

1382 if–
pTos
->
Êags
 & 
MEM_I¡
 ){

1383 
	`sqlôe3VdbeMemRólify
(
pTos
);

1388 #i‚de‡
SQLITE_OMIT_CAST


1398 
OP_ToText
: {

1399 
	`as£π
–
pTos
>=
p
->
aSèck
 );

1400 if–
pTos
->
Êags
 & 
MEM_NuŒ
 ) ;

1401 
	`as£π
–
MEM_Så
==(
MEM_Blob
>>3) );

1402 
pTos
->
Êags
 |’Tos->Êags&
MEM_Blob
)>>3;

1403 
	`≠∂yAfföôy
(
pTos
, 
SQLITE_AFF_TEXT
, 
ícodög
);

1404 
	`as£π
–
pTos
->
Êags
 & 
MEM_Så
 );

1405 
pTos
->
Êags
 &~(
MEM_I¡
|
MEM_Ról
|
MEM_Blob
);

1418 
OP_ToBlob
: {

1419 
	`as£π
–
pTos
>=
p
->
aSèck
 );

1420 if–
pTos
->
Êags
 & 
MEM_NuŒ
 ) ;

1421 if–(
pTos
->
Êags
 & 
MEM_Blob
)==0 ){

1422 
	`≠∂yAfföôy
(
pTos
, 
SQLITE_AFF_TEXT
, 
ícodög
);

1423 
	`as£π
–
pTos
->
Êags
 & 
MEM_Så
 );

1424 
pTos
->
Êags
 |
MEM_Blob
;

1426 
pTos
->
Êags
 &~(
MEM_I¡
|
MEM_Ról
|
MEM_Så
);

1440 
OP_ToNumîic
: {

1441 
	`as£π
–
pTos
>=
p
->
aSèck
 );

1442 if–(
pTos
->
Êags
 & 
MEM_NuŒ
)==0 ){

1443 
	`sqlôe3VdbeMemNumîify
(
pTos
);

1458 
OP_ToI¡
: {

1459 
	`as£π
–
pTos
>=
p
->
aSèck
 );

1460 if–(
pTos
->
Êags
 & 
MEM_NuŒ
)==0 ){

1461 
	`sqlôe3VdbeMemI¡egîify
(
pTos
);

1466 #i‚de‡
SQLITE_OMIT_CAST


1476 
OP_ToRól
: {

1477 
	`as£π
–
pTos
>=
p
->
aSèck
 );

1478 if–(
pTos
->
Êags
 & 
MEM_NuŒ
)==0 ){

1479 
	`sqlôe3VdbeMemRólify
(
pTos
);

1550 
OP_Eq
:

1551 
OP_Ne
:

1552 
OP_Lt
:

1553 
OP_Le
:

1554 
OP_Gt
:

1555 
OP_Ge
: {

1556 
Mem
 *
pNos
;

1557 
Êags
;

1558 
ªs
;

1559 
afföôy
;

1561 
pNos
 = &
pTos
[-1];

1562 
Êags
 = 
pTos
->Êags|
pNos
->flags;

1568 if–
Êags
&
MEM_NuŒ
 ){

1569 if–(
pOp
->
p1
 & 0x200)!=0 ){

1581 
	`sqlôe3VdbeMemSëI¡64
(
pTos
, (pTos->
Êags
 & 
MEM_NuŒ
)==0);

1582 
	`sqlôe3VdbeMemSëI¡64
(
pNos
, (pNos->
Êags
 & 
MEM_NuŒ
)==0);

1588 
	`p›Sèck
(&
pTos
, 2);

1589 if–
pOp
->
p2
 ){

1590 if–
pOp
->
p1
 & 0x100 ){

1591 
pc
 = 
pOp
->
p2
-1;

1594 
pTos
++;

1595 
pTos
->
Êags
 = 
MEM_NuŒ
;

1601 
afföôy
 = 
pOp
->
p1
 & 0xFF;

1602 if–
afföôy
 ){

1603 
	`≠∂yAfföôy
(
pNos
, 
afföôy
, 
ícodög
);

1604 
	`≠∂yAfföôy
(
pTos
, 
afföôy
, 
ícodög
);

1607 
	`as£π
–
pOp
->
p3ty≥
==
P3_COLLSEQ
 ||ÖOp->
p3
==0 );

1608 
ªs
 = 
	`sqlôe3MemCom∑ª
(
pNos
, 
pTos
, (
CﬁlSeq
*)
pOp
->
p3
);

1609  
pOp
->
›code
 ){

1610 
OP_Eq
: 
ªs
 =Ñes==0; ;

1611 
OP_Ne
: 
ªs
 =Ñes!=0; ;

1612 
OP_Lt
: 
ªs
 =Ñes<0; ;

1613 
OP_Le
: 
ªs
 =Ñes<=0; ;

1614 
OP_Gt
: 
ªs
 =Ñes>0; ;

1615 : 
ªs
 =Ñes>=0; ;

1618 
	`p›Sèck
(&
pTos
, 2);

1619 if–
pOp
->
p2
 ){

1620 if–
ªs
 ){

1621 
pc
 = 
pOp
->
p2
-1;

1624 
pTos
++;

1625 
pTos
->
Êags
 = 
MEM_I¡
;

1626 
pTos
->
i
 = 
ªs
;

1643 
OP_And
:

1644 
OP_Or
: {

1645 
Mem
 *
pNos
 = &
pTos
[-1];

1646 
v1
, 
v2
;

1648 
	`as£π
–
pNos
>=
p
->
aSèck
 );

1649 if–
pTos
->
Êags
 & 
MEM_NuŒ
 ){

1650 
v1
 = 2;

1652 
	`sqlôe3VdbeMemI¡egîify
(
pTos
);

1653 
v1
 = 
pTos
->
i
==0;

1655 if–
pNos
->
Êags
 & 
MEM_NuŒ
 ){

1656 
v2
 = 2;

1658 
	`sqlôe3VdbeMemI¡egîify
(
pNos
);

1659 
v2
 = 
pNos
->
i
==0;

1661 if–
pOp
->
›code
==
OP_And
 ){

1662 c⁄° 
™d_logic
[] = { 0, 1, 2, 1, 1, 1, 2, 1, 2 };

1663 
v1
 = 
™d_logic
[v1*3+
v2
];

1665 c⁄° 
‹_logic
[] = { 0, 0, 0, 0, 1, 2, 0, 2, 2 };

1666 
v1
 = 
‹_logic
[v1*3+
v2
];

1668 
	`p›Sèck
(&
pTos
, 2);

1669 
pTos
++;

1670 if–
v1
==2 ){

1671 
pTos
->
Êags
 = 
MEM_NuŒ
;

1673 
pTos
->
i
 = 
v1
==0;

1674 
pTos
->
Êags
 = 
MEM_I¡
;

1691 
OP_Neg©ive
:

1692 
OP_AbsVÆue
: {

1693 
	`as£π
–
pTos
>=
p
->
aSèck
 );

1694 if–
pTos
->
Êags
 & 
MEM_Ról
 ){

1695 
√g_abs_ªÆ_ˇ£
:

1696 
	`Rñó£
(
pTos
);

1697 if–
pOp
->
›code
==
OP_Neg©ive
 || 
pTos
->
r
<0.0 ){

1698 
pTos
->
r
 = -pTos->r;

1700 
pTos
->
Êags
 = 
MEM_Ról
;

1701 }if–
pTos
->
Êags
 & 
MEM_I¡
 ){

1702 
	`Rñó£
(
pTos
);

1703 if–
pOp
->
›code
==
OP_Neg©ive
 || 
pTos
->
i
<0 ){

1704 
pTos
->
i
 = -pTos->i;

1706 
pTos
->
Êags
 = 
MEM_I¡
;

1707 }if–
pTos
->
Êags
 & 
MEM_NuŒ
 ){

1710 
	`sqlôe3VdbeMemNumîify
(
pTos
);

1711 
√g_abs_ªÆ_ˇ£
;

1722 
OP_NŸ
: {

1723 
	`as£π
–
pTos
>=
p
->
aSèck
 );

1724 if–
pTos
->
Êags
 & 
MEM_NuŒ
 ) ;

1725 
	`sqlôe3VdbeMemI¡egîify
(
pTos
);

1726 
	`as£π
–(
pTos
->
Êags
 & 
MEM_Dyn
)==0 );

1727 
pTos
->
i
 = !pTos->i;

1728 
pTos
->
Êags
 = 
MEM_I¡
;

1738 
OP_BôNŸ
: {

1739 
	`as£π
–
pTos
>=
p
->
aSèck
 );

1740 if–
pTos
->
Êags
 & 
MEM_NuŒ
 ) ;

1741 
	`sqlôe3VdbeMemI¡egîify
(
pTos
);

1742 
	`as£π
–(
pTos
->
Êags
 & 
MEM_Dyn
)==0 );

1743 
pTos
->
i
 = ~pTos->i;

1744 
pTos
->
Êags
 = 
MEM_I¡
;

1759 
OP_Ex∂aö
:

1760 
OP_No›
: {

1784 
OP_If
:

1785 
OP_IfNŸ
: {

1786 
c
;

1787 
	`as£π
–
pTos
>=
p
->
aSèck
 );

1788 if–
pTos
->
Êags
 & 
MEM_NuŒ
 ){

1789 
c
 = 
pOp
->
p1
;

1791 #ifde‡
SQLITE_OMIT_FLOATING_POINT


1792 
c
 = 
	`sqlôe3VdbeI¡VÆue
(
pTos
);

1794 
c
 = 
	`sqlôe3VdbeRólVÆue
(
pTos
)!=0.0;

1796 if–
pOp
->
›code
==
OP_IfNŸ
 ) 
c
 = !c;

1798 
	`Rñó£
(
pTos
);

1799 
pTos
--;

1800 if–
c
 ) 
pc
 = 
pOp
->
p2
-1;

1810 
OP_IsNuŒ
: {

1811 
i
, 
˙t
;

1812 
Mem
 *
pTîm
;

1813 
˙t
 = 
pOp
->
p1
;

1814 if–
˙t
<0 ) cnt = -cnt;

1815 
pTîm
 = &
pTos
[1-
˙t
];

1816 
	`as£π
–
pTîm
>=
p
->
aSèck
 );

1817 
i
=0; i<
˙t
; i++, 
pTîm
++){

1818 if–
pTîm
->
Êags
 & 
MEM_NuŒ
 ){

1819 
pc
 = 
pOp
->
p2
-1;

1823 if–
pOp
->
p1
>0 ) 
	`p›Sèck
(&
pTos
, 
˙t
);

1833 
OP_NŸNuŒ
: {

1834 
i
, 
˙t
;

1835 
˙t
 = 
pOp
->
p1
;

1836 if–
˙t
<0 ) cnt = -cnt;

1837 
	`as£π
–&
pTos
[1-
˙t
] >
p
->
aSèck
 );

1838 
i
=0; i<
˙t
 && (
pTos
[1+i-˙t].
Êags
 & 
MEM_NuŒ
)==0; i++){}

1839 if–
i
>=
˙t
 ) 
pc
 = 
pOp
->
p2
-1;

1840 if–
pOp
->
p1
>0 ) 
	`p›Sèck
(&
pTos
, 
˙t
);

1854 
OP_SëNumCﬁumns
: {

1855 
Curs‹
 *
pC
;

1856 
	`as£π
–(
pOp
->
p1
)<
p
->
nCurs‹
 );

1857 
	`as£π
–
p
->
≠C§
[
pOp
->
p1
]!=0 );

1858 
pC
 = 
p
->
≠C§
[
pOp
->
p1
];

1859 
pC
->
nFõld
 = 
pOp
->
p2
;

1888 
OP_Cﬁumn
: {

1889 
u32
 
∑ylﬂdSize
;

1890 
p1
 = 
pOp
->p1;

1891 
p2
 = 
pOp
->p2;

1892 
Curs‹
 *
pC
 = 0;

1893 *
zRec
;

1894 
BtCurs‹
 *
pCr§
;

1895 
u32
 *
aTy≥
;

1896 
u32
 *
aOff£t
;

1897 
u32
 
nFõld
;

1898 
Àn
;

1899 
i
;

1900 *
zD©a
;

1901 
Mem
 
sMem
;

1903 
sMem
.
Êags
 = 0;

1904 
	`as£π
–
p1
<
p
->
nCurs‹
 );

1905 
pTos
++;

1906 
pTos
->
Êags
 = 
MEM_NuŒ
;

1923 
	`as£π
–
p1
<0 || 
p
->
≠C§
[p1]!=0 );

1924 if–
p1
<0 ){

1926 
Mem
 *
pRec
 = &
pTos
[
p1
];

1927 
Mem
 *
pC¡
 = &
pRec
[-1];

1928 
	`as£π
–
pRec
>=
p
->
aSèck
 );

1929 
	`as£π
–
pRec
->
Êags
 & 
MEM_Blob
 );

1930 
∑ylﬂdSize
 = 
pRec
->
n
;

1931 
zRec
 = 
pRec
->
z
;

1932 
	`as£π
–
pC¡
>=
p
->
aSèck
 );

1933 
	`as£π
–
pC¡
->
Êags
 & 
MEM_I¡
 );

1934 
nFõld
 = 
pC¡
->
i
;

1935 
pCr§
 = 0;

1936 }if–(
pC
 = 
p
->
≠C§
[
p1
])->
pCurs‹
!=0 ){

1938 
rc
 = 
	`sqlôe3VdbeCurs‹Movëo
(
pC
);

1939 if–
rc
 ) 
ab‹t_due_to_îr‹
;

1940 
zRec
 = 0;

1941 
pCr§
 = 
pC
->
pCurs‹
;

1942 if–
pC
->
nuŒRow
 ){

1943 
∑ylﬂdSize
 = 0;

1944 }if–
pC
->
ˇcheSètus
==
p
->
ˇcheCå
 ){

1945 
∑ylﬂdSize
 = 
pC
->payloadSize;

1946 
zRec
 = (*)
pC
->
aRow
;

1947 }if–
pC
->
isIndex
 ){

1948 
i64
 
∑ylﬂdSize64
;

1949 
	`sqlôe3BåìKeySize
(
pCr§
, &
∑ylﬂdSize64
);

1950 
∑ylﬂdSize
 = 
∑ylﬂdSize64
;

1952 
	`sqlôe3BåìD©aSize
(
pCr§
, &
∑ylﬂdSize
);

1954 
nFõld
 = 
pC
->nField;

1955 #i‚de‡
SQLITE_OMIT_TRIGGER


1956 }if–
pC
->
p£udoTabÀ
 ){

1958 
∑ylﬂdSize
 = 
pC
->
nD©a
;

1959 
zRec
 = 
pC
->
pD©a
;

1960 
pC
->
ˇcheSètus
 = 
CACHE_STALE
;

1961 
	`as£π
–
∑ylﬂdSize
==0 || 
zRec
!=0 );

1962 
nFõld
 = 
pC
->nField;

1963 
pCr§
 = 0;

1966 
zRec
 = 0;

1967 
∑ylﬂdSize
 = 0;

1968 
pCr§
 = 0;

1969 
nFõld
 = 0;

1973 if–
∑ylﬂdSize
==0 ){

1974 
	`as£π
–
pTos
->
Êags
==
MEM_NuŒ
 );

1978 
	`as£π
–
p2
<
nFõld
 );

1983 if–
pC
 &&ÖC->
ˇcheSètus
==
p
->
ˇcheCå
 ){

1984 
aTy≥
 = 
pC
->aType;

1985 
aOff£t
 = 
pC
->aOffset;

1987 
u8
 *
zIdx
;

1988 
u8
 *
zEndHdr
;

1989 
u32
 
off£t
;

1990 
avaû
;

1991 if–
pC
 &&ÖC->
aTy≥
 ){

1992 
aTy≥
 = 
pC
->aType;

1994 
aTy≥
 = 
	`sqlôeMÆlocRaw
–2*
nFõld
*(aType) );

1996 
aOff£t
 = &
aTy≥
[
nFõld
];

1997 if–
aTy≥
==0 ){

1998 
no_mem
;

2002 if–
zRec
 ){

2003 
zD©a
 = 
zRec
;

2005 if–
pC
->
isIndex
 ){

2006 
zD©a
 = (*)
	`sqlôe3BåìKeyFëch
(
pCr§
, &
avaû
);

2008 
zD©a
 = (*)
	`sqlôe3BåìD©aFëch
(
pCr§
, &
avaû
);

2015 if–
avaû
>=
∑ylﬂdSize
 ){

2016 
zRec
 = 
zD©a
;

2017 
pC
->
aRow
 = (
u8
*)
zD©a
;

2019 
pC
->
aRow
 = 0;

2022 
zIdx
 = (
u8
 *)
	`GëV¨öt
((u8*)
zD©a
, 
off£t
);

2030 if–!
zRec
 && 
avaû
<
off£t
 ){

2031 
rc
 = 
	`sqlôe3VdbeMemFromBåì
(
pCr§
, 0, 
off£t
, 
pC
->
isIndex
, &
sMem
);

2032 if–
rc
!=
SQLITE_OK
 ){

2033 
›_cﬁumn_out
;

2035 
zD©a
 = 
sMem
.
z
;

2037 
zEndHdr
 = (
u8
 *)
zD©a
 + 
off£t
;

2038 
zIdx
 = (
u8
 *)
zD©a
 + ()zIdx;

2045 
i
=0; i<
nFõld
; i++){

2046 if–
zIdx
<
zEndHdr
 ){

2047 
aOff£t
[
i
] = 
off£t
;

2048 
zIdx
 +
	`GëV¨öt
(zIdx, 
aTy≥
[
i
]);

2049 
off£t
 +
	`sqlôe3VdbeSîülTy≥Lí
(
aTy≥
[
i
]);

2057 
aOff£t
[
i
] = 0;

2060 
	`Rñó£
(&
sMem
);

2061 
sMem
.
Êags
 = 
MEM_NuŒ
;

2067 if–
zIdx
>
zEndHdr
 || 
off£t
>
∑ylﬂdSize
 ){

2068 
rc
 = 
SQLITE_CORRUPT_BKPT
;

2069 
›_cﬁumn_out
;

2074 if–
pC
 ){

2075 
pC
->
∑ylﬂdSize
 =ÖayloadSize;

2076 
pC
->
aTy≥
 =áType;

2077 
pC
->
aOff£t
 =áOffset;

2078 
pC
->
ˇcheSètus
 = 
p
->
ˇcheCå
;

2088 if–
aOff£t
[
p2
] ){

2089 
	`as£π
–
rc
==
SQLITE_OK
 );

2090 if–
zRec
 ){

2091 
zD©a
 = &
zRec
[
aOff£t
[
p2
]];

2093 
Àn
 = 
	`sqlôe3VdbeSîülTy≥Lí
(
aTy≥
[
p2
]);

2094 
rc
 = 
	`sqlôe3VdbeMemFromBåì
(
pCr§
, 
aOff£t
[
p2
], 
Àn
, 
pC
->
isIndex
,&
sMem
);

2095 if–
rc
!=
SQLITE_OK
 ){

2096 
›_cﬁumn_out
;

2098 
zD©a
 = 
sMem
.
z
;

2100 
	`sqlôe3VdbeSîülGë
((
u8
*)
zD©a
, 
aTy≥
[
p2
], 
pTos
);

2101 
pTos
->
íc
 = 
ícodög
;

2103 if–
pOp
->
p3ty≥
==
P3_MEM
 ){

2104 
	`sqlôe3VdbeMemShÆlowC›y
(
pTos
, (
Mem
 *)(
pOp
->
p3
), 
MEM_Sètic
);

2106 
pTos
->
Êags
 = 
MEM_NuŒ
;

2115 if–(
sMem
.
Êags
 & 
MEM_Dyn
)!=0 ){

2116 
	`as£π
–
pTos
->
Êags
 & 
MEM_Ephem
 );

2117 
	`as£π
–
pTos
->
Êags
 & (
MEM_Så
|
MEM_Blob
) );

2118 
	`as£π
–
pTos
->
z
==
sMem
.z );

2119 
	`as£π
–
sMem
.
Êags
 & 
MEM_Tîm
 );

2120 
pTos
->
Êags
 &~
MEM_Ephem
;

2121 
pTos
->
Êags
 |
MEM_Dyn
|
MEM_Tîm
;

2126 
rc
 = 
	`sqlôe3VdbeMemMakeWrôóbÀ
(
pTos
);

2128 
›_cﬁumn_out
:

2130 if–!
pC
 || !pC->
aTy≥
 ){

2131 
	`sqlôeFªe
(
aTy≥
);

2172 
OP_MakeIdxRec
:

2173 
OP_MakeRec‹d
: {

2189 *
zNewRec‹d
;

2190 *
zC§
;

2191 
Mem
 *
pRec
;

2192 
Mem
 *
pRowid
 = 0;

2193 
nD©a
 = 0;

2194 
nHdr
 = 0;

2195 
nByã
 = 0;

2196 
nV¨öt
;

2197 
u32
 
£rül_ty≥
;

2198 
c⁄èösNuŒ
 = 0;

2199 
zTemp
[
NBFS
];

2200 
Mem
 *
pD©a0
;

2202 
ÀaveOnSèck
;

2203 
nFõld
;

2204 
jumpIfNuŒ
;

2205 
addRowid
;

2206 *
zAfföôy
;

2207 
fûe_f‹m©
;

2209 
ÀaveOnSèck
 = ((
pOp
->
p1
<0)?1:0);

2210 
nFõld
 = 
pOp
->
p1
 * (
ÀaveOnSèck
?-1:1);

2211 
jumpIfNuŒ
 = 
pOp
->
p2
;

2212 
addRowid
 = 
pOp
->
›code
==
OP_MakeIdxRec
;

2213 
zAfföôy
 = 
pOp
->
p3
;

2215 
pD©a0
 = &
pTos
[1-
nFõld
];

2216 
	`as£π
–
pD©a0
>=
p
->
aSèck
 );

2217 
c⁄èösNuŒ
 = 0;

2218 
fûe_f‹m©
 = 
p
->
möWrôeFûeF‹m©
;

2223 
pRec
=
pD©a0
;ÖRec<=
pTos
;ÖRec++){

2224 if–
zAfföôy
 ){

2225 
	`≠∂yAfföôy
(
pRec
, 
zAfföôy
[pRec-
pD©a0
], 
ícodög
);

2227 if–
pRec
->
Êags
&
MEM_NuŒ
 ){

2228 
c⁄èösNuŒ
 = 1;

2230 
£rül_ty≥
 = 
	`sqlôe3VdbeSîülTy≥
(
pRec
, 
fûe_f‹m©
);

2231 
nD©a
 +
	`sqlôe3VdbeSîülTy≥Lí
(
£rül_ty≥
);

2232 
nHdr
 +
	`sqlôe3V¨ötLí
(
£rül_ty≥
);

2239 if–
addRowid
 ){

2240 
pRowid
 = &
pTos
[0-
nFõld
];

2241 
	`as£π
–
pRowid
>=
p
->
aSèck
 );

2242 
	`sqlôe3VdbeMemI¡egîify
(
pRowid
);

2243 
£rül_ty≥
 = 
	`sqlôe3VdbeSîülTy≥
(
pRowid
, 0);

2244 
nD©a
 +
	`sqlôe3VdbeSîülTy≥Lí
(
£rül_ty≥
);

2245 
nHdr
 +
	`sqlôe3V¨ötLí
(
£rül_ty≥
);

2249 
nHdr
 +
nV¨öt
 = 
	`sqlôe3V¨ötLí
(nHdr);

2250 if–
nV¨öt
<
	`sqlôe3V¨ötLí
(
nHdr
) ){

2251 
nHdr
++;

2253 
nByã
 = 
nHdr
+
nD©a
;

2256 if–
nByã
>(
zTemp
) ){

2257 
zNewRec‹d
 = 
	`sqlôeMÆlocRaw
(
nByã
);

2258 if–!
zNewRec‹d
 ){

2259 
no_mem
;

2262 
zNewRec‹d
 = (
u8
*)
zTemp
;

2266 
zC§
 = 
zNewRec‹d
;

2267 
zC§
 +
	`sqlôe3PutV¨öt
(zC§, 
nHdr
);

2268 
pRec
=
pD©a0
;ÖRec<=
pTos
;ÖRec++){

2269 
£rül_ty≥
 = 
	`sqlôe3VdbeSîülTy≥
(
pRec
, 
fûe_f‹m©
);

2270 
zC§
 +
	`sqlôe3PutV¨öt
(zC§, 
£rül_ty≥
);

2272 if–
addRowid
 ){

2273 
zC§
 +
	`sqlôe3PutV¨öt
(zC§, 
	`sqlôe3VdbeSîülTy≥
(
pRowid
, 0));

2275 
pRec
=
pD©a0
;ÖRec<=
pTos
;ÖRec++){

2276 
zC§
 +
	`sqlôe3VdbeSîülPut
(zC§, 
pRec
, 
fûe_f‹m©
);

2278 if–
addRowid
 ){

2279 
zC§
 +
	`sqlôe3VdbeSîülPut
(zC§, 
pRowid
, 0);

2281 
	`as£π
–
zC§
==(
zNewRec‹d
+
nByã
) );

2284 if–!
ÀaveOnSèck
 ){

2285 
	`p›Sèck
(&
pTos
, 
nFõld
+
addRowid
);

2287 
pTos
++;

2288 
pTos
->
n
 = 
nByã
;

2289 if–
nByã
<=(
zTemp
) ){

2290 
	`as£π
–
zNewRec‹d
==(*)
zTemp
 );

2291 
pTos
->
z
 =ÖTos->
zSh‹t
;

2292 
	`mem˝y
(
pTos
->
zSh‹t
, 
zTemp
, 
nByã
);

2293 
pTos
->
Êags
 = 
MEM_Blob
 | 
MEM_Sh‹t
;

2295 
	`as£π
–
zNewRec‹d
!=(*)
zTemp
 );

2296 
pTos
->
z
 = (*)
zNewRec‹d
;

2297 
pTos
->
Êags
 = 
MEM_Blob
 | 
MEM_Dyn
;

2298 
pTos
->
xDñ
 = 0;

2300 
pTos
->
íc
 = 
SQLITE_UTF8
;

2303 if–
jumpIfNuŒ
 && 
c⁄èösNuŒ
 ){

2304 
pc
 = 
jumpIfNuŒ
 - 1;

2321 
OP_Sèãmít
: {

2322 
i
 = 
pOp
->
p1
;

2323 
Båì
 *
pBt
;

2324 if–
i
>=0 && i<
db
->
nDb
 && (
pBt
 = db->
aDb
[i].pBt)!=0 && !(db->
autoCommô
) ){

2325 
	`as£π
–
	`sqlôe3BåìIsInTøns
(
pBt
) );

2326 if–!
	`sqlôe3BåìIsInStmt
(
pBt
) ){

2327 
rc
 = 
	`sqlôe3BåìBegöStmt
(
pBt
);

2341 
OP_AutoCommô
: {

2342 
u8
 
i
 = 
pOp
->
p1
;

2343 
u8
 
rﬁlback
 = 
pOp
->
p2
;

2345 
	`as£π
–
i
==1 || i==0 );

2346 
	`as£π
–
i
==1 || 
rﬁlback
==0 );

2348 
	`as£π
–
db
->
a˘iveVdbeC¡
>0 );

2350 if–
db
->
a˘iveVdbeC¡
>1 && 
i
 && !db->
autoCommô
 ){

2355 
	`sqlôe3SëSåög
(&
p
->
zEºMsg
, "ˇ¬Ÿ ", 
rﬁlback
?"rollback":"commit",

2357 
rc
 = 
SQLITE_ERROR
;

2358 }if–
i
!=
db
->
autoCommô
 ){

2359 if–
pOp
->
p2
 ){

2360 
	`as£π
–
i
==1 );

2361 
	`sqlôe3RﬁlbackAŒ
(
db
);

2362 
db
->
autoCommô
 = 1;

2364 
db
->
autoCommô
 = 
i
;

2365 if–
	`sqlôe3VdbeHÆt
(
p
)==
SQLITE_BUSY
 ){

2366 
p
->
pTos
 =ÖTos;

2367 
p
->
pc
 =Öc;

2368 
db
->
autoCommô
 = 1-
i
;

2369 
p
->
rc
 = 
SQLITE_BUSY
;

2370  
SQLITE_BUSY
;

2373  
SQLITE_DONE
;

2375 
	`sqlôe3SëSåög
(&
p
->
zEºMsg
,

2376 (!
i
)?"cannot startáÅransaction withináÅransaction":(

2377 (
rﬁlback
)?"cannotÑollback -ÇoÅransaction isáctive":

2380 
rc
 = 
SQLITE_ERROR
;

2405 
OP_Tønß˘i⁄
: {

2406 
i
 = 
pOp
->
p1
;

2407 
Båì
 *
pBt
;

2409 
	`as£π
–
i
>=0 && i<
db
->
nDb
 );

2410 
pBt
 = 
db
->
aDb
[
i
].pBt;

2412 if–
pBt
 ){

2413 
rc
 = 
	`sqlôe3BåìBegöTøns
(
pBt
, 
pOp
->
p2
);

2414 if–
rc
==
SQLITE_BUSY
 ){

2415 
p
->
pc
 =Öc;

2416 
p
->
rc
 = 
SQLITE_BUSY
;

2417 
p
->
pTos
 =ÖTos;

2418  
SQLITE_BUSY
;

2420 if–
rc
!=
SQLITE_OK
 &&Ñc!=
SQLITE_READONLY
 ){

2421 
ab‹t_due_to_îr‹
;

2439 
OP_RódCookõ
: {

2440 
iMëa
;

2441 
	`as£π
–
pOp
->
p2
<
SQLITE_N_BTREE_META
 );

2442 
	`as£π
–
pOp
->
p1
>=0 &&ÖOp->p1<
db
->
nDb
 );

2443 
	`as£π
–
db
->
aDb
[
pOp
->
p1
].
pBt
!=0 );

2451 
rc
 = 
	`sqlôe3BåìGëMëa
(
db
->
aDb
[
pOp
->
p1
].
pBt
, 1 +ÖOp->
p2
, (
u32
 *)&
iMëa
);

2452 
pTos
++;

2453 
pTos
->
i
 = 
iMëa
;

2454 
pTos
->
Êags
 = 
MEM_I¡
;

2468 
OP_SëCookõ
: {

2469 
Db
 *
pDb
;

2470 
	`as£π
–
pOp
->
p2
<
SQLITE_N_BTREE_META
 );

2471 
	`as£π
–
pOp
->
p1
>=0 &&ÖOp->p1<
db
->
nDb
 );

2472 
pDb
 = &
db
->
aDb
[
pOp
->
p1
];

2473 
	`as£π
–
pDb
->
pBt
!=0 );

2474 
	`as£π
–
pTos
>=
p
->
aSèck
 );

2475 
	`sqlôe3VdbeMemI¡egîify
(
pTos
);

2477 
rc
 = 
	`sqlôe3BåìUpd©eMëa
(
pDb
->
pBt
, 1+
pOp
->
p2
, ()
pTos
->
i
);

2478 if–
pOp
->
p2
==0 ){

2480 
pDb
->
pSchema
->
schema_cookõ
 = 
pTos
->
i
;

2481 
db
->
Êags
 |
SQLITE_I¡înCh™ges
;

2482 }if–
pOp
->
p2
==1 ){

2484 
pDb
->
pSchema
->
fûe_f‹m©
 = 
pTos
->
i
;

2486 
	`as£π
–(
pTos
->
Êags
 & 
MEM_Dyn
)==0 );

2487 
pTos
--;

2488 if–
pOp
->
p1
==1 ){

2491 
	`sqlôe3ExpúePª∑ªdSèãmíts
(
db
);

2512 
OP_VîifyCookõ
: {

2513 
iMëa
;

2514 
Båì
 *
pBt
;

2515 
	`as£π
–
pOp
->
p1
>=0 &&ÖOp->p1<
db
->
nDb
 );

2516 
pBt
 = 
db
->
aDb
[
pOp
->
p1
].pBt;

2517 if–
pBt
 ){

2518 
rc
 = 
	`sqlôe3BåìGëMëa
(
pBt
, 1, (
u32
 *)&
iMëa
);

2520 
rc
 = 
SQLITE_OK
;

2521 
iMëa
 = 0;

2523 if–
rc
==
SQLITE_OK
 && 
iMëa
!=
pOp
->
p2
 ){

2524 
	`sqlôe3SëSåög
(&
p
->
zEºMsg
, "database schema has changed", (*)0);

2525 
rc
 = 
SQLITE_SCHEMA
;

2572 
OP_O≥nRód
:

2573 
OP_O≥nWrôe
: {

2574 
i
 = 
pOp
->
p1
;

2575 
p2
 = 
pOp
->p2;

2576 
wrFœg
;

2577 
Båì
 *
pX
;

2578 
iDb
;

2579 
Curs‹
 *
pCur
;

2580 
Db
 *
pDb
;

2582 
	`as£π
–
pTos
>=
p
->
aSèck
 );

2583 
	`sqlôe3VdbeMemI¡egîify
(
pTos
);

2584 
iDb
 = 
pTos
->
i
;

2585 
	`as£π
–(
pTos
->
Êags
 & 
MEM_Dyn
)==0 );

2586 
pTos
--;

2587 
	`as£π
–
iDb
>=0 && iDb<
db
->
nDb
 );

2588 
pDb
 = &
db
->
aDb
[
iDb
];

2589 
pX
 = 
pDb
->
pBt
;

2590 
	`as£π
–
pX
!=0 );

2591 if–
pOp
->
›code
==
OP_O≥nWrôe
 ){

2592 
wrFœg
 = 1;

2593 if–
pDb
->
pSchema
->
fûe_f‹m©
 < 
p
->
möWrôeFûeF‹m©
 ){

2594 
p
->
möWrôeFûeF‹m©
 = 
pDb
->
pSchema
->
fûe_f‹m©
;

2597 
wrFœg
 = 0;

2599 if–
p2
<=0 ){

2600 
	`as£π
–
pTos
>=
p
->
aSèck
 );

2601 
	`sqlôe3VdbeMemI¡egîify
(
pTos
);

2602 
p2
 = 
pTos
->
i
;

2603 
	`as£π
–(
pTos
->
Êags
 & 
MEM_Dyn
)==0 );

2604 
pTos
--;

2605 
	`as£π
–
p2
>=2 );

2607 
	`as£π
–
i
>=0 );

2608 
pCur
 = 
	`ÆloˇãCurs‹
(
p
, 
i
, 
iDb
);

2609 if–
pCur
==0 ) 
no_mem
;

2610 
pCur
->
nuŒRow
 = 1;

2611 if–
pX
==0 ) ;

2614 
rc
 = 
	`sqlôe3BåìCurs‹
(
pX
, 
p2
, 
wrFœg
,

2615 
sqlôe3VdbeRec‹dCom∑ª
, 
pOp
->
p3
,

2616 &
pCur
->
pCurs‹
);

2617 if–
pOp
->
p3ty≥
==
P3_KEYINFO
 ){

2618 
pCur
->
pKeyInfo
 = (
KeyInfo
*)
pOp
->
p3
;

2619 
pCur
->
pIn¸Key
 = &pCur->
pKeyInfo
->
ö¸Key
;

2620 
pCur
->
pKeyInfo
->
íc
 = 
	`ENC
(
p
->
db
);

2622 
pCur
->
pKeyInfo
 = 0;

2623 
pCur
->
pIn¸Key
 = &pCur->
bogusIn¸Key
;

2625  
rc
 ){

2626 
SQLITE_BUSY
: {

2627 
p
->
pc
 =Öc;

2628 
p
->
rc
 = 
SQLITE_BUSY
;

2629 
p
->
pTos
 = &pTos[1 + (
pOp
->
p2
<=0)];

2630  
SQLITE_BUSY
;

2632 
SQLITE_OK
: {

2633 
Êags
 = 
	`sqlôe3BåìFœgs
(
pCur
->
pCurs‹
);

2640 if–(
Êags
 & 0xf0)!=0 || ((flags & 0x07)!=5 && (flags & 0x07)!=2) ){

2641 
rc
 = 
SQLITE_CORRUPT_BKPT
;

2642 
ab‹t_due_to_îr‹
;

2644 
pCur
->
isTabÀ
 = (
Êags
 & 
BTREE_INTKEY
)!=0;

2645 
pCur
->
isIndex
 = (
Êags
 & 
BTREE_ZERODATA
)!=0;

2650 if–(
pCur
->
isTabÀ
 && 
pOp
->
p3ty≥
==
P3_KEYINFO
)

2651 || (
pCur
->
isIndex
 && 
pOp
->
p3ty≥
!=
P3_KEYINFO
) ){

2652 
rc
 = 
SQLITE_CORRUPT_BKPT
;

2653 
ab‹t_due_to_îr‹
;

2657 
SQLITE_EMPTY
: {

2658 
pCur
->
isTabÀ
 = 
pOp
->
p3ty≥
!=
P3_KEYINFO
;

2659 
pCur
->
isIndex
 = !pCur->
isTabÀ
;

2660 
rc
 = 
SQLITE_OK
;

2664 
ab‹t_due_to_îr‹
;

2682 
OP_O≥nVútuÆ
: {

2683 
i
 = 
pOp
->
p1
;

2684 
Curs‹
 *
pCx
;

2685 
	`as£π
–
i
>=0 );

2686 
pCx
 = 
	`ÆloˇãCurs‹
(
p
, 
i
, -1);

2687 if–
pCx
==0 ) 
no_mem
;

2688 
pCx
->
nuŒRow
 = 1;

2689 
rc
 = 
	`sqlôe3BåìFa˘‹y
(
db
, 0, 1, 
TEMP_PAGES
, &
pCx
->
pBt
);

2690 if–
rc
==
SQLITE_OK
 ){

2691 
rc
 = 
	`sqlôe3BåìBegöTøns
(
pCx
->
pBt
, 1);

2693 if–
rc
==
SQLITE_OK
 ){

2699 if–
pOp
->
p3
 ){

2700 
pgno
;

2701 
	`as£π
–
pOp
->
p3ty≥
==
P3_KEYINFO
 );

2702 
rc
 = 
	`sqlôe3BåìCª©eTabÀ
(
pCx
->
pBt
, &
pgno
, 
BTREE_ZERODATA
);

2703 if–
rc
==
SQLITE_OK
 ){

2704 
	`as£π
–
pgno
==
MASTER_ROOT
+1 );

2705 
rc
 = 
	`sqlôe3BåìCurs‹
(
pCx
->
pBt
, 
pgno
, 1, 
sqlôe3VdbeRec‹dCom∑ª
,

2706 
pOp
->
p3
, &
pCx
->
pCurs‹
);

2707 
pCx
->
pKeyInfo
 = (
KeyInfo
*)
pOp
->
p3
;

2708 
pCx
->
pKeyInfo
->
íc
 = 
	`ENC
(
p
->
db
);

2709 
pCx
->
pIn¸Key
 = &pCx->
pKeyInfo
->
ö¸Key
;

2711 
pCx
->
isTabÀ
 = 0;

2713 
rc
 = 
	`sqlôe3BåìCurs‹
(
pCx
->
pBt
, 
MASTER_ROOT
, 1, 0, 0, &pCx->
pCurs‹
);

2714 
pCx
->
isTabÀ
 = 1;

2715 
pCx
->
pIn¸Key
 = &pCx->
bogusIn¸Key
;

2718 
pCx
->
nFõld
 = 
pOp
->
p2
;

2719 
pCx
->
isIndex
 = !pCx->
isTabÀ
;

2723 #i‚de‡
SQLITE_OMIT_TRIGGER


2734 
OP_O≥nP£udo
: {

2735 
i
 = 
pOp
->
p1
;

2736 
Curs‹
 *
pCx
;

2737 
	`as£π
–
i
>=0 );

2738 
pCx
 = 
	`ÆloˇãCurs‹
(
p
, 
i
, -1);

2739 if–
pCx
==0 ) 
no_mem
;

2740 
pCx
->
nuŒRow
 = 1;

2741 
pCx
->
p£udoTabÀ
 = 1;

2742 
pCx
->
pIn¸Key
 = &pCx->
bogusIn¸Key
;

2743 
pCx
->
isTabÀ
 = 1;

2744 
pCx
->
isIndex
 = 0;

2754 
OP_Clo£
: {

2755 
i
 = 
pOp
->
p1
;

2756 if–
i
>=0 && i<
p
->
nCurs‹
 ){

2757 
	`sqlôe3VdbeFªeCurs‹
(
p
->
≠C§
[
i
]);

2758 
p
->
≠C§
[
i
] = 0;

2803 
OP_MoveLt
:

2804 
OP_MoveLe
:

2805 
OP_MoveGe
:

2806 
OP_MoveGt
: {

2807 
i
 = 
pOp
->
p1
;

2808 
Curs‹
 *
pC
;

2810 
	`as£π
–
pTos
>=
p
->
aSèck
 );

2811 
	`as£π
–
i
>=0 && i<
p
->
nCurs‹
 );

2812 
pC
 = 
p
->
≠C§
[
i
];

2813 
	`as£π
–
pC
!=0 );

2814 if–
pC
->
pCurs‹
!=0 ){

2815 
ªs
, 
oc
;

2816 
oc
 = 
pOp
->
›code
;

2817 
pC
->
nuŒRow
 = 0;

2818 *
pC
->
pIn¸Key
 = 
oc
==
OP_MoveGt
 || oc==
OP_MoveLe
;

2819 if–
pC
->
isTabÀ
 ){

2820 
i64
 
iKey
;

2821 
	`sqlôe3VdbeMemI¡egîify
(
pTos
);

2822 
iKey
 = 
	`ötToKey
(
pTos
->
i
);

2823 if–
pOp
->
p2
==0 &&ÖOp->
›code
==
OP_MoveGe
 ){

2824 
pC
->
movëoT¨gë
 = 
iKey
;

2825 
pC
->
de„ºedMovëo
 = 1;

2826 
	`as£π
–(
pTos
->
Êags
 & 
MEM_Dyn
)==0 );

2827 
pTos
--;

2830 
rc
 = 
	`sqlôe3BåìMovëo
(
pC
->
pCurs‹
, 0, (
u64
)
iKey
, &
ªs
);

2831 if–
rc
!=
SQLITE_OK
 ){

2832 
ab‹t_due_to_îr‹
;

2834 
pC
->
œ°Rowid
 = 
pTos
->
i
;

2835 
pC
->
rowidIsVÆid
 = 
ªs
==0;

2837 
	`as£π
–
pTos
->
Êags
 & 
MEM_Blob
 );

2839 
rc
 = 
	`sqlôe3BåìMovëo
(
pC
->
pCurs‹
, 
pTos
->
z
,ÖTos->
n
, &
ªs
);

2840 if–
rc
!=
SQLITE_OK
 ){

2841 
ab‹t_due_to_îr‹
;

2843 
pC
->
rowidIsVÆid
 = 0;

2845 
pC
->
de„ºedMovëo
 = 0;

2846 
pC
->
ˇcheSètus
 = 
CACHE_STALE
;

2847 *
pC
->
pIn¸Key
 = 0;

2848 
sqlôe3_£¨ch_cou¡
++;

2849 if–
oc
==
OP_MoveGe
 || oc==
OP_MoveGt
 ){

2850 if–
ªs
<0 ){

2851 
rc
 = 
	`sqlôe3BåìNext
(
pC
->
pCurs‹
, &
ªs
);

2852 if–
rc
!=
SQLITE_OK
 ) 
ab‹t_due_to_îr‹
;

2853 
pC
->
rowidIsVÆid
 = 0;

2855 
ªs
 = 0;

2858 
	`as£π
–
oc
==
OP_MoveLt
 || oc==
OP_MoveLe
 );

2859 if–
ªs
>=0 ){

2860 
rc
 = 
	`sqlôe3BåìPªvious
(
pC
->
pCurs‹
, &
ªs
);

2861 if–
rc
!=
SQLITE_OK
 ) 
ab‹t_due_to_îr‹
;

2862 
pC
->
rowidIsVÆid
 = 0;

2867 
ªs
 = 
	`sqlôe3BåìEof
(
pC
->
pCurs‹
);

2870 if–
ªs
 ){

2871 if–
pOp
->
p2
>0 ){

2872 
pc
 = 
pOp
->
p2
 - 1;

2874 
pC
->
nuŒRow
 = 1;

2878 
	`Rñó£
(
pTos
);

2879 
pTos
--;

2931 
OP_Di°ö˘
:

2932 
OP_NŸFound
:

2933 
OP_Found
: {

2934 
i
 = 
pOp
->
p1
;

2935 
ÆªadyExi°s
 = 0;

2936 
Curs‹
 *
pC
;

2937 
	`as£π
–
pTos
>=
p
->
aSèck
 );

2938 
	`as£π
–
i
>=0 && i<
p
->
nCurs‹
 );

2939 
	`as£π
–
p
->
≠C§
[
i
]!=0 );

2940 if–(
pC
 = 
p
->
≠C§
[
i
])->
pCurs‹
!=0 ){

2941 
ªs
, 
rx
;

2942 
	`as£π
–
pC
->
isTabÀ
==0 );

2943 
	`Såögify
(
pTos
, 
ícodög
);

2944 
rx
 = 
	`sqlôe3BåìMovëo
(
pC
->
pCurs‹
, 
pTos
->
z
,ÖTos->
n
, &
ªs
);

2945 
ÆªadyExi°s
 = 
rx
==
SQLITE_OK
 && 
ªs
==0;

2946 
pC
->
de„ºedMovëo
 = 0;

2947 
pC
->
ˇcheSètus
 = 
CACHE_STALE
;

2949 if–
pOp
->
›code
==
OP_Found
 ){

2950 if–
ÆªadyExi°s
 ) 
pc
 = 
pOp
->
p2
 - 1;

2952 if–!
ÆªadyExi°s
 ) 
pc
 = 
pOp
->
p2
 - 1;

2954 if–
pOp
->
›code
!=
OP_Di°ö˘
 ){

2955 
	`Rñó£
(
pTos
);

2956 
pTos
--;

2982 
OP_IsUnique
: {

2983 
i
 = 
pOp
->
p1
;

2984 
Mem
 *
pNos
 = &
pTos
[-1];

2985 
Curs‹
 *
pCx
;

2986 
BtCurs‹
 *
pCr§
;

2987 
i64
 
R
;

2991 
	`as£π
–
pNos
>=
p
->
aSèck
 );

2992 
	`sqlôe3VdbeMemI¡egîify
(
pTos
);

2993 
R
 = 
pTos
->
i
;

2994 
	`as£π
–(
pTos
->
Êags
 & 
MEM_Dyn
)==0 );

2995 
pTos
--;

2996 
	`as£π
–
i
>=0 && i<=
p
->
nCurs‹
 );

2997 
pCx
 = 
p
->
≠C§
[
i
];

2998 
	`as£π
–
pCx
!=0 );

2999 
pCr§
 = 
pCx
->
pCurs‹
;

3000 if–
pCr§
!=0 ){

3001 
ªs
;

3002 
i64
 
v
;

3003 *
zKey
;

3004 
nKey
;

3005 
Àn
;

3006 
szRowid
;

3010 
	`Såögify
(
pNos
, 
ícodög
);

3011 
zKey
 = 
pNos
->
z
;

3012 
nKey
 = 
pNos
->
n
;

3014 
szRowid
 = 
	`sqlôe3VdbeIdxRowidLí
(
nKey
, (
u8
*)
zKey
);

3015 
Àn
 = 
nKey
-
szRowid
;

3020 
	`as£π
–
pCx
->
de„ºedMovëo
==0 );

3021 
pCx
->
ˇcheSètus
 = 
CACHE_STALE
;

3022 
rc
 = 
	`sqlôe3BåìMovëo
(
pCr§
, 
zKey
, 
Àn
, &
ªs
);

3023 if–
rc
!=
SQLITE_OK
 ){

3024 
ab‹t_due_to_îr‹
;

3026 if–
ªs
<0 ){

3027 
rc
 = 
	`sqlôe3BåìNext
(
pCr§
, &
ªs
);

3028 if–
ªs
 ){

3029 
pc
 = 
pOp
->
p2
 - 1;

3033 
rc
 = 
	`sqlôe3VdbeIdxKeyCom∑ª
(
pCx
, 
Àn
, (
u8
*)
zKey
, &
ªs
);

3034 if–
rc
!=
SQLITE_OK
 ) 
ab‹t_due_to_îr‹
;

3035 if–
ªs
>0 ){

3036 
pc
 = 
pOp
->
p2
 - 1;

3045 
rc
 = 
	`sqlôe3VdbeIdxRowid
(
pCr§
, &
v
);

3046 if–
rc
!=
SQLITE_OK
 ){

3047 
ab‹t_due_to_îr‹
;

3049 if–
v
==
R
 ){

3050 
pc
 = 
pOp
->
p2
 - 1;

3058 
pTos
++;

3059 
pTos
->
i
 = 
v
;

3060 
pTos
->
Êags
 = 
MEM_I¡
;

3079 
OP_NŸExi°s
: {

3080 
i
 = 
pOp
->
p1
;

3081 
Curs‹
 *
pC
;

3082 
BtCurs‹
 *
pCr§
;

3083 
	`as£π
–
pTos
>=
p
->
aSèck
 );

3084 
	`as£π
–
i
>=0 && i<
p
->
nCurs‹
 );

3085 
	`as£π
–
p
->
≠C§
[
i
]!=0 );

3086 if–(
pCr§
 = (
pC
 = 
p
->
≠C§
[
i
])->
pCurs‹
)!=0 ){

3087 
ªs
;

3088 
u64
 
iKey
;

3089 
	`as£π
–
pTos
->
Êags
 & 
MEM_I¡
 );

3090 
	`as£π
–
p
->
≠C§
[
i
]->
isTabÀ
 );

3091 
iKey
 = 
	`ötToKey
(
pTos
->
i
);

3092 
rc
 = 
	`sqlôe3BåìMovëo
(
pCr§
, 0, 
iKey
, &
ªs
);

3093 
pC
->
œ°Rowid
 = 
pTos
->
i
;

3094 
pC
->
rowidIsVÆid
 = 
ªs
==0;

3095 
pC
->
nuŒRow
 = 0;

3096 
pC
->
ˇcheSètus
 = 
CACHE_STALE
;

3097 if–
ªs
!=0 ){

3098 
pc
 = 
pOp
->
p2
 - 1;

3099 
pC
->
rowidIsVÆid
 = 0;

3102 
	`Rñó£
(
pTos
);

3103 
pTos
--;

3113 
OP_Sequí˚
: {

3114 
i
 = 
pOp
->
p1
;

3115 
	`as£π
–
pTos
>=
p
->
aSèck
 );

3116 
	`as£π
–
i
>=0 && i<
p
->
nCurs‹
 );

3117 
	`as£π
–
p
->
≠C§
[
i
]!=0 );

3118 
pTos
++;

3119 
pTos
->
i
 = 
p
->
≠C§
[i]->
£qCou¡
++;

3120 
pTos
->
Êags
 = 
MEM_I¡
;

3139 
OP_NewRowid
: {

3140 
i
 = 
pOp
->
p1
;

3141 
i64
 
v
 = 0;

3142 
Curs‹
 *
pC
;

3143 
	`as£π
–
i
>=0 && i<
p
->
nCurs‹
 );

3144 
	`as£π
–
p
->
≠C§
[
i
]!=0 );

3145 if–(
pC
 = 
p
->
≠C§
[
i
])->
pCurs‹
==0 ){

3179 
ªs
, 
rx
=
SQLITE_OK
, 
˙t
;

3180 
i64
 
x
;

3181 
˙t
 = 0;

3182 if–(
	`sqlôe3BåìFœgs
(
pC
->
pCurs‹
)&(
BTREE_INTKEY
|
BTREE_ZERODATA
)) !=

3183 
BTREE_INTKEY
 ){

3184 
rc
 = 
SQLITE_CORRUPT_BKPT
;

3185 
ab‹t_due_to_îr‹
;

3187 
	`as£π
–(
	`sqlôe3BåìFœgs
(
pC
->
pCurs‹
Ë& 
BTREE_INTKEY
)!=0 );

3188 
	`as£π
–(
	`sqlôe3BåìFœgs
(
pC
->
pCurs‹
Ë& 
BTREE_ZERODATA
)==0 );

3190 #ifde‡
SQLITE_32BIT_ROWID


3191 
	#MAX_ROWID
 0x7fffffff

	)

3197 
	#MAX_ROWID
 ( (((
u64
)0x7fffffff)<<32Ë| (u64)0xfffffff‡)

	)

3200 if–!
pC
->
u£R™domRowid
 ){

3201 if–
pC
->
√xtRowidVÆid
 ){

3202 
v
 = 
pC
->
√xtRowid
;

3204 
rc
 = 
	`sqlôe3BåìLa°
(
pC
->
pCurs‹
, &
ªs
);

3205 if–
rc
!=
SQLITE_OK
 ){

3206 
ab‹t_due_to_îr‹
;

3208 if–
ªs
 ){

3209 
v
 = 1;

3211 
	`sqlôe3BåìKeySize
(
pC
->
pCurs‹
, &
v
);

3212 
v
 = 
	`keyToI¡
(v);

3213 if–
v
==
MAX_ROWID
 ){

3214 
pC
->
u£R™domRowid
 = 1;

3216 
v
++;

3221 #i‚de‡
SQLITE_OMIT_AUTOINCREMENT


3222 if–
pOp
->
p2
 ){

3223 
Mem
 *
pMem
;

3224 
	`as£π
–
pOp
->
p2
>0 &&ÖOp->p2<
p
->
nMem
 );

3225 
pMem
 = &
p
->
aMem
[
pOp
->
p2
];

3226 
	`sqlôe3VdbeMemI¡egîify
(
pMem
);

3227 
	`as£π
–(
pMem
->
Êags
 & 
MEM_I¡
)!=0 );

3228 if–
pMem
->
i
==
MAX_ROWID
 || 
pC
->
u£R™domRowid
 ){

3229 
rc
 = 
SQLITE_FULL
;

3230 
ab‹t_due_to_îr‹
;

3232 if–
v
<
pMem
->
i
+1 ){

3233 
v
 = 
pMem
->
i
 + 1;

3235 
pMem
->
i
 = 
v
;

3239 if–
v
<
MAX_ROWID
 ){

3240 
pC
->
√xtRowidVÆid
 = 1;

3241 
pC
->
√xtRowid
 = 
v
+1;

3243 
pC
->
√xtRowidVÆid
 = 0;

3246 if–
pC
->
u£R™domRowid
 ){

3247 
	`as£π
–
pOp
->
p2
==0 );

3248 
v
 = 
db
->
¥i‹NewRowid
;

3249 
˙t
 = 0;

3251 if–
v
==0 || 
˙t
>2 ){

3252 
	`sqlôe3R™dom√ss
((
v
), &v);

3253 if–
˙t
<5 ) 
v
 &= 0xffffff;

3255 
r
;

3256 
	`sqlôe3R™dom√ss
(1, &
r
);

3257 
v
 +
r
 + 1;

3259 if–
v
==0 ) ;

3260 
x
 = 
	`ötToKey
(
v
);

3261 
rx
 = 
	`sqlôe3BåìMovëo
(
pC
->
pCurs‹
, 0, (
u64
)
x
, &
ªs
);

3262 
˙t
++;

3263 } 
˙t
<1000 && 
rx
==
SQLITE_OK
 && 
ªs
==0 );

3264 
db
->
¥i‹NewRowid
 = 
v
;

3265 if–
rx
==
SQLITE_OK
 && 
ªs
==0 ){

3266 
rc
 = 
SQLITE_FULL
;

3267 
ab‹t_due_to_îr‹
;

3270 
pC
->
rowidIsVÆid
 = 0;

3271 
pC
->
de„ºedMovëo
 = 0;

3272 
pC
->
ˇcheSètus
 = 
CACHE_STALE
;

3274 
pTos
++;

3275 
pTos
->
i
 = 
v
;

3276 
pTos
->
Êags
 = 
MEM_I¡
;

3296 
OP_In£π
: {

3297 
Mem
 *
pNos
 = &
pTos
[-1];

3298 
i
 = 
pOp
->
p1
;

3299 
Curs‹
 *
pC
;

3300 
	`as£π
–
pNos
>=
p
->
aSèck
 );

3301 
	`as£π
–
i
>=0 && i<
p
->
nCurs‹
 );

3302 
	`as£π
–
p
->
≠C§
[
i
]!=0 );

3303 if–((
pC
 = 
p
->
≠C§
[
i
])->
pCurs‹
!=0 ||ÖC->
p£udoTabÀ
) ){

3304 
i64
 
iKey
;

3306 
	`as£π
–
pNos
->
Êags
 & 
MEM_I¡
 );

3307 
	`as£π
–
pC
->
isTabÀ
 );

3308 
iKey
 = 
	`ötToKey
(
pNos
->
i
);

3310 if–
pOp
->
p2
 & 
OPFLAG_NCHANGE
 ) 
p
->
nCh™ge
++;

3311 if–
pOp
->
p2
 & 
OPFLAG_LASTROWID
 ) 
db
->
œ°Rowid
 = 
pNos
->
i
;

3312 if–
pC
->
√xtRowidVÆid
 && 
pNos
->
i
>ıC->
√xtRowid
 ){

3313 
pC
->
√xtRowidVÆid
 = 0;

3315 if–
pTos
->
Êags
 & 
MEM_NuŒ
 ){

3316 
pTos
->
z
 = 0;

3317 
pTos
->
n
 = 0;

3319 
	`as£π
–
pTos
->
Êags
 & (
MEM_Blob
|
MEM_Så
) );

3321 #i‚de‡
SQLITE_OMIT_TRIGGER


3322 if–
pC
->
p£udoTabÀ
 ){

3323 
	`sqlôeFªe
(
pC
->
pD©a
);

3324 
pC
->
iKey
 = iKey;

3325 
pC
->
nD©a
 = 
pTos
->
n
;

3326 if–
pTos
->
Êags
 & 
MEM_Dyn
 ){

3327 
pC
->
pD©a
 = 
pTos
->
z
;

3328 
pTos
->
Êags
 = 
MEM_NuŒ
;

3330 
pC
->
pD©a
 = 
	`sqlôeMÆlocRaw
–pC->
nD©a
+2 );

3331 if–!
pC
->
pD©a
 ) 
no_mem
;

3332 
	`mem˝y
(
pC
->
pD©a
, 
pTos
->
z
,ÖC->
nD©a
);

3333 
pC
->
pD©a
[pC->
nD©a
] = 0;

3334 
pC
->
pD©a
[pC->
nD©a
+1] = 0;

3336 
pC
->
nuŒRow
 = 0;

3339 
rc
 = 
	`sqlôe3BåìIn£π
(
pC
->
pCurs‹
, 0, 
iKey
, 
pTos
->
z
,ÖTos->
n
);

3340 #i‚de‡
SQLITE_OMIT_TRIGGER


3344 
pC
->
rowidIsVÆid
 = 0;

3345 
pC
->
de„ºedMovëo
 = 0;

3346 
pC
->
ˇcheSètus
 = 
CACHE_STALE
;

3349 if–
rc
==
SQLITE_OK
 && 
db
->
xUpd©eCÆlback
 && 
pOp
->
p3
 ){

3350 c⁄° *
zDb
 = 
db
->
aDb
[
pC
->
iDb
].
zName
;

3351 c⁄° *
zTbl
 = 
pOp
->
p3
;

3352 
›
 = ((
pOp
->
p2
 & 
OPFLAG_ISUPDATE
Ë? 
SQLITE_UPDATE
 : 
SQLITE_INSERT
);

3353 
	`as£π
–
pC
->
isTabÀ
 );

3354 
db
->
	`xUpd©eCÆlback
(db->
pUpd©eArg
, 
›
, 
zDb
, 
zTbl
, 
iKey
);

3355 
	`as£π
–
pC
->
iDb
>=0 );

3358 
	`p›Sèck
(&
pTos
, 2);

3377 
OP_Dñëe
: {

3378 
i
 = 
pOp
->
p1
;

3379 
Curs‹
 *
pC
;

3380 
	`as£π
–
i
>=0 && i<
p
->
nCurs‹
 );

3381 
pC
 = 
p
->
≠C§
[
i
];

3382 
	`as£π
–
pC
!=0 );

3383 if–
pC
->
pCurs‹
!=0 ){

3384 
i64
 
iKey
;

3389 if–
db
->
xUpd©eCÆlback
 && 
pOp
->
p3
 ){

3390 
	`as£π
–
pC
->
isTabÀ
 );

3391 if–
pC
->
rowidIsVÆid
 ){

3392 
iKey
 = 
pC
->
œ°Rowid
;

3394 
rc
 = 
	`sqlôe3BåìKeySize
(
pC
->
pCurs‹
, &
iKey
);

3395 if–
rc
 ){

3396 
ab‹t_due_to_îr‹
;

3398 
iKey
 = 
	`keyToI¡
(iKey);

3402 
rc
 = 
	`sqlôe3VdbeCurs‹Movëo
(
pC
);

3403 if–
rc
 ) 
ab‹t_due_to_îr‹
;

3404 
rc
 = 
	`sqlôe3BåìDñëe
(
pC
->
pCurs‹
);

3405 
pC
->
√xtRowidVÆid
 = 0;

3406 
pC
->
ˇcheSètus
 = 
CACHE_STALE
;

3409 if–
rc
==
SQLITE_OK
 && 
db
->
xUpd©eCÆlback
 && 
pOp
->
p3
 ){

3410 c⁄° *
zDb
 = 
db
->
aDb
[
pC
->
iDb
].
zName
;

3411 c⁄° *
zTbl
 = 
pOp
->
p3
;

3412 
db
->
	`xUpd©eCÆlback
(db->
pUpd©eArg
, 
SQLITE_DELETE
, 
zDb
, 
zTbl
, 
iKey
);

3413 
	`as£π
–
pC
->
iDb
>=0 );

3416 if–
pOp
->
p2
 & 
OPFLAG_NCHANGE
 ) 
p
->
nCh™ge
++;

3427 
OP_Re£tCou¡
: {

3428 if–
pOp
->
p1
 ){

3429 
	`sqlôe3VdbeSëCh™ges
(
db
, 
p
->
nCh™ge
);

3431 
p
->
nCh™ge
 = 0;

3453 
OP_RowKey
:

3454 
OP_RowD©a
: {

3455 
i
 = 
pOp
->
p1
;

3456 
Curs‹
 *
pC
;

3457 
u32
 
n
;

3460 
pTos
++;

3461 
	`as£π
–
i
>=0 && i<
p
->
nCurs‹
 );

3462 
pC
 = 
p
->
≠C§
[
i
];

3463 
	`as£π
–
pC
->
isTabÀ
 || 
pOp
->
›code
==
OP_RowKey
 );

3464 
	`as£π
–
pC
->
isIndex
 || 
pOp
->
›code
==
OP_RowD©a
 );

3465 
	`as£π
–
pC
!=0 );

3466 if–
pC
->
nuŒRow
 ){

3467 
pTos
->
Êags
 = 
MEM_NuŒ
;

3468 }if–
pC
->
pCurs‹
!=0 ){

3469 
BtCurs‹
 *
pCr§
 = 
pC
->
pCurs‹
;

3470 
rc
 = 
	`sqlôe3VdbeCurs‹Movëo
(
pC
);

3471 if–
rc
 ) 
ab‹t_due_to_îr‹
;

3472 if–
pC
->
nuŒRow
 ){

3473 
pTos
->
Êags
 = 
MEM_NuŒ
;

3475 }if–
pC
->
isIndex
 ){

3476 
i64
 
n64
;

3477 
	`as£π
–!
pC
->
isTabÀ
 );

3478 
	`sqlôe3BåìKeySize
(
pCr§
, &
n64
);

3479 
n
 = 
n64
;

3481 
	`sqlôe3BåìD©aSize
(
pCr§
, &
n
);

3483 
pTos
->
n
 =Ç;

3484 if–
n
<=
NBFS
 ){

3485 
pTos
->
Êags
 = 
MEM_Blob
 | 
MEM_Sh‹t
;

3486 
pTos
->
z
 =ÖTos->
zSh‹t
;

3488 *
z
 = 
	`sqlôeMÆlocRaw
–
n
 );

3489 if–
z
==0 ) 
no_mem
;

3490 
pTos
->
Êags
 = 
MEM_Blob
 | 
MEM_Dyn
;

3491 
pTos
->
xDñ
 = 0;

3492 
pTos
->
z
 = z;

3494 if–
pC
->
isIndex
 ){

3495 
	`sqlôe3BåìKey
(
pCr§
, 0, 
n
, 
pTos
->
z
);

3497 
	`sqlôe3BåìD©a
(
pCr§
, 0, 
n
, 
pTos
->
z
);

3499 #i‚de‡
SQLITE_OMIT_TRIGGER


3500 }if–
pC
->
p£udoTabÀ
 ){

3501 
pTos
->
n
 = 
pC
->
nD©a
;

3502 
pTos
->
z
 = 
pC
->
pD©a
;

3503 
pTos
->
Êags
 = 
MEM_Blob
|
MEM_Ephem
;

3506 
pTos
->
Êags
 = 
MEM_NuŒ
;

3508 
pTos
->
íc
 = 
SQLITE_UTF8
;

3517 
OP_Rowid
: {

3518 
i
 = 
pOp
->
p1
;

3519 
Curs‹
 *
pC
;

3520 
i64
 
v
;

3522 
	`as£π
–
i
>=0 && i<
p
->
nCurs‹
 );

3523 
pC
 = 
p
->
≠C§
[
i
];

3524 
	`as£π
–
pC
!=0 );

3525 
rc
 = 
	`sqlôe3VdbeCurs‹Movëo
(
pC
);

3526 if–
rc
 ) 
ab‹t_due_to_îr‹
;

3527 
pTos
++;

3528 if–
pC
->
rowidIsVÆid
 ){

3529 
v
 = 
pC
->
œ°Rowid
;

3530 }if–
pC
->
p£udoTabÀ
 ){

3531 
v
 = 
	`keyToI¡
(
pC
->
iKey
);

3532 }if–
pC
->
nuŒRow
 ||ÖC->
pCurs‹
==0 ){

3533 
pTos
->
Êags
 = 
MEM_NuŒ
;

3536 
	`as£π
–
pC
->
pCurs‹
!=0 );

3537 
	`sqlôe3BåìKeySize
(
pC
->
pCurs‹
, &
v
);

3538 
v
 = 
	`keyToI¡
(v);

3540 
pTos
->
i
 = 
v
;

3541 
pTos
->
Êags
 = 
MEM_I¡
;

3551 
OP_NuŒRow
: {

3552 
i
 = 
pOp
->
p1
;

3553 
Curs‹
 *
pC
;

3555 
	`as£π
–
i
>=0 && i<
p
->
nCurs‹
 );

3556 
pC
 = 
p
->
≠C§
[
i
];

3557 
	`as£π
–
pC
!=0 );

3558 
pC
->
nuŒRow
 = 1;

3559 
pC
->
rowidIsVÆid
 = 0;

3571 
OP_La°
: {

3572 
i
 = 
pOp
->
p1
;

3573 
Curs‹
 *
pC
;

3574 
BtCurs‹
 *
pCr§
;

3576 
	`as£π
–
i
>=0 && i<
p
->
nCurs‹
 );

3577 
pC
 = 
p
->
≠C§
[
i
];

3578 
	`as£π
–
pC
!=0 );

3579 if–(
pCr§
 = 
pC
->
pCurs‹
)!=0 ){

3580 
ªs
;

3581 
rc
 = 
	`sqlôe3BåìLa°
(
pCr§
, &
ªs
);

3582 
pC
->
nuŒRow
 = 
ªs
;

3583 
pC
->
de„ºedMovëo
 = 0;

3584 
pC
->
ˇcheSètus
 = 
CACHE_STALE
;

3585 if–
ªs
 && 
pOp
->
p2
>0 ){

3586 
pc
 = 
pOp
->
p2
 - 1;

3589 
pC
->
nuŒRow
 = 0;

3607 
OP_S‹t
: {

3608 
sqlôe3_s‹t_cou¡
++;

3609 
sqlôe3_£¨ch_cou¡
--;

3620 
OP_Rewöd
: {

3621 
i
 = 
pOp
->
p1
;

3622 
Curs‹
 *
pC
;

3623 
BtCurs‹
 *
pCr§
;

3624 
ªs
;

3626 
	`as£π
–
i
>=0 && i<
p
->
nCurs‹
 );

3627 
pC
 = 
p
->
≠C§
[
i
];

3628 
	`as£π
–
pC
!=0 );

3629 if–(
pCr§
 = 
pC
->
pCurs‹
)!=0 ){

3630 
rc
 = 
	`sqlôe3BåìFú°
(
pCr§
, &
ªs
);

3631 
pC
->
©Fú°
 = 
ªs
==0;

3632 
pC
->
de„ºedMovëo
 = 0;

3633 
pC
->
ˇcheSètus
 = 
CACHE_STALE
;

3635 
ªs
 = 1;

3637 
pC
->
nuŒRow
 = 
ªs
;

3638 if–
ªs
 && 
pOp
->
p2
>0 ){

3639 
pc
 = 
pOp
->
p2
 - 1;

3660 
OP_Pªv
:

3661 
OP_Next
: {

3662 
Curs‹
 *
pC
;

3663 
BtCurs‹
 *
pCr§
;

3665 
CHECK_FOR_INTERRUPT
;

3666 
	`as£π
–
pOp
->
p1
>=0 &&ÖOp->p1<
p
->
nCurs‹
 );

3667 
pC
 = 
p
->
≠C§
[
pOp
->
p1
];

3668 
	`as£π
–
pC
!=0 );

3669 if–(
pCr§
 = 
pC
->
pCurs‹
)!=0 ){

3670 
ªs
;

3671 if–
pC
->
nuŒRow
 ){

3672 
ªs
 = 1;

3674 
	`as£π
–
pC
->
de„ºedMovëo
==0 );

3675 
rc
 = 
pOp
->
›code
==
OP_Next
 ? 
	`sqlôe3BåìNext
(
pCr§
, &
ªs
) :

3676 
	`sqlôe3BåìPªvious
(
pCr§
, &
ªs
);

3677 
pC
->
nuŒRow
 = 
ªs
;

3678 
pC
->
ˇcheSètus
 = 
CACHE_STALE
;

3680 if–
ªs
==0 ){

3681 
pc
 = 
pOp
->
p2
 - 1;

3682 
sqlôe3_£¨ch_cou¡
++;

3685 
pC
->
nuŒRow
 = 1;

3687 
pC
->
rowidIsVÆid
 = 0;

3700 
OP_IdxIn£π
: {

3701 
i
 = 
pOp
->
p1
;

3702 
Curs‹
 *
pC
;

3703 
BtCurs‹
 *
pCr§
;

3704 
	`as£π
–
pTos
>=
p
->
aSèck
 );

3705 
	`as£π
–
i
>=0 && i<
p
->
nCurs‹
 );

3706 
	`as£π
–
p
->
≠C§
[
i
]!=0 );

3707 
	`as£π
–
pTos
->
Êags
 & 
MEM_Blob
 );

3708 
	`as£π
–
pOp
->
p2
==0 );

3709 if–(
pCr§
 = (
pC
 = 
p
->
≠C§
[
i
])->
pCurs‹
)!=0 ){

3710 
nKey
 = 
pTos
->
n
;

3711 c⁄° *
zKey
 = 
pTos
->
z
;

3712 
	`as£π
–
pC
->
isTabÀ
==0 );

3713 
rc
 = 
	`sqlôe3BåìIn£π
(
pCr§
, 
zKey
, 
nKey
, "", 0);

3714 
	`as£π
–
pC
->
de„ºedMovëo
==0 );

3715 
pC
->
ˇcheSètus
 = 
CACHE_STALE
;

3717 
	`Rñó£
(
pTos
);

3718 
pTos
--;

3728 
OP_IdxDñëe
: {

3729 
i
 = 
pOp
->
p1
;

3730 
Curs‹
 *
pC
;

3731 
BtCurs‹
 *
pCr§
;

3732 
	`as£π
–
pTos
>=
p
->
aSèck
 );

3733 
	`as£π
–
pTos
->
Êags
 & 
MEM_Blob
 );

3734 
	`as£π
–
i
>=0 && i<
p
->
nCurs‹
 );

3735 
	`as£π
–
p
->
≠C§
[
i
]!=0 );

3736 if–(
pCr§
 = (
pC
 = 
p
->
≠C§
[
i
])->
pCurs‹
)!=0 ){

3737 
ªs
;

3738 
rc
 = 
	`sqlôe3BåìMovëo
(
pCr§
, 
pTos
->
z
,ÖTos->
n
, &
ªs
);

3739 if–
rc
==
SQLITE_OK
 && 
ªs
==0 ){

3740 
rc
 = 
	`sqlôe3BåìDñëe
(
pCr§
);

3742 
	`as£π
–
pC
->
de„ºedMovëo
==0 );

3743 
pC
->
ˇcheSètus
 = 
CACHE_STALE
;

3745 
	`Rñó£
(
pTos
);

3746 
pTos
--;

3758 
OP_IdxRowid
: {

3759 
i
 = 
pOp
->
p1
;

3760 
BtCurs‹
 *
pCr§
;

3761 
Curs‹
 *
pC
;

3763 
	`as£π
–
i
>=0 && i<
p
->
nCurs‹
 );

3764 
	`as£π
–
p
->
≠C§
[
i
]!=0 );

3765 
pTos
++;

3766 
pTos
->
Êags
 = 
MEM_NuŒ
;

3767 if–(
pCr§
 = (
pC
 = 
p
->
≠C§
[
i
])->
pCurs‹
)!=0 ){

3768 
i64
 
rowid
;

3770 
	`as£π
–
pC
->
de„ºedMovëo
==0 );

3771 
	`as£π
–
pC
->
isTabÀ
==0 );

3772 if–
pC
->
nuŒRow
 ){

3773 
pTos
->
Êags
 = 
MEM_NuŒ
;

3775 
rc
 = 
	`sqlôe3VdbeIdxRowid
(
pCr§
, &
rowid
);

3776 if–
rc
!=
SQLITE_OK
 ){

3777 
ab‹t_due_to_îr‹
;

3779 
pTos
->
Êags
 = 
MEM_I¡
;

3780 
pTos
->
i
 = 
rowid
;

3830 
OP_IdxLT
:

3831 
OP_IdxGT
:

3832 
OP_IdxGE
: {

3833 
i

pOp
->
p1
;

3834 
Curs‹
 *
pC
;

3836 
	`as£π
–
i
>=0 && i<
p
->
nCurs‹
 );

3837 
	`as£π
–
p
->
≠C§
[
i
]!=0 );

3838 
	`as£π
–
pTos
>=
p
->
aSèck
 );

3839 if–(
pC
 = 
p
->
≠C§
[
i
])->
pCurs‹
!=0 ){

3840 
ªs
;

3842 
	`as£π
–
pTos
->
Êags
 & 
MEM_Blob
 );

3843 
	`Såögify
(
pTos
, 
ícodög
);

3844 
	`as£π
–
pC
->
de„ºedMovëo
==0 );

3845 *
pC
->
pIn¸Key
 = 
pOp
->
p3
!=0;

3846 
	`as£π
–
pOp
->
p3
==0 ||ÖOp->
›code
!=
OP_IdxGT
 );

3847 
rc
 = 
	`sqlôe3VdbeIdxKeyCom∑ª
(
pC
, 
pTos
->
n
, (
u8
*ÌTos->
z
, &
ªs
);

3848 *
pC
->
pIn¸Key
 = 0;

3849 if–
rc
!=
SQLITE_OK
 ){

3852 if–
pOp
->
›code
==
OP_IdxLT
 ){

3853 
ªs
 = -res;

3854 }if–
pOp
->
›code
==
OP_IdxGE
 ){

3855 
ªs
++;

3857 if–
ªs
>0 ){

3858 
pc
 = 
pOp
->
p2
 - 1 ;

3861 
	`Rñó£
(
pTos
);

3862 
pTos
--;

3875 
OP_IdxIsNuŒ
: {

3876 
i
 = 
pOp
->
p1
;

3877 
k
, 
n
;

3878 c⁄° *
z
;

3879 
u32
 
£rül_ty≥
;

3881 
	`as£π
–
pTos
>=
p
->
aSèck
 );

3882 
	`as£π
–
pTos
->
Êags
 & 
MEM_Blob
 );

3883 
z
 = 
pTos
->z;

3884 
n
 = 
pTos
->n;

3885 
k
 = 
	`sqlôe3GëV¨öt32
((
u8
*)
z
, &
£rül_ty≥
);

3886 ; 
k
<
n
 && 
i
>0; i--){

3887 
k
 +
	`sqlôe3GëV¨öt32
((
u8
*)&
z
[k], &
£rül_ty≥
);

3888 if–
£rül_ty≥
==0 ){

3889 
pc
 = 
pOp
->
p2
-1;

3893 
	`Rñó£
(
pTos
);

3894 
pTos
--;

3918 
OP_De°roy
: {

3919 
iMoved
;

3920 if–
db
->
a˘iveVdbeC¡
>1 ){

3921 
rc
 = 
SQLITE_LOCKED
;

3923 
	`as£π
–
db
->
a˘iveVdbeC¡
==1 );

3924 
rc
 = 
	`sqlôe3BåìDr›TabÀ
(
db
->
aDb
[
pOp
->
p2
].
pBt
,ÖOp->
p1
, &
iMoved
);

3925 
pTos
++;

3926 
pTos
->
Êags
 = 
MEM_I¡
;

3927 
pTos
->
i
 = 
iMoved
;

3928 #i‚de‡
SQLITE_OMIT_AUTOVACUUM


3929 if–
rc
==
SQLITE_OK
 && 
iMoved
!=0 ){

3930 
	`sqlôe3RoŸPageMoved
(&
db
->
aDb
[
pOp
->
p2
], 
iMoved
,ÖOp->
p1
);

3949 
OP_CÀ¨
: {

3955 
Båì
 *
pBt
 = 
db
->
aDb
[
pOp
->
p2
].pBt;

3956 if–
db
->
xUpd©eCÆlback
 && 
pOp
->
p3
 ){

3957 c⁄° *
zDb
 = 
db
->
aDb
[
pOp
->
p2
].
zName
;

3958 c⁄° *
zTbl
 = 
pOp
->
p3
;

3959 
BtCurs‹
 *
pCur
 = 0;

3960 
fö
 = 0;

3962 
rc
 = 
	`sqlôe3BåìCurs‹
(
pBt
, 
pOp
->
p1
, 0, 0, 0, &
pCur
);

3963 if–
rc
!=
SQLITE_OK
 ){

3964 
ab‹t_due_to_îr‹
;

3967 
rc
=
	`sqlôe3BåìFú°
(
pCur
, &
fö
);

3968 
rc
==
SQLITE_OK
 && !
fö
;

3969 
rc
=
	`sqlôe3BåìNext
(
pCur
, &
fö
)

3971 
i64
 
iKey
;

3972 
rc
 = 
	`sqlôe3BåìKeySize
(
pCur
, &
iKey
);

3973 if–
rc
 ){

3976 
iKey
 = 
	`keyToI¡
(iKey);

3977 
db
->
	`xUpd©eCÆlback
(db->
pUpd©eArg
, 
SQLITE_DELETE
, 
zDb
, 
zTbl
, 
iKey
);

3979 
	`sqlôe3BåìClo£Curs‹
(
pCur
);

3980 if–
rc
!=
SQLITE_OK
 ){

3981 
ab‹t_due_to_îr‹
;

3985 
rc
 = 
	`sqlôe3BåìCÀ¨TabÀ
(
db
->
aDb
[
pOp
->
p2
].
pBt
,ÖOp->
p1
);

4009 
OP_Cª©eIndex
:

4010 
OP_Cª©eTabÀ
: {

4011 
pgno
;

4012 
Êags
;

4013 
Db
 *
pDb
;

4014 
	`as£π
–
pOp
->
p1
>=0 &&ÖOp->p1<
db
->
nDb
 );

4015 
pDb
 = &
db
->
aDb
[
pOp
->
p1
];

4016 
	`as£π
–
pDb
->
pBt
!=0 );

4017 if–
pOp
->
›code
==
OP_Cª©eTabÀ
 ){

4019 
Êags
 = 
BTREE_LEAFDATA
|
BTREE_INTKEY
;

4021 
Êags
 = 
BTREE_ZERODATA
;

4023 
rc
 = 
	`sqlôe3BåìCª©eTabÀ
(
pDb
->
pBt
, &
pgno
, 
Êags
);

4024 
pTos
++;

4025 if–
rc
==
SQLITE_OK
 ){

4026 
pTos
->
i
 = 
pgno
;

4027 
pTos
->
Êags
 = 
MEM_I¡
;

4029 
pTos
->
Êags
 = 
MEM_NuŒ
;

4042 
OP_P¨£Schema
: {

4043 *
zSql
;

4044 
iDb
 = 
pOp
->
p1
;

4045 c⁄° *
zMa°î
;

4046 
InôD©a
 
öôD©a
;

4048 
	`as£π
–
iDb
>=0 && iDb<
db
->
nDb
 );

4049 if–!
	`DbHasPr›îty
(
db
, 
iDb
, 
DB_SchemaLﬂded
) ) ;

4050 
zMa°î
 = 
	`SCHEMA_TABLE
(
iDb
);

4051 
öôD©a
.
db
 = db;

4052 
öôD©a
.
pzEºMsg
 = &
p
->
zEºMsg
;

4053 
zSql
 = 
	`sqlôe3MPrötf
(

4055 
pOp
->
p1
, 
db
->
aDb
[
iDb
].
zName
, 
zMa°î
,ÖOp->
p3
);

4056 if–
zSql
==0 ) 
no_mem
;

4057 
	`sqlôe3Sa„tyOff
(
db
);

4058 
	`as£π
–
db
->
öô
.
busy
==0 );

4059 
db
->
öô
.
busy
 = 1;

4060 
	`as£π
–!
	`sqlôe3MÆlocFaûed
() );

4061 
rc
 = 
	`sqlôe3_exec
(
db
, 
zSql
, 
sqlôe3InôCÆlback
, &
öôD©a
, 0);

4062 
	`sqlôeFªe
(
zSql
);

4063 
db
->
öô
.
busy
 = 0;

4064 
	`sqlôe3Sa„tyOn
(
db
);

4065 if–
rc
==
SQLITE_NOMEM
 ){

4066 
	`sqlôe3FaûedMÆloc
();

4067 
no_mem
;

4072 #i‚de‡
SQLITE_OMIT_ANALYZE


4079 
OP_LﬂdA«lysis
: {

4080 
iDb
 = 
pOp
->
p1
;

4081 
	`as£π
–
iDb
>=0 && iDb<
db
->
nDb
 );

4082 
	`sqlôe3A«lysisLﬂd
(
db
, 
iDb
);

4094 
OP_Dr›TabÀ
: {

4095 
	`sqlôe3U∆ökAndDñëeTabÀ
(
db
, 
pOp
->
p1
,ÖOp->
p3
);

4106 
OP_Dr›Index
: {

4107 
	`sqlôe3U∆ökAndDñëeIndex
(
db
, 
pOp
->
p1
,ÖOp->
p3
);

4118 
OP_Dr›Triggî
: {

4119 
	`sqlôe3U∆ökAndDñëeTriggî
(
db
, 
pOp
->
p1
,ÖOp->
p3
);

4124 #i‚de‡
SQLITE_OMIT_INTEGRITY_CHECK


4140 
OP_I¡egrôyCk
: {

4141 
nRoŸ
;

4142 *
aRoŸ
;

4143 
j
;

4144 *
z
;

4146 
nRoŸ
=0; &
pTos
[-nRoŸ]>=
p
->
aSèck
;ÇRoot++){

4147 if–(
pTos
[-
nRoŸ
].
Êags
 & 
MEM_I¡
)==0 ) ;

4149 
	`as£π
–
nRoŸ
>0 );

4150 
aRoŸ
 = 
	`sqlôeMÆlocRaw
–(*)*(
nRoŸ
+1) );

4151 if–
aRoŸ
==0 ) 
no_mem
;

4152 
j
=0; j<
nRoŸ
; j++){

4153 
Mem
 *
pMem
 = &
pTos
[-
j
];

4154 
aRoŸ
[
j
] = 
pMem
->
i
;

4156 
aRoŸ
[
j
] = 0;

4157 
	`p›Sèck
(&
pTos
, 
nRoŸ
);

4158 
pTos
++;

4159 
z
 = 
	`sqlôe3BåìI¡egrôyCheck
(
db
->
aDb
[
pOp
->
p2
].
pBt
, 
aRoŸ
, 
nRoŸ
);

4160 if–
z
==0 || z[0]==0 ){

4161 if–
z
 ) 
	`sqlôeFªe
(z);

4162 
pTos
->
z
 = "ok";

4163 
pTos
->
n
 = 2;

4164 
pTos
->
Êags
 = 
MEM_Så
 | 
MEM_Sètic
 | 
MEM_Tîm
;

4166 
pTos
->
z
 = z;

4167 
pTos
->
n
 = 
	`°æí
(
z
);

4168 
pTos
->
Êags
 = 
MEM_Så
 | 
MEM_Dyn
 | 
MEM_Tîm
;

4169 
pTos
->
xDñ
 = 0;

4171 
pTos
->
íc
 = 
SQLITE_UTF8
;

4172 
	`sqlôe3VdbeCh™geEncodög
(
pTos
, 
ícodög
);

4173 
	`sqlôeFªe
(
aRoŸ
);

4183 
OP_FifoWrôe
: {

4184 
	`as£π
–
pTos
>=
p
->
aSèck
 );

4185 
	`sqlôe3VdbeMemI¡egîify
(
pTos
);

4186 
	`sqlôe3VdbeFifoPush
(&
p
->
sFifo
, 
pTos
->
i
);

4187 
	`as£π
–(
pTos
->
Êags
 & 
MEM_Dyn
)==0 );

4188 
pTos
--;

4198 
OP_FifoRód
: {

4199 
i64
 
v
;

4200 
CHECK_FOR_INTERRUPT
;

4201 if–
	`sqlôe3VdbeFifoP›
(&
p
->
sFifo
, &
v
)==
SQLITE_DONE
 ){

4202 
pc
 = 
pOp
->
p2
 - 1;

4204 
pTos
++;

4205 
pTos
->
i
 = 
v
;

4206 
pTos
->
Êags
 = 
MEM_I¡
;

4211 #i‚de‡
SQLITE_OMIT_TRIGGER


4218 
OP_C⁄ãxtPush
: {

4219 
i
 = 
p
->
c⁄ãxtSèckT›
++;

4220 
C⁄ãxt
 *
pC⁄ãxt
;

4222 
	`as£π
–
i
>=0 );

4224 if–
i
>=
p
->
c⁄ãxtSèckDïth
 ){

4225 
p
->
c⁄ãxtSèckDïth
 = 
i
+1;

4226 
	`sqlôeRóŒocOrFªe
((**)&
p
->
c⁄ãxtSèck
, (
C⁄ãxt
)*(
i
+1));

4227 if–
p
->
c⁄ãxtSèck
==0 ) 
no_mem
;

4229 
pC⁄ãxt
 = &
p
->
c⁄ãxtSèck
[
i
];

4230 
pC⁄ãxt
->
œ°Rowid
 = 
db
->lastRowid;

4231 
pC⁄ãxt
->
nCh™ge
 = 
p
->nChange;

4232 
pC⁄ãxt
->
sFifo
 = 
p
->sFifo;

4233 
	`sqlôe3VdbeFifoInô
(&
p
->
sFifo
);

4243 
OP_C⁄ãxtP›
: {

4244 
C⁄ãxt
 *
pC⁄ãxt
 = &
p
->
c⁄ãxtSèck
[--p->
c⁄ãxtSèckT›
];

4245 
	`as£π
–
p
->
c⁄ãxtSèckT›
>=0 );

4246 
db
->
œ°Rowid
 = 
pC⁄ãxt
->lastRowid;

4247 
p
->
nCh™ge
 = 
pC⁄ãxt
->nChange;

4248 
	`sqlôe3VdbeFifoCÀ¨
(&
p
->
sFifo
);

4249 
p
->
sFifo
 = 
pC⁄ãxt
->sFifo;

4264 
OP_MemSt‹e
: {

4265 
	`as£π
–
pTos
>=
p
->
aSèck
 );

4266 
	`as£π
–
pOp
->
p1
>=0 &&ÖOp->p1<
p
->
nMem
 );

4267 
rc
 = 
	`sqlôe3VdbeMemMove
(&
p
->
aMem
[
pOp
->
p1
], 
pTos
);

4268 
pTos
--;

4273 if–
pOp
->
p2
 ){

4286 
OP_MemLﬂd
: {

4287 
i
 = 
pOp
->
p1
;

4288 
	`as£π
–
i
>=0 && i<
p
->
nMem
 );

4289 
pTos
++;

4290 
	`sqlôe3VdbeMemShÆlowC›y
(
pTos
, &
p
->
aMem
[
i
], 
MEM_Ephem
);

4294 #i‚de‡
SQLITE_OMIT_AUTOINCREMENT


4303 
OP_MemMax
: {

4304 
i
 = 
pOp
->
p1
;

4305 
Mem
 *
pMem
;

4306 
	`as£π
–
pTos
>=
p
->
aSèck
 );

4307 
	`as£π
–
i
>=0 && i<
p
->
nMem
 );

4308 
pMem
 = &
p
->
aMem
[
i
];

4309 
	`sqlôe3VdbeMemI¡egîify
(
pMem
);

4310 
	`sqlôe3VdbeMemI¡egîify
(
pTos
);

4311 if–
pMem
->
i
<
pTos
->i){

4312 
pMem
->
i
 = 
pTos
->i;

4325 
OP_MemIn¸
: {

4326 
i
 = 
pOp
->
p2
;

4327 
Mem
 *
pMem
;

4328 
	`as£π
–
i
>=0 && i<
p
->
nMem
 );

4329 
pMem
 = &
p
->
aMem
[
i
];

4330 
	`as£π
–
pMem
->
Êags
==
MEM_I¡
 );

4331 
pMem
->
i
 +
pOp
->
p1
;

4342 
OP_IfMemPos
: {

4343 
i
 = 
pOp
->
p1
;

4344 
Mem
 *
pMem
;

4345 
	`as£π
–
i
>=0 && i<
p
->
nMem
 );

4346 
pMem
 = &
p
->
aMem
[
i
];

4347 
	`as£π
–
pMem
->
Êags
==
MEM_I¡
 );

4348 if–
pMem
->
i
>0 ){

4349 
pc
 = 
pOp
->
p2
 - 1;

4361 
OP_IfMemNeg
: {

4362 
i
 = 
pOp
->
p1
;

4363 
Mem
 *
pMem
;

4364 
	`as£π
–
i
>=0 && i<
p
->
nMem
 );

4365 
pMem
 = &
p
->
aMem
[
i
];

4366 
	`as£π
–
pMem
->
Êags
==
MEM_I¡
 );

4367 if–
pMem
->
i
<0 ){

4368 
pc
 = 
pOp
->
p2
 - 1;

4380 
OP_IfMemZîo
: {

4381 
i
 = 
pOp
->
p1
;

4382 
Mem
 *
pMem
;

4383 
	`as£π
–
i
>=0 && i<
p
->
nMem
 );

4384 
pMem
 = &
p
->
aMem
[
i
];

4385 
	`as£π
–
pMem
->
Êags
==
MEM_I¡
 );

4386 if–
pMem
->
i
==0 ){

4387 
pc
 = 
pOp
->
p2
 - 1;

4396 
OP_MemNuŒ
: {

4397 
	`as£π
–
pOp
->
p1
>=0 &&ÖOp->p1<
p
->
nMem
 );

4398 
	`sqlôe3VdbeMemSëNuŒ
(&
p
->
aMem
[
pOp
->
p1
]);

4406 
OP_MemI¡
: {

4407 
	`as£π
–
pOp
->
p2
>=0 &&ÖOp->p2<
p
->
nMem
 );

4408 
	`sqlôe3VdbeMemSëI¡64
(&
p
->
aMem
[
pOp
->
p2
],ÖOp->
p1
);

4418 
OP_MemMove
: {

4419 
	`as£π
–
pOp
->
p1
>=0 &&ÖOp->p1<
p
->
nMem
 );

4420 
	`as£π
–
pOp
->
p2
>=0 &&ÖOp->p2<
p
->
nMem
 );

4421 
rc
 = 
	`sqlôe3VdbeMemMove
(&
p
->
aMem
[
pOp
->
p1
], &p->aMem[pOp->
p2
]);

4434 
OP_AggSãp
: {

4435 
n
 = 
pOp
->
p2
;

4436 
i
;

4437 
Mem
 *
pMem
, *
pRec
;

4438 
sqlôe3_c⁄ãxt
 
˘x
;

4439 
sqlôe3_vÆue
 **
≠VÆ
;

4441 
	`as£π
–
n
>=0 );

4442 
pRec
 = &
pTos
[1-
n
];

4443 
	`as£π
–
pRec
>=
p
->
aSèck
 );

4444 
≠VÆ
 = 
p
->
≠Arg
;

4445 
	`as£π
–
≠VÆ
 || 
n
==0 );

4446 
i
=0; i<
n
; i++, 
pRec
++){

4447 
≠VÆ
[
i
] = 
pRec
;

4448 
	`°‹eTy≥Info
(
pRec
, 
ícodög
);

4450 
˘x
.
pFunc
 = (
FuncDef
*)
pOp
->
p3
;

4451 
	`as£π
–
pOp
->
p1
>=0 &&ÖOp->p1<
p
->
nMem
 );

4452 
˘x
.
pMem
 =ÖMem = &
p
->
aMem
[
pOp
->
p1
];

4453 
pMem
->
n
++;

4454 
˘x
.
s
.
Êags
 = 
MEM_NuŒ
;

4455 
˘x
.
s
.
z
 = 0;

4456 
˘x
.
s
.
xDñ
 = 0;

4457 
˘x
.
isEº‹
 = 0;

4458 
˘x
.
pCﬁl
 = 0;

4459 if–
˘x
.
pFunc
->
√edCﬁlSeq
 ){

4460 
	`as£π
–
pOp
>
p
->
aOp
 );

4461 
	`as£π
–
pOp
[-1].
p3ty≥
==
P3_COLLSEQ
 );

4462 
	`as£π
–
pOp
[-1].
›code
==
OP_CﬁlSeq
 );

4463 
˘x
.
pCﬁl
 = (
CﬁlSeq
 *)
pOp
[-1].
p3
;

4465 (
˘x
.
pFunc
->
xSãp
)(&˘x, 
n
, 
≠VÆ
);

4466 
	`p›Sèck
(&
pTos
, 
n
);

4467 if–
˘x
.
isEº‹
 ){

4468 
	`sqlôe3SëSåög
(&
p
->
zEºMsg
, 
	`sqlôe3_vÆue_ãxt
(&
˘x
.
s
), (*)0);

4469 
rc
 = 
SQLITE_ERROR
;

4471 
	`sqlôe3VdbeMemRñó£
(&
˘x
.
s
);

4487 
OP_AggFöÆ
: {

4488 
Mem
 *
pMem
;

4489 
	`as£π
–
pOp
->
p1
>=0 &&ÖOp->p1<
p
->
nMem
 );

4490 
pMem
 = &
p
->
aMem
[
pOp
->
p1
];

4491 
	`as£π
–(
pMem
->
Êags
 & ~(
MEM_NuŒ
|
MEM_Agg
))==0 );

4492 
rc
 = 
	`sqlôe3VdbeMemFöÆize
(
pMem
, (
FuncDef
*)
pOp
->
p3
);

4493 if–
rc
==
SQLITE_ERROR
 ){

4494 
	`sqlôe3SëSåög
(&
p
->
zEºMsg
, 
	`sqlôe3_vÆue_ãxt
(
pMem
), (*)0);

4506 
OP_Vacuum
: {

4507 if–
	`sqlôe3Sa„tyOff
(
db
ËË
ab‹t_due_to_misu£
;

4508 
rc
 = 
	`sqlôe3RunVacuum
(&
p
->
zEºMsg
, 
db
);

4509 if–
	`sqlôe3Sa„tyOn
(
db
ËË
ab‹t_due_to_misu£
;

4522 
OP_Expúe
: {

4523 if–!
pOp
->
p1
 ){

4524 
	`sqlôe3ExpúePª∑ªdSèãmíts
(
db
);

4526 
p
->
expúed
 = 1;

4531 #i‚de‡
SQLITE_OMIT_SHARED_CACHE


4548 
OP_TabÀLock
: {

4549 
p1
 = 
pOp
->p1;

4550 
u8
 
isWrôeLock
 = (
p1
<0);

4551 if–
isWrôeLock
 ){

4552 
p1
 = (-1*p1)-1;

4554 
rc
 = 
	`sqlôe3BåìLockTabÀ
(
db
->
aDb
[
p1
].
pBt
, 
pOp
->
p2
, 
isWrôeLock
);

4555 if–
rc
==
SQLITE_LOCKED
 ){

4556 c⁄° *
z
 = (c⁄° *)
pOp
->
p3
;

4557 
	`sqlôe3SëSåög
(&
p
->
zEºMsg
, "d©aba£ÅabÀ i†locked: ", 
z
, (*)0);

4566 
	`as£π
( 0 );

4579 
	`as£π
–
pTos
<=
pSèckLimô
 );

4581 #ifde‡
VDBE_PROFILE


4583 
ñ≠£
 = 
	`hwtime
(Ë- 
°¨t
;

4584 
pOp
->
cy˛es
 +
ñ≠£
;

4585 
pOp
->
˙t
++;

4587 
	`Ârötf
(
°dout
, "%10Œd ", 
ñ≠£
);

4588 
	`sqlôe3VdbePrötOp
(
°dout
, 
‹igPc
, &
p
->
aOp
[origPc]);

4598 #i‚de‡
NDEBUG


4600 if–
pTos
>=
p
->
aSèck
 ){

4601 
	`sqlôe3VdbeMemS™ôy
(
pTos
, 
ícodög
);

4603 
	`as£π
–
pc
>=-1 &&Öc<
p
->
nOp
 );

4604 #ifde‡
SQLITE_DEBUG


4606 if–
p
->
åa˚
 && 
pTos
>ı->
aSèck
 ){

4607 
i
;

4608 
	`Ârötf
(
p
->
åa˚
, "Stack:");

4609 
i
=0; i>-5 && &
pTos
[i]>=
p
->
aSèck
; i--){

4610 if–
pTos
[
i
].
Êags
 & 
MEM_NuŒ
 ){

4611 
	`Ârötf
(
p
->
åa˚
, " NULL");

4612 }if–(
pTos
[
i
].
Êags
 & (
MEM_I¡
|
MEM_Så
))==(MEM_Int|MEM_Str) ){

4613 
	`Ârötf
(
p
->
åa˚
, " si:%Œd", 
pTos
[
i
].i);

4614 }if–
pTos
[
i
].
Êags
 & 
MEM_I¡
 ){

4615 
	`Ârötf
(
p
->
åa˚
, " i:%Œd", 
pTos
[
i
].i);

4616 }if–
pTos
[
i
].
Êags
 & 
MEM_Ról
 ){

4617 
	`Ârötf
(
p
->
åa˚
, "Ñ:%g", 
pTos
[
i
].
r
);

4619 
zBuf
[100];

4620 
	`sqlôe3VdbeMemPªâyPröt
(&
pTos
[
i
], 
zBuf
, 100);

4621 
	`Ârötf
(
p
->
åa˚
, " ");

4622 
	`Ârötf
(
p
->
åa˚
, "%s", 
zBuf
);

4625 if–
rc
!=0 ) 
	`Ârötf
(
p
->
åa˚
,"Ñc=%d",rc);

4626 
	`Ârötf
(
p
->
åa˚
,"\n");

4634 
vdbe_hÆt
:

4635 if–
rc
 ){

4636 
p
->
rc
 =Ñc;

4637 
rc
 = 
SQLITE_ERROR
;

4639 
rc
 = 
SQLITE_DONE
;

4641 
	`sqlôe3VdbeHÆt
(
p
);

4642 
p
->
pTos
 =ÖTos;

4643  
rc
;

4648 
no_mem
:

4649 
	`sqlôe3SëSåög
(&
p
->
zEºMsg
, "out of memory", (*)0);

4650 
rc
 = 
SQLITE_NOMEM
;

4651 
vdbe_hÆt
;

4655 
ab‹t_due_to_misu£
:

4656 
rc
 = 
SQLITE_MISUSE
;

4662 
ab‹t_due_to_îr‹
:

4663 if–
p
->
zEºMsg
==0 ){

4664 if–
	`sqlôe3MÆlocFaûed
(ËË
rc
 = 
SQLITE_NOMEM
;

4665 
	`sqlôe3SëSåög
(&
p
->
zEºMsg
, 
	`sqlôe3EºSå
(
rc
), (*)0);

4667 
vdbe_hÆt
;

4672 
ab‹t_due_to_öãºu±
:

4673 
	`as£π
–
db
->
Êags
 & 
SQLITE_I¡îru±
 );

4674 
db
->
Êags
 &~
SQLITE_I¡îru±
;

4675 if–
db
->
magic
!=
SQLITE_MAGIC_BUSY
 ){

4676 
rc
 = 
SQLITE_MISUSE
;

4678 
rc
 = 
SQLITE_INTERRUPT
;

4680 
p
->
rc
 =Ñc;

4681 
	`sqlôe3SëSåög
(&
p
->
zEºMsg
, 
	`sqlôe3EºSå
(
rc
), (*)0);

4682 
vdbe_hÆt
;

4683 
	}
}

	@vdbe.h

20 #i‚de‡
_SQLITE_VDBE_H_


21 
	#_SQLITE_VDBE_H_


	)

22 
	~<°dio.h
>

29 
Vdbe
 
	tVdbe
;

36 
	sVdbeOp
 {

37 
u8
 
	m›code
;

38 
	mp1
;

39 
	mp2
;

40 *
	mp3
;

41 
	mp3ty≥
;

42 #ifde‡
VDBE_PROFILE


43 
	m˙t
;

44 
	mcy˛es
;

47 
VdbeOp
 
	tVdbeOp
;

53 
	sVdbeOpLi°
 {

54 
u8
 
	m›code
;

55 sig√d 
	mp1
;

56 
	mp2
;

57 *
	mp3
;

59 
VdbeOpLi°
 
	tVdbeOpLi°
;

64 
	#P3_NOTUSED
 0

	)

65 
	#P3_DYNAMIC
 (-1Ë

	)

66 
	#P3_STATIC
 (-2Ë

	)

67 
	#P3_COLLSEQ
 (-4Ë

	)

68 
	#P3_FUNCDEF
 (-5Ë

	)

69 
	#P3_KEYINFO
 (-6Ë

	)

70 
	#P3_VDBEFUNC
 (-7Ë

	)

71 
	#P3_MEM
 (-8Ë

	)

80 
	#P3_KEYINFO_HANDOFF
 (-9)

	)

88 
	#ADDR
(
X
Ë(-1-(X))

	)

94 
	~"›codes.h
"

100 
Vdbe
 *
sqlôe3VdbeCª©e
(
sqlôe3
*);

101 
sqlôe3VdbeCª©eCÆlback
(
Vdbe
*, *);

102 
sqlôe3VdbeAddOp
(
Vdbe
*,,,);

103 
sqlôe3VdbeOp3
(
Vdbe
*,,,,c⁄° *
zP3
,);

104 
sqlôe3VdbeAddOpLi°
(
Vdbe
*, 
nOp
, 
VdbeOpLi°
 c⁄° *
aOp
);

105 
sqlôe3VdbeCh™geP1
(
Vdbe
*, 
addr
, 
P1
);

106 
sqlôe3VdbeCh™geP2
(
Vdbe
*, 
addr
, 
P2
);

107 
sqlôe3VdbeJumpHîe
(
Vdbe
*, 
addr
);

108 
sqlôe3VdbeCh™geP3
(
Vdbe
*, 
addr
, c⁄° *
zP1
, 
N
);

109 
VdbeOp
 *
sqlôe3VdbeGëOp
(
Vdbe
*, );

110 
sqlôe3VdbeMakeLabñ
(
Vdbe
*);

111 
sqlôe3VdbeDñëe
(
Vdbe
*);

112 
sqlôe3VdbeMakeRódy
(
Vdbe
*,,,,);

113 
sqlôe3VdbeFöÆize
(
Vdbe
*);

114 
sqlôe3VdbeResﬁveLabñ
(
Vdbe
*, );

115 
sqlôe3VdbeCuºítAddr
(
Vdbe
*);

116 
sqlôe3VdbeTø˚
(
Vdbe
*,
FILE
*);

117 
sqlôe3VdbeRe£t
(
Vdbe
*);

118 
sqlôeVdbeSëV¨übÀs
(
Vdbe
*,,const **);

119 
sqlôe3VdbeSëNumCﬁs
(
Vdbe
*,);

120 
sqlôe3VdbeSëCﬁName
(
Vdbe
*, , const *, );

121 
sqlôe3VdbeCou¡Ch™ges
(
Vdbe
*);

122 
sqlôe3
 *
sqlôe3VdbeDb
(
Vdbe
*);

124 #i‚de‡
NDEBUG


125 
sqlôe3VdbeCommít
(
Vdbe
*, const *, ...);

126 
	#VdbeCommít
(
X
Ë
sqlôe3VdbeCommít
 
	)
X

128 
	#VdbeCommít
(
X
)

	)

	@vdbeInt.h

23 
	#keyToI¡
(
X
Ë(X)

	)

24 
	#ötToKey
(
X
Ë(X)

	)

32 *
sqlôe3OpcodeNames
[];

39 
VdbeOp
 
	tOp
;

44 
	tBoﬁ
;

61 
	sCurs‹
 {

62 
BtCurs‹
 *
	mpCurs‹
;

63 
	miDb
;

64 
i64
 
	mœ°Rowid
;

65 
i64
 
	m√xtRowid
;

66 
Boﬁ
 
	mzî€d
;

67 
Boﬁ
 
	mrowidIsVÆid
;

68 
Boﬁ
 
	m©Fú°
;

69 
Boﬁ
 
	mu£R™domRowid
;

70 
Boﬁ
 
	mnuŒRow
;

71 
Boﬁ
 
	m√xtRowidVÆid
;

72 
Boﬁ
 
	mp£udoTabÀ
;

73 
Boﬁ
 
	mde„ºedMovëo
;

74 
Boﬁ
 
	misTabÀ
;

75 
Boﬁ
 
	misIndex
;

76 
u8
 
	mbogusIn¸Key
;

77 
i64
 
	mmovëoT¨gë
;

78 
Båì
 *
	mpBt
;

79 
	mnD©a
;

80 *
	mpD©a
;

81 
i64
 
	miKey
;

82 
u8
 *
	mpIn¸Key
;

83 
KeyInfo
 *
	mpKeyInfo
;

84 
	mnFõld
;

85 
i64
 
	m£qCou¡
;

92 
	mˇcheSètus
;

93 
	m∑ylﬂdSize
;

94 
u32
 *
	maTy≥
;

95 
u32
 *
	maOff£t
;

96 
u8
 *
	maRow
;

98 
Curs‹
 
	tCurs‹
;

105 
	#NBFS
 32

	)

110 
	#CACHE_STALE
 0

	)

123 
	sMem
 {

124 
i64
 
	mi
;

125 
	mr
;

126 *
	mz
;

127 
	mn
;

128 
u16
 
	mÊags
;

129 
u8
 
	mty≥
;

130 
u8
 
	míc
;

131 (*
	mxDñ
)(*);

132 
	mzSh‹t
[
NBFS
];

134 
Mem
 
	tMem
;

151 
	#MEM_NuŒ
 0x0001

	)

152 
	#MEM_Så
 0x0002

	)

153 
	#MEM_I¡
 0x0004

	)

154 
	#MEM_Ról
 0x0008

	)

155 
	#MEM_Blob
 0x0010

	)

162 
	#MEM_Tîm
 0x0020

	)

163 
	#MEM_Dyn
 0x0040

	)

164 
	#MEM_Sètic
 0x0080

	)

165 
	#MEM_Ephem
 0x0100

	)

166 
	#MEM_Sh‹t
 0x0200

	)

167 
	#MEM_Agg
 0x0400

	)

179 
	sVdbeFunc
 {

180 
FuncDef
 *
	mpFunc
;

181 
	mnAux
;

182 
	sAuxD©a
 {

183 *
	mpAux
;

184 (*
	mxDñëe
)(*);

185 } 
	m≠Aux
[1];

187 
VdbeFunc
 
	tVdbeFunc
;

202 
	ssqlôe3_c⁄ãxt
 {

203 
FuncDef
 *
	mpFunc
;

204 
VdbeFunc
 *
	mpVdbeFunc
;

205 
Mem
 
	ms
;

206 
Mem
 *
	mpMem
;

207 
u8
 
	misEº‹
;

208 
CﬁlSeq
 *
	mpCﬁl
;

217 
Së
 
	tSë
;

218 
	sSë
 {

219 
Hash
 
	mhash
;

220 
HashEÀm
 *
	m¥ev
;

227 
FifoPage
 
	tFifoPage
;

228 
	sFifoPage
 {

229 
	mnSlŸ
;

230 
	miWrôe
;

231 
	miRód
;

232 
FifoPage
 *
	mpNext
;

233 
i64
 
	maSlŸ
[1];

242 
Fifo
 
	tFifo
;

243 
	sFifo
 {

244 
	mnE¡ry
;

245 
FifoPage
 *
	mpFú°
;

246 
FifoPage
 *
	mpLa°
;

258 
C⁄ãxt
 
	tC⁄ãxt
;

259 
	sC⁄ãxt
 {

260 
i64
 
	mœ°Rowid
;

261 
	mnCh™ge
;

262 
Fifo
 
	msFifo
;

272 
	sVdbe
 {

273 
sqlôe3
 *
	mdb
;

274 
Vdbe
 *
	mpPªv
,*
	mpNext
;

275 
FILE
 *
	måa˚
;

276 
	mnOp
;

277 
	mnOpAŒoc
;

278 
Op
 *
	maOp
;

279 
	mnLabñ
;

280 
	mnLabñAŒoc
;

281 *
	maLabñ
;

282 
Mem
 *
	maSèck
;

283 
Mem
 *
	mpTos
;

284 
Mem
 **
	m≠Arg
;

285 
Mem
 *
	maCﬁName
;

286 
	mnCurs‹
;

287 
Curs‹
 **
	m≠C§
;

288 
	mnV¨
;

289 
Mem
 *
	maV¨
;

290 **
	mazV¨
;

291 
	mokV¨
;

292 
	mmagic
;

293 
	mnMem
;

294 
Mem
 *
	maMem
;

295 
	mnCÆlback
;

296 
	mˇcheCå
;

297 
Fifo
 
	msFifo
;

298 
	mc⁄ãxtSèckT›
;

299 
	mc⁄ãxtSèckDïth
;

300 
C⁄ãxt
 *
	mc⁄ãxtSèck
;

301 
	mpc
;

302 
	mrc
;

303 
	muniqueC¡
;

304 
	mîr‹A˘i⁄
;

305 
	möTempTøns
;

306 
	mªtu∫Sèck
[100];

307 
	mªtu∫Dïth
;

308 
	mnResCﬁumn
;

309 **
	mazResCﬁumn
;

310 
	mp›Sèck
;

311 *
	mzEºMsg
;

312 
u8
 
	mªsOnSèck
;

313 
u8
 
	mex∂aö
;

314 
u8
 
	mch™geC¡On
;

315 
u8
 
	mab‹ãd
;

316 
u8
 
	mexpúed
;

317 
u8
 
	mmöWrôeFûeF‹m©
;

318 
	mnCh™ge
;

319 
i64
 
	m°¨tTime
;

325 
	#VDBE_MAGIC_INIT
 0x26b˚Ø5

	)

326 
	#VDBE_MAGIC_RUN
 0xbdf20da3

	)

327 
	#VDBE_MAGIC_HALT
 0x519c2973

	)

328 
	#VDBE_MAGIC_DEAD
 0xb606c3c8

	)

333 
sqlôe3VdbeFªeCurs‹
(
Curs‹
*);

334 
sqlôeVdbeP›Sèck
(
Vdbe
*,);

335 
sqlôe3VdbeCurs‹Movëo
(
Curs‹
*);

336 #i‡
deföed
(
SQLITE_DEBUG
Ë|| deföed(
VDBE_PROFILE
)

337 
sqlôe3VdbePrötOp
(
FILE
*, , 
Op
*);

339 #ifde‡
SQLITE_DEBUG


340 
sqlôe3VdbePrötSql
(
Vdbe
*);

342 
sqlôe3VdbeSîülTy≥Lí
(
u32
);

343 
u32
 
sqlôe3VdbeSîülTy≥
(
Mem
*, );

344 
sqlôe3VdbeSîülPut
(*, 
Mem
*, );

345 
sqlôe3VdbeSîülGë
(c⁄° *, 
u32
, 
Mem
*);

346 
sqlôe3VdbeDñëeAuxD©a
(
VdbeFunc
*, );

348 
sqlôe2BåìKeyCom∑ª
(
BtCurs‹
 *, const *, , , *);

349 
sqlôe3VdbeIdxKeyCom∑ª
(
Curs‹
*, , const *, *);

350 
sqlôe3VdbeIdxRowid
(
BtCurs‹
 *, 
i64
 *);

351 
sqlôe3MemCom∑ª
(c⁄° 
Mem
*, c⁄° Mem*, c⁄° 
CﬁlSeq
*);

352 
sqlôe3VdbeRec‹dCom∑ª
(*,,const *,, const *);

353 
sqlôe3VdbeIdxRowidLí
(,c⁄° 
u8
*);

354 
sqlôe3VdbeExec
(
Vdbe
*);

355 
sqlôe3VdbeLi°
(
Vdbe
*);

356 
sqlôe3VdbeHÆt
(
Vdbe
*);

357 
sqlôe3VdbeCh™geEncodög
(
Mem
 *, );

358 
sqlôe3VdbeMemC›y
(
Mem
*, const Mem*);

359 
sqlôe3VdbeMemShÆlowC›y
(
Mem
*, const Mem*, );

360 
sqlôe3VdbeMemMove
(
Mem
*, Mem*);

361 
sqlôe3VdbeMemNulTîmö©e
(
Mem
*);

362 
sqlôe3VdbeMemSëSå
(
Mem
*, c⁄° *, , 
u8
, (*)(*));

363 
	`sqlôe3VdbeMemSëI¡64
(
Mem
*, 
i64
);

364 
	`sqlôe3VdbeMemSëDoubÀ
(
Mem
*, );

365 
	`sqlôe3VdbeMemSëNuŒ
(
Mem
*);

366 
	`sqlôe3VdbeMemMakeWrôóbÀ
(
Mem
*);

367 
	`sqlôe3VdbeMemDy«micify
(
Mem
*);

368 
	`sqlôe3VdbeMemSåögify
(
Mem
*, );

369 
i64
 
	`sqlôe3VdbeI¡VÆue
(
Mem
*);

370 
	`sqlôe3VdbeMemI¡egîify
(
Mem
*);

371 
	`sqlôe3VdbeRólVÆue
(
Mem
*);

372 
	`sqlôe3VdbeI¡egîAfföôy
(
Mem
*);

373 
	`sqlôe3VdbeMemRólify
(
Mem
*);

374 
	`sqlôe3VdbeMemNumîify
(
Mem
*);

375 
	`sqlôe3VdbeMemFromBåì
(
BtCurs‹
*,,,,
Mem
*);

376 
	`sqlôe3VdbeMemRñó£
(
Mem
 *
p
);

377 
	`sqlôe3VdbeMemFöÆize
(
Mem
*, 
FuncDef
*);

378 #i‚de‡
NDEBUG


379 
	`sqlôe3VdbeMemS™ôy
(
Mem
*, 
u8
);

380 
	`sqlôe3VdbeOpcodeNoPush
(
u8
);

382 
	`sqlôe3VdbeMemTøn¶©e
(
Mem
*, 
u8
);

383 
	`sqlôe3VdbeMemPªâyPröt
(
Mem
 *
pMem
, *
zBuf
, 
nBuf
);

384 
	`sqlôe3VdbeMemH™dÀBom
(
Mem
 *
pMem
);

385 
	`sqlôe3VdbeFifoInô
(
Fifo
*);

386 
	`sqlôe3VdbeFifoPush
(
Fifo
*, 
i64
);

387 
	`sqlôe3VdbeFifoP›
(
Fifo
*, 
i64
*);

388 
	`sqlôe3VdbeFifoCÀ¨
(
Fifo
*);

	@vdbeapi.c

16 
	~"sqlôeI¡.h
"

17 
	~"vdbeI¡.h
"

18 
	~"os.h
"

28 
	$sqlôe3_expúed
(
sqlôe3_°mt
 *
pStmt
){

29 
Vdbe
 *
p
 = (Vdbe*)
pStmt
;

30  
p
==0 ||Ö->
expúed
;

31 
	}
}

37 c⁄° *
	$sqlôe3_vÆue_blob
(
sqlôe3_vÆue
 *
pVÆ
){

38 
Mem
 *
p
 = (Mem*)
pVÆ
;

39 if–
p
->
Êags
 & (
MEM_Blob
|
MEM_Så
) ){

40  
p
->
z
;

42  
	`sqlôe3_vÆue_ãxt
(
pVÆ
);

44 
	}
}

45 
	$sqlôe3_vÆue_byãs
(
sqlôe3_vÆue
 *
pVÆ
){

46  
	`sqlôe3VÆueByãs
(
pVÆ
, 
SQLITE_UTF8
);

47 
	}
}

48 
	$sqlôe3_vÆue_byãs16
(
sqlôe3_vÆue
 *
pVÆ
){

49  
	`sqlôe3VÆueByãs
(
pVÆ
, 
SQLITE_UTF16NATIVE
);

50 
	}
}

51 
	$sqlôe3_vÆue_doubÀ
(
sqlôe3_vÆue
 *
pVÆ
){

52  
	`sqlôe3VdbeRólVÆue
((
Mem
*)
pVÆ
);

53 
	}
}

54 
	$sqlôe3_vÆue_öt
(
sqlôe3_vÆue
 *
pVÆ
){

55  
	`sqlôe3VdbeI¡VÆue
((
Mem
*)
pVÆ
);

56 
	}
}

57 
sqlôe_öt64
 
	$sqlôe3_vÆue_öt64
(
sqlôe3_vÆue
 *
pVÆ
){

58  
	`sqlôe3VdbeI¡VÆue
((
Mem
*)
pVÆ
);

59 
	}
}

60 c⁄° *
	$sqlôe3_vÆue_ãxt
(
sqlôe3_vÆue
 *
pVÆ
){

61  (c⁄° *)
	`sqlôe3VÆueText
(
pVÆ
, 
SQLITE_UTF8
);

62 
	}
}

63 #i‚de‡
SQLITE_OMIT_UTF16


64 c⁄° *
	$sqlôe3_vÆue_ãxt16
(
sqlôe3_vÆue
* 
pVÆ
){

65  
	`sqlôe3VÆueText
(
pVÆ
, 
SQLITE_UTF16NATIVE
);

66 
	}
}

67 c⁄° *
	$sqlôe3_vÆue_ãxt16be
(
sqlôe3_vÆue
 *
pVÆ
){

68  
	`sqlôe3VÆueText
(
pVÆ
, 
SQLITE_UTF16BE
);

69 
	}
}

70 c⁄° *
	$sqlôe3_vÆue_ãxt16À
(
sqlôe3_vÆue
 *
pVÆ
){

71  
	`sqlôe3VÆueText
(
pVÆ
, 
SQLITE_UTF16LE
);

72 
	}
}

74 
	$sqlôe3_vÆue_ty≥
(
sqlôe3_vÆue
* 
pVÆ
){

75  
pVÆ
->
ty≥
;

76 
	}
}

83 
sqlôe3_ªsu…_blob
(

84 
sqlôe3_c⁄ãxt
 *
pCtx
,

85 c⁄° *
z
,

86 
n
,

87 (*
xDñ
)(*)

89 
	`as£π
–
n
>=0 );

90 
	`sqlôe3VdbeMemSëSå
(&
pCtx
->
s
, 
z
, 
n
, 0, 
xDñ
);

91 
	}
}

92 
	$sqlôe3_ªsu…_doubÀ
(
sqlôe3_c⁄ãxt
 *
pCtx
, 
rVÆ
){

93 
	`sqlôe3VdbeMemSëDoubÀ
(&
pCtx
->
s
, 
rVÆ
);

94 
	}
}

95 
	$sqlôe3_ªsu…_îr‹
(
sqlôe3_c⁄ãxt
 *
pCtx
, c⁄° *
z
, 
n
){

96 
pCtx
->
isEº‹
 = 1;

97 
	`sqlôe3VdbeMemSëSå
(&
pCtx
->
s
, 
z
, 
n
, 
SQLITE_UTF8
, 
SQLITE_TRANSIENT
);

98 
	}
}

99 #i‚de‡
SQLITE_OMIT_UTF16


100 
	$sqlôe3_ªsu…_îr‹16
(
sqlôe3_c⁄ãxt
 *
pCtx
, c⁄° *
z
, 
n
){

101 
pCtx
->
isEº‹
 = 1;

102 
	`sqlôe3VdbeMemSëSå
(&
pCtx
->
s
, 
z
, 
n
, 
SQLITE_UTF16NATIVE
, 
SQLITE_TRANSIENT
);

103 
	}
}

105 
	$sqlôe3_ªsu…_öt
(
sqlôe3_c⁄ãxt
 *
pCtx
, 
iVÆ
){

106 
	`sqlôe3VdbeMemSëI¡64
(&
pCtx
->
s
, (
i64
)
iVÆ
);

107 
	}
}

108 
	$sqlôe3_ªsu…_öt64
(
sqlôe3_c⁄ãxt
 *
pCtx
, 
i64
 
iVÆ
){

109 
	`sqlôe3VdbeMemSëI¡64
(&
pCtx
->
s
, 
iVÆ
);

110 
	}
}

111 
	$sqlôe3_ªsu…_nuŒ
(
sqlôe3_c⁄ãxt
 *
pCtx
){

112 
	`sqlôe3VdbeMemSëNuŒ
(&
pCtx
->
s
);

113 
	}
}

114 
sqlôe3_ªsu…_ãxt
(

115 
sqlôe3_c⁄ãxt
 *
pCtx
,

116 c⁄° *
z
,

117 
n
,

118 (*
xDñ
)(*)

120 
	`sqlôe3VdbeMemSëSå
(&
pCtx
->
s
, 
z
, 
n
, 
SQLITE_UTF8
, 
xDñ
);

121 
	}
}

122 #i‚de‡
SQLITE_OMIT_UTF16


123 
sqlôe3_ªsu…_ãxt16
(

124 
sqlôe3_c⁄ãxt
 *
pCtx
,

125 c⁄° *
z
,

126 
n
,

127 (*
xDñ
)(*)

129 
	`sqlôe3VdbeMemSëSå
(&
pCtx
->
s
, 
z
, 
n
, 
SQLITE_UTF16NATIVE
, 
xDñ
);

130 
	}
}

131 
sqlôe3_ªsu…_ãxt16be
(

132 
sqlôe3_c⁄ãxt
 *
pCtx
,

133 c⁄° *
z
,

134 
n
,

135 (*
xDñ
)(*)

137 
	`sqlôe3VdbeMemSëSå
(&
pCtx
->
s
, 
z
, 
n
, 
SQLITE_UTF16BE
, 
xDñ
);

138 
	}
}

139 
sqlôe3_ªsu…_ãxt16À
(

140 
sqlôe3_c⁄ãxt
 *
pCtx
,

141 c⁄° *
z
,

142 
n
,

143 (*
xDñ
)(*)

145 
	`sqlôe3VdbeMemSëSå
(&
pCtx
->
s
, 
z
, 
n
, 
SQLITE_UTF16LE
, 
xDñ
);

146 
	}
}

148 
	$sqlôe3_ªsu…_vÆue
(
sqlôe3_c⁄ãxt
 *
pCtx
, 
sqlôe3_vÆue
 *
pVÆue
){

149 
	`sqlôe3VdbeMemC›y
(&
pCtx
->
s
, 
pVÆue
);

150 
	}
}

157 
	$sqlôe3_°ï
(
sqlôe3_°mt
 *
pStmt
){

158 
Vdbe
 *
p
 = (Vdbe*)
pStmt
;

159 
sqlôe3
 *
db
;

160 
rc
;

163 
	`as£π
–!
	`sqlôe3MÆlocFaûed
() );

165 if–
p
==0 ||Ö->
magic
!=
VDBE_MAGIC_RUN
 ){

166  
SQLITE_MISUSE
;

168 if–
p
->
ab‹ãd
 ){

169  
SQLITE_ABORT
;

171 if–
p
->
pc
<=0 &&Ö->
expúed
 ){

172 if–
p
->
rc
==
SQLITE_OK
 ){

173 
p
->
rc
 = 
SQLITE_SCHEMA
;

175  
SQLITE_ERROR
;

177 
db
 = 
p
->db;

178 if–
	`sqlôe3Sa„tyOn
(
db
) ){

179 
p
->
rc
 = 
SQLITE_MISUSE
;

180  
SQLITE_MISUSE
;

182 if–
p
->
pc
<0 ){

183 #i‚de‡
SQLITE_OMIT_TRACE


186 if–
db
->
xTø˚
 && !db->
öô
.
busy
 ){

187 
	`as£π
–
p
->
nOp
>0 );

188 
	`as£π
–
p
->
aOp
[p->
nOp
-1].
›code
==
OP_No›
 );

189 
	`as£π
–
p
->
aOp
[p->
nOp
-1].
p3
!=0 );

190 
	`as£π
–
p
->
aOp
[p->
nOp
-1].
p3ty≥
==
P3_DYNAMIC
 );

191 
	`sqlôe3Sa„tyOff
(
db
);

192 
db
->
	`xTø˚
(db->
pTø˚Arg
, 
p
->
aOp
[p->
nOp
-1].
p3
);

193 if–
	`sqlôe3Sa„tyOn
(
db
) ){

194 
p
->
rc
 = 
SQLITE_MISUSE
;

195  
SQLITE_MISUSE
;

198 if–
db
->
xProfûe
 && !db->
öô
.
busy
 ){

199 
rNow
;

200 
	`sqlôe3OsCuºítTime
(&
rNow
);

201 
p
->
°¨tTime
 = (
rNow
 - ()rNow)*3600.0*24.0*1000000000.0;

208 #ifde‡
SQLITE_DEBUG


209 if–(
db
->
Êags
 & 
SQLITE_SqlTø˚
)!=0 ){

210 
	`sqlôe3DebugPrötf
("SQL-åa˚: %s\n", 
p
->
aOp
[p->
nOp
-1].
p3
);

214 
db
->
a˘iveVdbeC¡
++;

215 
p
->
pc
 = 0;

217 #i‚de‡
SQLITE_OMIT_EXPLAIN


218 if–
p
->
ex∂aö
 ){

219 
rc
 = 
	`sqlôe3VdbeLi°
(
p
);

223 
rc
 = 
	`sqlôe3VdbeExec
(
p
);

226 if–
	`sqlôe3Sa„tyOff
(
db
) ){

227 
rc
 = 
SQLITE_MISUSE
;

230 #i‚de‡
SQLITE_OMIT_TRACE


233 if–
rc
!=
SQLITE_ROW
 && 
db
->
xProfûe
 && !db->
öô
.
busy
 ){

234 
rNow
;

235 
u64
 
ñ≠£Time
;

237 
	`sqlôe3OsCuºítTime
(&
rNow
);

238 
ñ≠£Time
 = (
rNow
 - (ÏNow)*3600.0*24.0*1000000000.0 - 
p
->
°¨tTime
;

239 
	`as£π
–
p
->
nOp
>0 );

240 
	`as£π
–
p
->
aOp
[p->
nOp
-1].
›code
==
OP_No›
 );

241 
	`as£π
–
p
->
aOp
[p->
nOp
-1].
p3
!=0 );

242 
	`as£π
–
p
->
aOp
[p->
nOp
-1].
p3ty≥
==
P3_DYNAMIC
 );

243 
db
->
	`xProfûe
(db->
pProfûeArg
, 
p
->
aOp
[p->
nOp
-1].
p3
, 
ñ≠£Time
);

247 
	`sqlôe3Eº‹
(
p
->
db
, 
rc
, 0);

248 
p
->
rc
 = 
	`sqlôe3ApiExô
’->
db
,Ö->rc);

249  
rc
;

250 
	}
}

256 *
	$sqlôe3_u£r_d©a
(
sqlôe3_c⁄ãxt
 *
p
){

257 
	`as£π
–
p
 &&Ö->
pFunc
 );

258  
p
->
pFunc
->
pU£rD©a
;

259 
	}
}

266 *
	$sqlôe3_aggªg©e_c⁄ãxt
(
sqlôe3_c⁄ãxt
 *
p
, 
nByã
){

267 
Mem
 *
pMem
 = 
p
->pMem;

268 
	`as£π
–
p
 &&Ö->
pFunc
 &&Ö->pFunc->
xSãp
 );

269 if–(
pMem
->
Êags
 & 
MEM_Agg
)==0 ){

270 if–
nByã
==0 ){

271 
	`as£π
–
pMem
->
Êags
==
MEM_NuŒ
 );

272 
pMem
->
z
 = 0;

274 
pMem
->
Êags
 = 
MEM_Agg
;

275 
pMem
->
xDñ
 = 
sqlôe3FªeX
;

276 *(
FuncDef
**)&
pMem
->
i
 = 
p
->
pFunc
;

277 if–
nByã
<=
NBFS
 ){

278 
pMem
->
z
 =ÖMem->
zSh‹t
;

279 
	`mem£t
(
pMem
->
z
, 0, 
nByã
);

281 
pMem
->
z
 = 
	`sqlôeMÆloc
–
nByã
 );

285  (*)
pMem
->
z
;

286 
	}
}

292 *
	$sqlôe3_gë_auxd©a
(
sqlôe3_c⁄ãxt
 *
pCtx
, 
iArg
){

293 
VdbeFunc
 *
pVdbeFunc
 = 
pCtx
->pVdbeFunc;

294 if–!
pVdbeFunc
 || 
iArg
>ıVdbeFunc->
nAux
 || iArg<0 ){

297  
pVdbeFunc
->
≠Aux
[
iArg
].
pAux
;

298 
	}
}

305 
sqlôe3_£t_auxd©a
(

306 
sqlôe3_c⁄ãxt
 *
pCtx
,

307 
iArg
,

308 *
pAux
,

309 (*
xDñëe
)(*)

311 
AuxD©a
 *
pAuxD©a
;

312 
VdbeFunc
 *
pVdbeFunc
;

313 if–
iArg
<0 ) ;

315 
pVdbeFunc
 = 
pCtx
->pVdbeFunc;

316 if–!
pVdbeFunc
 ||ÖVdbeFunc->
nAux
<=
iArg
 ){

317 
nMÆloc
 = (
VdbeFunc
Ë+ (
AuxD©a
)*
iArg
;

318 
pVdbeFunc
 = 
	`sqlôeRóŒoc
’VdbeFunc, 
nMÆloc
);

319 if–!
pVdbeFunc
 ) ;

320 
pCtx
->
pVdbeFunc
 =ÖVdbeFunc;

321 
	`mem£t
(&
pVdbeFunc
->
≠Aux
[pVdbeFunc->
nAux
], 0,

322 (
AuxD©a
)*(
iArg
+1-
pVdbeFunc
->
nAux
));

323 
pVdbeFunc
->
nAux
 = 
iArg
+1;

324 
pVdbeFunc
->
pFunc
 = 
pCtx
->pFunc;

327 
pAuxD©a
 = &
pVdbeFunc
->
≠Aux
[
iArg
];

328 if–
pAuxD©a
->
pAux
 &&ÖAuxD©a->
xDñëe
 ){

329 
pAuxD©a
->
	`xDñëe
’AuxD©a->
pAux
);

331 
pAuxD©a
->
pAux
 =ÖAux;

332 
pAuxD©a
->
xDñëe
 = xDelete;

333 
	}
}

344 
	$sqlôe3_aggªg©e_cou¡
(
sqlôe3_c⁄ãxt
 *
p
){

345 
	`as£π
–
p
 &&Ö->
pFunc
 &&Ö->pFunc->
xSãp
 );

346  
p
->
pMem
->
n
;

347 
	}
}

352 
	$sqlôe3_cﬁumn_cou¡
(
sqlôe3_°mt
 *
pStmt
){

353 
Vdbe
 *
pVm
 = (Vdbê*)
pStmt
;

354  
pVm
 ?ÖVm->
nResCﬁumn
 : 0;

355 
	}
}

361 
	$sqlôe3_d©a_cou¡
(
sqlôe3_°mt
 *
pStmt
){

362 
Vdbe
 *
pVm
 = (Vdbê*)
pStmt
;

363 if–
pVm
==0 || !pVm->
ªsOnSèck
 )  0;

364  
pVm
->
nResCﬁumn
;

365 
	}
}

374 
Mem
 *
	$cﬁumnMem
(
sqlôe3_°mt
 *
pStmt
, 
i
){

375 
Vdbe
 *
pVm
 = (Vdbê*)
pStmt
;

376 
vÆs
 = 
	`sqlôe3_d©a_cou¡
(
pStmt
);

377 if–
i
>=
vÆs
 || i<0 ){

378 
Mem
 
nuŒMem
;

379 if–
nuŒMem
.
Êags
==0 ){ÇuŒMem.Êag†
MEM_NuŒ
; }

380 
	`sqlôe3Eº‹
(
pVm
->
db
, 
SQLITE_RANGE
, 0);

381  &
nuŒMem
;

383  &
pVm
->
pTos
[(1-
vÆs
)+
i
];

384 
	}
}

405 
	$cﬁumnMÆlocFaûuª
(
sqlôe3_°mt
 *
pStmt
)

412 
Vdbe
 *
p
 = (Vdbê*)
pStmt
;

413 
p
->
rc
 = 
	`sqlôe3ApiExô
(0,Ö->rc);

414 
	}
}

420 c⁄° *
	$sqlôe3_cﬁumn_blob
(
sqlôe3_°mt
 *
pStmt
, 
i
){

421 c⁄° *
vÆ
;

422 
	`sqlôe3MÆlocDißŒow
();

423 
vÆ
 = 
	`sqlôe3_vÆue_blob
–
	`cﬁumnMem
(
pStmt
,
i
) );

424 
	`sqlôe3MÆlocAŒow
();

425  
vÆ
;

426 
	}
}

427 
	$sqlôe3_cﬁumn_byãs
(
sqlôe3_°mt
 *
pStmt
, 
i
){

428 
vÆ
 = 
	`sqlôe3_vÆue_byãs
–
	`cﬁumnMem
(
pStmt
,
i
) );

429 
	`cﬁumnMÆlocFaûuª
(
pStmt
);

430  
vÆ
;

431 
	}
}

432 
	$sqlôe3_cﬁumn_byãs16
(
sqlôe3_°mt
 *
pStmt
, 
i
){

433 
vÆ
 = 
	`sqlôe3_vÆue_byãs16
–
	`cﬁumnMem
(
pStmt
,
i
) );

434 
	`cﬁumnMÆlocFaûuª
(
pStmt
);

435  
vÆ
;

436 
	}
}

437 
	$sqlôe3_cﬁumn_doubÀ
(
sqlôe3_°mt
 *
pStmt
, 
i
){

438 
vÆ
 = 
	`sqlôe3_vÆue_doubÀ
–
	`cﬁumnMem
(
pStmt
,
i
) );

439 
	`cﬁumnMÆlocFaûuª
(
pStmt
);

440  
vÆ
;

441 
	}
}

442 
	$sqlôe3_cﬁumn_öt
(
sqlôe3_°mt
 *
pStmt
, 
i
){

443 
vÆ
 = 
	`sqlôe3_vÆue_öt
–
	`cﬁumnMem
(
pStmt
,
i
) );

444 
	`cﬁumnMÆlocFaûuª
(
pStmt
);

445  
vÆ
;

446 
	}
}

447 
sqlôe_öt64
 
	$sqlôe3_cﬁumn_öt64
(
sqlôe3_°mt
 *
pStmt
, 
i
){

448 
sqlôe_öt64
 
vÆ
 = 
	`sqlôe3_vÆue_öt64
–
	`cﬁumnMem
(
pStmt
,
i
) );

449 
	`cﬁumnMÆlocFaûuª
(
pStmt
);

450  
vÆ
;

451 
	}
}

452 c⁄° *
	$sqlôe3_cﬁumn_ãxt
(
sqlôe3_°mt
 *
pStmt
, 
i
){

453 c⁄° *
vÆ
 = 
	`sqlôe3_vÆue_ãxt
–
	`cﬁumnMem
(
pStmt
,
i
) );

454 
	`cﬁumnMÆlocFaûuª
(
pStmt
);

455  
vÆ
;

456 
	}
}

458 
sqlôe3_vÆue
 *
	$sqlôe3_cﬁumn_vÆue
(
sqlôe3_°mt
 *
pStmt
, 
i
){

459  
	`cﬁumnMem
(
pStmt
, 
i
);

460 
	}
}

462 #i‚de‡
SQLITE_OMIT_UTF16


463 c⁄° *
	$sqlôe3_cﬁumn_ãxt16
(
sqlôe3_°mt
 *
pStmt
, 
i
){

464 c⁄° *
vÆ
 = 
	`sqlôe3_vÆue_ãxt16
–
	`cﬁumnMem
(
pStmt
,
i
) );

465 
	`cﬁumnMÆlocFaûuª
(
pStmt
);

466  
vÆ
;

467 
	}
}

469 
	$sqlôe3_cﬁumn_ty≥
(
sqlôe3_°mt
 *
pStmt
, 
i
){

470  
	`sqlôe3_vÆue_ty≥
–
	`cﬁumnMem
(
pStmt
,
i
) );

471 
	}
}

496 c⁄° *
cﬁumnName
(

497 
sqlôe3_°mt
 *
pStmt
,

498 
N
,

499 c⁄° *(*
xFunc
)(
Mem
*),

500 
u£Ty≥


502 c⁄° *
	gªt
;

503 
Vdbe
 *
	gp
 = (Vdbê*)
pStmt
;

504 
	gn
 = 
sqlôe3_cﬁumn_cou¡
(
pStmt
);

506 if–
	gp
==0 || 
N
>=
n
 || N<0 ){

509 
	gN
 +
u£Ty≥
*
n
;

510 
	gªt
 = 
xFunc
(&
p
->
aCﬁName
[
N
]);

515 
sqlôe3ApiExô
(0, 0);

516  
	gªt
;

523 c⁄° *
	$sqlôe3_cﬁumn_«me
(
sqlôe3_°mt
 *
pStmt
, 
N
){

524  
	`cﬁumnName
(
pStmt
, 
N
, (c⁄° *(*)(
Mem
*))
sqlôe3_vÆue_ãxt
, 0);

525 
	}
}

526 #i‚de‡
SQLITE_OMIT_UTF16


527 c⁄° *
	$sqlôe3_cﬁumn_«me16
(
sqlôe3_°mt
 *
pStmt
, 
N
){

528  
	`cﬁumnName
(
pStmt
, 
N
, (c⁄° *(*)(
Mem
*))
sqlôe3_vÆue_ãxt16
, 0);

529 
	}
}

536 c⁄° *
	$sqlôe3_cﬁumn_de˛ty≥
(
sqlôe3_°mt
 *
pStmt
, 
N
){

537  
	`cﬁumnName
(
pStmt
, 
N
, (c⁄° *(*)(
Mem
*))
sqlôe3_vÆue_ãxt
, 1);

538 
	}
}

539 #i‚de‡
SQLITE_OMIT_UTF16


540 c⁄° *
	$sqlôe3_cﬁumn_de˛ty≥16
(
sqlôe3_°mt
 *
pStmt
, 
N
){

541  
	`cﬁumnName
(
pStmt
, 
N
, (c⁄° *(*)(
Mem
*))
sqlôe3_vÆue_ãxt16
, 1);

542 
	}
}

545 #i‡!
deföed
(
SQLITE_OMIT_ORIGIN_NAMES
) && 0

551 c⁄° *
	$sqlôe3_cﬁumn_d©aba£_«me
(
sqlôe3_°mt
 *
pStmt
, 
N
){

552  
	`cﬁumnName
(
pStmt
, 
N
, (c⁄° *(*)(
Mem
*))
sqlôe3_vÆue_ãxt
, 2);

553 
	}
}

554 #i‚de‡
SQLITE_OMIT_UTF16


555 c⁄° *
	$sqlôe3_cﬁumn_d©aba£_«me16
(
sqlôe3_°mt
 *
pStmt
, 
N
){

556  
	`cﬁumnName
(
pStmt
, 
N
, (c⁄° *(*)(
Mem
*))
sqlôe3_vÆue_ãxt16
, 2);

557 
	}
}

565 c⁄° *
	$sqlôe3_cﬁumn_èbÀ_«me
(
sqlôe3_°mt
 *
pStmt
, 
N
){

566  
	`cﬁumnName
(
pStmt
, 
N
, (c⁄° *(*)(
Mem
*))
sqlôe3_vÆue_ãxt
, 3);

567 
	}
}

568 #i‚de‡
SQLITE_OMIT_UTF16


569 c⁄° *
	$sqlôe3_cﬁumn_èbÀ_«me16
(
sqlôe3_°mt
 *
pStmt
, 
N
){

570  
	`cﬁumnName
(
pStmt
, 
N
, (c⁄° *(*)(
Mem
*))
sqlôe3_vÆue_ãxt16
, 3);

571 
	}
}

579 c⁄° *
	$sqlôe3_cﬁumn_‹igö_«me
(
sqlôe3_°mt
 *
pStmt
, 
N
){

580  
	`cﬁumnName
(
pStmt
, 
N
, (c⁄° *(*)(
Mem
*))
sqlôe3_vÆue_ãxt
, 4);

581 
	}
}

582 #i‚de‡
SQLITE_OMIT_UTF16


583 c⁄° *
	$sqlôe3_cﬁumn_‹igö_«me16
(
sqlôe3_°mt
 *
pStmt
, 
N
){

584  
	`cﬁumnName
(
pStmt
, 
N
, (c⁄° *(*)(
Mem
*))
sqlôe3_vÆue_ãxt16
, 4);

585 
	}
}

604 
	$vdbeUnböd
(
Vdbe
 *
p
, 
i
){

605 
Mem
 *
pV¨
;

606 if–
p
==0 ||Ö->
magic
!=
VDBE_MAGIC_RUN
 ||Ö->
pc
>=0 ){

607 if–
p
 ) 
	`sqlôe3Eº‹
’->
db
, 
SQLITE_MISUSE
, 0);

608  
SQLITE_MISUSE
;

610 if–
i
<1 || i>
p
->
nV¨
 ){

611 
	`sqlôe3Eº‹
(
p
->
db
, 
SQLITE_RANGE
, 0);

612  
SQLITE_RANGE
;

614 
i
--;

615 
pV¨
 = &
p
->
aV¨
[
i
];

616 
	`sqlôe3VdbeMemRñó£
(
pV¨
);

617 
pV¨
->
Êags
 = 
MEM_NuŒ
;

618 
	`sqlôe3Eº‹
(
p
->
db
, 
SQLITE_OK
, 0);

619  
SQLITE_OK
;

620 
	}
}

625 
bödText
(

626 
sqlôe3_°mt
 *
pStmt
,

627 
i
,

628 c⁄° *
zD©a
,

629 
nD©a
,

630 (*
xDñ
)(*),

631 
ícodög


633 
Vdbe
 *
p
 = (Vdbê*)
pStmt
;

634 
Mem
 *
pV¨
;

635 
rc
;

637 
rc
 = 
	`vdbeUnböd
(
p
, 
i
);

638 if–
rc
 || 
zD©a
==0 ){

639  
rc
;

641 
pV¨
 = &
p
->
aV¨
[
i
-1];

642 
rc
 = 
	`sqlôe3VdbeMemSëSå
(
pV¨
, 
zD©a
, 
nD©a
, 
ícodög
, 
xDñ
);

643 if–
rc
==
SQLITE_OK
 && 
ícodög
!=0 ){

644 
rc
 = 
	`sqlôe3VdbeCh™geEncodög
(
pV¨
, 
	`ENC
(
p
->
db
));

647 
	`sqlôe3Eº‹
(((
Vdbe
 *)
pStmt
)->
db
, 
rc
, 0);

648  
	`sqlôe3ApiExô
(((
Vdbe
 *)
pStmt
)->
db
, 
rc
);

649 
	}
}

655 
sqlôe3_böd_blob
(

656 
sqlôe3_°mt
 *
pStmt
,

657 
i
,

658 c⁄° *
zD©a
,

659 
nD©a
,

660 (*
xDñ
)(*)

662  
	`bödText
(
pStmt
, 
i
, 
zD©a
, 
nD©a
, 
xDñ
, 0);

663 
	}
}

664 
	$sqlôe3_böd_doubÀ
(
sqlôe3_°mt
 *
pStmt
, 
i
, 
rVÆue
){

665 
rc
;

666 
Vdbe
 *
p
 = (Vdbê*)
pStmt
;

667 
rc
 = 
	`vdbeUnböd
(
p
, 
i
);

668 if–
rc
==
SQLITE_OK
 ){

669 
	`sqlôe3VdbeMemSëDoubÀ
(&
p
->
aV¨
[
i
-1], 
rVÆue
);

671  
rc
;

672 
	}
}

673 
	$sqlôe3_böd_öt
(
sqlôe3_°mt
 *
p
, 
i
, 
iVÆue
){

674  
	`sqlôe3_böd_öt64
(
p
, 
i
, (
i64
)
iVÆue
);

675 
	}
}

676 
	$sqlôe3_böd_öt64
(
sqlôe3_°mt
 *
pStmt
, 
i
, 
sqlôe_öt64
 
iVÆue
){

677 
rc
;

678 
Vdbe
 *
p
 = (Vdbê*)
pStmt
;

679 
rc
 = 
	`vdbeUnböd
(
p
, 
i
);

680 if–
rc
==
SQLITE_OK
 ){

681 
	`sqlôe3VdbeMemSëI¡64
(&
p
->
aV¨
[
i
-1], 
iVÆue
);

683  
rc
;

684 
	}
}

685 
	$sqlôe3_böd_nuŒ
(
sqlôe3_°mt
* 
p
, 
i
){

686  
	`vdbeUnböd
((
Vdbe
 *)
p
, 
i
);

687 
	}
}

688 
sqlôe3_böd_ãxt
(

689 
sqlôe3_°mt
 *
pStmt
,

690 
i
,

691 c⁄° *
zD©a
,

692 
nD©a
,

693 (*
xDñ
)(*)

695  
	`bödText
(
pStmt
, 
i
, 
zD©a
, 
nD©a
, 
xDñ
, 
SQLITE_UTF8
);

696 
	}
}

697 #i‚de‡
SQLITE_OMIT_UTF16


698 
sqlôe3_böd_ãxt16
(

699 
sqlôe3_°mt
 *
pStmt
,

700 
i
,

701 c⁄° *
zD©a
,

702 
nD©a
,

703 (*
xDñ
)(*)

705  
	`bödText
(
pStmt
, 
i
, 
zD©a
, 
nD©a
, 
xDñ
, 
SQLITE_UTF16NATIVE
);

706 
	}
}

713 
	$sqlôe3_böd_∑ømëî_cou¡
(
sqlôe3_°mt
 *
pStmt
){

714 
Vdbe
 *
p
 = (Vdbe*)
pStmt
;

715  
p
 ?Ö->
nV¨
 : 0;

716 
	}
}

723 
	$¸óãV¨M≠
(
Vdbe
 *
p
){

724 if–!
p
->
okV¨
 ){

725 
j
;

726 
Op
 *
pOp
;

727 
j
=0, 
pOp
=
p
->
aOp
; j<p->
nOp
; j++,ÖOp++){

728 if–
pOp
->
›code
==
OP_V¨übÀ
 ){

729 
	`as£π
–
pOp
->
p1
>0 &&ÖOp->p1<=
p
->
nV¨
 );

730 
p
->
azV¨
[
pOp
->
p1
-1] =ÖOp->
p3
;

733 
p
->
okV¨
 = 1;

735 
	}
}

743 c⁄° *
	$sqlôe3_böd_∑ømëî_«me
(
sqlôe3_°mt
 *
pStmt
, 
i
){

744 
Vdbe
 *
p
 = (Vdbe*)
pStmt
;

745 if–
p
==0 || 
i
<1 || i>p->
nV¨
 ){

748 
	`¸óãV¨M≠
(
p
);

749  
p
->
azV¨
[
i
-1];

750 
	}
}

757 
	$sqlôe3_böd_∑ømëî_ödex
(
sqlôe3_°mt
 *
pStmt
, c⁄° *
zName
){

758 
Vdbe
 *
p
 = (Vdbe*)
pStmt
;

759 
i
;

760 if–
p
==0 ){

763 
	`¸óãV¨M≠
(
p
);

764 if–
zName
 ){

765 
i
=0; i<
p
->
nV¨
; i++){

766 c⁄° *
z
 = 
p
->
azV¨
[
i
];

767 if–
z
 && 
	`°rcmp
(z,
zName
)==0 ){

768  
i
+1;

773 
	}
}

780 
	$sqlôe3_å™s„r_bödögs
(
sqlôe3_°mt
 *
pFromStmt
, sqlôe3_°mà*
pToStmt
){

781 
Vdbe
 *
pFrom
 = (Vdbe*)
pFromStmt
;

782 
Vdbe
 *
pTo
 = (Vdbe*)
pToStmt
;

783 
i
, 
rc
 = 
SQLITE_OK
;

784 if–(
pFrom
->
magic
!=
VDBE_MAGIC_RUN
 &&ÖFrom->magic!=
VDBE_MAGIC_HALT
)

785 || (
pTo
->
magic
!=
VDBE_MAGIC_RUN
 &&ÖTo->magic!=
VDBE_MAGIC_HALT
) ){

786  
SQLITE_MISUSE
;

788 if–
pFrom
->
nV¨
!=
pTo
->nVar ){

789  
SQLITE_ERROR
;

791 
i
=0; 
rc
==
SQLITE_OK
 && i<
pFrom
->
nV¨
; i++){

792 
	`sqlôe3MÆlocDißŒow
();

793 
rc
 = 
	`sqlôe3VdbeMemMove
(&
pTo
->
aV¨
[
i
], &
pFrom
->aVar[i]);

794 
	`sqlôe3MÆlocAŒow
();

796  
rc
;

797 
	}
}

805 
sqlôe3
 *
	$sqlôe3_db_h™dÀ
(
sqlôe3_°mt
 *
pStmt
){

806  
pStmt
 ? ((
Vdbe
*ÌStmt)->
db
 : 0;

807 
	}
}

	@vdbeaux.c

17 
	~"sqlôeI¡.h
"

18 
	~"os.h
"

19 
	~<˘y≥.h
>

20 
	~"vdbeI¡.h
"

28 #ifde‡
SQLITE_DEBUG


29 
	gsqlôe3_vdbe_add›_åa˚
 = 0;

36 
Vdbe
 *
	$sqlôe3VdbeCª©e
(
sqlôe3
 *
db
){

37 
Vdbe
 *
p
;

38 
p
 = 
	`sqlôeMÆloc
–(
Vdbe
) );

39 if–
p
==0 )  0;

40 
p
->
db
 = db;

41 if–
db
->
pVdbe
 ){

42 
db
->
pVdbe
->
pPªv
 = 
p
;

44 
p
->
pNext
 = 
db
->
pVdbe
;

45 
p
->
pPªv
 = 0;

46 
db
->
pVdbe
 = 
p
;

47 
p
->
magic
 = 
VDBE_MAGIC_INIT
;

48  
p
;

49 
	}
}

54 
	$sqlôe3VdbeTø˚
(
Vdbe
 *
p
, 
FILE
 *
åa˚
){

55 
p
->
åa˚
 =Årace;

56 
	}
}

70 
	$ªsizeOpAºay
(
Vdbe
 *
p
, 
N
){

71 
runMode
 = 
p
->
magic
==
VDBE_MAGIC_RUN
;

72 if–
runMode
 || 
p
->
nOpAŒoc
<
N
 ){

73 
VdbeOp
 *
pNew
;

74 
nNew
 = 
N
 + 100*(!
runMode
);

75 
ﬁdSize
 = 
p
->
nOpAŒoc
;

76 
pNew
 = 
	`sqlôeRóŒoc
(
p
->
aOp
, 
nNew
*(
Op
));

77 if–
pNew
 ){

78 
p
->
nOpAŒoc
 = 
nNew
;

79 
p
->
aOp
 = 
pNew
;

80 if–
nNew
>
ﬁdSize
 ){

81 
	`mem£t
(&
p
->
aOp
[
ﬁdSize
], 0, (
nNew
-ﬁdSize)*(
Op
));

85 
	}
}

103 
	$sqlôe3VdbeAddOp
(
Vdbe
 *
p
, 
›
, 
p1
, 
p2
){

104 
i
;

105 
VdbeOp
 *
pOp
;

107 
i
 = 
p
->
nOp
;

108 
p
->
nOp
++;

109 
	`as£π
–
p
->
magic
==
VDBE_MAGIC_INIT
 );

110 
	`ªsizeOpAºay
(
p
, 
i
+1);

111 if–
	`sqlôe3MÆlocFaûed
() ){

114 
pOp
 = &
p
->
aOp
[
i
];

115 
pOp
->
›code
 = 
›
;

116 
pOp
->
p1
 =Ö1;

117 
pOp
->
p2
 =Ö2;

118 
pOp
->
p3
 = 0;

119 
pOp
->
p3ty≥
 = 
P3_NOTUSED
;

120 
p
->
expúed
 = 0;

121 #ifde‡
SQLITE_DEBUG


122 if–
sqlôe3_vdbe_add›_åa˚
 ) 
	`sqlôe3VdbePrötOp
(0, 
i
, &
p
->
aOp
[i]);

124  
i
;

125 
	}
}

130 
	$sqlôe3VdbeOp3
(
Vdbe
 *
p
, 
›
, 
p1
, 
p2
, c⁄° *
zP3
,
p3ty≥
){

131 
addr
 = 
	`sqlôe3VdbeAddOp
(
p
, 
›
, 
p1
, 
p2
);

132 
	`sqlôe3VdbeCh™geP3
(
p
, 
addr
, 
zP3
, 
p3ty≥
);

133  
addr
;

134 
	}
}

150 
	$sqlôe3VdbeMakeLabñ
(
Vdbe
 *
p
){

151 
i
;

152 
i
 = 
p
->
nLabñ
++;

153 
	`as£π
–
p
->
magic
==
VDBE_MAGIC_INIT
 );

154 if–
i
>=
p
->
nLabñAŒoc
 ){

155 
p
->
nLabñAŒoc
 =Ö->nLabelAlloc*2 + 10;

156 
	`sqlôeRóŒocOrFªe
((**)&
p
->
aLabñ
,

157 
p
->
nLabñAŒoc
*’->
aLabñ
[0]));

159 if–
p
->
aLabñ
 ){

160 
p
->
aLabñ
[
i
] = -1;

162  -1-
i
;

163 
	}
}

170 
	$sqlôe3VdbeResﬁveLabñ
(
Vdbe
 *
p
, 
x
){

171 
j
 = -1-
x
;

172 
	`as£π
–
p
->
magic
==
VDBE_MAGIC_INIT
 );

173 
	`as£π
–
j
>=0 && j<
p
->
nLabñ
 );

174 if–
p
->
aLabñ
 ){

175 
p
->
aLabñ
[
j
] =Ö->
nOp
;

177 
	}
}

183 
	$›codeNoPush
(
u8
 
›
){

204 c⁄° 
u32
 
masks
[5] = {

205 
NOPUSH_MASK_0
 + (
NOPUSH_MASK_1
<<16),

206 
NOPUSH_MASK_2
 + (
NOPUSH_MASK_3
<<16),

207 
NOPUSH_MASK_4
 + (
NOPUSH_MASK_5
<<16),

208 
NOPUSH_MASK_6
 + (
NOPUSH_MASK_7
<<16),

209 
NOPUSH_MASK_8
 + (
NOPUSH_MASK_9
<<16)

211 
	`as£π
–
›
<32*5 );

212  (
masks
[
›
>>5] & (1<<(op&0x1F)));

213 
	}
}

215 #i‚de‡
NDEBUG


216 
	$sqlôe3VdbeOpcodeNoPush
(
u8
 
›
){

217  
	`›codeNoPush
(
›
);

218 
	}
}

241 
	$ªsﬁveP2VÆues
(
Vdbe
 *
p
, *
pMaxFuncArgs
, *
pMaxSèck
){

242 
i
;

243 
nMaxArgs
 = 0;

244 
nMaxSèck
 = 
p
->
nOp
;

245 
Op
 *
pOp
;

246 *
aLabñ
 = 
p
->aLabel;

247 
d€sSèãmítRﬁlback
 = 0;

248 
hasSèãmítBegö
 = 0;

249 
pOp
=
p
->
aOp
, 
i
ı->
nOp
-1; i>=0; i--,ÖOp++){

250 
u8
 
›code
 = 
pOp
->opcode;

252 if–
›code
==
OP_Fun˘i⁄
 || opcode==
OP_AggSãp
 ){

253 if–
pOp
->
p2
>
nMaxArgs
 )ÇMaxArgs =ÖOp->p2;

254 }if–
›code
==
OP_HÆt
 ){

255 if–
pOp
->
p1
==
SQLITE_CONSTRAINT
 &&ÖOp->
p2
==
OE_Ab‹t
 ){

256 
d€sSèãmítRﬁlback
 = 1;

258 }if–
›code
==
OP_IdxIn£π
 ){

259 if–
pOp
->
p2
 ){

260 
d€sSèãmítRﬁlback
 = 1;

262 }if–
›code
==
OP_Sèãmít
 ){

263 
hasSèãmítBegö
 = 1;

266 if–
	`›codeNoPush
(
›code
) ){

267 
nMaxSèck
--;

270 if–
pOp
->
p2
>=0 ) ;

271 
	`as£π
–-1-
pOp
->
p2
<
p
->
nLabñ
 );

272 
pOp
->
p2
 = 
aLabñ
[-1-pOp->p2];

274 
	`sqlôeFªe
(
p
->
aLabñ
);

275 
p
->
aLabñ
 = 0;

277 *
pMaxFuncArgs
 = 
nMaxArgs
;

278 *
pMaxSèck
 = 
nMaxSèck
;

285 if–
hasSèãmítBegö
 && !
d€sSèãmítRﬁlback
 ){

286 
pOp
=
p
->
aOp
, 
i
ı->
nOp
-1; i>=0; i--,ÖOp++){

287 if–
pOp
->
›code
==
OP_Sèãmít
 ){

288 
pOp
->
›code
 = 
OP_No›
;

292 
	}
}

297 
	$sqlôe3VdbeCuºítAddr
(
Vdbe
 *
p
){

298 
	`as£π
–
p
->
magic
==
VDBE_MAGIC_INIT
 );

299  
p
->
nOp
;

300 
	}
}

306 
	$sqlôe3VdbeAddOpLi°
(
Vdbe
 *
p
, 
nOp
, 
VdbeOpLi°
 c⁄° *
aOp
){

307 
addr
;

308 
	`as£π
–
p
->
magic
==
VDBE_MAGIC_INIT
 );

309 
	`ªsizeOpAºay
(
p
,Ö->
nOp
 +ÇOp);

310 if–
	`sqlôe3MÆlocFaûed
() ){

313 
addr
 = 
p
->
nOp
;

314 if–
nOp
>0 ){

315 
i
;

316 
VdbeOpLi°
 c⁄° *
pIn
 = 
aOp
;

317 
i
=0; i<
nOp
; i++, 
pIn
++){

318 
p2
 = 
pIn
->p2;

319 
VdbeOp
 *
pOut
 = &
p
->
aOp
[
i
+
addr
];

320 
pOut
->
›code
 = 
pIn
->opcode;

321 
pOut
->
p1
 = 
pIn
->p1;

322 
pOut
->
p2
 =Ö2<0 ? 
addr
 + 
	`ADDR
(p2) :Ö2;

323 
pOut
->
p3
 = 
pIn
->p3;

324 
pOut
->
p3ty≥
 = 
pIn
->
p3
 ? 
P3_STATIC
 : 
P3_NOTUSED
;

325 #ifde‡
SQLITE_DEBUG


326 if–
sqlôe3_vdbe_add›_åa˚
 ){

327 
	`sqlôe3VdbePrötOp
(0, 
i
+
addr
, &
p
->
aOp
[i+addr]);

331 
p
->
nOp
 +=ÇOp;

333  
addr
;

334 
	}
}

342 
	$sqlôe3VdbeCh™geP1
(
Vdbe
 *
p
, 
addr
, 
vÆ
){

343 
	`as£π
–
p
->
magic
==
VDBE_MAGIC_INIT
 );

344 if–
p
 && 
addr
>=0 &&Ö->
nOp
>add∏&&Ö->
aOp
 ){

345 
p
->
aOp
[
addr
].
p1
 = 
vÆ
;

347 
	}
}

353 
	$sqlôe3VdbeCh™geP2
(
Vdbe
 *
p
, 
addr
, 
vÆ
){

354 
	`as£π
–
vÆ
>=0 );

355 
	`as£π
–
p
->
magic
==
VDBE_MAGIC_INIT
 );

356 if–
p
 && 
addr
>=0 &&Ö->
nOp
>add∏&&Ö->
aOp
 ){

357 
p
->
aOp
[
addr
].
p2
 = 
vÆ
;

359 
	}
}

365 
	$sqlôe3VdbeJumpHîe
(
Vdbe
 *
p
, 
addr
){

366 
	`sqlôe3VdbeCh™geP2
(
p
, 
addr
,Ö->
nOp
);

367 
	}
}

372 
	$‰ìP3
(
p3ty≥
, *
p3
){

373 if–
p3
 ){

374  
p3ty≥
 ){

375 
P3_DYNAMIC
:

376 
P3_KEYINFO
:

377 
P3_KEYINFO_HANDOFF
: {

378 
	`sqlôeFªe
(
p3
);

381 
P3_VDBEFUNC
: {

382 
VdbeFunc
 *
pVdbeFunc
 = (VdbeFun¯*)
p3
;

383 
	`sqlôe3VdbeDñëeAuxD©a
(
pVdbeFunc
, 0);

384 
	`sqlôeFªe
(
pVdbeFunc
);

387 
P3_MEM
: {

388 
	`sqlôe3VÆueFªe
((
sqlôe3_vÆue
*)
p3
);

393 
	}
}

421 
	$sqlôe3VdbeCh™geP3
(
Vdbe
 *
p
, 
addr
, c⁄° *
zP3
, 
n
){

422 
Op
 *
pOp
;

423 
	`as£π
–
p
->
magic
==
VDBE_MAGIC_INIT
 );

424 if–
p
==0 ||Ö->
aOp
==0 || 
	`sqlôe3MÆlocFaûed
() ){

425 i‡(
n
 !
P3_KEYINFO
) {

426 
	`‰ìP3
(
n
, (*)*(**)&
zP3
);

430 if–
addr
<0 ||áddr>=
p
->
nOp
 ){

431 
addr
 = 
p
->
nOp
 - 1;

432 if–
addr
<0 ) ;

434 
pOp
 = &
p
->
aOp
[
addr
];

435 
	`‰ìP3
(
pOp
->
p3ty≥
,ÖOp->
p3
);

436 
pOp
->
p3
 = 0;

437 if–
zP3
==0 ){

438 
pOp
->
p3
 = 0;

439 
pOp
->
p3ty≥
 = 
P3_NOTUSED
;

440 }if–
n
==
P3_KEYINFO
 ){

441 
KeyInfo
 *
pKeyInfo
;

442 
nFõld
, 
nByã
;

444 
nFõld
 = ((
KeyInfo
*)
zP3
)->nField;

445 
nByã
 = (*
pKeyInfo
Ë+ (
nFõld
-1)*’KeyInfo->
aCﬁl
[0]) +ÇField;

446 
pKeyInfo
 = 
	`sqlôeMÆlocRaw
–
nByã
 );

447 
pOp
->
p3
 = (*)
pKeyInfo
;

448 if–
pKeyInfo
 ){

449 *
aS‹tOrdî
;

450 
	`mem˝y
(
pKeyInfo
, 
zP3
, 
nByã
);

451 
aS‹tOrdî
 = 
pKeyInfo
->aSortOrder;

452 if–
aS‹tOrdî
 ){

453 
pKeyInfo
->
aS‹tOrdî
 = (*)&pKeyInfo->
aCﬁl
[
nFõld
];

454 
	`mem˝y
(
pKeyInfo
->
aS‹tOrdî
,áS‹tOrdî, 
nFõld
);

456 
pOp
->
p3ty≥
 = 
P3_KEYINFO
;

458 
pOp
->
p3ty≥
 = 
P3_NOTUSED
;

460 }if–
n
==
P3_KEYINFO_HANDOFF
 ){

461 
pOp
->
p3
 = (*)
zP3
;

462 
pOp
->
p3ty≥
 = 
P3_KEYINFO
;

463 }if–
n
<0 ){

464 
pOp
->
p3
 = (*)
zP3
;

465 
pOp
->
p3ty≥
 = 
n
;

467 if–
n
==0 )Ç = 
	`°æí
(
zP3
);

468 
pOp
->
p3
 = 
	`sqlôeSåNDup
(
zP3
, 
n
);

469 
pOp
->
p3ty≥
 = 
P3_DYNAMIC
;

471 
	}
}

473 #i‚de‡
NDEBUG


478 
	$sqlôe3VdbeCommít
(
Vdbe
 *
p
, c⁄° *
zF‹m©
, ...){

479 
va_li°
 
≠
;

480 
	`as£π
–
p
->
nOp
>0 );

481 
	`as£π
–
p
->
aOp
==0 ||Ö->aOp[p->
nOp
-1].
p3
==0

482 || 
	`sqlôe3MÆlocFaûed
() );

483 
	`va_°¨t
(
≠
, 
zF‹m©
);

484 
	`sqlôe3VdbeCh™geP3
(
p
, -1, 
	`sqlôe3VMPrötf
(
zF‹m©
, 
≠
), 
P3_DYNAMIC
);

485 
	`va_íd
(
≠
);

486 
	}
}

492 
VdbeOp
 *
	$sqlôe3VdbeGëOp
(
Vdbe
 *
p
, 
addr
){

493 
	`as£π
–
p
->
magic
==
VDBE_MAGIC_INIT
 );

494 
	`as£π
–
addr
>=0 &&áddr<
p
->
nOp
 );

495  &
p
->
aOp
[
addr
];

496 
	}
}

498 #i‡!
deföed
(
SQLITE_OMIT_EXPLAIN
Ë|| !deföed(
NDEBUG
) \

499 || 
deföed
(
VDBE_PROFILE
Ë|| 
	$deföed
(
SQLITE_DEBUG
)

504 *
	$di•œyP3
(
Op
 *
pOp
, *
zTemp
, 
nTemp
){

505 *
zP3
;

506 
	`as£π
–
nTemp
>=20 );

507  
pOp
->
p3ty≥
 ){

508 
P3_KEYINFO
: {

509 
i
, 
j
;

510 
KeyInfo
 *
pKeyInfo
 = (KeyInfo*)
pOp
->
p3
;

511 
	`•rötf
(
zTemp
, "keyöfo(%d", 
pKeyInfo
->
nFõld
);

512 
i
 = 
	`°æí
(
zTemp
);

513 
j
=0; j<
pKeyInfo
->
nFõld
; j++){

514 
CﬁlSeq
 *
pCﬁl
 = 
pKeyInfo
->
aCﬁl
[
j
];

515 if–
pCﬁl
 ){

516 
n
 = 
	`°æí
(
pCﬁl
->
zName
);

517 if–
i
+
n
>
nTemp
-6 ){

518 
	`°r˝y
(&
zTemp
[
i
],",...");

521 
zTemp
[
i
++] = ',';

522 if–
pKeyInfo
->
aS‹tOrdî
 &&ÖKeyInfo->aS‹tOrdî[
j
] ){

523 
zTemp
[
i
++] = '-';

525 
	`°r˝y
(&
zTemp
[
i
], 
pCﬁl
->
zName
);

526 
i
 +
n
;

527 }if–
i
+4<
nTemp
-6 ){

528 
	`°r˝y
(&
zTemp
[
i
],",nil");

529 
i
 += 4;

532 
zTemp
[
i
++] = ')';

533 
zTemp
[
i
] = 0;

534 
	`as£π
–
i
<
nTemp
 );

535 
zP3
 = 
zTemp
;

538 
P3_COLLSEQ
: {

539 
CﬁlSeq
 *
pCﬁl
 = (CﬁlSeq*)
pOp
->
p3
;

540 
	`•rötf
(
zTemp
, "cﬁl£q(%.20s)", 
pCﬁl
->
zName
);

541 
zP3
 = 
zTemp
;

544 
P3_FUNCDEF
: {

545 
FuncDef
 *
pDef
 = (FuncDef*)
pOp
->
p3
;

546 
zNum
[30];

547 
	`•rötf
(
zTemp
, "%.*s", 
nTemp
, 
pDef
->
zName
);

548 
	`•rötf
(
zNum
,"(%d)", 
pDef
->
nArg
);

549 if–
	`°æí
(
zTemp
)+°æí(
zNum
)+1<=
nTemp
 ){

550 
	`°rˇt
(
zTemp
, 
zNum
);

552 
zP3
 = 
zTemp
;

556 
zP3
 = 
pOp
->
p3
;

557 if–
zP3
==0 || 
pOp
->
›code
==
OP_No›
 ){

558 
zP3
 = "";

562  
zP3
;

563 
	}
}

567 #i‡
deföed
(
VDBE_PROFILE
Ë|| deföed(
SQLITE_DEBUG
)

571 
	$sqlôe3VdbePrötOp
(
FILE
 *
pOut
, 
pc
, 
Op
 *
pOp
){

572 *
zP3
;

573 
zPå
[50];

574 c⁄° *
zF‹m©1
 = "%4d %-13s %4d %4d %s\n";

575 if–
pOut
==0 )ÖOuà
°dout
;

576 
zP3
 = 
	`di•œyP3
(
pOp
, 
zPå
, (zPtr));

577 
	`Ârötf
(
pOut
, 
zF‹m©1
,

578 
pc
, 
sqlôe3OpcodeNames
[
pOp
->
›code
],ÖOp->
p1
,ÖOp->
p2
, 
zP3
);

579 
	`fÊush
(
pOut
);

580 
	}
}

586 
	$ªÀa£MemAºay
(
Mem
 *
p
, 
N
){

587 if–
p
 ){

588  
N
-->0 ){

589 
	`sqlôe3VdbeMemRñó£
(
p
++);

592 
	}
}

594 #i‚de‡
SQLITE_OMIT_EXPLAIN


602 
	$sqlôe3VdbeLi°
(

603 
Vdbe
 *
p


605 
sqlôe3
 *
db
 = 
p
->db;

606 
i
;

607 
rc
 = 
SQLITE_OK
;

609 
	`as£π
–
p
->
ex∂aö
 );

610 if–
p
->
magic
!=
VDBE_MAGIC_RUN
 )  
SQLITE_MISUSE
;

611 
	`as£π
–
db
->
magic
==
SQLITE_MAGIC_BUSY
 );

612 
	`as£π
–
p
->
rc
==
SQLITE_OK
 ||Ö->rc==
SQLITE_BUSY
 );

618 if–
p
->
pTos
==&p->
aSèck
[4] ){

619 
	`ªÀa£MemAºay
(
p
->
aSèck
, 5);

621 
p
->
ªsOnSèck
 = 0;

624 
i
 = 
p
->
pc
++;

625 } 
i
<
p
->
nOp
 &&Ö->
ex∂aö
==2 &&Ö->
aOp
[i].
›code
!=
OP_Ex∂aö
 );

626 if–
i
>=
p
->
nOp
 ){

627 
p
->
rc
 = 
SQLITE_OK
;

628 
rc
 = 
SQLITE_DONE
;

629 }if–
db
->
Êags
 & 
SQLITE_I¡îru±
 ){

630 
db
->
Êags
 &~
SQLITE_I¡îru±
;

631 
p
->
rc
 = 
SQLITE_INTERRUPT
;

632 
rc
 = 
SQLITE_ERROR
;

633 
	`sqlôe3SëSåög
(&
p
->
zEºMsg
, 
	`sqlôe3EºSå
’->
rc
), (*)0);

635 
Op
 *
pOp
 = &
p
->
aOp
[
i
];

636 
Mem
 *
pMem
 = 
p
->
aSèck
;

637 
pMem
->
Êags
 = 
MEM_I¡
;

638 
pMem
->
ty≥
 = 
SQLITE_INTEGER
;

639 
pMem
->
i
 = i;

640 
pMem
++;

642 
pMem
->
Êags
 = 
MEM_Sètic
|
MEM_Så
|
MEM_Tîm
;

643 
pMem
->
z
 = 
sqlôe3OpcodeNames
[
pOp
->
›code
];

644 
pMem
->
n
 = 
	`°æí
’Mem->
z
);

645 
pMem
->
ty≥
 = 
SQLITE_TEXT
;

646 
pMem
->
íc
 = 
SQLITE_UTF8
;

647 
pMem
++;

649 
pMem
->
Êags
 = 
MEM_I¡
;

650 
pMem
->
i
 = 
pOp
->
p1
;

651 
pMem
->
ty≥
 = 
SQLITE_INTEGER
;

652 
pMem
++;

654 
pMem
->
Êags
 = 
MEM_I¡
;

655 
pMem
->
i
 = 
pOp
->
p2
;

656 
pMem
->
ty≥
 = 
SQLITE_INTEGER
;

657 
pMem
++;

659 
pMem
->
Êags
 = 
MEM_Sh‹t
|
MEM_Så
|
MEM_Tîm
;

660 
pMem
->
z
 = 
	`di•œyP3
(
pOp
,ÖMem->
zSh‹t
, (pMem->zShort));

661 
pMem
->
ty≥
 = 
SQLITE_TEXT
;

662 
pMem
->
íc
 = 
SQLITE_UTF8
;

664 
p
->
nResCﬁumn
 = 5 - 2*’->
ex∂aö
-1);

665 
p
->
pTos
 = 
pMem
;

666 
p
->
rc
 = 
SQLITE_OK
;

667 
p
->
ªsOnSèck
 = 1;

668 
rc
 = 
SQLITE_ROW
;

670  
rc
;

671 
	}
}

677 
	$sqlôe3VdbePrötSql
(
Vdbe
 *
p
){

678 #ifde‡
SQLITE_DEBUG


679 
nOp
 = 
p
->nOp;

680 
VdbeOp
 *
pOp
;

681 if–
nOp
<1 ) ;

682 
pOp
 = &
p
->
aOp
[
nOp
-1];

683 if–
pOp
->
›code
==
OP_No›
 &&ÖOp->
p3
!=0 ){

684 c⁄° *
z
 = 
pOp
->
p3
;

685  
	`is•a˚
(*(
u8
*)
z
) ) z++;

686 
	`¥ötf
("SQL: [%s]\n", 
z
);

689 
	}
}

700 
	$sqlôe3VdbeMakeRódy
(

701 
Vdbe
 *
p
,

702 
nV¨
,

703 
nMem
,

704 
nCurs‹
,

705 
isEx∂aö


707 
n
;

709 
	`as£π
–
p
!=0 );

710 
	`as£π
–
p
->
magic
==
VDBE_MAGIC_INIT
 );

714 
	`as£π
–
p
->
nOp
>0 );

721 
p
->
magic
 = 
VDBE_MAGIC_RUN
;

732 if–
p
->
aSèck
==0 ){

733 
nArg
;

734 
nSèck
;

735 
	`ªsﬁveP2VÆues
(
p
, &
nArg
, &
nSèck
);

736 
	`ªsizeOpAºay
(
p
,Ö->
nOp
);

737 
	`as£π
–
nV¨
>=0 );

738 
	`as£π
–
nSèck
<
p
->
nOp
 );

739 
nSèck
 = 
isEx∂aö
 ? 10 :ÇStack;

740 
p
->
aSèck
 = 
	`sqlôeMÆloc
(

741 
nSèck
*(
p
->
aSèck
[0])

742 + 
nArg
*(
Mem
*)

743 + 
nV¨
*(
Mem
)

744 + 
nV¨
*(*)

745 + 
nMem
*(
Mem
)

746 + 
nCurs‹
*(
Curs‹
*)

748 if–!
	`sqlôe3MÆlocFaûed
() ){

749 
p
->
aMem
 = &p->
aSèck
[
nSèck
];

750 
p
->
nMem
 =ÇMem;

751 
p
->
aV¨
 = &p->
aMem
[
nMem
];

752 
p
->
nV¨
 =ÇVar;

753 
p
->
okV¨
 = 0;

754 
p
->
≠Arg
 = (
Mem
**)&p->
aV¨
[
nV¨
];

755 
p
->
azV¨
 = (**)&p->
≠Arg
[
nArg
];

756 
p
->
≠C§
 = (
Curs‹
**)&p->
azV¨
[
nV¨
];

757 
p
->
nCurs‹
 =ÇCursor;

758 
n
=0;Ç<
nV¨
;Ç++){

759 
p
->
aV¨
[
n
].
Êags
 = 
MEM_NuŒ
;

763 
n
=0;Ç<
p
->
nMem
;Ç++){

764 
p
->
aMem
[
n
].
Êags
 = 
MEM_NuŒ
;

767 #ifde‡
SQLITE_DEBUG


768 if–(
p
->
db
->
Êags
 & 
SQLITE_VdbeLi°ög
)!=0

769 || 
	`sqlôe3OsFûeExi°s
("vdbe_explain")

771 
i
;

772 
	`¥ötf
("VDBE Program Listing:\n");

773 
	`sqlôe3VdbePrötSql
(
p
);

774 
i
=0; i<
p
->
nOp
; i++){

775 
	`sqlôe3VdbePrötOp
(
°dout
, 
i
, &
p
->
aOp
[i]);

778 if–
	`sqlôe3OsFûeExi°s
("vdbe_trace") ){

779 
p
->
åa˚
 = 
°dout
;

782 
p
->
pTos
 = &p->
aSèck
[-1];

783 
p
->
pc
 = -1;

784 
p
->
rc
 = 
SQLITE_OK
;

785 
p
->
uniqueC¡
 = 0;

786 
p
->
ªtu∫Dïth
 = 0;

787 
p
->
îr‹A˘i⁄
 = 
OE_Ab‹t
;

788 
p
->
p›Sèck
 = 0;

789 
p
->
ex∂aö
 |
isEx∂aö
;

790 
p
->
magic
 = 
VDBE_MAGIC_RUN
;

791 
p
->
nCh™ge
 = 0;

792 
p
->
ˇcheCå
 = 1;

793 
p
->
möWrôeFûeF‹m©
 = 255;

794 #ifde‡
VDBE_PROFILE


796 
i
;

797 
i
=0; i<
p
->
nOp
; i++){

798 
p
->
aOp
[
i
].
˙t
 = 0;

799 
p
->
aOp
[
i
].
cy˛es
 = 0;

803 
	}
}

809 
	$sqlôe3VdbeFªeCurs‹
(
Curs‹
 *
pCx
){

810 if–
pCx
==0 ){

813 if–
pCx
->
pCurs‹
 ){

814 
	`sqlôe3BåìClo£Curs‹
(
pCx
->
pCurs‹
);

816 if–
pCx
->
pBt
 ){

817 
	`sqlôe3BåìClo£
(
pCx
->
pBt
);

819 
	`sqlôeFªe
(
pCx
->
pD©a
);

820 
	`sqlôeFªe
(
pCx
->
aTy≥
);

821 
	`sqlôeFªe
(
pCx
);

822 
	}
}

827 
	$˛o£AŒCurs‹s
(
Vdbe
 *
p
){

828 
i
;

829 if–
p
->
≠C§
==0 ) ;

830 
i
=0; i<
p
->
nCurs‹
; i++){

831 
	`sqlôe3VdbeFªeCurs‹
(
p
->
≠C§
[
i
]);

832 
p
->
≠C§
[
i
] = 0;

834 
	}
}

843 
	$CÀ™up
(
Vdbe
 *
p
){

844 
i
;

845 if–
p
->
aSèck
 ){

846 
	`ªÀa£MemAºay
(
p
->
aSèck
, 1 + (p->
pTos
 -Ö->aStack));

847 
p
->
pTos
 = &p->
aSèck
[-1];

849 
	`˛o£AŒCurs‹s
(
p
);

850 
	`ªÀa£MemAºay
(
p
->
aMem
,Ö->
nMem
);

851 
	`sqlôe3VdbeFifoCÀ¨
(&
p
->
sFifo
);

852 if–
p
->
c⁄ãxtSèck
 ){

853 
i
=0; i<
p
->
c⁄ãxtSèckT›
; i++){

854 
	`sqlôe3VdbeFifoCÀ¨
(&
p
->
c⁄ãxtSèck
[
i
].
sFifo
);

856 
	`sqlôeFªe
(
p
->
c⁄ãxtSèck
);

858 
p
->
c⁄ãxtSèck
 = 0;

859 
p
->
c⁄ãxtSèckDïth
 = 0;

860 
p
->
c⁄ãxtSèckT›
 = 0;

861 
	`sqlôeFªe
(
p
->
zEºMsg
);

862 
p
->
zEºMsg
 = 0;

863 
	}
}

871 
	$sqlôe3VdbeSëNumCﬁs
(
Vdbe
 *
p
, 
nResCﬁumn
){

872 
Mem
 *
pCﬁName
;

873 
n
;

874 
	`ªÀa£MemAºay
(
p
->
aCﬁName
,Ö->
nResCﬁumn
*2);

875 
	`sqlôeFªe
(
p
->
aCﬁName
);

876 
n
 = 
nResCﬁumn
*2;

877 
p
->
nResCﬁumn
 =ÇResColumn;

878 
p
->
aCﬁName
 = 
pCﬁName
 = (
Mem
*)
	`sqlôeMÆloc
–(Mem)*
n
 );

879 if–
p
->
aCﬁName
==0 ) ;

880  
n
-- > 0 ){

881 (
pCﬁName
++)->
Êags
 = 
MEM_NuŒ
;

883 
	}
}

896 
	$sqlôe3VdbeSëCﬁName
(
Vdbe
 *
p
, 
idx
, c⁄° *
zName
, 
N
){

897 
rc
;

898 
Mem
 *
pCﬁName
;

899 
	`as£π
–
idx
<(2*
p
->
nResCﬁumn
) );

900 if–
	`sqlôe3MÆlocFaûed
(ËË 
SQLITE_NOMEM
;

901 
	`as£π
–
p
->
aCﬁName
!=0 );

902 
pCﬁName
 = &(
p
->
aCﬁName
[
idx
]);

903 if–
N
==
P3_DYNAMIC
 || N==
P3_STATIC
 ){

904 
rc
 = 
	`sqlôe3VdbeMemSëSå
(
pCﬁName
, 
zName
, -1, 
SQLITE_UTF8
, 
SQLITE_STATIC
);

906 
rc
 = 
	`sqlôe3VdbeMemSëSå
(
pCﬁName
, 
zName
, 
N
, 
SQLITE_UTF8
,
SQLITE_TRANSIENT
);

908 if–
rc
==
SQLITE_OK
 && 
N
==
P3_DYNAMIC
 ){

909 
pCﬁName
->
Êags
 = (pCﬁName->Êags&(~
MEM_Sètic
))|
MEM_Dyn
;

910 
pCﬁName
->
xDñ
 = 0;

912  
rc
;

913 
	}
}

921 
	$vdbeCommô
(
sqlôe3
 *
db
){

922 
i
;

923 
nTøns
 = 0;

924 
rc
 = 
SQLITE_OK
;

925 
√edXcommô
 = 0;

927 
i
=0; i<
db
->
nDb
; i++){

928 
Båì
 *
pBt
 = 
db
->
aDb
[
i
].pBt;

929 if–
pBt
 && 
	`sqlôe3BåìIsInTøns
(pBt) ){

930 
√edXcommô
 = 1;

931 if–
i
!=1 ) 
nTøns
++;

936 if–
√edXcommô
 && 
db
->
xCommôCÆlback
 ){

937 
	`sqlôe3Sa„tyOff
(
db
);

938 
rc
 = 
db
->
	`xCommôCÆlback
(db->
pCommôArg
);

939 
	`sqlôe3Sa„tyOn
(
db
);

940 if–
rc
 ){

941  
SQLITE_CONSTRAINT
;

954 if–0==
	`°æí
(
	`sqlôe3BåìGëFûíame
(
db
->
aDb
[0].
pBt
)Ë|| 
nTøns
<=1 ){

955 
i
=0; 
rc
==
SQLITE_OK
 && i<
db
->
nDb
; i++){

956 
Båì
 *
pBt
 = 
db
->
aDb
[
i
].pBt;

957 if–
pBt
 ){

958 
rc
 = 
	`sqlôe3BåìSync
(
pBt
, 0);

963 if–
rc
==
SQLITE_OK
 ){

964 
i
=0; i<
db
->
nDb
; i++){

965 
Båì
 *
pBt
 = 
db
->
aDb
[
i
].pBt;

966 if–
pBt
 ){

967 
	`sqlôe3BåìCommô
(
pBt
);

977 #i‚de‡
SQLITE_OMIT_DISKIO


979 
√edSync
 = 0;

980 *
zMa°î
 = 0;

981 c⁄° *
zMaöFûe
 = 
	`sqlôe3BåìGëFûíame
(
db
->
aDb
[0].
pBt
);

982 
OsFûe
 *
ma°î
 = 0;

986 
u32
 
øndom
;

987 
	`sqlôeFªe
(
zMa°î
);

988 
	`sqlôe3R™dom√ss
((
øndom
), &random);

989 
zMa°î
 = 
	`sqlôe3MPrötf
("%s-mj%08X", 
zMaöFûe
, 
øndom
&0x7fffffff);

990 if–!
zMa°î
 ){

991  
SQLITE_NOMEM
;

993 } 
	`sqlôe3OsFûeExi°s
(
zMa°î
) );

996 
rc
 = 
	`sqlôe3OsO≥nEx˛usive
(
zMa°î
, &
ma°î
, 0);

997 if–
rc
!=
SQLITE_OK
 ){

998 
	`sqlôeFªe
(
zMa°î
);

999  
rc
;

1008 
i
=0; i<
db
->
nDb
; i++){

1009 
Båì
 *
pBt
 = 
db
->
aDb
[
i
].pBt;

1010 if–
i
==1 ) ;

1011 if–
pBt
 && 
	`sqlôe3BåìIsInTøns
(pBt) ){

1012 c⁄° *
zFûe
 = 
	`sqlôe3BåìGëJou∫Æ«me
(
pBt
);

1013 if–
zFûe
[0]==0 ) ;

1014 if–!
√edSync
 && !
	`sqlôe3BåìSyncDißbÀd
(
pBt
) ){

1015 
√edSync
 = 1;

1017 
rc
 = 
	`sqlôe3OsWrôe
(
ma°î
, 
zFûe
, 
	`°æí
(zFile)+1);

1018 if–
rc
!=
SQLITE_OK
 ){

1019 
	`sqlôe3OsClo£
(&
ma°î
);

1020 
	`sqlôe3OsDñëe
(
zMa°î
);

1021 
	`sqlôeFªe
(
zMa°î
);

1022  
rc
;

1031 
zMaöFûe
 = 
	`sqlôe3BåìGëDú«me
(
db
->
aDb
[0].
pBt
);

1032 
rc
 = 
	`sqlôe3OsO≥nDúe˘‹y
(
ma°î
, 
zMaöFûe
);

1033 if–
rc
!=
SQLITE_OK
 ||

1034 (
√edSync
 && (
rc
=
	`sqlôe3OsSync
(
ma°î
,0))!=
SQLITE_OK
) ){

1035 
	`sqlôe3OsClo£
(&
ma°î
);

1036 
	`sqlôe3OsDñëe
(
zMa°î
);

1037 
	`sqlôeFªe
(
zMa°î
);

1038  
rc
;

1051 
i
=0; i<
db
->
nDb
; i++){

1052 
Båì
 *
pBt
 = 
db
->
aDb
[
i
].pBt;

1053 if–
pBt
 && 
	`sqlôe3BåìIsInTøns
(pBt) ){

1054 
rc
 = 
	`sqlôe3BåìSync
(
pBt
, 
zMa°î
);

1055 if–
rc
!=
SQLITE_OK
 ){

1056 
	`sqlôe3OsClo£
(&
ma°î
);

1057 
	`sqlôeFªe
(
zMa°î
);

1058  
rc
;

1062 
	`sqlôe3OsClo£
(&
ma°î
);

1068 
rc
 = 
	`sqlôe3OsDñëe
(
zMa°î
);

1069 
	`as£π
–
rc
==
SQLITE_OK
 );

1070 
	`sqlôeFªe
(
zMa°î
);

1071 
zMa°î
 = 0;

1072 
rc
 = 
	`sqlôe3OsSyncDúe˘‹y
(
zMaöFûe
);

1073 if–
rc
!=
SQLITE_OK
 ){

1081  
rc
;

1091 
i
=0; i<
db
->
nDb
; i++){

1092 
Båì
 *
pBt
 = 
db
->
aDb
[
i
].pBt;

1093 if–
pBt
 ){

1094 
	`sqlôe3BåìCommô
(
pBt
);

1100  
rc
;

1101 
	}
}

1110 
	$sqlôe3Ab‹tOthîA˘iveVdbes
(
sqlôe3
 *
db
, 
Vdbe
 *
pEx˚±
){

1111 
Vdbe
 *
pOthî
;

1112 
pOthî
=
db
->
pVdbe
;ÖOthî;ÖOthîıOthî->
pNext
){

1113 if–
pOthî
==
pEx˚±
 ) ;

1114 if–
pOthî
->
magic
!=
VDBE_MAGIC_RUN
 ||ÖOthî->
pc
<0 ) ;

1115 
	`˛o£AŒCurs‹s
(
pOthî
);

1116 
pOthî
->
ab‹ãd
 = 1;

1118 
	}
}

1129 #i‚de‡
NDEBUG


1130 
	$checkA˘iveVdbeC¡
(
sqlôe3
 *
db
){

1131 
Vdbe
 *
p
;

1132 
˙t
 = 0;

1133 
p
 = 
db
->
pVdbe
;

1134  
p
 ){

1135 if–
p
->
magic
==
VDBE_MAGIC_RUN
 &&Ö->
pc
>=0 ){

1136 
˙t
++;

1138 
p
 =Ö->
pNext
;

1140 
	`as£π
–
˙t
==
db
->
a˘iveVdbeC¡
 );

1141 
	}
}

1143 
	#checkA˘iveVdbeC¡
(
x
)

	)

1158 
	$sqlôe3VdbeHÆt
(
Vdbe
 *
p
){

1159 
sqlôe3
 *
db
 = 
p
->db;

1160 
i
;

1161 (*
xFunc
)(
Båì
 *
pBt
) = 0;

1162 
isS≥cülEº‹
;

1192 if–
	`sqlôe3MÆlocFaûed
() ){

1193 
p
->
rc
 = 
SQLITE_NOMEM
;

1195 if–
p
->
magic
!=
VDBE_MAGIC_RUN
 ){

1197 
	`as£π
–
p
->
magic
==
VDBE_MAGIC_HALT
 );

1198  
SQLITE_OK
;

1200 
	`˛o£AŒCurs‹s
(
p
);

1201 
	`checkA˘iveVdbeC¡
(
db
);

1204 if–
p
->
pc
>=0 ){

1207 
isS≥cülEº‹
 = ((
p
->
rc
==
SQLITE_NOMEM
 ||Ö->rc==
SQLITE_IOERR
)?1:0);

1208 if–
isS≥cülEº‹
 ){

1222 
isRódO∆y
 = 1;

1223 
isSèãmít
 = 0;

1224 
	`as£π
(
p
->
aOp
 ||Ö->
nOp
==0);

1225 
i
=0; i<
p
->
nOp
; i++){

1226  
p
->
aOp
[
i
].
›code
 ){

1227 
OP_Tønß˘i⁄
:

1228 
isRódO∆y
 = 0;

1230 
OP_Sèãmít
:

1231 
isSèãmít
 = 1;

1239 if–!
isRódO∆y
 ){

1240 if–
p
->
rc
==
SQLITE_NOMEM
 && 
isSèãmít
 ){

1241 
xFunc
 = 
sqlôe3BåìRﬁlbackStmt
;

1246 
	`sqlôe3Ab‹tOthîA˘iveVdbes
(
db
, 
p
);

1247 
	`sqlôe3RﬁlbackAŒ
(
db
);

1248 
db
->
autoCommô
 = 1;

1259 if–
db
->
autoCommô
 && db->
a˘iveVdbeC¡
==1 ){

1260 if–
p
->
rc
==
SQLITE_OK
 || (p->
îr‹A˘i⁄
==
OE_Faû
 && !
isS≥cülEº‹
) ){

1265 
rc
 = 
	`vdbeCommô
(
db
);

1266 if–
rc
==
SQLITE_BUSY
 ){

1267  
SQLITE_BUSY
;

1268 }if–
rc
!=
SQLITE_OK
 ){

1269 
p
->
rc
 =Ñc;

1270 
	`sqlôe3RﬁlbackAŒ
(
db
);

1272 
	`sqlôe3CommôI¡î«lCh™ges
(
db
);

1275 
	`sqlôe3RﬁlbackAŒ
(
db
);

1277 }if–!
xFunc
 ){

1278 if–
p
->
rc
==
SQLITE_OK
 ||Ö->
îr‹A˘i⁄
==
OE_Faû
 ){

1279 
xFunc
 = 
sqlôe3BåìCommôStmt
;

1280 }if–
p
->
îr‹A˘i⁄
==
OE_Ab‹t
 ){

1281 
xFunc
 = 
sqlôe3BåìRﬁlbackStmt
;

1283 
	`sqlôe3Ab‹tOthîA˘iveVdbes
(
db
, 
p
);

1284 
	`sqlôe3RﬁlbackAŒ
(
db
);

1285 
db
->
autoCommô
 = 1;

1294 
	`as£π
(!
xFunc
 ||

1295 
xFunc
==
sqlôe3BåìCommôStmt
 ||

1296 
xFunc
==
sqlôe3BåìRﬁlbackStmt


1298 
i
=0; 
xFunc
 && i<
db
->
nDb
; i++){

1299 
rc
;

1300 
Båì
 *
pBt
 = 
db
->
aDb
[
i
].pBt;

1301 if–
pBt
 ){

1302 
rc
 = 
	`xFunc
(
pBt
);

1303 if–
rc
 && (
p
->rc==
SQLITE_OK
 ||Ö->rc==
SQLITE_CONSTRAINT
) ){

1304 
p
->
rc
 =Ñc;

1305 
	`sqlôe3SëSåög
(&
p
->
zEºMsg
, 0);

1313 if–
p
->
ch™geC¡On
 &&Ö->
pc
>=0 ){

1314 if–!
xFunc
 || xFunc==
sqlôe3BåìCommôStmt
 ){

1315 
	`sqlôe3VdbeSëCh™ges
(
db
, 
p
->
nCh™ge
);

1317 
	`sqlôe3VdbeSëCh™ges
(
db
, 0);

1319 
p
->
nCh™ge
 = 0;

1323 if–
p
->
rc
!=
SQLITE_OK
 && 
db
->
Êags
&
SQLITE_I¡înCh™ges
 ){

1324 
	`sqlôe3Re£tI¡î«lSchema
(
db
, 0);

1325 
db
->
Êags
 = (db->Êag†| 
SQLITE_I¡înCh™ges
);

1330 if–
p
->
pc
>=0 ){

1331 
db
->
a˘iveVdbeC¡
--;

1333 
p
->
magic
 = 
VDBE_MAGIC_HALT
;

1334 
	`checkA˘iveVdbeC¡
(
db
);

1336  
SQLITE_OK
;

1337 
	}
}

1350 
	$sqlôe3VdbeRe£t
(
Vdbe
 *
p
){

1351 if–
p
->
magic
!=
VDBE_MAGIC_RUN
 &&Ö->magic!=
VDBE_MAGIC_HALT
 ){

1352 
	`sqlôe3Eº‹
(
p
->
db
, 
SQLITE_MISUSE
, 0);

1353  
SQLITE_MISUSE
;

1360 
	`sqlôe3VdbeHÆt
(
p
);

1367 if–
p
->
pc
>=0 ){

1368 if–
p
->
zEºMsg
 ){

1369 
sqlôe3
* 
db
 = 
p
->db;

1370 
	`sqlôe3VÆueSëSå
(
db
->
pEº
, -1, 
p
->
zEºMsg
, 
SQLITE_UTF8
, 
sqlôe3FªeX
);

1371 
db
->
îrCode
 = 
p
->
rc
;

1372 
p
->
zEºMsg
 = 0;

1373 }if–
p
->
rc
 ){

1374 
	`sqlôe3Eº‹
(
p
->
db
,Ö->
rc
, 0);

1376 
	`sqlôe3Eº‹
(
p
->
db
, 
SQLITE_OK
, 0);

1378 }if–
p
->
rc
 &&Ö->
expúed
 ){

1383 
	`sqlôe3Eº‹
(
p
->
db
,Ö->
rc
, 0);

1388 
	`CÀ™up
(
p
);

1392 
	`as£π
–
p
->
pTos
<&p->
aSèck
[p->
pc
<0?0:p->pc] || !p->aStack );

1393 #ifde‡
VDBE_PROFILE


1395 
FILE
 *
out
 = 
	`f›í
("vdbe_profile.out", "a");

1396 if–
out
 ){

1397 
i
;

1398 
	`Ârötf
(
out
, "---- ");

1399 
i
=0; i<
p
->
nOp
; i++){

1400 
	`Ârötf
(
out
, "%02x", 
p
->
aOp
[
i
].
›code
);

1402 
	`Ârötf
(
out
, "\n");

1403 
i
=0; i<
p
->
nOp
; i++){

1404 
	`Ârötf
(
out
, "%6d %10lld %8lld ",

1405 
p
->
aOp
[
i
].
˙t
,

1406 
p
->
aOp
[
i
].
cy˛es
,

1407 
p
->
aOp
[
i
].
˙t
>0 ?Ö->aOp[i].
cy˛es
/p->aOp[i].cnt : 0

1409 
	`sqlôe3VdbePrötOp
(
out
, 
i
, &
p
->
aOp
[i]);

1411 
	`f˛o£
(
out
);

1415 
p
->
magic
 = 
VDBE_MAGIC_INIT
;

1416 
p
->
ab‹ãd
 = 0;

1417 if–
p
->
rc
==
SQLITE_SCHEMA
 ){

1418 
	`sqlôe3Re£tI¡î«lSchema
(
p
->
db
, 0);

1420  
p
->
rc
;

1421 
	}
}

1427 
	$sqlôe3VdbeFöÆize
(
Vdbe
 *
p
){

1428 
rc
 = 
SQLITE_OK
;

1430 if–
p
->
magic
==
VDBE_MAGIC_RUN
 ||Ö->magic==
VDBE_MAGIC_HALT
 ){

1431 
rc
 = 
	`sqlôe3VdbeRe£t
(
p
);

1432 }if–
p
->
magic
!=
VDBE_MAGIC_INIT
 ){

1433  
SQLITE_MISUSE
;

1435 
	`sqlôe3VdbeDñëe
(
p
);

1436  
rc
;

1437 
	}
}

1445 
	$sqlôe3VdbeDñëeAuxD©a
(
VdbeFunc
 *
pVdbeFunc
, 
mask
){

1446 
i
;

1447 
i
=0; i<
pVdbeFunc
->
nAux
; i++){

1448 
AuxD©a
 *
pAux
 = &
pVdbeFunc
->
≠Aux
[
i
];

1449 if–(
i
>31 || !(
mask
&(1<<i))Ë&& 
pAux
->pAux ){

1450 if–
pAux
->
xDñëe
 ){

1451 
pAux
->
	`xDñëe
(pAux->pAux);

1453 
pAux
->pAux = 0;

1456 
	}
}

1461 
	$sqlôe3VdbeDñëe
(
Vdbe
 *
p
){

1462 
i
;

1463 if–
p
==0 ) ;

1464 
	`CÀ™up
(
p
);

1465 if–
p
->
pPªv
 ){

1466 
p
->
pPªv
->
pNext
 =Ö->pNext;

1468 
	`as£π
–
p
->
db
->
pVdbe
==p );

1469 
p
->
db
->
pVdbe
 =Ö->
pNext
;

1471 if–
p
->
pNext
 ){

1472 
p
->
pNext
->
pPªv
 =Ö->pPrev;

1474 if–
p
->
aOp
 ){

1475 
i
=0; i<
p
->
nOp
; i++){

1476 
Op
 *
pOp
 = &
p
->
aOp
[
i
];

1477 
	`‰ìP3
(
pOp
->
p3ty≥
,ÖOp->
p3
);

1479 
	`sqlôeFªe
(
p
->
aOp
);

1481 
	`ªÀa£MemAºay
(
p
->
aV¨
,Ö->
nV¨
);

1482 
	`sqlôeFªe
(
p
->
aLabñ
);

1483 
	`sqlôeFªe
(
p
->
aSèck
);

1484 
	`ªÀa£MemAºay
(
p
->
aCﬁName
,Ö->
nResCﬁumn
*2);

1485 
	`sqlôeFªe
(
p
->
aCﬁName
);

1486 
p
->
magic
 = 
VDBE_MAGIC_DEAD
;

1487 
	`sqlôeFªe
(
p
);

1488 
	}
}

1495 
	$sqlôe3VdbeCurs‹Movëo
(
Curs‹
 *
p
){

1496 if–
p
->
de„ºedMovëo
 ){

1497 
ªs
, 
rc
;

1498 
sqlôe3_£¨ch_cou¡
;

1499 
	`as£π
–
p
->
isTabÀ
 );

1500 if–
p
->
isTabÀ
 ){

1501 
rc
 = 
	`sqlôe3BåìMovëo
(
p
->
pCurs‹
, 0,Ö->
movëoT¨gë
, &
ªs
);

1503 
rc
 = 
	`sqlôe3BåìMovëo
(
p
->
pCurs‹
,(*)&p->
movëoT¨gë
,

1504 (
i64
),&
ªs
);

1506 if–
rc
 ) Ñc;

1507 *
p
->
pIn¸Key
 = 0;

1508 
p
->
œ°Rowid
 = 
	`keyToI¡
’->
movëoT¨gë
);

1509 
p
->
rowidIsVÆid
 = 
ªs
==0;

1510 if–
ªs
<0 ){

1511 
rc
 = 
	`sqlôe3BåìNext
(
p
->
pCurs‹
, &
ªs
);

1512 if–
rc
 ) Ñc;

1514 
sqlôe3_£¨ch_cou¡
++;

1515 
p
->
de„ºedMovëo
 = 0;

1516 
p
->
ˇcheSètus
 = 
CACHE_STALE
;

1518  
SQLITE_OK
;

1519 
	}
}

1566 
u32
 
	$sqlôe3VdbeSîülTy≥
(
Mem
 *
pMem
, 
fûe_f‹m©
){

1567 
Êags
 = 
pMem
->flags;

1569 if–
Êags
&
MEM_NuŒ
 ){

1572 if–
Êags
&
MEM_I¡
 ){

1574 
	#MAX_6BYTE
 ((((
i64
)0x00001000)<<32)-1)

	)

1575 
i64
 
i
 = 
pMem
->i;

1576 
u64
 
u
;

1577 if–
fûe_f‹m©
>=4 && (
i
&1)==i ){

1578  8+
i
;

1580 
u
 = 
i
<0 ? -i : i;

1581 if–
u
<=127 )  1;

1582 if–
u
<=32767 )  2;

1583 if–
u
<=8388607 )  3;

1584 if–
u
<=2147483647 )  4;

1585 if–
u
<=
MAX_6BYTE
 )  5;

1588 if–
Êags
&
MEM_Ról
 ){

1591 if–
Êags
&
MEM_Så
 ){

1592 
n
 = 
pMem
->n;

1593 
	`as£π
–
n
>=0 );

1594  ((
n
*2) + 13);

1596 if–
Êags
&
MEM_Blob
 ){

1597  (
pMem
->
n
*2 + 12);

1600 
	}
}

1605 
	$sqlôe3VdbeSîülTy≥Lí
(
u32
 
£rül_ty≥
){

1606 if–
£rül_ty≥
>=12 ){

1607  (
£rül_ty≥
-12)/2;

1609 c⁄° 
u8
 
aSize
[] = { 0, 1, 2, 3, 4, 6, 8, 8, 0, 0, 0, 0 };

1610  
aSize
[
£rül_ty≥
];

1612 
	}
}

1619 
	$sqlôe3VdbeSîülPut
(*
buf
, 
Mem
 *
pMem
, 
fûe_f‹m©
){

1620 
u32
 
£rül_ty≥
 = 
	`sqlôe3VdbeSîülTy≥
(
pMem
, 
fûe_f‹m©
);

1621 
Àn
;

1624 if–
£rül_ty≥
<=7 && serial_type>0 ){

1625 
u64
 
v
;

1626 
i
;

1627 if–
£rül_ty≥
==7 ){

1628 
v
 = *(
u64
*)&
pMem
->
r
;

1630 
v
 = *(
u64
*)&
pMem
->
i
;

1632 
Àn
 = 
i
 = 
	`sqlôe3VdbeSîülTy≥Lí
(
£rül_ty≥
);

1633  
i
-- ){

1634 
buf
[
i
] = (
v
&0xFF);

1635 
v
 >>= 8;

1637  
Àn
;

1641 if–
£rül_ty≥
>=12 ){

1642 
Àn
 = 
	`sqlôe3VdbeSîülTy≥Lí
(
£rül_ty≥
);

1643 
	`mem˝y
(
buf
, 
pMem
->
z
, 
Àn
);

1644  
Àn
;

1649 
	}
}

1655 
	$sqlôe3VdbeSîülGë
(

1656 c⁄° *
buf
,

1657 
u32
 
£rül_ty≥
,

1658 
Mem
 *
pMem


1660  
£rül_ty≥
 ){

1664 
pMem
->
Êags
 = 
MEM_NuŒ
;

1668 
pMem
->
i
 = (sig√d )
buf
[0];

1669 
pMem
->
Êags
 = 
MEM_I¡
;

1673 
pMem
->
i
 = (((sig√d )
buf
[0])<<8) | buf[1];

1674 
pMem
->
Êags
 = 
MEM_I¡
;

1678 
pMem
->
i
 = (((sig√d )
buf
[0])<<16) | (buf[1]<<8) | buf[2];

1679 
pMem
->
Êags
 = 
MEM_I¡
;

1683 
pMem
->
i
 = (
buf
[0]<<24) | (buf[1]<<16) | (buf[2]<<8) | buf[3];

1684 
pMem
->
Êags
 = 
MEM_I¡
;

1688 
u64
 
x
 = (((sig√d )
buf
[0])<<8) | buf[1];

1689 
u32
 
y
 = (
buf
[2]<<24) | (buf[3]<<16) | (buf[4]<<8) | buf[5];

1690 
x
 = (x<<32Ë| 
y
;

1691 
pMem
->
i
 = *(
i64
*)&
x
;

1692 
pMem
->
Êags
 = 
MEM_I¡
;

1697 
u64
 
x
;

1698 
u32
 
y
;

1699 #i‡!
	`deföed
(
NDEBUG
Ë&& !deföed(
SQLITE_OMIT_FLOATING_POINT
)

1703 c⁄° 
u64
 
t1
 = ((u64)0x3ff00000)<<32;

1704 
	`as£π
–1.0==*(*)&
t1
 );

1707 
x
 = (
buf
[0]<<24) | (buf[1]<<16) | (buf[2]<<8) | buf[3];

1708 
y
 = (
buf
[4]<<24) | (buf[5]<<16) | (buf[6]<<8) | buf[7];

1709 
x
 = (x<<32Ë| 
y
;

1710 if–
£rül_ty≥
==6 ){

1711 
pMem
->
i
 = *(
i64
*)&
x
;

1712 
pMem
->
Êags
 = 
MEM_I¡
;

1714 
pMem
->
r
 = *(*)&
x
;

1715 
pMem
->
Êags
 = 
MEM_Ról
;

1721 
pMem
->
i
 = 
£rül_ty≥
-8;

1722 
pMem
->
Êags
 = 
MEM_I¡
;

1726 
Àn
 = (
£rül_ty≥
-12)/2;

1727 
pMem
->
z
 = (*)
buf
;

1728 
pMem
->
n
 = 
Àn
;

1729 
pMem
->
xDñ
 = 0;

1730 if–
£rül_ty≥
&0x01 ){

1731 
pMem
->
Êags
 = 
MEM_Så
 | 
MEM_Ephem
;

1733 
pMem
->
Êags
 = 
MEM_Blob
 | 
MEM_Ephem
;

1735  
Àn
;

1739 
	}
}

1756 
	#GëV¨öt
(
A
,
B
Ë((B = *(A))<=0x7‡? 1 : 
	`sqlôe3GëV¨öt32
(A, &B))

	)

1765 
	$sqlôe3VdbeRec‹dCom∑ª
(

1766 *
u£rD©a
,

1767 
nKey1
, c⁄° *
pKey1
,

1768 
nKey2
, c⁄° *
pKey2


1770 
KeyInfo
 *
pKeyInfo
 = (KeyInfo*)
u£rD©a
;

1771 
u32
 
d1
, 
d2
;

1772 
u32
 
idx1
, 
idx2
;

1773 
u32
 
szHdr1
, 
szHdr2
;

1774 
i
 = 0;

1775 
nFõld
;

1776 
rc
 = 0;

1777 c⁄° *
aKey1
 = (c⁄° *)
pKey1
;

1778 c⁄° *
aKey2
 = (c⁄° *)
pKey2
;

1780 
Mem
 
mem1
;

1781 
Mem
 
mem2
;

1782 
mem1
.
íc
 = 
pKeyInfo
->enc;

1783 
mem2
.
íc
 = 
pKeyInfo
->enc;

1785 
idx1
 = 
	`GëV¨öt
(
aKey1
, 
szHdr1
);

1786 
d1
 = 
szHdr1
;

1787 
idx2
 = 
	`GëV¨öt
(
aKey2
, 
szHdr2
);

1788 
d2
 = 
szHdr2
;

1789 
nFõld
 = 
pKeyInfo
->nField;

1790  
idx1
<
szHdr1
 && 
idx2
<
szHdr2
 ){

1791 
u32
 
£rül_ty≥1
;

1792 
u32
 
£rül_ty≥2
;

1795 
idx1
 +
	`GëV¨öt
–
aKey1
+idx1, 
£rül_ty≥1
 );

1796 if–
d1
>=
nKey1
 && 
	`sqlôe3VdbeSîülTy≥Lí
(
£rül_ty≥1
)>0 ) ;

1797 
idx2
 +
	`GëV¨öt
–
aKey2
+idx2, 
£rül_ty≥2
 );

1798 if–
d2
>=
nKey2
 && 
	`sqlôe3VdbeSîülTy≥Lí
(
£rül_ty≥2
)>0 ) ;

1805 
d1
 +
	`sqlôe3VdbeSîülGë
(&
aKey1
[d1], 
£rül_ty≥1
, &
mem1
);

1806 
d2
 +
	`sqlôe3VdbeSîülGë
(&
aKey2
[d2], 
£rül_ty≥2
, &
mem2
);

1808 
rc
 = 
	`sqlôe3MemCom∑ª
(&
mem1
, &
mem2
, 
i
<
nFõld
 ? 
pKeyInfo
->
aCﬁl
[i] : 0);

1809 if–
mem1
.
Êags
 & 
MEM_Dyn
 ) 
	`sqlôe3VdbeMemRñó£
(&mem1);

1810 if–
mem2
.
Êags
 & 
MEM_Dyn
 ) 
	`sqlôe3VdbeMemRñó£
(&mem2);

1811 if–
rc
!=0 ){

1814 
i
++;

1821 if–
rc
==0 ){

1822 if–
pKeyInfo
->
ö¸Key
 ){

1823 
rc
 = -1;

1824 }if–
d1
<
nKey1
 ){

1825 
rc
 = 1;

1826 }if–
d2
<
nKey2
 ){

1827 
rc
 = -1;

1829 }if–
pKeyInfo
->
aS‹tOrdî
 && 
i
<pKeyInfo->
nFõld


1830 && 
pKeyInfo
->
aS‹tOrdî
[
i
] ){

1831 
rc
 = -rc;

1834  
rc
;

1835 
	}
}

1843 
	$sqlôe3VdbeIdxRowidLí
(
nKey
, c⁄° 
u8
 *
aKey
){

1844 
u32
 
szHdr
;

1845 
u32
 
ty≥Rowid
;

1847 
	`sqlôe3GëV¨öt32
(
aKey
, &
szHdr
);

1848 
	`sqlôe3GëV¨öt32
(&
aKey
[
szHdr
-1], &
ty≥Rowid
);

1849  
	`sqlôe3VdbeSîülTy≥Lí
(
ty≥Rowid
);

1850 
	}
}

1858 
	$sqlôe3VdbeIdxRowid
(
BtCurs‹
 *
pCur
, 
i64
 *
rowid
){

1859 
i64
 
nCñlKey
;

1860 
rc
;

1861 
u32
 
szHdr
;

1862 
u32
 
ty≥Rowid
;

1863 
u32
 
ÀnRowid
;

1864 
Mem
 
m
, 
v
;

1866 
	`sqlôe3BåìKeySize
(
pCur
, &
nCñlKey
);

1867 if–
nCñlKey
<=0 ){

1868  
SQLITE_CORRUPT_BKPT
;

1870 
rc
 = 
	`sqlôe3VdbeMemFromBåì
(
pCur
, 0, 
nCñlKey
, 1, &
m
);

1871 if–
rc
 ){

1872  
rc
;

1874 
	`sqlôe3GëV¨öt32
((
u8
*)
m
.
z
, &
szHdr
);

1875 
	`sqlôe3GëV¨öt32
((
u8
*)&
m
.
z
[
szHdr
-1], &
ty≥Rowid
);

1876 
ÀnRowid
 = 
	`sqlôe3VdbeSîülTy≥Lí
(
ty≥Rowid
);

1877 
	`sqlôe3VdbeSîülGë
((
u8
*)&
m
.
z
[m.
n
-
ÀnRowid
], 
ty≥Rowid
, &
v
);

1878 *
rowid
 = 
v
.
i
;

1879 
	`sqlôe3VdbeMemRñó£
(&
m
);

1880  
SQLITE_OK
;

1881 
	}
}

1893 
	$sqlôe3VdbeIdxKeyCom∑ª
(

1894 
Curs‹
 *
pC
,

1895 
nKey
, c⁄° 
u8
 *
pKey
,

1896 *
ªs


1898 
i64
 
nCñlKey
;

1899 
rc
;

1900 
BtCurs‹
 *
pCur
 = 
pC
->
pCurs‹
;

1901 
ÀnRowid
;

1902 
Mem
 
m
;

1904 
	`sqlôe3BåìKeySize
(
pCur
, &
nCñlKey
);

1905 if–
nCñlKey
<=0 ){

1906 *
ªs
 = 0;

1907  
SQLITE_OK
;

1909 
rc
 = 
	`sqlôe3VdbeMemFromBåì
(
pC
->
pCurs‹
, 0, 
nCñlKey
, 1, &
m
);

1910 if–
rc
 ){

1911  
rc
;

1913 
ÀnRowid
 = 
	`sqlôe3VdbeIdxRowidLí
(
m
.
n
, (
u8
*)m.
z
);

1914 *
ªs
 = 
	`sqlôe3VdbeRec‹dCom∑ª
(
pC
->
pKeyInfo
, 
m
.
n
-
ÀnRowid
, m.
z
, 
nKey
, 
pKey
);

1915 
	`sqlôe3VdbeMemRñó£
(&
m
);

1916  
SQLITE_OK
;

1917 
	}
}

1923 
	$sqlôe3VdbeSëCh™ges
(
sqlôe3
 *
db
, 
nCh™ge
){

1924 
db
->
nCh™ge
 =ÇChange;

1925 
db
->
nTŸÆCh™ge
 +
nCh™ge
;

1926 
	}
}

1932 
	$sqlôe3VdbeCou¡Ch™ges
(
Vdbe
 *
v
){

1933 
v
->
ch™geC¡On
 = 1;

1934 
	}
}

1946 
	$sqlôe3ExpúePª∑ªdSèãmíts
(
sqlôe3
 *
db
){

1947 
Vdbe
 *
p
;

1948 
p
 = 
db
->
pVdbe
;Ö;Öı->
pNext
){

1949 
p
->
expúed
 = 1;

1951 
	}
}

1956 
sqlôe3
 *
	$sqlôe3VdbeDb
(
Vdbe
 *
v
){

1957  
v
->
db
;

1958 
	}
}

	@vdbefifo.c

15 
	~"sqlôeI¡.h
"

16 
	~"vdbeI¡.h
"

22 
FifoPage
 *
	$ÆloˇãPage
(
nE¡ry
){

23 
FifoPage
 *
pPage
;

24 if–
nE¡ry
>32767 ){

25 
nE¡ry
 = 32767;

27 
pPage
 = 
	`sqlôeMÆlocRaw
–(
FifoPage
Ë+ (
i64
)*(
nE¡ry
-1) );

28 if–
pPage
 ){

29 
pPage
->
nSlŸ
 = 
nE¡ry
;

30 
pPage
->
iWrôe
 = 0;

31 
pPage
->
iRód
 = 0;

32 
pPage
->
pNext
 = 0;

34  
pPage
;

35 
	}
}

40 
	$sqlôe3VdbeFifoInô
(
Fifo
 *
pFifo
){

41 
	`mem£t
(
pFifo
, 0, (*pFifo));

42 
	}
}

49 
	$sqlôe3VdbeFifoPush
(
Fifo
 *
pFifo
, 
i64
 
vÆ
){

50 
FifoPage
 *
pPage
;

51 
pPage
 = 
pFifo
->
pLa°
;

52 if–
pPage
==0 ){

53 
pPage
 = 
pFifo
->
pLa°
 =ÖFifo->
pFú°
 = 
	`ÆloˇãPage
(20);

54 if–
pPage
==0 ){

55  
SQLITE_NOMEM
;

57 }if–
pPage
->
iWrôe
>ıPage->
nSlŸ
 ){

58 
pPage
->
pNext
 = 
	`ÆloˇãPage
(
pFifo
->
nE¡ry
);

59 if–
pPage
->
pNext
==0 ){

60  
SQLITE_NOMEM
;

62 
pPage
 = 
pFifo
->
pLa°
 =ÖPage->
pNext
;

64 
pPage
->
aSlŸ
[pPage->
iWrôe
++] = 
vÆ
;

65 
pFifo
->
nE¡ry
++;

66  
SQLITE_OK
;

67 
	}
}

74 
	$sqlôe3VdbeFifoP›
(
Fifo
 *
pFifo
, 
i64
 *
pVÆ
){

75 
FifoPage
 *
pPage
;

76 if–
pFifo
->
nE¡ry
==0 ){

77  
SQLITE_DONE
;

79 
	`as£π
–
pFifo
->
nE¡ry
>0 );

80 
pPage
 = 
pFifo
->
pFú°
;

81 
	`as£π
–
pPage
!=0 );

82 
	`as£π
–
pPage
->
iWrôe
>pPage->
iRód
 );

83 
	`as£π
–
pPage
->
iWrôe
<ıPage->
nSlŸ
 );

84 
	`as£π
–
pPage
->
iRód
<pPage->
nSlŸ
 );

85 
	`as£π
–
pPage
->
iRód
>=0 );

86 *
pVÆ
 = 
pPage
->
aSlŸ
[pPage->
iRód
++];

87 
pFifo
->
nE¡ry
--;

88 if–
pPage
->
iRód
>ıPage->
iWrôe
 ){

89 
pFifo
->
pFú°
 = 
pPage
->
pNext
;

90 
	`sqlôeFªe
(
pPage
);

91 if–
pFifo
->
nE¡ry
==0 ){

92 
	`as£π
–
pFifo
->
pLa°
==
pPage
 );

93 
pFifo
->
pLa°
 = 0;

95 
	`as£π
–
pFifo
->
pFú°
!=0 );

98 
	`as£π
–
pFifo
->
nE¡ry
>0 );

100  
SQLITE_OK
;

101 
	}
}

107 
	$sqlôe3VdbeFifoCÀ¨
(
Fifo
 *
pFifo
){

108 
FifoPage
 *
pPage
, *
pNextPage
;

109 
pPage
=
pFifo
->
pFú°
;ÖPage;ÖPage=
pNextPage
){

110 
pNextPage
 = 
pPage
->
pNext
;

111 
	`sqlôeFªe
(
pPage
);

113 
	`sqlôe3VdbeFifoInô
(
pFifo
);

114 
	}
}

	@vdbemem.c

18 
	~"sqlôeI¡.h
"

19 
	~"os.h
"

20 
	~<˘y≥.h
>

21 
	~"vdbeI¡.h
"

36 
	$sqlôe3VdbeCh™geEncodög
(
Mem
 *
pMem
, 
desúedEnc
){

37 
rc
;

38 if–!(
pMem
->
Êags
&
MEM_Så
Ë||ÖMem->
íc
==
desúedEnc
 ){

39  
SQLITE_OK
;

41 #ifde‡
SQLITE_OMIT_UTF16


42  
SQLITE_ERROR
;

48 
rc
 = 
	`sqlôe3VdbeMemTøn¶©e
(
pMem
, 
desúedEnc
);

49 
	`as£π
(
rc
==
SQLITE_OK
 ||Ñc==
SQLITE_NOMEM
);

50 
	`as£π
(
rc
==
SQLITE_OK
 || 
pMem
->
íc
!=
desúedEnc
);

51 
	`as£π
(
rc
==
SQLITE_NOMEM
 || 
pMem
->
íc
==
desúedEnc
);

53 if–
rc
==
SQLITE_NOMEM
 ){

60  
rc
;

62 
	}
}

69 
	$sqlôe3VdbeMemDy«micify
(
Mem
 *
pMem
){

70 
n
 = 
pMem
->n;

71 
u8
 *
z
;

72 if–(
pMem
->
Êags
 & (
MEM_Ephem
|
MEM_Sètic
|
MEM_Sh‹t
))==0 ){

73  
SQLITE_OK
;

75 
	`as£π
–(
pMem
->
Êags
 & 
MEM_Dyn
)==0 );

76 
	`as£π
–
pMem
->
Êags
 & (
MEM_Så
|
MEM_Blob
) );

77 
z
 = 
	`sqlôeMÆlocRaw
–
n
+2 );

78 if–
z
==0 ){

79  
SQLITE_NOMEM
;

81 
pMem
->
Êags
 |
MEM_Dyn
|
MEM_Tîm
;

82 
pMem
->
xDñ
 = 0;

83 
	`mem˝y
(
z
, 
pMem
->z, 
n
 );

84 
z
[
n
] = 0;

85 
z
[
n
+1] = 0;

86 
pMem
->
z
 = (*)z;

87 
pMem
->
Êags
 &~(
MEM_Ephem
|
MEM_Sètic
|
MEM_Sh‹t
);

88  
SQLITE_OK
;

89 
	}
}

97 
	$sqlôe3VdbeMemMakeWrôóbÀ
(
Mem
 *
pMem
){

98 
n
;

99 
u8
 *
z
;

100 if–(
pMem
->
Êags
 & (
MEM_Ephem
|
MEM_Sètic
))==0 ){

101  
SQLITE_OK
;

103 
	`as£π
–(
pMem
->
Êags
 & 
MEM_Dyn
)==0 );

104 
	`as£π
–
pMem
->
Êags
 & (
MEM_Så
|
MEM_Blob
) );

105 if–(
n
 = 
pMem
->n)+2<’Mem->
zSh‹t
) ){

106 
z
 = (
u8
*)
pMem
->
zSh‹t
;

107 
pMem
->
Êags
 |
MEM_Sh‹t
|
MEM_Tîm
;

109 
z
 = 
	`sqlôeMÆlocRaw
–
n
+2 );

110 if–
z
==0 ){

111  
SQLITE_NOMEM
;

113 
pMem
->
Êags
 |
MEM_Dyn
|
MEM_Tîm
;

114 
pMem
->
xDñ
 = 0;

116 
	`mem˝y
(
z
, 
pMem
->z, 
n
 );

117 
z
[
n
] = 0;

118 
z
[
n
+1] = 0;

119 
pMem
->
z
 = (*)z;

120 
pMem
->
Êags
 &~(
MEM_Ephem
|
MEM_Sètic
);

121  
SQLITE_OK
;

122 
	}
}

127 
	$sqlôe3VdbeMemNulTîmö©e
(
Mem
 *
pMem
){

134 
	`as£π
(

135 !(
pMem
->
Êags
&
MEM_Så
) ||

136 (
pMem
->
Êags
&
MEM_Tîm
) ||

137 (
pMem
->
Êags
&(
MEM_Ephem
|
MEM_Sètic
)) ||

138 (
pMem
->
Êags
&
MEM_Dyn
 &&ÖMem->
xDñ
)

140 if–(
pMem
->
Êags
 & 
MEM_Tîm
)!=0 || (pMem->Êag†& 
MEM_Så
)==0 ){

141  
SQLITE_OK
;

144 if–
pMem
->
Êags
 & (
MEM_Sètic
|
MEM_Ephem
) ){

145  
	`sqlôe3VdbeMemMakeWrôóbÀ
(
pMem
);

147 *
z
 = 
	`sqlôeMÆloc
(
pMem
->
n
+2);

148 if–!
z
 )  
SQLITE_NOMEM
;

149 
	`mem˝y
(
z
, 
pMem
->z,ÖMem->
n
);

150 
z
[
pMem
->
n
] = 0;

151 
z
[
pMem
->
n
+1] = 0;

152 
pMem
->
	`xDñ
’Mem->
z
);

153 
pMem
->
xDñ
 = 0;

154 
pMem
->
z
 = z;

156  
SQLITE_OK
;

157 
	}
}

172 
	$sqlôe3VdbeMemSåögify
(
Mem
 *
pMem
, 
íc
){

173 
rc
 = 
SQLITE_OK
;

174 
fg
 = 
pMem
->
Êags
;

175 *
z
 = 
pMem
->
zSh‹t
;

177 
	`as£π
–!(
fg
&(
MEM_Så
|
MEM_Blob
)) );

178 
	`as£π
–
fg
&(
MEM_I¡
|
MEM_Ról
) );

186 if–
fg
 & 
MEM_I¡
 ){

187 
	`sqlôe3_¢¥ötf
(
NBFS
, 
z
, "%Œd", 
pMem
->
i
);

189 
	`as£π
–
fg
 & 
MEM_Ról
 );

190 
	`sqlôe3_¢¥ötf
(
NBFS
, 
z
, "%!.15g", 
pMem
->
r
);

192 
pMem
->
n
 = 
	`°æí
(
z
);

193 
pMem
->
z
 = z;

194 
pMem
->
íc
 = 
SQLITE_UTF8
;

195 
pMem
->
Êags
 |
MEM_Så
 | 
MEM_Sh‹t
 | 
MEM_Tîm
;

196 
	`sqlôe3VdbeCh™geEncodög
(
pMem
, 
íc
);

197  
rc
;

198 
	}
}

208 
	$sqlôe3VdbeMemFöÆize
(
Mem
 *
pMem
, 
FuncDef
 *
pFunc
){

209 
rc
 = 
SQLITE_OK
;

210 if–
pFunc
 &&ÖFunc->
xFöÆize
 ){

211 
sqlôe3_c⁄ãxt
 
˘x
;

212 
	`as£π
–(
pMem
->
Êags
 & 
MEM_NuŒ
)!=0 || 
pFunc
==*(
FuncDef
**)&pMem->
i
 );

213 
˘x
.
s
.
Êags
 = 
MEM_NuŒ
;

214 
˘x
.
s
.
z
 = 
pMem
->
zSh‹t
;

215 
˘x
.
pMem
 =ÖMem;

216 
˘x
.
pFunc
 =ÖFunc;

217 
˘x
.
isEº‹
 = 0;

218 
pFunc
->
	`xFöÆize
(&
˘x
);

219 if–
pMem
->
z
 &&ÖMem->z!ıMem->
zSh‹t
 ){

220 
	`sqlôeFªe
–
pMem
->
z
 );

222 *
pMem
 = 
˘x
.
s
;

223 if–
pMem
->
Êags
 & 
MEM_Sh‹t
 ){

224 
pMem
->
z
 =ÖMem->
zSh‹t
;

226 if–
˘x
.
isEº‹
 ){

227 
rc
 = 
SQLITE_ERROR
;

230  
rc
;

231 
	}
}

238 
	$sqlôe3VdbeMemRñó£
(
Mem
 *
p
){

239 if–
p
->
Êags
 & (
MEM_Dyn
|
MEM_Agg
) ){

240 if–
p
->
xDñ
 ){

241 if–
p
->
Êags
 & 
MEM_Agg
 ){

242 
	`sqlôe3VdbeMemFöÆize
(
p
, *(
FuncDef
**)&p->
i
);

243 
	`as£π
–(
p
->
Êags
 & 
MEM_Agg
)==0 );

244 
	`sqlôe3VdbeMemRñó£
(
p
);

246 
p
->
	`xDñ
((*Ì->
z
);

249 
	`sqlôeFªe
(
p
->
z
);

251 
p
->
z
 = 0;

252 
p
->
xDñ
 = 0;

254 
	}
}

266 
i64
 
	$sqlôe3VdbeI¡VÆue
(
Mem
 *
pMem
){

267 
Êags
 = 
pMem
->flags;

268 if–
Êags
 & 
MEM_I¡
 ){

269  
pMem
->
i
;

270 }if–
Êags
 & 
MEM_Ról
 ){

271  (
i64
)
pMem
->
r
;

272 }if–
Êags
 & (
MEM_Så
|
MEM_Blob
) ){

273 
i64
 
vÆue
;

274 if–
	`sqlôe3VdbeCh™geEncodög
(
pMem
, 
SQLITE_UTF8
)

275 || 
	`sqlôe3VdbeMemNulTîmö©e
(
pMem
) ){

278 
	`as£π
–
pMem
->
z
 );

279 
	`sqlôe3©oi64
(
pMem
->
z
, &
vÆue
);

280  
vÆue
;

284 
	}
}

292 
	$sqlôe3VdbeRólVÆue
(
Mem
 *
pMem
){

293 if–
pMem
->
Êags
 & 
MEM_Ról
 ){

294  
pMem
->
r
;

295 }if–
pMem
->
Êags
 & 
MEM_I¡
 ){

296  ()
pMem
->
i
;

297 }if–
pMem
->
Êags
 & (
MEM_Så
|
MEM_Blob
) ){

298 
vÆ
 = 0.0;

299 if–
	`sqlôe3VdbeCh™geEncodög
(
pMem
, 
SQLITE_UTF8
)

300 || 
	`sqlôe3VdbeMemNulTîmö©e
(
pMem
) ){

303 
	`as£π
–
pMem
->
z
 );

304 
	`sqlôe3AtoF
(
pMem
->
z
, &
vÆ
);

305  
vÆ
;

309 
	}
}

315 
	$sqlôe3VdbeI¡egîAfföôy
(
Mem
 *
pMem
){

316 
	`as£π
–
pMem
->
Êags
 & 
MEM_Ról
 );

317 
pMem
->
i
 =ÖMem->
r
;

318 if–(()
pMem
->
i
)=ıMem->
r
 ){

319 
pMem
->
Êags
 |
MEM_I¡
;

321 
	}
}

326 
	$sqlôe3VdbeMemI¡egîify
(
Mem
 *
pMem
){

327 
pMem
->
i
 = 
	`sqlôe3VdbeI¡VÆue
(pMem);

328 
	`sqlôe3VdbeMemRñó£
(
pMem
);

329 
pMem
->
Êags
 = 
MEM_I¡
;

330  
SQLITE_OK
;

331 
	}
}

337 
	$sqlôe3VdbeMemRólify
(
Mem
 *
pMem
){

338 
pMem
->
r
 = 
	`sqlôe3VdbeRólVÆue
(pMem);

339 
	`sqlôe3VdbeMemRñó£
(
pMem
);

340 
pMem
->
Êags
 = 
MEM_Ról
;

341  
SQLITE_OK
;

342 
	}
}

348 
	$sqlôe3VdbeMemNumîify
(
Mem
 *
pMem
){

349 
	`sqlôe3VdbeMemRólify
(
pMem
);

350 
	`sqlôe3VdbeI¡egîAfföôy
(
pMem
);

351  
SQLITE_OK
;

352 
	}
}

357 
	$sqlôe3VdbeMemSëNuŒ
(
Mem
 *
pMem
){

358 
	`sqlôe3VdbeMemRñó£
(
pMem
);

359 
pMem
->
Êags
 = 
MEM_NuŒ
;

360 
pMem
->
ty≥
 = 
SQLITE_NULL
;

361 
pMem
->
n
 = 0;

362 
	}
}

368 
	$sqlôe3VdbeMemSëI¡64
(
Mem
 *
pMem
, 
i64
 
vÆ
){

369 
	`sqlôe3VdbeMemRñó£
(
pMem
);

370 
pMem
->
i
 = 
vÆ
;

371 
pMem
->
Êags
 = 
MEM_I¡
;

372 
pMem
->
ty≥
 = 
SQLITE_INTEGER
;

373 
	}
}

379 
	$sqlôe3VdbeMemSëDoubÀ
(
Mem
 *
pMem
, 
vÆ
){

380 
	`sqlôe3VdbeMemRñó£
(
pMem
);

381 
pMem
->
r
 = 
vÆ
;

382 
pMem
->
Êags
 = 
MEM_Ról
;

383 
pMem
->
ty≥
 = 
SQLITE_FLOAT
;

384 
	}
}

392 
	$sqlôe3VdbeMemShÆlowC›y
(
Mem
 *
pTo
, c⁄° Mem *
pFrom
, 
§cTy≥
){

393 
	`mem˝y
(
pTo
, 
pFrom
, (*pFrom)-’From->
zSh‹t
));

394 
pTo
->
xDñ
 = 0;

395 if–
pTo
->
Êags
 & (
MEM_Så
|
MEM_Blob
) ){

396 
pTo
->
Êags
 &~(
MEM_Dyn
|
MEM_Sètic
|
MEM_Sh‹t
|
MEM_Ephem
);

397 
	`as£π
–
§cTy≥
==
MEM_Ephem
 || srcTy≥==
MEM_Sètic
 );

398 
pTo
->
Êags
 |
§cTy≥
;

400 
	}
}

406 
	$sqlôe3VdbeMemC›y
(
Mem
 *
pTo
, c⁄° Mem *
pFrom
){

407 
rc
;

408 if–
pTo
->
Êags
 & 
MEM_Dyn
 ){

409 
	`sqlôe3VdbeMemRñó£
(
pTo
);

411 
	`sqlôe3VdbeMemShÆlowC›y
(
pTo
, 
pFrom
, 
MEM_Ephem
);

412 if–
pTo
->
Êags
 & 
MEM_Ephem
 ){

413 
rc
 = 
	`sqlôe3VdbeMemMakeWrôóbÀ
(
pTo
);

415 
rc
 = 
SQLITE_OK
;

417  
rc
;

418 
	}
}

428 
	$sqlôe3VdbeMemMove
(
Mem
 *
pTo
, Mem *
pFrom
){

429 
rc
;

430 if–
pTo
->
Êags
 & 
MEM_Dyn
 ){

431 
	`sqlôe3VdbeMemRñó£
(
pTo
);

433 
	`mem˝y
(
pTo
, 
pFrom
, (
Mem
));

434 if–
pFrom
->
Êags
 & 
MEM_Sh‹t
 ){

435 
pTo
->
z
 =ÖTo->
zSh‹t
;

437 
pFrom
->
Êags
 = 
MEM_NuŒ
;

438 
pFrom
->
xDñ
 = 0;

439 if–
pTo
->
Êags
 & 
MEM_Ephem
 ){

440 
rc
 = 
	`sqlôe3VdbeMemMakeWrôóbÀ
(
pTo
);

442 
rc
 = 
SQLITE_OK
;

444  
rc
;

445 
	}
}

450 
sqlôe3VdbeMemSëSå
(

451 
Mem
 *
pMem
,

452 c⁄° *
z
,

453 
n
,

454 
u8
 
íc
,

455 (*
xDñ
)(*)

457 
	`sqlôe3VdbeMemRñó£
(
pMem
);

458 if–!
z
 ){

459 
pMem
->
Êags
 = 
MEM_NuŒ
;

460 
pMem
->
ty≥
 = 
SQLITE_NULL
;

461  
SQLITE_OK
;

464 
pMem
->
z
 = (*)z;

465 if–
xDñ
==
SQLITE_STATIC
 ){

466 
pMem
->
Êags
 = 
MEM_Sètic
;

467 }if–
xDñ
==
SQLITE_TRANSIENT
 ){

468 
pMem
->
Êags
 = 
MEM_Ephem
;

470 
pMem
->
Êags
 = 
MEM_Dyn
;

471 
pMem
->
xDñ
 = xDel;

474 
pMem
->
íc
 =Énc;

475 
pMem
->
ty≥
 = 
íc
==0 ? 
SQLITE_BLOB
 : 
SQLITE_TEXT
;

476 
pMem
->
n
 =Ç;

478 
	`as£π
–
íc
==0 ||Énc==
SQLITE_UTF8
 ||Énc==
SQLITE_UTF16LE


479 || 
íc
==
SQLITE_UTF16BE
 );

480  
íc
 ){

482 
pMem
->
Êags
 |
MEM_Blob
;

483 
pMem
->
íc
 = 
SQLITE_UTF8
;

486 
SQLITE_UTF8
:

487 
pMem
->
Êags
 |
MEM_Så
;

488 if–
n
<0 ){

489 
pMem
->
n
 = 
	`°æí
(
z
);

490 
pMem
->
Êags
 |
MEM_Tîm
;

494 #i‚de‡
SQLITE_OMIT_UTF16


495 
SQLITE_UTF16LE
:

496 
SQLITE_UTF16BE
:

497 
pMem
->
Êags
 |
MEM_Så
;

498 if–
pMem
->
n
<0 ){

499 
pMem
->
n
 = 
	`sqlôe3utf16ByãLí
’Mem->
z
,-1);

500 
pMem
->
Êags
 |
MEM_Tîm
;

502 if–
	`sqlôe3VdbeMemH™dÀBom
(
pMem
) ){

503  
SQLITE_NOMEM
;

507 if–
pMem
->
Êags
&
MEM_Ephem
 ){

508  
	`sqlôe3VdbeMemMakeWrôóbÀ
(
pMem
);

510  
SQLITE_OK
;

511 
	}
}

522 
	$sqlôe3MemCom∑ª
(c⁄° 
Mem
 *
pMem1
, c⁄° Mem *
pMem2
, c⁄° 
CﬁlSeq
 *
pCﬁl
){

523 
rc
;

524 
f1
, 
f2
;

525 
comböed_Êags
;

530 
f1
 = 
pMem1
->
Êags
;

531 
f2
 = 
pMem2
->
Êags
;

532 
comböed_Êags
 = 
f1
|
f2
;

537 if–
comböed_Êags
&
MEM_NuŒ
 ){

538  (
f2
&
MEM_NuŒ
Ë- (
f1
&MEM_Null);

545 if–
comböed_Êags
&(
MEM_I¡
|
MEM_Ról
) ){

546 if–!(
f1
&(
MEM_I¡
|
MEM_Ról
)) ){

549 if–!(
f2
&(
MEM_I¡
|
MEM_Ról
)) ){

552 if–(
f1
 & 
f2
 & 
MEM_I¡
)==0 ){

553 
r1
, 
r2
;

554 if–(
f1
&
MEM_Ról
)==0 ){

555 
r1
 = 
pMem1
->
i
;

557 
r1
 = 
pMem1
->
r
;

559 if–(
f2
&
MEM_Ról
)==0 ){

560 
r2
 = 
pMem2
->
i
;

562 
r2
 = 
pMem2
->
r
;

564 if–
r1
<
r2
 )  -1;

565 if–
r1
>
r2
 )  1;

568 
	`as£π
–
f1
&
MEM_I¡
 );

569 
	`as£π
–
f2
&
MEM_I¡
 );

570 if–
pMem1
->
i
 < 
pMem2
->i )  -1;

571 if–
pMem1
->
i
 > 
pMem2
->i )  1;

579 if–
comböed_Êags
&
MEM_Så
 ){

580 if–(
f1
 & 
MEM_Så
)==0 ){

583 if–(
f2
 & 
MEM_Så
)==0 ){

587 
	`as£π
–
pMem1
->
íc
==
pMem2
->enc );

588 
	`as£π
–
pMem1
->
íc
==
SQLITE_UTF8
 ||

589 
pMem1
->
íc
==
SQLITE_UTF16LE
 ||ÖMem1->íc==
SQLITE_UTF16BE
 );

595 
	`as£π
–!
pCﬁl
 ||ÖCﬁl->
xCmp
 );

597 if–
pCﬁl
 ){

598 if–
pMem1
->
íc
==
pCﬁl
->enc ){

599  
pCﬁl
->
	`xCmp
’Cﬁl->
pU£r
,
pMem1
->
n
,pMem1->
z
,
pMem2
->n,pMem2->z);

601 
u8
 
‹igEnc
 = 
pMem1
->
íc
;

602 
rc
 = 
pCﬁl
->
	`xCmp
(

603 
pCﬁl
->
pU£r
,

604 
	`sqlôe3VÆueByãs
((
sqlôe3_vÆue
*)
pMem1
, 
pCﬁl
->
íc
),

605 
	`sqlôe3VÆueText
((
sqlôe3_vÆue
*)
pMem1
, 
pCﬁl
->
íc
),

606 
	`sqlôe3VÆueByãs
((
sqlôe3_vÆue
*)
pMem2
, 
pCﬁl
->
íc
),

607 
	`sqlôe3VÆueText
((
sqlôe3_vÆue
*)
pMem2
, 
pCﬁl
->
íc
)

609 
	`sqlôe3VÆueByãs
((
sqlôe3_vÆue
*)
pMem1
, 
‹igEnc
);

610 
	`sqlôe3VÆueText
((
sqlôe3_vÆue
*)
pMem1
, 
‹igEnc
);

611 
	`sqlôe3VÆueByãs
((
sqlôe3_vÆue
*)
pMem2
, 
‹igEnc
);

612 
	`sqlôe3VÆueText
((
sqlôe3_vÆue
*)
pMem2
, 
‹igEnc
);

613  
rc
;

621 
rc
 = 
	`memcmp
(
pMem1
->
z
, 
pMem2
->z, (pMem1->
n
>pMem2->n)?pMem2->n:pMem1->n);

622 if–
rc
==0 ){

623 
rc
 = 
pMem1
->
n
 - 
pMem2
->n;

625  
rc
;

626 
	}
}

641 
	$sqlôe3VdbeMemFromBåì
(

642 
BtCurs‹
 *
pCur
,

643 
off£t
,

644 
amt
,

645 
key
,

646 
Mem
 *
pMem


648 *
zD©a
;

649 
avaûabÀ
;

651 if–
key
 ){

652 
zD©a
 = (*)
	`sqlôe3BåìKeyFëch
(
pCur
, &
avaûabÀ
);

654 
zD©a
 = (*)
	`sqlôe3BåìD©aFëch
(
pCur
, &
avaûabÀ
);

657 
pMem
->
n
 = 
amt
;

658 if–
off£t
+
amt
<=
avaûabÀ
 ){

659 
pMem
->
z
 = &
zD©a
[
off£t
];

660 
pMem
->
Êags
 = 
MEM_Blob
|
MEM_Ephem
;

662 
rc
;

663 if–
amt
>
NBFS
-2 ){

664 
zD©a
 = (*)
	`sqlôeMÆlocRaw
(
amt
+2);

665 if–!
zD©a
 ){

666  
SQLITE_NOMEM
;

668 
pMem
->
Êags
 = 
MEM_Blob
|
MEM_Dyn
|
MEM_Tîm
;

669 
pMem
->
xDñ
 = 0;

671 
zD©a
 = &(
pMem
->
zSh‹t
[0]);

672 
pMem
->
Êags
 = 
MEM_Blob
|
MEM_Sh‹t
|
MEM_Tîm
;

674 
pMem
->
z
 = 
zD©a
;

675 
pMem
->
íc
 = 0;

676 
pMem
->
ty≥
 = 
SQLITE_BLOB
;

678 if–
key
 ){

679 
rc
 = 
	`sqlôe3BåìKey
(
pCur
, 
off£t
, 
amt
, 
zD©a
);

681 
rc
 = 
	`sqlôe3BåìD©a
(
pCur
, 
off£t
, 
amt
, 
zD©a
);

683 
zD©a
[
amt
] = 0;

684 
zD©a
[
amt
+1] = 0;

685 if–
rc
!=
SQLITE_OK
 ){

686 if–
amt
>
NBFS
-2 ){

687 
	`as£π
–
zD©a
!=
pMem
->
zSh‹t
 );

688 
	`as£π
–
pMem
->
Êags
 & 
MEM_Dyn
 );

689 
	`sqlôeFªe
(
zD©a
);

691 
	`as£π
–
zD©a
==
pMem
->
zSh‹t
 );

692 
	`as£π
–
pMem
->
Êags
 & 
MEM_Sh‹t
 );

694  
rc
;

698  
SQLITE_OK
;

699 
	}
}

701 #i‚de‡
NDEBUG


706 
	$sqlôe3VdbeMemS™ôy
(
Mem
 *
pMem
, 
u8
 
db_íc
){

707 
Êags
 = 
pMem
->flags;

708 
	`as£π
–
Êags
!=0 );

709 if–
pMem
->
Êags
 & (
MEM_Så
|
MEM_Blob
) ){

710 
x
 = 
pMem
->
Êags
 & (
MEM_Sètic
|
MEM_Dyn
|
MEM_Ephem
|
MEM_Sh‹t
);

711 
	`as£π
–
x
!=0 );

712 
	`as£π
–(
x
 & (x-1))==0 );

713 
	`as£π
–
pMem
->
z
!=0 );

715 
	`as£π
–(
pMem
->
Êags
 & 
MEM_Sh‹t
)==0 ||ÖMem->
z
=ıMem->
zSh‹t
 );

716 
	`as£π
–(
pMem
->
Êags
 & 
MEM_Sh‹t
)!=0 ||ÖMem->
z
!ıMem->
zSh‹t
 );

718 
	`as£π
–
pMem
->
xDñ
==0 || (pMem->
Êags
 & 
MEM_Dyn
)!=0 );

720 if–(
Êags
 & 
MEM_Så
) ){

721 
	`as£π
–
pMem
->
íc
==
SQLITE_UTF8
 ||

722 
pMem
->
íc
==
SQLITE_UTF16BE
 ||

723 
pMem
->
íc
==
SQLITE_UTF16LE


731 if–
pMem
->
íc
==
SQLITE_UTF8
 && (
Êags
 & 
MEM_Tîm
) ){

732 
	`as£π
–
	`°æí
(
pMem
->
z
)<ıMem->
n
 );

733 
	`as£π
–
pMem
->
z
[pMem->
n
]==0 );

738 
	`as£π
–(
pMem
->
Êags
 & (
MEM_Sètic
|
MEM_Dyn
|
MEM_Ephem
|
MEM_Sh‹t
))==0 );

739 
	`as£π
–
pMem
->
xDñ
==0 );

742 
	`as£π
–(
pMem
->
Êags
&(
MEM_Så
|
MEM_I¡
|
MEM_Ról
|
MEM_Blob
))==0

743 || (
pMem
->
Êags
&
MEM_NuŒ
)==0 );

745 
	`as£π
–(
pMem
->
Êags
 & (
MEM_I¡
|
MEM_Ról
))!=(MEM_Int|MEM_Real)

746 || 
pMem
->
r
=ıMem->
i
 );

747 
	}
}

756 c⁄° *
	$sqlôe3VÆueText
(
sqlôe3_vÆue
* 
pVÆ
, 
u8
 
íc
){

757 if–!
pVÆ
 )  0;

758 
	`as£π
–
íc
==
SQLITE_UTF16LE
 ||Énc==
SQLITE_UTF16BE
 ||Énc==
SQLITE_UTF8
);

760 if–
pVÆ
->
Êags
&
MEM_NuŒ
 ){

763 
	`as£π
–(
MEM_Blob
>>3Ë=
MEM_Så
 );

764 
pVÆ
->
Êags
 |’VÆ->Êag†& 
MEM_Blob
)>>3;

765 if–
pVÆ
->
Êags
&
MEM_Så
 ){

766 
	`sqlôe3VdbeCh™geEncodög
(
pVÆ
, 
íc
);

767 }if–!(
pVÆ
->
Êags
&
MEM_Blob
) ){

768 
	`sqlôe3VdbeMemSåögify
(
pVÆ
, 
íc
);

770 
	`as£π
(
pVÆ
->
íc
=Ûn¯|| 
	`sqlôe3MÆlocFaûed
() );

771  (c⁄° *)(
pVÆ
->
íc
=Ûn¯? (pVÆ->
z
) : 0);

772 
	}
}

777 
sqlôe3_vÆue
* 
	$sqlôe3VÆueNew
(){

778 
Mem
 *
p
 = 
	`sqlôeMÆloc
((*p));

779 if–
p
 ){

780 
p
->
Êags
 = 
MEM_NuŒ
;

781 
p
->
ty≥
 = 
SQLITE_NULL
;

783  
p
;

784 
	}
}

796 
	$sqlôe3VÆueFromEx¥
(

797 
Ex¥
 *
pEx¥
,

798 
u8
 
íc
,

799 
u8
 
afföôy
,

800 
sqlôe3_vÆue
 **
µVÆ


802 
›
;

803 *
zVÆ
 = 0;

804 
sqlôe3_vÆue
 *
pVÆ
 = 0;

806 if–!
pEx¥
 ){

807 *
µVÆ
 = 0;

808  
SQLITE_OK
;

810 
›
 = 
pEx¥
->op;

812 if–
›
==
TK_STRING
 || op==
TK_FLOAT
 || op==
TK_INTEGER
 ){

813 
zVÆ
 = 
	`sqlôeSåNDup
((*)
pEx¥
->
tokí
.
z
,ÖEx¥->tokí.
n
);

814 
pVÆ
 = 
	`sqlôe3VÆueNew
();

815 if–!
zVÆ
 || !
pVÆ
 ) 
no_mem
;

816 
	`sqlôe3DequŸe
(
zVÆ
);

817 
	`sqlôe3VÆueSëSå
(
pVÆ
, -1, 
zVÆ
, 
SQLITE_UTF8
, 
sqlôe3FªeX
);

818 if–(
›
==
TK_INTEGER
 || op==
TK_FLOAT
 ) && 
afföôy
==
SQLITE_AFF_NONE
 ){

819 
	`sqlôe3VÆueAµlyAfföôy
(
pVÆ
, 
SQLITE_AFF_NUMERIC
, 
íc
);

821 
	`sqlôe3VÆueAµlyAfföôy
(
pVÆ
, 
afföôy
, 
íc
);

823 }if–
›
==
TK_UMINUS
 ) {

824 if–
SQLITE_OK
==
	`sqlôe3VÆueFromEx¥
(
pEx¥
->
pLe·
, 
íc
, 
afföôy
, &
pVÆ
) ){

825 
pVÆ
->
i
 = -1 *ÖVal->i;

826 
pVÆ
->
r
 = -1.0 *ÖVal->r;

829 #i‚de‡
SQLITE_OMIT_BLOB_LITERAL


830 if–
›
==
TK_BLOB
 ){

831 
nVÆ
;

832 
pVÆ
 = 
	`sqlôe3VÆueNew
();

833 
zVÆ
 = 
	`sqlôeSåNDup
((*)
pEx¥
->
tokí
.
z
+1,ÖEx¥->tokí.
n
-1);

834 if–!
zVÆ
 || !
pVÆ
 ) 
no_mem
;

835 
	`sqlôe3DequŸe
(
zVÆ
);

836 
nVÆ
 = 
	`°æí
(
zVÆ
)/2;

837 
	`sqlôe3VdbeMemSëSå
(
pVÆ
, 
	`sqlôe3HexToBlob
(
zVÆ
), 
nVÆ
, 0, 
sqlôe3FªeX
);

838 
	`sqlôeFªe
(
zVÆ
);

842 *
µVÆ
 = 
pVÆ
;

843  
SQLITE_OK
;

845 
no_mem
:

846 
	`sqlôeFªe
(
zVÆ
);

847 
	`sqlôe3VÆueFªe
(
pVÆ
);

848 *
µVÆ
 = 0;

849  
SQLITE_NOMEM
;

850 
	}
}

855 
sqlôe3VÆueSëSå
(

856 
sqlôe3_vÆue
 *
v
,

857 
n
,

858 c⁄° *
z
,

859 
u8
 
íc
,

860 (*
xDñ
)(*)

862 if–
v
 ) 
	`sqlôe3VdbeMemSëSå
((
Mem
 *)v, 
z
, 
n
, 
íc
, 
xDñ
);

863 
	}
}

868 
	$sqlôe3VÆueFªe
(
sqlôe3_vÆue
 *
v
){

869 if–!
v
 ) ;

870 
	`sqlôe3VÆueSëSå
(
v
, 0, 0, 
SQLITE_UTF8
, 
SQLITE_STATIC
);

871 
	`sqlôeFªe
(
v
);

872 
	}
}

878 
	$sqlôe3VÆueByãs
(
sqlôe3_vÆue
 *
pVÆ
, 
u8
 
íc
){

879 
Mem
 *
p
 = (Mem*)
pVÆ
;

880 if–(
p
->
Êags
 & 
MEM_Blob
)!=0 || 
	`sqlôe3VÆueText
(
pVÆ
, 
íc
) ){

881  
p
->
n
;

884 
	}
}

	@where.c

21 
	~"sqlôeI¡.h
"

26 
	#BMS
 ((
Bômask
)*8)

	)

31 
	#ARRAYSIZE
(
X
Ë((X)/(X[0]))

	)

36 #i‡
deföed
(
SQLITE_TEST
Ë|| deföed(
SQLITE_DEBUG
)

37 
	gsqlôe3_whîe_åa˚
 = 0;

38 
	#TRACE
(
X
Ëif(
sqlôe3_whîe_åa˚
Ë
sqlôe3DebugPrötf
 
	)
X

40 
	#TRACE
(
X
)

	)

45 
WhîeCœu£
 
	tWhîeCœu£
;

80 
WhîeTîm
 
	tWhîeTîm
;

81 
	sWhîeTîm
 {

82 
Ex¥
 *
	mpEx¥
;

83 
i16
 
	miP¨ít
;

84 
i16
 
	mÀ·Curs‹
;

85 
i16
 
	mÀ·Cﬁumn
;

86 
u16
 
	meO≥øt‹
;

87 
u8
 
	mÊags
;

88 
u8
 
	mnChûd
;

89 
WhîeCœu£
 *
	mpWC
;

90 
Bômask
 
	m¥îeqRight
;

91 
Bômask
 
	m¥îeqAŒ
;

97 
	#TERM_DYNAMIC
 0x01

	)

98 
	#TERM_VIRTUAL
 0x02

	)

99 
	#TERM_CODED
 0x04

	)

100 
	#TERM_COPIED
 0x08

	)

101 
	#TERM_OR_OK
 0x10

	)

107 
	sWhîeCœu£
 {

108 
P¨£
 *
	mpP¨£
;

109 
	mnTîm
;

110 
	mnSlŸ
;

111 
WhîeTîm
 *
	ma
;

112 
WhîeTîm
 
	maSètic
[10];

141 
Ex¥MaskSë
 
	tEx¥MaskSë
;

142 
	sEx¥MaskSë
 {

143 
	mn
;

144 
	mix
[(
Bômask
)*8];

153 
	#WO_IN
 1

	)

154 
	#WO_EQ
 2

	)

155 
	#WO_LT
 (
WO_EQ
<<(
TK_LT
-
TK_EQ
))

	)

156 
	#WO_LE
 (
WO_EQ
<<(
TK_LE
-
TK_EQ
))

	)

157 
	#WO_GT
 (
WO_EQ
<<(
TK_GT
-
TK_EQ
))

	)

158 
	#WO_GE
 (
WO_EQ
<<(
TK_GE
-
TK_EQ
))

	)

163 
	#WHERE_ROWID_EQ
 0x0001

	)

164 
	#WHERE_ROWID_RANGE
 0x0002

	)

165 
	#WHERE_COLUMN_EQ
 0x0010

	)

166 
	#WHERE_COLUMN_RANGE
 0x0020

	)

167 
	#WHERE_COLUMN_IN
 0x0040

	)

168 
	#WHERE_TOP_LIMIT
 0x0100

	)

169 
	#WHERE_BTM_LIMIT
 0x0200

	)

170 
	#WHERE_IDX_ONLY
 0x0800

	)

171 
	#WHERE_ORDERBY
 0x1000

	)

172 
	#WHERE_REVERSE
 0x2000

	)

173 
	#WHERE_UNIQUE
 0x4000

	)

178 
	$whîeCœu£Inô
(
WhîeCœu£
 *
pWC
, 
P¨£
 *
pP¨£
){

179 
pWC
->
pP¨£
 =ÖParse;

180 
pWC
->
nTîm
 = 0;

181 
pWC
->
nSlŸ
 = 
	`ARRAYSIZE
’WC->
aSètic
);

182 
pWC
->
a
 =ÖWC->
aSètic
;

183 
	}
}

189 
	$whîeCœu£CÀ¨
(
WhîeCœu£
 *
pWC
){

190 
i
;

191 
WhîeTîm
 *
a
;

192 
i
=
pWC
->
nTîm
-1, 
a
=pWC->a; i>=0; i--,á++){

193 if–
a
->
Êags
 & 
TERM_DYNAMIC
 ){

194 
	`sqlôe3Ex¥Dñëe
(
a
->
pEx¥
);

197 if–
pWC
->
a
!ıWC->
aSètic
 ){

198 
	`sqlôeFªe
(
pWC
->
a
);

200 
	}
}

211 
	$whîeCœu£In£π
(
WhîeCœu£
 *
pWC
, 
Ex¥
 *
p
, 
Êags
){

212 
WhîeTîm
 *
pTîm
;

213 
idx
;

214 if–
pWC
->
nTîm
>ıWC->
nSlŸ
 ){

215 
WhîeTîm
 *
pOld
 = 
pWC
->
a
;

216 
pWC
->
a
 = 
	`sqlôeMÆloc
–’WC->a[0])*pWC->
nSlŸ
*2 );

217 if–
pWC
->
a
==0 )  0;

218 
	`mem˝y
(
pWC
->
a
, 
pOld
, ’WC->a[0])*pWC->
nTîm
);

219 if–
pOld
!=
pWC
->
aSètic
 ){

220 
	`sqlôeFªe
(
pOld
);

222 
pWC
->
nSlŸ
 *= 2;

224 
pTîm
 = &
pWC
->
a
[
idx
 =ÖWC->
nTîm
];

225 
pWC
->
nTîm
++;

226 
pTîm
->
pEx¥
 = 
p
;

227 
pTîm
->
Êags
 = flags;

228 
pTîm
->
pWC
 =ÖWC;

229 
pTîm
->
iP¨ít
 = -1;

230  
idx
;

231 
	}
}

250 
	$whîeS∂ô
(
WhîeCœu£
 *
pWC
, 
Ex¥
 *
pEx¥
, 
›
){

251 if–
pEx¥
==0 ) ;

252 if–
pEx¥
->
›
!=op ){

253 
	`whîeCœu£In£π
(
pWC
, 
pEx¥
, 0);

255 
	`whîeS∂ô
(
pWC
, 
pEx¥
->
pLe·
, 
›
);

256 
	`whîeS∂ô
(
pWC
, 
pEx¥
->
pRight
, 
›
);

258 
	}
}

263 
	#öôMaskSë
(
P
Ë
	`mem£t
(P, 0, (*P))

	)

269 
Bômask
 
	$gëMask
(
Ex¥MaskSë
 *
pMaskSë
, 
iCurs‹
){

270 
i
;

271 
i
=0; i<
pMaskSë
->
n
; i++){

272 if–
pMaskSë
->
ix
[
i
]==
iCurs‹
 ){

273  ((
Bômask
)1)<<
i
;

277 
	}
}

287 
	$¸óãMask
(
Ex¥MaskSë
 *
pMaskSë
, 
iCurs‹
){

288 
	`as£π
–
pMaskSë
->
n
 < 
	`ARRAYSIZE
’MaskSë->
ix
) );

289 
pMaskSë
->
ix
[pMaskSë->
n
++] = 
iCurs‹
;

290 
	}
}

306 
Bômask
 
ex¥Li°TabÀUßge
(
Ex¥MaskSë
*, 
Ex¥Li°
*);

307 
Bômask
 
ex¥Sñe˘TabÀUßge
(
Ex¥MaskSë
*, 
Sñe˘
*);

308 
Bômask
 
	$ex¥TabÀUßge
(
Ex¥MaskSë
 *
pMaskSë
, 
Ex¥
 *
p
){

309 
Bômask
 
mask
 = 0;

310 if–
p
==0 )  0;

311 if–
p
->
›
==
TK_COLUMN
 ){

312 
mask
 = 
	`gëMask
(
pMaskSë
, 
p
->
iTabÀ
);

313  
mask
;

315 
mask
 = 
	`ex¥TabÀUßge
(
pMaskSë
, 
p
->
pRight
);

316 
mask
 |
	`ex¥TabÀUßge
(
pMaskSë
, 
p
->
pLe·
);

317 
mask
 |
	`ex¥Li°TabÀUßge
(
pMaskSë
, 
p
->
pLi°
);

318 
mask
 |
	`ex¥Sñe˘TabÀUßge
(
pMaskSë
, 
p
->
pSñe˘
);

319  
mask
;

320 
	}
}

321 
Bômask
 
	$ex¥Li°TabÀUßge
(
Ex¥MaskSë
 *
pMaskSë
, 
Ex¥Li°
 *
pLi°
){

322 
i
;

323 
Bômask
 
mask
 = 0;

324 if–
pLi°
 ){

325 
i
=0; i<
pLi°
->
nEx¥
; i++){

326 
mask
 |
	`ex¥TabÀUßge
(
pMaskSë
, 
pLi°
->
a
[
i
].
pEx¥
);

329  
mask
;

330 
	}
}

331 
Bômask
 
	$ex¥Sñe˘TabÀUßge
(
Ex¥MaskSë
 *
pMaskSë
, 
Sñe˘
 *
pS
){

332 
Bômask
 
mask
;

333 if–
pS
==0 ){

334 
mask
 = 0;

336 
mask
 = 
	`ex¥Li°TabÀUßge
(
pMaskSë
, 
pS
->
pELi°
);

337 
mask
 |
	`ex¥Li°TabÀUßge
(
pMaskSë
, 
pS
->
pGroupBy
);

338 
mask
 |
	`ex¥Li°TabÀUßge
(
pMaskSë
, 
pS
->
pOrdîBy
);

339 
mask
 |
	`ex¥TabÀUßge
(
pMaskSë
, 
pS
->
pWhîe
);

340 
mask
 |
	`ex¥TabÀUßge
(
pMaskSë
, 
pS
->
pHavög
);

342  
mask
;

343 
	}
}

350 
	$ÆlowedOp
(
›
){

351 
	`as£π
–
TK_GT
>
TK_EQ
 && TK_GT<
TK_GE
 );

352 
	`as£π
–
TK_LT
>
TK_EQ
 && TK_LT<
TK_GE
 );

353 
	`as£π
–
TK_LE
>
TK_EQ
 && TK_LE<
TK_GE
 );

354 
	`as£π
–
TK_GE
==
TK_EQ
+4 );

355  
›
==
TK_IN
 || (›>=
TK_EQ
 && op<=
TK_GE
);

356 
	}
}

361 
	#SWAP
(
TYPE
,
A
,
B
Ë{TYPE 
t
=A; A=B; BÒ;}

	)

367 
	$ex¥Commuã
(
Ex¥
 *
pEx¥
){

368 
	`as£π
–
	`ÆlowedOp
(
pEx¥
->
›
Ë&&ÖEx¥->›!=
TK_IN
 );

369 
	`SWAP
(
CﬁlSeq
*,
pEx¥
->
pRight
->
pCﬁl
,pEx¥->
pLe·
->pColl);

370 
	`SWAP
(
Ex¥
*,
pEx¥
->
pRight
,pEx¥->
pLe·
);

371 if–
pEx¥
->
›
>=
TK_GT
 ){

372 
	`as£π
–
TK_LT
==
TK_GT
+2 );

373 
	`as£π
–
TK_GE
==
TK_LE
+2 );

374 
	`as£π
–
TK_GT
>
TK_EQ
 );

375 
	`as£π
–
TK_GT
<
TK_LE
 );

376 
	`as£π
–
pEx¥
->
›
>=
TK_GT
 &&ÖEx¥->›<=
TK_GE
 );

377 
pEx¥
->
›
 = (’Ex¥->›-
TK_GT
)^2)+TK_GT;

379 
	}
}

384 
	$›î©‹Mask
(
›
){

385 
c
;

386 
	`as£π
–
	`ÆlowedOp
(
›
) );

387 if–
›
==
TK_IN
 ){

388 
c
 = 
WO_IN
;

390 
c
 = 
WO_EQ
<<(
›
-
TK_EQ
);

392 
	`as£π
–
›
!=
TK_IN
 || 
c
==
WO_IN
 );

393 
	`as£π
–
›
!=
TK_EQ
 || 
c
==
WO_EQ
 );

394 
	`as£π
–
›
!=
TK_LT
 || 
c
==
WO_LT
 );

395 
	`as£π
–
›
!=
TK_LE
 || 
c
==
WO_LE
 );

396 
	`as£π
–
›
!=
TK_GT
 || 
c
==
WO_GT
 );

397 
	`as£π
–
›
!=
TK_GE
 || 
c
==
WO_GE
 );

398  
c
;

399 
	}
}

407 
WhîeTîm
 *
	$födTîm
(

408 
WhîeCœu£
 *
pWC
,

409 
iCur
,

410 
iCﬁumn
,

411 
Bômask
 
nŸRódy
,

412 
u16
 
›
,

413 
Index
 *
pIdx


415 
WhîeTîm
 *
pTîm
;

416 
k
;

417 
pTîm
=
pWC
->
a
, 
k
ıWC->
nTîm
; k; k--,ÖTerm++){

418 if–
pTîm
->
À·Curs‹
==
iCur


419 && (
pTîm
->
¥îeqRight
 & 
nŸRódy
)==0

420 && 
pTîm
->
À·Cﬁumn
==
iCﬁumn


421 && (
pTîm
->
eO≥øt‹
 & 
›
)!=0

423 if–
iCur
>=0 && 
pIdx
 ){

424 
Ex¥
 *
pX
 = 
pTîm
->
pEx¥
;

425 
CﬁlSeq
 *
pCﬁl
;

426 
idxaff
;

427 
j
;

428 
P¨£
 *
pP¨£
 = 
pWC
->pParse;

430 
idxaff
 = 
pIdx
->
pTabÀ
->
aCﬁ
[
iCﬁumn
].
afföôy
;

431 if–!
	`sqlôe3IndexAfföôyOk
(
pX
, 
idxaff
) ) ;

432 
pCﬁl
 = 
	`sqlôe3Ex¥CﬁlSeq
(
pP¨£
, 
pX
->
pLe·
);

433 if–!
pCﬁl
 ){

434 if–
pX
->
pRight
 ){

435 
pCﬁl
 = 
	`sqlôe3Ex¥CﬁlSeq
(
pP¨£
, 
pX
->
pRight
);

437 if–!
pCﬁl
 ){

438 
pCﬁl
 = 
pP¨£
->
db
->
pDÊtCﬁl
;

441 
j
=0; j<
pIdx
->
nCﬁumn
 &&ÖIdx->
aiCﬁumn
[j]!=
iCﬁumn
; j++){}

442 
	`as£π
–
j
<
pIdx
->
nCﬁumn
 );

443 if–
	`sqlôe3SåICmp
(
pCﬁl
->
zName
, 
pIdx
->
azCﬁl
[
j
]) ) ;

445  
pTîm
;

449 
	}
}

452 
ex¥A«lyze
(
SrcLi°
*, 
Ex¥MaskSë
*, 
WhîeCœu£
*, );

459 
	$ex¥A«lyzeAŒ
(

460 
SrcLi°
 *
pTabLi°
,

461 
Ex¥MaskSë
 *
pMaskSë
,

462 
WhîeCœu£
 *
pWC


464 
i
;

465 
i
=
pWC
->
nTîm
-1; i>=0; i--){

466 
	`ex¥A«lyze
(
pTabLi°
, 
pMaskSë
, 
pWC
, 
i
);

468 
	}
}

470 #i‚de‡
SQLITE_OMIT_LIKE_OPTIMIZATION


479 
	$isLikeOrGlob
(

480 
sqlôe3
 *
db
,

481 
Ex¥
 *
pEx¥
,

482 *
≤P©ã∫
,

483 *
pisCom∂ëe


485 c⁄° *
z
;

486 
Ex¥
 *
pRight
, *
pLe·
;

487 
Ex¥Li°
 *
pLi°
;

488 
c
, 
˙t
;

489 
noCa£
;

490 
wc
[3];

491 
CﬁlSeq
 *
pCﬁl
;

493 if–!
	`sqlôe3IsLikeFun˘i⁄
(
db
, 
pEx¥
, &
noCa£
, 
wc
) ){

496 
pLi°
 = 
pEx¥
->pList;

497 
pRight
 = 
pLi°
->
a
[0].
pEx¥
;

498 if–
pRight
->
›
!=
TK_STRING
 ){

501 
pLe·
 = 
pLi°
->
a
[1].
pEx¥
;

502 if–
pLe·
->
›
!=
TK_COLUMN
 ){

505 
pCﬁl
 = 
pLe·
->pColl;

506 if–
pCﬁl
==0 ){

507 
pCﬁl
 = 
db
->
pDÊtCﬁl
;

509 if–(
pCﬁl
->
ty≥
!=
SQLITE_COLL_BINARY
 || 
noCa£
) &&

510 (
pCﬁl
->
ty≥
!=
SQLITE_COLL_NOCASE
 || !
noCa£
) ){

513 
	`sqlôe3DequŸeEx¥
(
pRight
);

514 
z
 = (*)
pRight
->
tokí
.z;

515 
˙t
=0; (
c
=
z
[˙t])!=0 && c!=
wc
[0] && c!=wc[1] && c!=wc[2]; cnt++){}

516 if–
˙t
==0 || 255==(
u8
)
z
[cnt] ){

519 *
pisCom∂ëe
 = 
z
[
˙t
]==
wc
[0] && z[cnt+1]==0;

520 *
≤P©ã∫
 = 
˙t
;

522 
	}
}

529 
	$å™s„rJoöM¨kögs
(
Ex¥
 *
pDîived
, Ex¥ *
pBa£
){

530 
pDîived
->
Êags
 |
pBa£
->Êag†& 
EP_FromJoö
;

531 
pDîived
->
iRightJoöTabÀ
 = 
pBa£
->iRightJoinTable;

532 
	}
}

547 
	$ex¥A«lyze
(

548 
SrcLi°
 *
pSrc
,

549 
Ex¥MaskSë
 *
pMaskSë
,

550 
WhîeCœu£
 *
pWC
,

551 
idxTîm


553 
WhîeTîm
 *
pTîm
 = &
pWC
->
a
[
idxTîm
];

554 
Ex¥
 *
pEx¥
 = 
pTîm
->pExpr;

555 
Bômask
 
¥îeqLe·
;

556 
Bômask
 
¥îeqAŒ
;

557 
nP©ã∫
;

558 
isCom∂ëe
;

560 if–
	`sqlôe3MÆlocFaûed
() ) ;

561 
¥îeqLe·
 = 
	`ex¥TabÀUßge
(
pMaskSë
, 
pEx¥
->
pLe·
);

562 if–
pEx¥
->
›
==
TK_IN
 ){

563 
	`as£π
–
pEx¥
->
pRight
==0 );

564 
pTîm
->
¥îeqRight
 = 
	`ex¥Li°TabÀUßge
(
pMaskSë
, 
pEx¥
->
pLi°
)

565 | 
	`ex¥Sñe˘TabÀUßge
(
pMaskSë
, 
pEx¥
->
pSñe˘
);

567 
pTîm
->
¥îeqRight
 = 
	`ex¥TabÀUßge
(
pMaskSë
, 
pEx¥
->
pRight
);

569 
¥îeqAŒ
 = 
	`ex¥TabÀUßge
(
pMaskSë
, 
pEx¥
);

570 if–
	`Ex¥HasPr›îty
(
pEx¥
, 
EP_FromJoö
) ){

571 
¥îeqAŒ
 |
	`gëMask
(
pMaskSë
, 
pEx¥
->
iRightJoöTabÀ
);

573 
pTîm
->
¥îeqAŒ
 =ÖrereqAll;

574 
pTîm
->
À·Curs‹
 = -1;

575 
pTîm
->
iP¨ít
 = -1;

576 
pTîm
->
eO≥øt‹
 = 0;

577 if–
	`ÆlowedOp
(
pEx¥
->
›
Ë&& (
pTîm
->
¥îeqRight
 & 
¥îeqLe·
)==0 ){

578 
Ex¥
 *
pLe·
 = 
pEx¥
->pLeft;

579 
Ex¥
 *
pRight
 = 
pEx¥
->pRight;

580 if–
pLe·
->
›
==
TK_COLUMN
 ){

581 
pTîm
->
À·Curs‹
 = 
pLe·
->
iTabÀ
;

582 
pTîm
->
À·Cﬁumn
 = 
pLe·
->
iCﬁumn
;

583 
pTîm
->
eO≥øt‹
 = 
	`›î©‹Mask
(
pEx¥
->
›
);

585 if–
pRight
 &&ÖRight->
›
==
TK_COLUMN
 ){

586 
WhîeTîm
 *
pNew
;

587 
Ex¥
 *
pDup
;

588 if–
pTîm
->
À·Curs‹
>=0 ){

589 
idxNew
;

590 
pDup
 = 
	`sqlôe3Ex¥Dup
(
pEx¥
);

591 
idxNew
 = 
	`whîeCœu£In£π
(
pWC
, 
pDup
, 
TERM_VIRTUAL
|
TERM_DYNAMIC
);

592 if–
idxNew
==0 ) ;

593 
pNew
 = &
pWC
->
a
[
idxNew
];

594 
pNew
->
iP¨ít
 = 
idxTîm
;

595 
pTîm
 = &
pWC
->
a
[
idxTîm
];

596 
pTîm
->
nChûd
 = 1;

597 
pTîm
->
Êags
 |
TERM_COPIED
;

599 
pDup
 = 
pEx¥
;

600 
pNew
 = 
pTîm
;

602 
	`ex¥Commuã
(
pDup
);

603 
pLe·
 = 
pDup
->pLeft;

604 
pNew
->
À·Curs‹
 = 
pLe·
->
iTabÀ
;

605 
pNew
->
À·Cﬁumn
 = 
pLe·
->
iCﬁumn
;

606 
pNew
->
¥îeqRight
 = 
¥îeqLe·
;

607 
pNew
->
¥îeqAŒ
 =ÖrereqAll;

608 
pNew
->
eO≥øt‹
 = 
	`›î©‹Mask
(
pDup
->
›
);

612 #i‚de‡
SQLITE_OMIT_BETWEEN_OPTIMIZATION


616 if–
pEx¥
->
›
==
TK_BETWEEN
 ){

617 
Ex¥Li°
 *
pLi°
 = 
pEx¥
->pList;

618 
i
;

619 c⁄° 
u8
 
›s
[] = {
TK_GE
, 
TK_LE
};

620 
	`as£π
–
pLi°
!=0 );

621 
	`as£π
–
pLi°
->
nEx¥
==2 );

622 
i
=0; i<2; i++){

623 
Ex¥
 *
pNewEx¥
;

624 
idxNew
;

625 
pNewEx¥
 = 
	`sqlôe3Ex¥
(
›s
[
i
], 
	`sqlôe3Ex¥Dup
(
pEx¥
->
pLe·
),

626 
	`sqlôe3Ex¥Dup
(
pLi°
->
a
[
i
].
pEx¥
), 0);

627 
idxNew
 = 
	`whîeCœu£In£π
(
pWC
, 
pNewEx¥
, 
TERM_VIRTUAL
|
TERM_DYNAMIC
);

628 
	`ex¥A«lyze
(
pSrc
, 
pMaskSë
, 
pWC
, 
idxNew
);

629 
pTîm
 = &
pWC
->
a
[
idxTîm
];

630 
pWC
->
a
[
idxNew
].
iP¨ít
 = 
idxTîm
;

632 
pTîm
->
nChûd
 = 2;

636 #i‡!
	`deföed
(
SQLITE_OMIT_OR_OPTIMIZATION
Ë&& !deföed(
SQLITE_OMIT_SUBQUERY
)

649 if–
pEx¥
->
›
==
TK_OR
 ){

650 
ok
;

651 
i
, 
j
;

652 
iCﬁumn
, 
iCurs‹
;

653 
WhîeCœu£
 
sOr
;

654 
WhîeTîm
 *
pOrTîm
;

656 
	`as£π
–(
pTîm
->
Êags
 & 
TERM_DYNAMIC
)==0 );

657 
	`whîeCœu£Inô
(&
sOr
, 
pWC
->
pP¨£
);

658 
	`whîeS∂ô
(&
sOr
, 
pEx¥
, 
TK_OR
);

659 
	`ex¥A«lyzeAŒ
(
pSrc
, 
pMaskSë
, &
sOr
);

660 
	`as£π
–
sOr
.
nTîm
>0 );

661 
j
 = 0;

663 
iCﬁumn
 = 
sOr
.
a
[
j
].
À·Cﬁumn
;

664 
iCurs‹
 = 
sOr
.
a
[
j
].
À·Curs‹
;

665 
ok
 = 
iCurs‹
>=0;

666 
i
=
sOr
.
nTîm
-1, 
pOrTîm
=sOr.
a
; i>=0 && 
ok
; i--,ÖOrTerm++){

667 if–
pOrTîm
->
eO≥øt‹
!=
WO_EQ
 ){

668 
‹_nŸ_possibÀ
;

670 if–
pOrTîm
->
À·Curs‹
==
iCurs‹
 &&ÖOrTîm->
À·Cﬁumn
==
iCﬁumn
 ){

671 
pOrTîm
->
Êags
 |
TERM_OR_OK
;

672 }if–(
pOrTîm
->
Êags
 & 
TERM_COPIED
)!=0 ||

673 ((
pOrTîm
->
Êags
 & 
TERM_VIRTUAL
)!=0 &&

674 (
sOr
.
a
[
pOrTîm
->
iP¨ít
].
Êags
 & 
TERM_OR_OK
)!=0) ){

675 
pOrTîm
->
Êags
 &~
TERM_OR_OK
;

677 
ok
 = 0;

680 } !
ok
 && (
sOr
.
a
[
j
++].
Êags
 & 
TERM_COPIED
)!=0 && j<sOr.
nTîm
 );

681 if–
ok
 ){

682 
Ex¥Li°
 *
pLi°
 = 0;

683 
Ex¥
 *
pNew
, *
pDup
;

684 
i
=
sOr
.
nTîm
-1, 
pOrTîm
=sOr.
a
; i>=0 && 
ok
; i--,ÖOrTerm++){

685 if–(
pOrTîm
->
Êags
 & 
TERM_OR_OK
)==0 ) ;

686 
pDup
 = 
	`sqlôe3Ex¥Dup
(
pOrTîm
->
pEx¥
->
pRight
);

687 
pLi°
 = 
	`sqlôe3Ex¥Li°Aµíd
’Li°, 
pDup
, 0);

689 
pDup
 = 
	`sqlôe3Ex¥
(
TK_COLUMN
, 0, 0, 0);

690 if–
pDup
 ){

691 
pDup
->
iTabÀ
 = 
iCurs‹
;

692 
pDup
->
iCﬁumn
 = iColumn;

694 
pNew
 = 
	`sqlôe3Ex¥
(
TK_IN
, 
pDup
, 0, 0);

695 if–
pNew
 ){

696 
idxNew
;

697 
	`å™s„rJoöM¨kögs
(
pNew
, 
pEx¥
);

698 
pNew
->
pLi°
 =ÖList;

699 
idxNew
 = 
	`whîeCœu£In£π
(
pWC
, 
pNew
, 
TERM_VIRTUAL
|
TERM_DYNAMIC
);

700 
	`ex¥A«lyze
(
pSrc
, 
pMaskSë
, 
pWC
, 
idxNew
);

701 
pTîm
 = &
pWC
->
a
[
idxTîm
];

702 
pWC
->
a
[
idxNew
].
iP¨ít
 = 
idxTîm
;

703 
pTîm
->
nChûd
 = 1;

705 
	`sqlôe3Ex¥Li°Dñëe
(
pLi°
);

708 
‹_nŸ_possibÀ
:

709 
	`whîeCœu£CÀ¨
(&
sOr
);

713 #i‚de‡
SQLITE_OMIT_LIKE_OPTIMIZATION


717 if–
	`isLikeOrGlob
(
pWC
->
pP¨£
->
db
, 
pEx¥
, &
nP©ã∫
, &
isCom∂ëe
) ){

718 
Ex¥
 *
pLe·
, *
pRight
;

719 
Ex¥
 *
pSå1
, *
pSå2
;

720 
Ex¥
 *
pNewEx¥1
, *
pNewEx¥2
;

721 
idxNew1
, 
idxNew2
;

723 
pLe·
 = 
pEx¥
->
pLi°
->
a
[1].pExpr;

724 
pRight
 = 
pEx¥
->
pLi°
->
a
[0].pExpr;

725 
pSå1
 = 
	`sqlôe3Ex¥
(
TK_STRING
, 0, 0, 0);

726 if–
pSå1
 ){

727 
	`sqlôe3TokíC›y
(&
pSå1
->
tokí
, &
pRight
->token);

728 
pSå1
->
tokí
.
n
 = 
nP©ã∫
;

730 
pSå2
 = 
	`sqlôe3Ex¥Dup
(
pSå1
);

731 if–
pSå2
 ){

732 
	`as£π
–
pSå2
->
tokí
.
dyn
 );

733 ++*(
u8
*)&
pSå2
->
tokí
.
z
[
nP©ã∫
-1];

735 
pNewEx¥1
 = 
	`sqlôe3Ex¥
(
TK_GE
, 
	`sqlôe3Ex¥Dup
(
pLe·
), 
pSå1
, 0);

736 
idxNew1
 = 
	`whîeCœu£In£π
(
pWC
, 
pNewEx¥1
, 
TERM_VIRTUAL
|
TERM_DYNAMIC
);

737 
	`ex¥A«lyze
(
pSrc
, 
pMaskSë
, 
pWC
, 
idxNew1
);

738 
pNewEx¥2
 = 
	`sqlôe3Ex¥
(
TK_LT
, 
	`sqlôe3Ex¥Dup
(
pLe·
), 
pSå2
, 0);

739 
idxNew2
 = 
	`whîeCœu£In£π
(
pWC
, 
pNewEx¥2
, 
TERM_VIRTUAL
|
TERM_DYNAMIC
);

740 
	`ex¥A«lyze
(
pSrc
, 
pMaskSë
, 
pWC
, 
idxNew2
);

741 
pTîm
 = &
pWC
->
a
[
idxTîm
];

742 if–
isCom∂ëe
 ){

743 
pWC
->
a
[
idxNew1
].
iP¨ít
 = 
idxTîm
;

744 
pWC
->
a
[
idxNew2
].
iP¨ít
 = 
idxTîm
;

745 
pTîm
->
nChûd
 = 2;

749 
	}
}

771 
	$isS‹tögIndex
(

772 
P¨£
 *
pP¨£
,

773 
Index
 *
pIdx
,

774 
TabÀ
 *
pTab
,

775 
ba£
,

776 
Ex¥Li°
 *
pOrdîBy
,

777 
nEqCﬁ
,

778 *
pbRev


780 
i
, 
j
;

781 
s‹tOrdî
 = 0;

782 
nTîm
;

783 
Ex¥Li°_ôem
 *
pTîm
;

784 
sqlôe3
 *
db
 = 
pP¨£
->db;

786 
	`as£π
–
pOrdîBy
!=0 );

787 
nTîm
 = 
pOrdîBy
->
nEx¥
;

788 
	`as£π
–
nTîm
>0 );

793 
i
=
j
=0, 
pTîm
=
pOrdîBy
->
a
; j<
nTîm
 && i<
pIdx
->
nCﬁumn
; i++){

794 
Ex¥
 *
pEx¥
;

795 
CﬁlSeq
 *
pCﬁl
;

796 
ãrmS‹tOrdî
;

798 
pEx¥
 = 
pTîm
->pExpr;

799 if–
pEx¥
->
›
!=
TK_COLUMN
 ||ÖEx¥->
iTabÀ
!=
ba£
 ){

804 
pCﬁl
 = 
	`sqlôe3Ex¥CﬁlSeq
(
pP¨£
, 
pEx¥
);

805 if–!
pCﬁl
 )ÖCﬁ»
db
->
pDÊtCﬁl
;

806 if–
pEx¥
->
iCﬁumn
!=
pIdx
->
aiCﬁumn
[
i
] ||

807 
	`sqlôe3SåICmp
(
pCﬁl
->
zName
, 
pIdx
->
azCﬁl
[
i
]) ){

809 if–
i
<
nEqCﬁ
 ){

821 
	`as£π
–
pIdx
->
aS‹tOrdî
!=0 );

822 
	`as£π
–
pTîm
->
s‹tOrdî
==0 ||ÖTerm->sortOrder==1 );

823 
	`as£π
–
pIdx
->
aS‹tOrdî
[
i
]==0 ||ÖIdx->aSortOrder[i]==1 );

824 
ãrmS‹tOrdî
 = 
pIdx
->
aS‹tOrdî
[
i
] ^ 
pTîm
->
s‹tOrdî
;

825 if–
i
>
nEqCﬁ
 ){

826 if–
ãrmS‹tOrdî
!=
s‹tOrdî
 ){

832 
s‹tOrdî
 = 
ãrmS‹tOrdî
;

834 
j
++;

835 
pTîm
++;

841 if–
j
>=
nTîm
 ){

842 *
pbRev
 = 
s‹tOrdî
!=0;

846 
	}
}

853 
	$s‹èbÀByRowid
(

854 
ba£
,

855 
Ex¥Li°
 *
pOrdîBy
,

856 *
pbRev


858 
Ex¥
 *
p
;

860 
	`as£π
–
pOrdîBy
!=0 );

861 
	`as£π
–
pOrdîBy
->
nEx¥
>0 );

862 
p
 = 
pOrdîBy
->
a
[0].
pEx¥
;

863 if–
pOrdîBy
->
nEx¥
==1 && 
p
->
›
==
TK_COLUMN
 &&Ö->
iTabÀ
==
ba£


864 && 
p
->
iCﬁumn
==-1 ){

865 *
pbRev
 = 
pOrdîBy
->
a
[0].
s‹tOrdî
;

869 
	}
}

878 
	$e°Log
(
N
){

879 
logN
 = 1;

880 
x
 = 10;

881  
N
>
x
 ){

882 
logN
 += 1;

883 
x
 *= 10;

885  
logN
;

886 
	}
}

906 
	$be°Index
(

907 
P¨£
 *
pP¨£
,

908 
WhîeCœu£
 *
pWC
,

909 
SrcLi°_ôem
 *
pSrc
,

910 
Bômask
 
nŸRódy
,

911 
Ex¥Li°
 *
pOrdîBy
,

912 
Index
 **
µIndex
,

913 *
pFœgs
,

914 *
≤Eq


916 
WhîeTîm
 *
pTîm
;

917 
Index
 *
be°Idx
 = 0;

918 
lowe°Co°
;

919 
be°Fœgs
 = 0;

920 
be°NEq
 = 0;

921 
iCur
 = 
pSrc
->
iCurs‹
;

922 
Index
 *
pProbe
;

923 
ªv
;

924 
Êags
;

925 
nEq
;

926 
co°
;

928 
	`TRACE
(("be°Index:Åbl=%†nŸRódy=%x\n", 
pSrc
->
pTab
->
zName
, 
nŸRódy
));

929 
lowe°Co°
 = 
SQLITE_BIG_DBL
;

933 
pTîm
 = 
	`födTîm
(
pWC
, 
iCur
, -1, 
nŸRódy
, 
WO_EQ
|
WO_IN
, 0);

934 if–
pTîm
 ){

935 
Ex¥
 *
pEx¥
;

936 *
µIndex
 = 0;

937 
be°Fœgs
 = 
WHERE_ROWID_EQ
;

938 if–
pTîm
->
eO≥øt‹
 & 
WO_EQ
 ){

941 *
pFœgs
 = 
WHERE_ROWID_EQ
 | 
WHERE_UNIQUE
;

942 *
≤Eq
 = 1;

943 
	`TRACE
(("... best isÑowid\n"));

945 }if–(
pEx¥
 = 
pTîm
->pEx¥)->
pLi°
!=0 ){

948 
lowe°Co°
 = 
pEx¥
->
pLi°
->
nEx¥
;

949 
lowe°Co°
 *
	`e°Log
(lowestCost);

954 
lowe°Co°
 = 200;

956 
	`TRACE
(("...Ñowid IN co°: %.9g\n", 
lowe°Co°
));

962 
pProbe
 = 
pSrc
->
pTab
->
pIndex
;

963 
co°
 = 
pProbe
 ?ÖProbe->
aiRowE°
[0] : 1000000;

964 
	`TRACE
(("...ÅabÀ sˇ¿ba£ co°: %.9g\n", 
co°
));

965 
Êags
 = 
WHERE_ROWID_RANGE
;

969 
pTîm
 = 
	`födTîm
(
pWC
, 
iCur
, -1, 
nŸRódy
, 
WO_LT
|
WO_LE
|
WO_GT
|
WO_GE
, 0);

970 if–
pTîm
 ){

971 if–
	`födTîm
(
pWC
, 
iCur
, -1, 
nŸRódy
, 
WO_LT
|
WO_LE
, 0) ){

972 
Êags
 |
WHERE_TOP_LIMIT
;

973 
co°
 /= 3;

975 if–
	`födTîm
(
pWC
, 
iCur
, -1, 
nŸRódy
, 
WO_GT
|
WO_GE
, 0) ){

976 
Êags
 |
WHERE_BTM_LIMIT
;

977 
co°
 /= 3;

979 
	`TRACE
(("...ÑowidÑ™gêªdu˚†co°Åÿ%.9g\n", 
co°
));

981 
Êags
 = 0;

986 if–
pOrdîBy
 ){

987 if–
	`s‹èbÀByRowid
(
iCur
, 
pOrdîBy
, &
ªv
) ){

988 
Êags
 |
WHERE_ORDERBY
|
WHERE_ROWID_RANGE
;

989 if–
ªv
 ){

990 
Êags
 |
WHERE_REVERSE
;

993 
co°
 +co°*
	`e°Log
(cost);

994 
	`TRACE
(("... s‹tög in¸ó£†co°Åÿ%.9g\n", 
co°
));

997 if–
co°
<
lowe°Co°
 ){

998 
lowe°Co°
 = 
co°
;

999 
be°Fœgs
 = 
Êags
;

1004 ; 
pProbe
;ÖProbeıProbe->
pNext
){

1005 
i
;

1006 
öMu…ùlõr
 = 1;

1008 
	`TRACE
(("... index %s:\n", 
pProbe
->
zName
));

1013 
Êags
 = 0;

1014 
i
=0; i<
pProbe
->
nCﬁumn
; i++){

1015 
j
 = 
pProbe
->
aiCﬁumn
[
i
];

1016 
pTîm
 = 
	`födTîm
(
pWC
, 
iCur
, 
j
, 
nŸRódy
, 
WO_EQ
|
WO_IN
, 
pProbe
);

1017 if–
pTîm
==0 ) ;

1018 
Êags
 |
WHERE_COLUMN_EQ
;

1019 if–
pTîm
->
eO≥øt‹
 & 
WO_IN
 ){

1020 
Ex¥
 *
pEx¥
 = 
pTîm
->pExpr;

1021 
Êags
 |
WHERE_COLUMN_IN
;

1022 if–
pEx¥
->
pSñe˘
!=0 ){

1023 
öMu…ùlõr
 *= 100;

1024 }if–
pEx¥
->
pLi°
!=0 ){

1025 
öMu…ùlõr
 *
pEx¥
->
pLi°
->
nEx¥
 + 1;

1029 
co°
 = 
pProbe
->
aiRowE°
[
i
] * 
öMu…ùlõr
 * 
	`e°Log
(inMultiplier);

1030 
nEq
 = 
i
;

1031 if–
pProbe
->
⁄Eº‹
!=
OE_N⁄e
 && (
Êags
 & 
WHERE_COLUMN_IN
)==0

1032 && 
nEq
==
pProbe
->
nCﬁumn
 ){

1033 
Êags
 |
WHERE_UNIQUE
;

1035 
	`TRACE
(("......ÇEq=%d inMu…=%.9g co°=%.9g\n", 
nEq
, 
öMu…ùlõr
, 
co°
));

1039 if–
nEq
<
pProbe
->
nCﬁumn
 ){

1040 
j
 = 
pProbe
->
aiCﬁumn
[
nEq
];

1041 
pTîm
 = 
	`födTîm
(
pWC
, 
iCur
, 
j
, 
nŸRódy
, 
WO_LT
|
WO_LE
|
WO_GT
|
WO_GE
, 
pProbe
);

1042 if–
pTîm
 ){

1043 
Êags
 |
WHERE_COLUMN_RANGE
;

1044 if–
	`födTîm
(
pWC
, 
iCur
, 
j
, 
nŸRódy
, 
WO_LT
|
WO_LE
, 
pProbe
) ){

1045 
Êags
 |
WHERE_TOP_LIMIT
;

1046 
co°
 /= 3;

1048 if–
	`födTîm
(
pWC
, 
iCur
, 
j
, 
nŸRódy
, 
WO_GT
|
WO_GE
, 
pProbe
) ){

1049 
Êags
 |
WHERE_BTM_LIMIT
;

1050 
co°
 /= 3;

1052 
	`TRACE
(("......Ñ™gêªdu˚†co°Åÿ%.9g\n", 
co°
));

1058 if–
pOrdîBy
 ){

1059 if–(
Êags
 & 
WHERE_COLUMN_IN
)==0 &&

1060 
	`isS‹tögIndex
(
pP¨£
,
pProbe
,
pSrc
->
pTab
,
iCur
,
pOrdîBy
,
nEq
,&
ªv
) ){

1061 if–
Êags
==0 ){

1062 
Êags
 = 
WHERE_COLUMN_RANGE
;

1064 
Êags
 |
WHERE_ORDERBY
;

1065 if–
ªv
 ){

1066 
Êags
 |
WHERE_REVERSE
;

1069 
co°
 +co°*
	`e°Log
(cost);

1070 
	`TRACE
(("...... ordîby in¸ó£†co°Åÿ%.9g\n", 
co°
));

1078 if–
Êags
 && 
pSrc
->
cﬁU£d
 < (((
Bômask
)1)<<(
BMS
-1)) ){

1079 
Bômask
 
m
 = 
pSrc
->
cﬁU£d
;

1080 
j
;

1081 
j
=0; j<
pProbe
->
nCﬁumn
; j++){

1082 
x
 = 
pProbe
->
aiCﬁumn
[
j
];

1083 if–
x
<
BMS
-1 ){

1084 
m
 &~(((
Bômask
)1)<<
x
);

1087 if–
m
==0 ){

1088 
Êags
 |
WHERE_IDX_ONLY
;

1089 
co°
 /= 2;

1090 
	`TRACE
(("...... idx-⁄lyÑedu˚†co°Åÿ%.9g\n", 
co°
));

1096 if–
co°
 < 
lowe°Co°
 ){

1097 
be°Idx
 = 
pProbe
;

1098 
lowe°Co°
 = 
co°
;

1099 
	`as£π
–
Êags
!=0 );

1100 
be°Fœgs
 = 
Êags
;

1101 
be°NEq
 = 
nEq
;

1107 *
µIndex
 = 
be°Idx
;

1108 
	`TRACE
(("best index is %s, cost=%.9g, flags=%x,ÇEq=%d\n",

1109 
be°Idx
 ? be°Idx->
zName
 : "“⁄e)", 
lowe°Co°
, 
be°Fœgs
, 
be°NEq
));

1110 *
pFœgs
 = 
be°Fœgs
;

1111 *
≤Eq
 = 
be°NEq
;

1112  
lowe°Co°
;

1113 
	}
}

1139 
	$dißbÀTîm
(
WhîeLevñ
 *
pLevñ
, 
WhîeTîm
 *
pTîm
){

1140 if–
pTîm


1141 && (
pTîm
->
Êags
 & 
TERM_CODED
)==0

1142 && (
pLevñ
->
iLe·Joö
==0 || 
	`Ex¥HasPr›îty
(
pTîm
->
pEx¥
, 
EP_FromJoö
))

1144 
pTîm
->
Êags
 |
TERM_CODED
;

1145 if–
pTîm
->
iP¨ít
>=0 ){

1146 
WhîeTîm
 *
pOthî
 = &
pTîm
->
pWC
->
a
[pTîm->
iP¨ít
];

1147 if–(--
pOthî
->
nChûd
)==0 ){

1148 
	`dißbÀTîm
(
pLevñ
, 
pOthî
);

1152 
	}
}

1169 
	$buûdIndexProbe
(

1170 
Vdbe
 *
v
,

1171 
nCﬁumn
,

1172 
nExåa
,

1173 
brk
,

1174 
Index
 *
pIdx


1176 
	`sqlôe3VdbeAddOp
(
v
, 
OP_NŸNuŒ
, -
nCﬁumn
, 
	`sqlôe3VdbeCuºítAddr
(v)+3);

1177 
	`sqlôe3VdbeAddOp
(
v
, 
OP_P›
, 
nCﬁumn
+
nExåa
, 0);

1178 
	`sqlôe3VdbeAddOp
(
v
, 
OP_GŸo
, 0, 
brk
);

1179 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MakeRec‹d
, 
nCﬁumn
, 0);

1180 
	`sqlôe3IndexAfföôySå
(
v
, 
pIdx
);

1181 
	}
}

1195 
	$codeEquÆôyTîm
(

1196 
P¨£
 *
pP¨£
,

1197 
WhîeTîm
 *
pTîm
,

1198 
brk
,

1199 
WhîeLevñ
 *
pLevñ


1201 
Ex¥
 *
pX
 = 
pTîm
->
pEx¥
;

1202 if–
pX
->
›
!=
TK_IN
 ){

1203 
	`as£π
–
pX
->
›
==
TK_EQ
 );

1204 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pX
->
pRight
);

1205 #i‚de‡
SQLITE_OMIT_SUBQUERY


1207 
iTab
;

1208 *
aIn
;

1209 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

1211 
	`sqlôe3CodeSub£À˘
(
pP¨£
, 
pX
);

1212 
iTab
 = 
pX
->
iTabÀ
;

1213 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Rewöd
, 
iTab
, 
brk
);

1214 
	`VdbeCommít
((
v
, "# %.*s", 
pX
->
•™
.
n
,ÖX->•™.
z
));

1215 
pLevñ
->
nIn
++;

1216 
	`sqlôeRóŒocOrFªe
((**)&
pLevñ
->
aInLo›
,

1217 (
pLevñ
->
aInLo›
[0])*3*pLevñ->
nIn
);

1218 
aIn
 = 
pLevñ
->
aInLo›
;

1219 if–
aIn
 ){

1220 
aIn
 +
pLevñ
->
nIn
*3 - 3;

1221 
aIn
[0] = 
OP_Next
;

1222 
aIn
[1] = 
iTab
;

1223 
aIn
[2] = 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Cﬁumn
, 
iTab
, 0);

1225 
pLevñ
->
nIn
 = 0;

1229 
	`dißbÀTîm
(
pLevñ
, 
pTîm
);

1230 
	}
}

1255 
	$codeAŒEquÆôyTîms
(

1256 
P¨£
 *
pP¨£
,

1257 
WhîeLevñ
 *
pLevñ
,

1258 
WhîeCœu£
 *
pWC
,

1259 
Bômask
 
nŸRódy
,

1260 
brk


1262 
nEq
 = 
pLevñ
->nEq;

1263 
ãrmsInMem
 = 0;

1264 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

1265 
Index
 *
pIdx
 = 
pLevñ
->pIdx;

1266 
iCur
 = 
pLevñ
->
iTabCur
;

1267 
WhîeTîm
 *
pTîm
;

1268 
j
;

1275 
pLevñ
->
iMem
 = 
pP¨£
->
nMem
++;

1276 if–
pLevñ
->
Êags
 & 
WHERE_COLUMN_IN
 ){

1277 
pP¨£
->
nMem
 +
pLevñ
->
nEq
;

1278 
ãrmsInMem
 = 1;

1283 
j
=0; j<
pIdx
->
nCﬁumn
; j++){

1284 
k
 = 
pIdx
->
aiCﬁumn
[
j
];

1285 
pTîm
 = 
	`födTîm
(
pWC
, 
iCur
, 
k
, 
nŸRódy
, 
WO_EQ
|
WO_IN
, 
pIdx
);

1286 if–
pTîm
==0 ) ;

1287 
	`as£π
–(
pTîm
->
Êags
 & 
TERM_CODED
)==0 );

1288 
	`codeEquÆôyTîm
(
pP¨£
, 
pTîm
, 
brk
, 
pLevñ
);

1289 if–
ãrmsInMem
 ){

1290 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemSt‹e
, 
pLevñ
->
iMem
+
j
+1, 1);

1293 
	`as£π
–
j
==
nEq
 );

1297 if–
ãrmsInMem
 ){

1298 
j
=0; j<
nEq
; j++){

1299 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemLﬂd
, 
pLevñ
->
iMem
+
j
+1, 0);

1302 
	}
}

1304 #i‡
deföed
(
SQLITE_TEST
)

1311 
	gsqlôe3_quîy_∂™
[
BMS
*2*40];

1312 
	gnQPœn
 = 0;

1406 
WhîeInfo
 *
	$sqlôe3WhîeBegö
(

1407 
P¨£
 *
pP¨£
,

1408 
SrcLi°
 *
pTabLi°
,

1409 
Ex¥
 *
pWhîe
,

1410 
Ex¥Li°
 **
µOrdîBy


1412 
i
;

1413 
WhîeInfo
 *
pWInfo
;

1414 
Vdbe
 *
v
 = 
pP¨£
->
pVdbe
;

1415 
brk
, 
c⁄t
 = 0;

1416 
Bômask
 
nŸRódy
;

1417 
WhîeTîm
 *
pTîm
;

1418 
Ex¥MaskSë
 
maskSë
;

1419 
WhîeCœu£
 
wc
;

1420 
SrcLi°_ôem
 *
pTabIãm
;

1421 
WhîeLevñ
 *
pLevñ
;

1422 
iFrom
;

1423 
™dFœgs
;

1428 if–
pTabLi°
->
nSrc
>
BMS
 ){

1429 
	`sqlôe3Eº‹Msg
(
pP¨£
, "© mo° %dÅabÀ†öá joö", 
BMS
);

1436 
	`öôMaskSë
(&
maskSë
);

1437 
	`whîeCœu£Inô
(&
wc
, 
pP¨£
);

1438 
	`whîeS∂ô
(&
wc
, 
pWhîe
, 
TK_AND
);

1443 
pWInfo
 = 
	`sqlôeMÆloc
–(
WhîeInfo
Ë+ 
pTabLi°
->
nSrc
*(
WhîeLevñ
));

1444 if–
	`sqlôe3MÆlocFaûed
() ){

1445 
whîeBegöNoMem
;

1447 
pWInfo
->
pP¨£
 =ÖParse;

1448 
pWInfo
->
pTabLi°
 =ÖTabList;

1449 
pWInfo
->
iBªak
 = 
	`sqlôe3VdbeMakeLabñ
(
v
);

1454 if–
pWhîe
 && (
pTabLi°
->
nSrc
==0 || 
	`sqlôe3Ex¥IsC⁄°™t
(pWhere)) ){

1455 
	`sqlôe3Ex¥IfFÆ£
(
pP¨£
, 
pWhîe
, 
pWInfo
->
iBªak
, 1);

1456 
pWhîe
 = 0;

1464 
i
=0; i<
pTabLi°
->
nSrc
; i++){

1465 
	`¸óãMask
(&
maskSë
, 
pTabLi°
->
a
[
i
].
iCurs‹
);

1467 
	`ex¥A«lyzeAŒ
(
pTabLi°
, &
maskSë
, &
wc
);

1468 if–
	`sqlôe3MÆlocFaûed
() ){

1469 
whîeBegöNoMem
;

1486 
nŸRódy
 = ~(
Bômask
)0;

1487 
pTabIãm
 = 
pTabLi°
->
a
;

1488 
pLevñ
 = 
pWInfo
->
a
;

1489 
™dFœgs
 = ~0;

1490 
	`TRACE
(("*** Optimizer Start ***\n"));

1491 
i
=
iFrom
=0, 
pLevñ
=
pWInfo
->
a
; i<
pTabLi°
->
nSrc
; i++,ÖLevel++){

1492 
Index
 *
pIdx
;

1493 
Êags
;

1494 
nEq
;

1495 
co°
;

1496 
j
;

1497 
Index
 *
pBe°
 = 0;

1498 
be°Fœgs
 = 0;

1499 
be°NEq
 = 0;

1500 
lowe°Co°
;

1501 
be°J
 = 0;

1502 
Bômask
 
m
;

1503 
⁄˚
 = 0;

1505 
lowe°Co°
 = 
SQLITE_BIG_DBL
;

1506 
j
=
iFrom
, 
pTabIãm
=&
pTabLi°
->
a
[j]; j<pTabLi°->
nSrc
; j++,ÖTabItem++){

1507 if–
⁄˚
 &&

1508 ((
pTabIãm
->
joöty≥
 & (
JT_LEFT
|
JT_CROSS
))!=0

1509 || (
j
>0 && (
pTabIãm
[-1].
joöty≥
 & (
JT_LEFT
|
JT_CROSS
))!=0))

1513 
m
 = 
	`gëMask
(&
maskSë
, 
pTabIãm
->
iCurs‹
);

1514 if–(
m
 & 
nŸRódy
)==0 ){

1515 if–
j
==
iFrom
 ) iFrom++;

1518 
co°
 = 
	`be°Index
(
pP¨£
, &
wc
, 
pTabIãm
, 
nŸRódy
,

1519 (
i
==0 && 
µOrdîBy
) ? *ppOrderBy : 0,

1520 &
pIdx
, &
Êags
, &
nEq
);

1521 if–
co°
<
lowe°Co°
 ){

1522 
⁄˚
 = 1;

1523 
lowe°Co°
 = 
co°
;

1524 
pBe°
 = 
pIdx
;

1525 
be°Fœgs
 = 
Êags
;

1526 
be°NEq
 = 
nEq
;

1527 
be°J
 = 
j
;

1530 
	`TRACE
(("*** O±imizî choo£ÅabÀ %d f‹Üo› %d\n", 
be°J
,

1531 
pLevñ
-
pWInfo
->
a
));

1532 if–(
be°Fœgs
 & 
WHERE_ORDERBY
)!=0 ){

1533 *
µOrdîBy
 = 0;

1535 
™dFœgs
 &
be°Fœgs
;

1536 
pLevñ
->
Êags
 = 
be°Fœgs
;

1537 
pLevñ
->
pIdx
 = 
pBe°
;

1538 
pLevñ
->
nEq
 = 
be°NEq
;

1539 
pLevñ
->
aInLo›
 = 0;

1540 
pLevñ
->
nIn
 = 0;

1541 if–
pBe°
 ){

1542 
pLevñ
->
iIdxCur
 = 
pP¨£
->
nTab
++;

1544 
pLevñ
->
iIdxCur
 = -1;

1546 
nŸRódy
 &~
	`gëMask
(&
maskSë
, 
pTabLi°
->
a
[
be°J
].
iCurs‹
);

1547 
pLevñ
->
iFrom
 = 
be°J
;

1549 
	`TRACE
(("*** Optimizer Finished ***\n"));

1554 if–(
™dFœgs
 & 
WHERE_UNIQUE
)!=0 && 
µOrdîBy
 ){

1555 *
µOrdîBy
 = 0;

1561 
	`sqlôe3CodeVîifySchema
(
pP¨£
, -1);

1562 
pLevñ
 = 
pWInfo
->
a
;

1563 
i
=0, 
pLevñ
=
pWInfo
->
a
; i<
pTabLi°
->
nSrc
; i++,ÖLevel++){

1564 
TabÀ
 *
pTab
;

1565 
Index
 *
pIx
;

1566 
iDb
;

1567 
iIdxCur
 = 
pLevñ
->iIdxCur;

1569 #i‚de‡
SQLITE_OMIT_EXPLAIN


1570 if–
pP¨£
->
ex∂aö
==2 ){

1571 *
zMsg
;

1572 
SrcLi°_ôem
 *
pIãm
 = &
pTabLi°
->
a
[
pLevñ
->
iFrom
];

1573 
zMsg
 = 
	`sqlôe3MPrötf
("TABLE %s", 
pIãm
->
zName
);

1574 if–
pIãm
->
zAlüs
 ){

1575 
zMsg
 = 
	`sqlôe3MPrötf
("%z AS %s", zMsg, 
pIãm
->
zAlüs
);

1577 if–(
pIx
 = 
pLevñ
->
pIdx
)!=0 ){

1578 
zMsg
 = 
	`sqlôe3MPrötf
("%z WITH INDEX %s", zMsg, 
pIx
->
zName
);

1579 }if–
pLevñ
->
Êags
 & (
WHERE_ROWID_EQ
|
WHERE_ROWID_RANGE
) ){

1580 
zMsg
 = 
	`sqlôe3MPrötf
("%z USING PRIMARY KEY", zMsg);

1582 
	`sqlôe3VdbeOp3
(
v
, 
OP_Ex∂aö
, 
i
, 
pLevñ
->
iFrom
, 
zMsg
, 
P3_DYNAMIC
);

1585 
pTabIãm
 = &
pTabLi°
->
a
[
pLevñ
->
iFrom
];

1586 
pTab
 = 
pTabIãm
->pTab;

1587 
iDb
 = 
	`sqlôe3SchemaToIndex
(
pP¨£
->
db
, 
pTab
->
pSchema
);

1588 if–
pTab
->
isTønsõ¡
 ||ÖTab->
pSñe˘
 ) ;

1589 if–(
pLevñ
->
Êags
 & 
WHERE_IDX_ONLY
)==0 ){

1590 
	`sqlôe3O≥nTabÀ
(
pP¨£
, 
pTabIãm
->
iCurs‹
, 
iDb
, 
pTab
, 
OP_O≥nRód
);

1591 if–
pTab
->
nCﬁ
<((
Bômask
)*8) ){

1592 
Bômask
 
b
 = 
pTabIãm
->
cﬁU£d
;

1593 
n
 = 0;

1594 ; 
b
; b=b>>1, 
n
++);

1595 
	`sqlôe3VdbeCh™geP2
(
v
, 
	`sqlôe3VdbeCuºítAddr
(v)-1, 
n
);

1596 
	`as£π
–
n
<=
pTab
->
nCﬁ
 );

1599 
	`sqlôe3TabÀLock
(
pP¨£
, 
iDb
, 
pTab
->
äum
, 0,ÖTab->
zName
);

1601 
pLevñ
->
iTabCur
 = 
pTabIãm
->
iCurs‹
;

1602 if–(
pIx
 = 
pLevñ
->
pIdx
)!=0 ){

1603 
KeyInfo
 *
pKey
 = 
	`sqlôe3IndexKeyöfo
(
pP¨£
, 
pIx
);

1604 
	`as£π
–
pIx
->
pSchema
==
pTab
->pSchema );

1605 
	`sqlôe3VdbeAddOp
(
v
, 
OP_I¡egî
, 
iDb
, 0);

1606 
	`VdbeCommít
((
v
, "# %s", 
pIx
->
zName
));

1607 
	`sqlôe3VdbeOp3
(
v
, 
OP_O≥nRód
, 
iIdxCur
, 
pIx
->
äum
,

1608 (*)
pKey
, 
P3_KEYINFO_HANDOFF
);

1610 if–(
pLevñ
->
Êags
 & 
WHERE_IDX_ONLY
)!=0 ){

1611 
	`sqlôe3VdbeAddOp
(
v
, 
OP_SëNumCﬁumns
, 
iIdxCur
, 
pIx
->
nCﬁumn
+1);

1613 
	`sqlôe3CodeVîifySchema
(
pP¨£
, 
iDb
);

1615 
pWInfo
->
iT›
 = 
	`sqlôe3VdbeCuºítAddr
(
v
);

1621 
nŸRódy
 = ~(
Bômask
)0;

1622 
i
=0, 
pLevñ
=
pWInfo
->
a
; i<
pTabLi°
->
nSrc
; i++,ÖLevel++){

1623 
j
;

1624 
iCur
 = 
pTabIãm
->
iCurs‹
;

1625 
Index
 *
pIdx
;

1626 
iIdxCur
;

1627 
omôTabÀ
;

1628 
bRev
;

1630 
pTabIãm
 = &
pTabLi°
->
a
[
pLevñ
->
iFrom
];

1631 
iCur
 = 
pTabIãm
->
iCurs‹
;

1632 
pIdx
 = 
pLevñ
->pIdx;

1633 
iIdxCur
 = 
pLevñ
->iIdxCur;

1634 
bRev
 = (
pLevñ
->
Êags
 & 
WHERE_REVERSE
)!=0;

1635 
omôTabÀ
 = (
pLevñ
->
Êags
 & 
WHERE_IDX_ONLY
)!=0;

1642 
brk
 = 
pLevñ
->brk = 
	`sqlôe3VdbeMakeLabñ
(
v
);

1643 
c⁄t
 = 
pLevñ
->c⁄à
	`sqlôe3VdbeMakeLabñ
(
v
);

1649 if–
pLevñ
->
iFrom
>0 && (
pTabIãm
[-1].
joöty≥
 & 
JT_LEFT
)!=0 ){

1650 if–!
pP¨£
->
nMem
 )ÖParse->nMem++;

1651 
pLevñ
->
iLe·Joö
 = 
pP¨£
->
nMem
++;

1652 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemI¡
, 0, 
pLevñ
->
iLe·Joö
);

1653 
	`VdbeCommít
((
v
, "# init LEFT JOINÇo-match flag"));

1656 if–
pLevñ
->
Êags
 & 
WHERE_ROWID_EQ
 ){

1662 
pTîm
 = 
	`födTîm
(&
wc
, 
iCur
, -1, 
nŸRódy
, 
WO_EQ
|
WO_IN
, 0);

1663 
	`as£π
–
pTîm
!=0 );

1664 
	`as£π
–
pTîm
->
pEx¥
!=0 );

1665 
	`as£π
–
pTîm
->
À·Curs‹
==
iCur
 );

1666 
	`as£π
–
omôTabÀ
==0 );

1667 
	`codeEquÆôyTîm
(
pP¨£
, 
pTîm
, 
brk
, 
pLevñ
);

1668 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Mu°BeI¡
, 1, 
brk
);

1669 
	`sqlôe3VdbeAddOp
(
v
, 
OP_NŸExi°s
, 
iCur
, 
brk
);

1670 
	`VdbeCommít
((
v
, "pk"));

1671 
pLevñ
->
›
 = 
OP_No›
;

1672 }if–
pLevñ
->
Êags
 & 
WHERE_ROWID_RANGE
 ){

1675 
ã°Op
 = 
OP_No›
;

1676 
°¨t
;

1677 
WhîeTîm
 *
pSèπ
, *
pEnd
;

1679 
	`as£π
–
omôTabÀ
==0 );

1680 
pSèπ
 = 
	`födTîm
(&
wc
, 
iCur
, -1, 
nŸRódy
, 
WO_GT
|
WO_GE
, 0);

1681 
pEnd
 = 
	`födTîm
(&
wc
, 
iCur
, -1, 
nŸRódy
, 
WO_LT
|
WO_LE
, 0);

1682 if–
bRev
 ){

1683 
pTîm
 = 
pSèπ
;

1684 
pSèπ
 = 
pEnd
;

1685 
pEnd
 = 
pTîm
;

1687 if–
pSèπ
 ){

1688 
Ex¥
 *
pX
;

1689 
pX
 = 
pSèπ
->
pEx¥
;

1690 
	`as£π
–
pX
!=0 );

1691 
	`as£π
–
pSèπ
->
À·Curs‹
==
iCur
 );

1692 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pX
->
pRight
);

1693 
	`sqlôe3VdbeAddOp
(
v
, 
OP_F‹˚I¡
, 
pX
->
›
==
TK_LE
 ||ÖX->›==
TK_GT
, 
brk
);

1694 
	`sqlôe3VdbeAddOp
(
v
, 
bRev
 ? 
OP_MoveLt
 : 
OP_MoveGe
, 
iCur
, 
brk
);

1695 
	`VdbeCommít
((
v
, "pk"));

1696 
	`dißbÀTîm
(
pLevñ
, 
pSèπ
);

1698 
	`sqlôe3VdbeAddOp
(
v
, 
bRev
 ? 
OP_La°
 : 
OP_Rewöd
, 
iCur
, 
brk
);

1700 if–
pEnd
 ){

1701 
Ex¥
 *
pX
;

1702 
pX
 = 
pEnd
->
pEx¥
;

1703 
	`as£π
–
pX
!=0 );

1704 
	`as£π
–
pEnd
->
À·Curs‹
==
iCur
 );

1705 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pX
->
pRight
);

1706 
pLevñ
->
iMem
 = 
pP¨£
->
nMem
++;

1707 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemSt‹e
, 
pLevñ
->
iMem
, 1);

1708 if–
pX
->
›
==
TK_LT
 ||ÖX->›==
TK_GT
 ){

1709 
ã°Op
 = 
bRev
 ? 
OP_Le
 : 
OP_Ge
;

1711 
ã°Op
 = 
bRev
 ? 
OP_Lt
 : 
OP_Gt
;

1713 
	`dißbÀTîm
(
pLevñ
, 
pEnd
);

1715 
°¨t
 = 
	`sqlôe3VdbeCuºítAddr
(
v
);

1716 
pLevñ
->
›
 = 
bRev
 ? 
OP_Pªv
 : 
OP_Next
;

1717 
pLevñ
->
p1
 = 
iCur
;

1718 
pLevñ
->
p2
 = 
°¨t
;

1719 if–
ã°Op
!=
OP_No›
 ){

1720 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Rowid
, 
iCur
, 0);

1721 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemLﬂd
, 
pLevñ
->
iMem
, 0);

1722 
	`sqlôe3VdbeAddOp
(
v
, 
ã°Op
, 
SQLITE_AFF_NUMERIC
, 
brk
);

1724 }if–
pLevñ
->
Êags
 & 
WHERE_COLUMN_RANGE
 ){

1736 
°¨t
;

1737 
nEq
 = 
pLevñ
->nEq;

1738 
t›Eq
=0;

1739 
btmEq
=0;

1740 
t›Op
, 
btmOp
;

1741 
ã°Op
;

1742 
nNŸNuŒ
;

1743 
t›Limô
 = (
pLevñ
->
Êags
 & 
WHERE_TOP_LIMIT
)!=0;

1744 
btmLimô
 = (
pLevñ
->
Êags
 & 
WHERE_BTM_LIMIT
)!=0;

1749 
	`codeAŒEquÆôyTîms
(
pP¨£
, 
pLevñ
, &
wc
, 
nŸRódy
, 
brk
);

1755 
j
=0; j<
nEq
; j++){

1756 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Dup
, 
nEq
-1, 0);

1764 
nNŸNuŒ
 = 
nEq
 + 
t›Limô
;

1765 if–
pIdx
->
aS‹tOrdî
[
nEq
]==
SQLITE_SO_ASC
 ){

1766 
t›Op
 = 
WO_LT
|
WO_LE
;

1767 
btmOp
 = 
WO_GT
|
WO_GE
;

1769 
t›Op
 = 
WO_GT
|
WO_GE
;

1770 
btmOp
 = 
WO_LT
|
WO_LE
;

1771 
	`SWAP
(, 
t›Limô
, 
btmLimô
);

1781 if–
t›Limô
 ){

1782 
Ex¥
 *
pX
;

1783 
k
 = 
pIdx
->
aiCﬁumn
[
j
];

1784 
pTîm
 = 
	`födTîm
(&
wc
, 
iCur
, 
k
, 
nŸRódy
, 
t›Op
, 
pIdx
);

1785 
	`as£π
–
pTîm
!=0 );

1786 
pX
 = 
pTîm
->
pEx¥
;

1787 
	`as£π
–(
pTîm
->
Êags
 & 
TERM_CODED
)==0 );

1788 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pX
->
pRight
);

1789 
t›Eq
 = 
pTîm
->
eO≥øt‹
 & (
WO_LE
|
WO_GE
);

1790 
	`dißbÀTîm
(
pLevñ
, 
pTîm
);

1791 
ã°Op
 = 
OP_IdxGE
;

1793 
ã°Op
 = 
nEq
>0 ? 
OP_IdxGE
 : 
OP_No›
;

1794 
t›Eq
 = 1;

1796 if–
ã°Op
!=
OP_No›
 ){

1797 
nCﬁ
 = 
nEq
 + 
t›Limô
;

1798 
pLevñ
->
iMem
 = 
pP¨£
->
nMem
++;

1799 
	`buûdIndexProbe
(
v
, 
nCﬁ
, 
nEq
, 
brk
, 
pIdx
);

1800 if–
bRev
 ){

1801 
›
 = 
t›Eq
 ? 
OP_MoveLe
 : 
OP_MoveLt
;

1802 
	`sqlôe3VdbeAddOp
(
v
, 
›
, 
iIdxCur
, 
brk
);

1804 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemSt‹e
, 
pLevñ
->
iMem
, 1);

1806 }if–
bRev
 ){

1807 
	`sqlôe3VdbeAddOp
(
v
, 
OP_La°
, 
iIdxCur
, 
brk
);

1819 if–
btmLimô
 ){

1820 
Ex¥
 *
pX
;

1821 
k
 = 
pIdx
->
aiCﬁumn
[
j
];

1822 
pTîm
 = 
	`födTîm
(&
wc
, 
iCur
, 
k
, 
nŸRódy
, 
btmOp
, 
pIdx
);

1823 
	`as£π
–
pTîm
!=0 );

1824 
pX
 = 
pTîm
->
pEx¥
;

1825 
	`as£π
–(
pTîm
->
Êags
 & 
TERM_CODED
)==0 );

1826 
	`sqlôe3Ex¥Code
(
pP¨£
, 
pX
->
pRight
);

1827 
btmEq
 = 
pTîm
->
eO≥øt‹
 & (
WO_LE
|
WO_GE
);

1828 
	`dißbÀTîm
(
pLevñ
, 
pTîm
);

1830 
btmEq
 = 1;

1832 if–
nEq
>0 || 
btmLimô
 ){

1833 
nCﬁ
 = 
nEq
 + 
btmLimô
;

1834 
	`buûdIndexProbe
(
v
, 
nCﬁ
, 0, 
brk
, 
pIdx
);

1835 if–
bRev
 ){

1836 
pLevñ
->
iMem
 = 
pP¨£
->
nMem
++;

1837 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemSt‹e
, 
pLevñ
->
iMem
, 1);

1838 
ã°Op
 = 
OP_IdxLT
;

1840 
›
 = 
btmEq
 ? 
OP_MoveGe
 : 
OP_MoveGt
;

1841 
	`sqlôe3VdbeAddOp
(
v
, 
›
, 
iIdxCur
, 
brk
);

1843 }if–
bRev
 ){

1844 
ã°Op
 = 
OP_No›
;

1846 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Rewöd
, 
iIdxCur
, 
brk
);

1853 
°¨t
 = 
	`sqlôe3VdbeCuºítAddr
(
v
);

1854 if–
ã°Op
!=
OP_No›
 ){

1855 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemLﬂd
, 
pLevñ
->
iMem
, 0);

1856 
	`sqlôe3VdbeAddOp
(
v
, 
ã°Op
, 
iIdxCur
, 
brk
);

1857 if–(
t›Eq
 && !
bRev
Ë|| (!
btmEq
 && bRev) ){

1858 
	`sqlôe3VdbeCh™geP3
(
v
, -1, "+", 
P3_STATIC
);

1861 
	`sqlôe3VdbeAddOp
(
v
, 
OP_RowKey
, 
iIdxCur
, 0);

1862 
	`sqlôe3VdbeAddOp
(
v
, 
OP_IdxIsNuŒ
, 
nNŸNuŒ
, 
c⁄t
);

1863 if–!
omôTabÀ
 ){

1864 
	`sqlôe3VdbeAddOp
(
v
, 
OP_IdxRowid
, 
iIdxCur
, 0);

1865 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MoveGe
, 
iCur
, 0);

1870 
pLevñ
->
›
 = 
bRev
 ? 
OP_Pªv
 : 
OP_Next
;

1871 
pLevñ
->
p1
 = 
iIdxCur
;

1872 
pLevñ
->
p2
 = 
°¨t
;

1873 }if–
pLevñ
->
Êags
 & 
WHERE_COLUMN_EQ
 ){

1877 
°¨t
;

1878 
nEq
 = 
pLevñ
->nEq;

1883 
	`codeAŒEquÆôyTîms
(
pP¨£
, 
pLevñ
, &
wc
, 
nŸRódy
, 
brk
);

1888 
	`buûdIndexProbe
(
v
, 
nEq
, 0, 
brk
, 
pIdx
);

1889 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemSt‹e
, 
pLevñ
->
iMem
, 0);

1896 if–
bRev
 ){

1898 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MoveLe
, 
iIdxCur
, 
brk
);

1899 
°¨t
 = 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemLﬂd
, 
pLevñ
->
iMem
, 0);

1900 
	`sqlôe3VdbeAddOp
(
v
, 
OP_IdxLT
, 
iIdxCur
, 
brk
);

1901 
pLevñ
->
›
 = 
OP_Pªv
;

1904 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MoveGe
, 
iIdxCur
, 
brk
);

1905 
°¨t
 = 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemLﬂd
, 
pLevñ
->
iMem
, 0);

1906 
	`sqlôe3VdbeOp3
(
v
, 
OP_IdxGE
, 
iIdxCur
, 
brk
, "+", 
P3_STATIC
);

1907 
pLevñ
->
›
 = 
OP_Next
;

1909 
	`sqlôe3VdbeAddOp
(
v
, 
OP_RowKey
, 
iIdxCur
, 0);

1910 
	`sqlôe3VdbeAddOp
(
v
, 
OP_IdxIsNuŒ
, 
nEq
, 
c⁄t
);

1911 if–!
omôTabÀ
 ){

1912 
	`sqlôe3VdbeAddOp
(
v
, 
OP_IdxRowid
, 
iIdxCur
, 0);

1913 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MoveGe
, 
iCur
, 0);

1915 
pLevñ
->
p1
 = 
iIdxCur
;

1916 
pLevñ
->
p2
 = 
°¨t
;

1921 
	`as£π
–
omôTabÀ
==0 );

1922 
	`as£π
–
bRev
==0 );

1923 
pLevñ
->
›
 = 
OP_Next
;

1924 
pLevñ
->
p1
 = 
iCur
;

1925 
pLevñ
->
p2
 = 1 + 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Rewöd
, 
iCur
, 
brk
);

1927 
nŸRódy
 &~
	`gëMask
(&
maskSë
, 
iCur
);

1932 
pTîm
=
wc
.
a
, 
j
=wc.
nTîm
; j>0; j--,ÖTerm++){

1933 
Ex¥
 *
pE
;

1934 if–
pTîm
->
Êags
 & (
TERM_VIRTUAL
|
TERM_CODED
) ) ;

1935 if–(
pTîm
->
¥îeqAŒ
 & 
nŸRódy
)!=0 ) ;

1936 
pE
 = 
pTîm
->
pEx¥
;

1937 
	`as£π
–
pE
!=0 );

1938 if–
pLevñ
->
iLe·Joö
 && !
	`Ex¥HasPr›îty
(
pE
, 
EP_FromJoö
) ){

1941 
	`sqlôe3Ex¥IfFÆ£
(
pP¨£
, 
pE
, 
c⁄t
, 1);

1942 
pTîm
->
Êags
 |
TERM_CODED
;

1948 if–
pLevñ
->
iLe·Joö
 ){

1949 
pLevñ
->
t›
 = 
	`sqlôe3VdbeCuºítAddr
(
v
);

1950 
	`sqlôe3VdbeAddOp
(
v
, 
OP_MemI¡
, 1, 
pLevñ
->
iLe·Joö
);

1951 
	`VdbeCommít
((
v
, "#Ñecord LEFT JOIN hit"));

1952 
pTîm
=
wc
.
a
, 
j
=0; j<wc.
nTîm
; j++,ÖTerm++){

1953 if–
pTîm
->
Êags
 & (
TERM_VIRTUAL
|
TERM_CODED
) ) ;

1954 if–(
pTîm
->
¥îeqAŒ
 & 
nŸRódy
)!=0 ) ;

1955 
	`as£π
–
pTîm
->
pEx¥
 );

1956 
	`sqlôe3Ex¥IfFÆ£
(
pP¨£
, 
pTîm
->
pEx¥
, 
c⁄t
, 1);

1957 
pTîm
->
Êags
 |
TERM_CODED
;

1962 #ifde‡
SQLITE_TEST


1969 
i
=0; i<
pTabLi°
->
nSrc
; i++){

1970 *
z
;

1971 
n
;

1972 
pLevñ
 = &
pWInfo
->
a
[
i
];

1973 
pTabIãm
 = &
pTabLi°
->
a
[
pLevñ
->
iFrom
];

1974 
z
 = 
pTabIãm
->
zAlüs
;

1975 if–
z
==0 ) z = 
pTabIãm
->
pTab
->
zName
;

1976 
n
 = 
	`°æí
(
z
);

1977 if–
n
+
nQPœn
 < (
sqlôe3_quîy_∂™
)-10 ){

1978 if–
pLevñ
->
Êags
 & 
WHERE_IDX_ONLY
 ){

1979 
	`°r˝y
(&
sqlôe3_quîy_∂™
[
nQPœn
], "{}");

1980 
nQPœn
 += 2;

1982 
	`°r˝y
(&
sqlôe3_quîy_∂™
[
nQPœn
], 
z
);

1983 
nQPœn
 +
n
;

1985 
sqlôe3_quîy_∂™
[
nQPœn
++] = ' ';

1987 if–
pLevñ
->
Êags
 & (
WHERE_ROWID_EQ
|
WHERE_ROWID_RANGE
) ){

1988 
	`°r˝y
(&
sqlôe3_quîy_∂™
[
nQPœn
], "* ");

1989 
nQPœn
 += 2;

1990 }if–
pLevñ
->
pIdx
==0 ){

1991 
	`°r˝y
(&
sqlôe3_quîy_∂™
[
nQPœn
], "{} ");

1992 
nQPœn
 += 3;

1994 
n
 = 
	`°æí
(
pLevñ
->
pIdx
->
zName
);

1995 if–
n
+
nQPœn
 < (
sqlôe3_quîy_∂™
)-2 ){

1996 
	`°r˝y
(&
sqlôe3_quîy_∂™
[
nQPœn
], 
pLevñ
->
pIdx
->
zName
);

1997 
nQPœn
 +
n
;

1998 
sqlôe3_quîy_∂™
[
nQPœn
++] = ' ';

2002  
nQPœn
>0 && 
sqlôe3_quîy_∂™
[nQPlan-1]==' ' ){

2003 
sqlôe3_quîy_∂™
[--
nQPœn
] = 0;

2005 
sqlôe3_quîy_∂™
[
nQPœn
] = 0;

2006 
nQPœn
 = 0;

2012 
pWInfo
->
iC⁄töue
 = 
c⁄t
;

2013 
	`whîeCœu£CÀ¨
(&
wc
);

2014  
pWInfo
;

2017 
whîeBegöNoMem
:

2018 
	`whîeCœu£CÀ¨
(&
wc
);

2019 
	`sqlôeFªe
(
pWInfo
);

2021 
	}
}

2027 
	$sqlôe3WhîeEnd
(
WhîeInfo
 *
pWInfo
){

2028 
Vdbe
 *
v
 = 
pWInfo
->
pP¨£
->
pVdbe
;

2029 
i
;

2030 
WhîeLevñ
 *
pLevñ
;

2031 
SrcLi°
 *
pTabLi°
 = 
pWInfo
->pTabList;

2035 
i
=
pTabLi°
->
nSrc
-1; i>=0; i--){

2036 
pLevñ
 = &
pWInfo
->
a
[
i
];

2037 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
pLevñ
->
c⁄t
);

2038 if–
pLevñ
->
›
!=
OP_No›
 ){

2039 
	`sqlôe3VdbeAddOp
(
v
, 
pLevñ
->
›
,ÖLevñ->
p1
,ÖLevñ->
p2
);

2041 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
pLevñ
->
brk
);

2042 if–
pLevñ
->
nIn
 ){

2043 *
a
;

2044 
j
;

2045 
j
=
pLevñ
->
nIn
, 
a
=&pLevñ->
aInLo›
[j*3-3]; j>0; j--,á-=3){

2046 
	`sqlôe3VdbeAddOp
(
v
, 
a
[0],á[1],á[2]);

2048 
	`sqlôeFªe
(
pLevñ
->
aInLo›
);

2050 if–
pLevñ
->
iLe·Joö
 ){

2051 
addr
;

2052 
addr
 = 
	`sqlôe3VdbeAddOp
(
v
, 
OP_IfMemPos
, 
pLevñ
->
iLe·Joö
, 0);

2053 
	`sqlôe3VdbeAddOp
(
v
, 
OP_NuŒRow
, 
pTabLi°
->
a
[
i
].
iCurs‹
, 0);

2054 if–
pLevñ
->
iIdxCur
>=0 ){

2055 
	`sqlôe3VdbeAddOp
(
v
, 
OP_NuŒRow
, 
pLevñ
->
iIdxCur
, 0);

2057 
	`sqlôe3VdbeAddOp
(
v
, 
OP_GŸo
, 0, 
pLevñ
->
t›
);

2058 
	`sqlôe3VdbeJumpHîe
(
v
, 
addr
);

2065 
	`sqlôe3VdbeResﬁveLabñ
(
v
, 
pWInfo
->
iBªak
);

2069 
i
=0, 
pLevñ
=
pWInfo
->
a
; i<
pTabLi°
->
nSrc
; i++,ÖLevel++){

2070 
SrcLi°_ôem
 *
pTabIãm
 = &
pTabLi°
->
a
[
pLevñ
->
iFrom
];

2071 
TabÀ
 *
pTab
 = 
pTabIãm
->pTab;

2072 
	`as£π
–
pTab
!=0 );

2073 if–
pTab
->
isTønsõ¡
 ||ÖTab->
pSñe˘
 ) ;

2074 if–(
pLevñ
->
Êags
 & 
WHERE_IDX_ONLY
)==0 ){

2075 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Clo£
, 
pTabIãm
->
iCurs‹
, 0);

2077 if–
pLevñ
->
pIdx
!=0 ){

2078 
	`sqlôe3VdbeAddOp
(
v
, 
OP_Clo£
, 
pLevñ
->
iIdxCur
, 0);

2090 if–
pLevñ
->
Êags
 & 
WHERE_IDX_ONLY
 ){

2091 
k
, 
j
, 
œ°
;

2092 
VdbeOp
 *
pOp
;

2093 
Index
 *
pIdx
 = 
pLevñ
->pIdx;

2095 
	`as£π
–
pIdx
!=0 );

2096 
pOp
 = 
	`sqlôe3VdbeGëOp
(
v
, 
pWInfo
->
iT›
);

2097 
œ°
 = 
	`sqlôe3VdbeCuºítAddr
(
v
);

2098 
k
=
pWInfo
->
iT›
; k<
œ°
; k++, 
pOp
++){

2099 if–
pOp
->
p1
!=
pLevñ
->
iTabCur
 ) ;

2100 if–
pOp
->
›code
==
OP_Cﬁumn
 ){

2101 
pOp
->
p1
 = 
pLevñ
->
iIdxCur
;

2102 
j
=0; j<
pIdx
->
nCﬁumn
; j++){

2103 if–
pOp
->
p2
==
pIdx
->
aiCﬁumn
[
j
] ){

2104 
pOp
->
p2
 = 
j
;

2108 }if–
pOp
->
›code
==
OP_Rowid
 ){

2109 
pOp
->
p1
 = 
pLevñ
->
iIdxCur
;

2110 
pOp
->
›code
 = 
OP_IdxRowid
;

2111 }if–
pOp
->
›code
==
OP_NuŒRow
 ){

2112 
pOp
->
›code
 = 
OP_No›
;

2120 
	`sqlôeFªe
(
pWInfo
);

2122 
	}
}

	@/usr/include/assert.h

24 #ifdef 
_ASSERT_H


26 #unde‡
_ASSERT_H


27 #unde‡
as£π


28 #unde‡
__ASSERT_VOID_CAST


30 #ifdef 
__USE_GNU


31 #unde‡
as£π_≥º‹


36 
	#_ASSERT_H
 1

	)

37 
	~<„©uªs.h
>

39 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

40 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

42 
	#__ASSERT_VOID_CAST
 ()

	)

50 #ifdef 
NDEBUG


52 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

60 #ifdef 
__USE_GNU


61 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

66 #i‚de‡
_ASSERT_H_DECLS


67 
	#_ASSERT_H_DECLS


	)

68 
__BEGIN_DECLS


71 
	$__as£π_Áû
 (
__c⁄°
 *
__as£πi⁄
, __c⁄° *
__fûe
,

72 
__löe
, 
__c⁄°
 *
__fun˘i⁄
)

73 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

76 
	$__as£π_≥º‹_Áû
 (
__î∫um
, 
__c⁄°
 *
__fûe
,

77 
__löe
,

78 
__c⁄°
 *
__fun˘i⁄
)

79 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

84 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

85 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

88 
__END_DECLS


91 
	#as£π
(
ex¥
) \

92 ((
ex¥
) \

93 ? 
	`__ASSERT_VOID_CAST
 (0) \

94 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

96 #ifdef 
__USE_GNU


97 
	#as£π_≥º‹
(
î∫um
) \

98 (!(
î∫um
) \

99 ? 
	`__ASSERT_VOID_CAST
 (0) \

100 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

108 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

109 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

111 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

112 
	#__ASSERT_FUNCTION
 
__func__


	)

114 
	#__ASSERT_FUNCTION
 ((
__c⁄°
 *Ë0)

	)

	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
	`__©åibuã__
 ((
__c⁄°
));

88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

91 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

92 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

94 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

96 
__BEGIN_NAMESPACE_STD


102 
	`__ex˘y≥
 (
iß um
);

103 
	`__ex˘y≥
 (
ißÕha
);

104 
	`__ex˘y≥
 (
is˙ål
);

105 
	`__ex˘y≥
 (
isdigô
);

106 
	`__ex˘y≥
 (
i¶owî
);

107 
	`__ex˘y≥
 (
isgøph
);

108 
	`__ex˘y≥
 (
i•röt
);

109 
	`__ex˘y≥
 (
i•un˘
);

110 
	`__ex˘y≥
 (
is•a˚
);

111 
	`__ex˘y≥
 (
isuµî
);

112 
	`__ex˘y≥
 (
isxdigô
);

116 
	$tﬁowî
 (
__c
Ë
__THROW
;

119 
	$touµî
 (
__c
Ë
__THROW
;

121 
__END_NAMESPACE_STD


125 #ifdef 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
	`__ex˘y≥
 (
isbœnk
);

130 
__END_NAMESPACE_C99


133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE
 && !deföed 
__˝lu•lus


173 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

174 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

175 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

176 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

177 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

178 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

179 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

180 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

181 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

182 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

183 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

185 #ifde‡
__USE_ISOC99


186 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

189 #ifde‡
__USE_EXTERN_INLINES


190 
__exã∫_ölöe
 

191 
__NTH
 (
	$tﬁowî
 (
__c
))

193  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

194 
	}
}

196 
__exã∫_ölöe
 

197 
__NTH
 (
	$touµî
 (
__c
))

199  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

200 
	}
}

203 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


204 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

205 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

208 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


209 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

210 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

212 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

213 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

219 #ifde‡
__USE_GNU


233 
	~<xloˇÀ.h
>

237 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

238 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

240 
	#__ex˘y≥_l
(
«me
) \

241 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

247 
__ex˘y≥_l
 (
iß um_l
);

248 
__ex˘y≥_l
 (
ißÕha_l
);

249 
__ex˘y≥_l
 (
is˙ål_l
);

250 
__ex˘y≥_l
 (
isdigô_l
);

251 
__ex˘y≥_l
 (
i¶owî_l
);

252 
__ex˘y≥_l
 (
isgøph_l
);

253 
__ex˘y≥_l
 (
i•röt_l
);

254 
__ex˘y≥_l
 (
i•un˘_l
);

255 
__ex˘y≥_l
 (
is•a˚_l
);

256 
__ex˘y≥_l
 (
isuµî_l
);

257 
__ex˘y≥_l
 (
isxdigô_l
);

259 
__ex˘y≥_l
 (
isbœnk_l
);

263 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

264 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

267 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

270 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


271 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

272 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

273 
	#__touµî_l
(
c
, 
loˇÀ
) \

274 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

275 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

276 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

280 #i‚de‡
__NO_CTYPE


281 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

282 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

283 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

284 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

285 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

286 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

287 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

288 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

289 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

290 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

291 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

293 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

295 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


296 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

297 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

300 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

301 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

302 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

303 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

304 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

305 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

306 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

307 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

308 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

309 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

310 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

312 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

314 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


315 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

316 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

323 
__END_DECLS


	@/usr/include/errno.h

23 #i‚def 
_ERRNO_H


27 #i‚def 
__√ed_Em©h


28 
	#_ERRNO_H
 1

	)

29 
	~<„©uªs.h
>

32 
	g__BEGIN_DECLS


36 
	~<bôs/î∫o.h
>

37 #unde‡
__√ed_Em©h


39 #ifdef 
_ERRNO_H


46 #i‚def 
î∫o


47 
î∫o
;

50 #ifde‡
__USE_GNU


55 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

59 
	g__END_DECLS


67 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


68 #i‚de‡
__îr‹_t_deföed


69 
	tîr‹_t
;

70 
	#__îr‹_t_deföed
 1

	)

72 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

24 #i‚def 
_FCNTL_H


25 
	#_FCNTL_H
 1

	)

27 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/f˙é.h
>

37 #ifde‡
__USE_XOPEN


38 
	~<sys/°©.h
>

41 #ifdef 
__USE_MISC


42 #i‚de‡
R_OK


45 
	#R_OK
 4

	)

46 
	#W_OK
 2

	)

47 
	#X_OK
 1

	)

48 
	#F_OK
 0

	)

53 #ifde‡
__USE_XOPEN


54 
	#SEEK_SET
 0

	)

55 
	#SEEK_CUR
 1

	)

56 
	#SEEK_END
 2

	)

59 #ifde‡
__USE_ATFILE


60 
	#AT_FDCWD
 -100

	)

63 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

64 
	#AT_REMOVEDIR
 0x200

	)

66 
	#AT_SYMLINK_FOLLOW
 0x400

	)

67 
	#AT_EACCESS
 0x200

	)

76 
f˙é
 (
__fd
, 
__cmd
, ...);

84 #i‚de‡
__USE_FILE_OFFSET64


85 
	$›í
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

87 #ifde‡
__REDIRECT


88 
	`__REDIRECT
 (
›í
, (
__c⁄°
 *
__fûe
, 
__oÊag
, ...), 
›í64
)

89 
	`__n⁄nuŒ
 ((1));

91 
	#›í
 
›í64


	)

94 #ifde‡
__USE_LARGEFILE64


95 
	$›í64
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

98 #ifde‡
__USE_ATFILE


108 #i‚de‡
__USE_FILE_OFFSET64


109 
	$›í©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

110 
	`__n⁄nuŒ
 ((2));

112 #ifde‡
__REDIRECT


113 
	`__REDIRECT
 (
›í©
, (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
,

114 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

116 
	#›í©
 
›í©64


	)

120 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

121 
	`__n⁄nuŒ
 ((2));

129 #i‚de‡
__USE_FILE_OFFSET64


130 
	$¸ót
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

132 #ifde‡
__REDIRECT


133 
	`__REDIRECT
 (
¸ót
, (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
),

134 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

136 
	#¸ót
 
¸ót64


	)

139 #ifde‡
__USE_LARGEFILE64


140 
	$¸ót64
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

143 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

144 && !
deföed
 
__USE_POSIX
))

153 
	#F_ULOCK
 0

	)

154 
	#F_LOCK
 1

	)

155 
	#F_TLOCK
 2

	)

156 
	#F_TEST
 3

	)

158 #i‚de‡
__USE_FILE_OFFSET64


159 
	`lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
);

161 #ifde‡
__REDIRECT


162 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

164 
	#lockf
 
lockf64


	)

167 #ifde‡
__USE_LARGEFILE64


168 
	`lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
);

172 #ifde‡
__USE_XOPEN2K


175 #i‚de‡
__USE_FILE_OFFSET64


176 
	$posix_Ádvi£
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
,

177 
__advi£
Ë
__THROW
;

179 #ifde‡
__REDIRECT_NTH


180 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

181 
__off64_t
 
__Àn
, 
__advi£
),

182 
posix_Ádvi£64
);

184 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

187 #ifde‡
__USE_LARGEFILE64


188 
	$posix_Ádvi£64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
,

189 
__advi£
Ë
__THROW
;

197 #i‚de‡
__USE_FILE_OFFSET64


198 
	`posix_ÁŒoˇã
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
);

200 #ifde‡
__REDIRECT


201 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

202 
__off64_t
 
__Àn
),

203 
posix_ÁŒoˇã64
);

205 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

208 #ifde‡
__USE_LARGEFILE64


209 
	`posix_ÁŒoˇã64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
);

215 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
 \

216 && 
deföed
 
__va_¨g_∑ck_Àn


217 
	~<bôs/f˙é2.h
>

220 
__END_DECLS


	@/usr/include/pthread.h

20 #i‚de‡
_PTHREAD_H


21 
	#_PTHREAD_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<ídün.h
>

25 
	~<sched.h
>

26 
	~<time.h
>

28 
	#__√ed_sig£t_t


	)

29 
	~<sig«l.h
>

30 
	~<bôs/±hªadty≥s.h
>

31 
	~<bôs/£tjmp.h
>

32 
	~<bôs/w‹dsize.h
>

38 
	mPTHREAD_CREATE_JOINABLE
,

39 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

40 
	mPTHREAD_CREATE_DETACHED


41 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

48 
	mPTHREAD_MUTEX_TIMED_NP
,

49 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

50 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

51 
	mPTHREAD_MUTEX_ADAPTIVE_NP


52 #ifde‡
__USE_UNIX98


54 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

55 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

56 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

57 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


59 #ifde‡
__USE_GNU


61 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


66 #ifde‡
__USE_GNU


70 
	mPTHREAD_MUTEX_STALLED_NP
,

71 
	mPTHREAD_MUTEX_ROBUST_NP


76 #ifde‡
__USE_UNIX98


80 
	mPTHREAD_PRIO_NONE
,

81 
	mPTHREAD_PRIO_INHERIT
,

82 
	mPTHREAD_PRIO_PROTECT


88 #i‡
__WORDSIZE
 == 64

89 
	#PTHREAD_MUTEX_INITIALIZER
 \

90 { { 0, 0, 0, 0, 0, 0, { 0, 0 } } }

	)

91 #ifde‡
__USE_GNU


92 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

93 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0, 0 } } }

	)

94 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0, 0 } } }

	)

96 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

97 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0, 0 } } }

	)

100 
	#PTHREAD_MUTEX_INITIALIZER
 \

101 { { 0, 0, 0, 0, 0, { 0 } } }

	)

102 #ifde‡
__USE_GNU


103 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0 } } }

	)

105 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0 } } }

	)

107 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

108 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0 } } }

	)

114 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


117 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

119 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

120 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


124 
	#PTHREAD_RWLOCK_INITIALIZER
 \

125 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

126 #ifde‡
__USE_GNU


127 #i‡
__WORDSIZE
 == 64

128 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

130 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

132 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


133 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

134 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

135 0, 0, 0, 0 } }

	)

137 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

138 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

139 0 } }

	)

149 
	mPTHREAD_INHERIT_SCHED
,

150 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

151 
	mPTHREAD_EXPLICIT_SCHED


152 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

159 
	mPTHREAD_SCOPE_SYSTEM
,

160 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

161 
	mPTHREAD_SCOPE_PROCESS


162 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

169 
	mPTHREAD_PROCESS_PRIVATE
,

170 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

171 
	mPTHREAD_PROCESS_SHARED


172 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

178 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

182 
	s_±hªad_˛ónup_buf„r


184 (*
	m__routöe
) (*);

185 *
	m__¨g
;

186 
	m__ˇn˚…y≥
;

187 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

193 
	mPTHREAD_CANCEL_ENABLE
,

194 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

195 
	mPTHREAD_CANCEL_DISABLE


196 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

200 
	mPTHREAD_CANCEL_DEFERRED
,

201 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

202 
	mPTHREAD_CANCEL_ASYNCHRONOUS


203 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

205 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

209 
	#PTHREAD_ONCE_INIT
 0

	)

212 #ifde‡
__USE_XOPEN2K


216 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

220 
__BEGIN_DECLS


225 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

226 
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

227 *(*
__°¨t_routöe
) (*),

228 *
__ª°ri˘
 
__¨g
Ë
__THROW
 
__n⁄nuŒ
 ((1, 3));

234 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

242 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

244 #ifde‡
__USE_GNU


247 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

255 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

256 
__c⁄°
 
time•ec
 *
__ab°ime
);

263 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

267 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

270 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
Ë
__THROW
;

278 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

281 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

282 
__THROW
 
	`__n⁄nuŒ
 ((1));

285 
	$±hªad_©å_gëdëach°©e
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

286 *
__dëach°©e
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

290 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

291 
__dëach°©e
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$±hªad_©å_gëgu¨dsize
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

297 
size_t
 *
__gu¨dsize
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

301 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

302 
size_t
 
__gu¨dsize
)

303 
__THROW
 
	`__n⁄nuŒ
 ((1));

307 
	$±hªad_©å_gësched∑øm
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


308 
__©å
,

309 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

310 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

313 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

314 
__c⁄°
 
sched_∑øm
 *
__ª°ri˘


315 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

318 
	$±hªad_©å_gëschedpﬁicy
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


319 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

320 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

323 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

324 
__THROW
 
	`__n⁄nuŒ
 ((1));

327 
	$±hªad_©å_gëöhîôsched
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


328 
__©å
, *
__ª°ri˘
 
__öhîô
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

333 
__öhîô
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

338 
	$±hªad_©å_gësc›e
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

339 *
__ª°ri˘
 
__sc›e
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

343 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

344 
__THROW
 
	`__n⁄nuŒ
 ((1));

347 
	$±hªad_©å_gë°ackaddr
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


348 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

349 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

355 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

356 *
__°ackaddr
)

357 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

360 
	$±hªad_©å_gë°acksize
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


361 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

367 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

368 
size_t
 
__°acksize
)

369 
__THROW
 
	`__n⁄nuŒ
 ((1));

371 #ifde‡
__USE_XOPEN2K


373 
	$±hªad_©å_gë°ack
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

374 **
__ª°ri˘
 
__°ackaddr
,

375 
size_t
 *
__ª°ri˘
 
__°acksize
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

381 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

382 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

385 #ifde‡
__USE_GNU


388 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

389 
size_t
 
__˝u£tsize
,

390 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

391 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

395 
	$±hªad_©å_gëafföôy_≈
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

396 
size_t
 
__˝u£tsize
,

397 
˝u_£t_t
 *
__˝u£t
)

398 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

404 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

405 
__THROW
 
	`__n⁄nuŒ
 ((2));

413 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

414 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

415 
__THROW
 
	`__n⁄nuŒ
 ((3));

418 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

419 *
__ª°ri˘
 
__pﬁicy
,

420 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

424 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

425 
__THROW
;

428 #ifde‡
__USE_UNIX98


430 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

433 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

436 #ifde‡
__USE_GNU


441 
	$±hªad_yõld
 (Ë
__THROW
;

446 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

447 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

448 
__THROW
 
	`__n⁄nuŒ
 ((3));

451 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

452 
˝u_£t_t
 *
__˝u£t
)

453 
__THROW
 
	`__n⁄nuŒ
 ((3));

466 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

467 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

478 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

482 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

485 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

490 
	`±hªad_ã°ˇn˚l
 ();

499 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

500 
__mask_was_ßved
;

501 } 
__ˇn˚l_jmp_buf
[1];

502 *
__∑d
[4];

503 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

506 #i‚de‡
__˛ónup_f˘_©åibuã


507 
	#__˛ónup_f˘_©åibuã


	)

512 
	s__±hªad_˛ónup_‰ame


514 (*
__ˇn˚l_routöe
) (*);

515 *
__ˇn˚l_¨g
;

516 
__do_ô
;

517 
__ˇn˚l_ty≥
;

520 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


521 #ifde‡
__˝lu•lus


523 ˛as†
	c__±hªad_˛ónup_˛ass


525 (*
__ˇn˚l_routöe
) (*);

526 *
__ˇn˚l_¨g
;

527 
__do_ô
;

528 
__ˇn˚l_ty≥
;

530 
public
:

531 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

532 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

533 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

534 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

535 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

536 &
__ˇn˚l_ty≥
); 
	}
}

537 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

547 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

549 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

553 
	#±hªad_˛ónup_p›
(
execuã
) \

554 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

555 } 0)

	)

557 #ifde‡
__USE_GNU


561 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

563 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

564 
__˛‰ame
.
	`__de„r
 ()

	)

569 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

570 
__˛‰ame
.
	`__ª°‹e
 (); \

571 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

572 } 0)

	)

579 
__exã∫_ölöe
 

580 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

582 i‡(
__‰ame
->
__do_ô
)

583 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

584 
	}
}

593 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

595 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

596 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

597 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

598 .
__do_ô
 = 1 };

	)

602 
	#±hªad_˛ónup_p›
(
execuã
) \

603 
__˛‰ame
.
__do_ô
 = (
execuã
); \

604 } 0)

	)

606 #ifde‡
__USE_GNU


610 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

612 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

613 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

614 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

615 .
__do_ô
 = 1 }; \

616 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

617 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

622 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

623 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

624 
__˛‰ame
.
__do_ô
 = (
execuã
); \

625 } 0)

	)

636 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

638 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

639 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

640 *
__ˇn˚l_¨g
 = (
¨g
); \

641 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) \

642 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

643 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

645 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

646 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

650 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

651 dÿ{

	)

652 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

653 
__˛ónup_f˘_©åibuã
;

657 
	#±hªad_˛ónup_p›
(
execuã
) \

659 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

660 i‡(
execuã
) \

661 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

662 } 0)

	)

663 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

664 
__˛ónup_f˘_©åibuã
;

666 #ifde‡
__USE_GNU


670 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

672 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

673 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

674 *
__ˇn˚l_¨g
 = (
¨g
); \

675 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) \

676 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

677 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

679 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

680 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

684 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

685 dÿ{

	)

686 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

687 
__˛ónup_f˘_©åibuã
;

692 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

694 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

695 i‡(
execuã
) \

696 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

697 
	}
} 0)

	)

698 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

699 
__˛ónup_f˘_©åibuã
;

703 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

704 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

705 #i‚de‡
SHARED


706 
	`__©åibuã__
 ((
__wók__
))

712 
__jmp_buf_èg
;

713 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROW
;

719 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

720 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx©å
)

721 
__THROW
 
	`__n⁄nuŒ
 ((1));

724 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1));

728 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

729 
__THROW
 
	`__n⁄nuŒ
 ((1));

732 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

733 
__THROW
 
	`__n⁄nuŒ
 ((1));

735 #ifde‡
__USE_XOPEN2K


737 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

738 
__c⁄°
 
time•ec
 *
__ª°ri˘


739 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

743 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

744 
__THROW
 
	`__n⁄nuŒ
 ((1));

747 #ifde‡
__USE_UNIX98


749 
	$±hªad_muãx_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx_t
 *

750 
__ª°ri˘
 
__muãx
,

751 *
__ª°ri˘
 
__¥io˚ûög
)

752 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

756 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

757 
__¥io˚ûög
,

758 *
__ª°ri˘
 
__ﬁd_˚ûög
)

759 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

763 #ifde‡
__USE_GNU


765 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

766 
__THROW
 
	`__n⁄nuŒ
 ((1));

774 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

775 
__THROW
 
	`__n⁄nuŒ
 ((1));

778 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

779 
__THROW
 
	`__n⁄nuŒ
 ((1));

782 
	$±hªad_muãx©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_muãx©å_t
 *

783 
__ª°ri˘
 
__©å
,

784 *
__ª°ri˘
 
__psh¨ed
)

785 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

788 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

789 
__psh¨ed
)

790 
__THROW
 
	`__n⁄nuŒ
 ((1));

792 #ifde‡
__USE_UNIX98


794 
	$±hªad_muãx©å_gëty≥
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__ª°ri˘


795 
__©å
, *
__ª°ri˘
 
__köd
)

796 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

801 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

802 
__THROW
 
	`__n⁄nuŒ
 ((1));

805 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (
__c⁄°
 
±hªad_muãx©å_t
 *

806 
__ª°ri˘
 
__©å
,

807 *
__ª°ri˘
 
__¥Ÿocﬁ
)

808 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

812 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

813 
__¥Ÿocﬁ
)

814 
__THROW
 
	`__n⁄nuŒ
 ((1));

817 
	$±hªad_muãx©å_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx©å_t
 *

818 
__ª°ri˘
 
__©å
,

819 *
__ª°ri˘
 
__¥io˚ûög
)

820 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

823 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

824 
__¥io˚ûög
)

825 
__THROW
 
	`__n⁄nuŒ
 ((1));

828 #ifde‡
__USE_GNU


830 
	$±hªad_muãx©å_gërobu°_≈
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

831 *
__robu°√ss
)

832 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

835 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

836 
__robu°√ss
)

837 
__THROW
 
	`__n⁄nuŒ
 ((1));

841 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


846 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

847 
__c⁄°
 
±hªad_rwlock©å_t
 *
__ª°ri˘


848 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

851 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

852 
__THROW
 
	`__n⁄nuŒ
 ((1));

855 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

856 
__THROW
 
	`__n⁄nuŒ
 ((1));

859 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

860 
__THROW
 
	`__n⁄nuŒ
 ((1));

862 #ifde‡
__USE_XOPEN2K


864 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

865 
__c⁄°
 
time•ec
 *
__ª°ri˘


866 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

870 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

871 
__THROW
 
	`__n⁄nuŒ
 ((1));

874 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

875 
__THROW
 
	`__n⁄nuŒ
 ((1));

877 #ifde‡
__USE_XOPEN2K


879 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

880 
__c⁄°
 
time•ec
 *
__ª°ri˘


881 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

885 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

886 
__THROW
 
	`__n⁄nuŒ
 ((1));

892 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

893 
__THROW
 
	`__n⁄nuŒ
 ((1));

896 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

897 
__THROW
 
	`__n⁄nuŒ
 ((1));

900 
	$±hªad_rwlock©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

901 
__ª°ri˘
 
__©å
,

902 *
__ª°ri˘
 
__psh¨ed
)

903 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

906 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

907 
__psh¨ed
)

908 
__THROW
 
	`__n⁄nuŒ
 ((1));

911 
	$±hªad_rwlock©å_gëköd_≈
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

912 
__ª°ri˘
 
__©å
,

913 *
__ª°ri˘
 
__¥ef
)

914 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

917 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

918 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

926 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

927 
__c⁄°
 
±hªad_c⁄d©å_t
 *
__ª°ri˘


928 
__c⁄d_©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

931 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

932 
__THROW
 
	`__n⁄nuŒ
 ((1));

935 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

936 
__THROW
 
	`__n⁄nuŒ
 ((1));

939 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

940 
__THROW
 
	`__n⁄nuŒ
 ((1));

947 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

948 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

949 
	`__n⁄nuŒ
 ((1, 2));

958 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

959 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

960 
__c⁄°
 
time•ec
 *
__ª°ri˘


961 
__ab°ime
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

966 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

967 
__THROW
 
	`__n⁄nuŒ
 ((1));

970 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

971 
__THROW
 
	`__n⁄nuŒ
 ((1));

974 
	$±hªad_c⁄d©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

975 
__ª°ri˘
 
__©å
,

976 *
__ª°ri˘
 
__psh¨ed
)

977 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

980 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

981 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

983 #ifde‡
__USE_XOPEN2K


985 
	$±hªad_c⁄d©å_gë˛ock
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

986 
__ª°ri˘
 
__©å
,

987 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

988 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

991 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

992 
__˛ockid_t
 
__˛ock_id
)

993 
__THROW
 
	`__n⁄nuŒ
 ((1));

997 #ifde‡
__USE_XOPEN2K


1002 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1003 
__THROW
 
	`__n⁄nuŒ
 ((1));

1006 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1007 
__THROW
 
	`__n⁄nuŒ
 ((1));

1010 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1011 
__THROW
 
	`__n⁄nuŒ
 ((1));

1014 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1015 
__THROW
 
	`__n⁄nuŒ
 ((1));

1018 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1));

1026 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1027 
__c⁄°
 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1028 
__©å
, 
__cou¡
)

1029 
__THROW
 
	`__n⁄nuŒ
 ((1));

1032 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1033 
__THROW
 
	`__n⁄nuŒ
 ((1));

1036 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1037 
__THROW
 
	`__n⁄nuŒ
 ((1));

1041 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1042 
__THROW
 
	`__n⁄nuŒ
 ((1));

1045 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1046 
__THROW
 
	`__n⁄nuŒ
 ((1));

1049 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (
__c⁄°
 
±hªad_b¨rõøâr_t
 *

1050 
__ª°ri˘
 
__©å
,

1051 *
__ª°ri˘
 
__psh¨ed
)

1052 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1055 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1056 
__psh¨ed
)

1057 
__THROW
 
	`__n⁄nuŒ
 ((1));

1069 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1070 (*
__de°r_fun˘i⁄
) (*))

1071 
__THROW
 
	`__n⁄nuŒ
 ((1));

1074 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1077 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1080 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1081 
__c⁄°
 *
__poöãr
Ë
__THROW
 ;

1084 #ifde‡
__USE_XOPEN2K


1086 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1087 
__˛ockid_t
 *
__˛ock_id
)

1088 
__THROW
 
	`__n⁄nuŒ
 ((2));

1103 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1104 (*
__∑ª¡
) (),

1105 (*
__chûd
Ë()Ë
__THROW
;

1108 #ifde‡
__USE_EXTERN_INLINES


1110 
__exã∫_ölöe
 

1111 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1113  
__thªad1
 =
__thªad2
;

1114 
	}
}

1117 
	g__END_DECLS


	@/usr/include/pwd.h

23 #i‚def 
_PWD_H


24 
	#_PWD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ty≥s.h
>

32 
	#__√ed_size_t


	)

33 
	~<°ddef.h
>

35 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


38 #i‚de‡
__gid_t_deföed


39 
__gid_t
 
	tgid_t
;

40 
	#__gid_t_deföed


	)

43 #i‚de‡
__uid_t_deföed


44 
__uid_t
 
	tuid_t
;

45 
	#__uid_t_deföed


	)

50 
	s∑sswd


52 *
	mpw_«me
;

53 *
	mpw_∑sswd
;

54 
__uid_t
 
	mpw_uid
;

55 
__gid_t
 
	mpw_gid
;

56 *
	mpw_gecos
;

57 *
	mpw_dú
;

58 *
	mpw_shñl
;

62 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_GNU


63 
	#__√ed_FILE


	)

64 
	~<°dio.h
>

68 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


73 
£çwít
 ();

79 
ídpwít
 ();

85 
∑sswd
 *
gëpwít
 ();

88 #ifdef 
__USE_SVID


95 
∑sswd
 *
fgëpwít
 (
FILE
 *
__°ªam
);

103 
puçwít
 (
__c⁄°
 
∑sswd
 *
__ª°ri˘
 
__p
,

104 
FILE
 *
__ª°ri˘
 
__f
);

111 
∑sswd
 *
gëpwuid
 (
__uid_t
 
__uid
);

117 
∑sswd
 *
gëpw«m
 (
__c⁄°
 *
__«me
);

119 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


121 #ifde‡
__USE_MISC


124 
	#NSS_BUFLEN_PASSWD
 1024

	)

135 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


140 
gëpwít_r
 (
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

141 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

142 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

145 
gëpwuid_r
 (
__uid_t
 
__uid
,

146 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

147 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

148 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

150 
gëpw«m_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

151 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

152 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

153 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

156 #ifdef 
__USE_SVID


164 
fgëpwít_r
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

165 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

166 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

167 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

172 #ifde‡
__USE_GNU


181 
gëpw
 (
__uid_t
 
__uid
, *
__buf„r
);

184 
	g__END_DECLS


	@/usr/include/sched.h

20 #i‚def 
_SCHED_H


21 
	#_SCHED_H
 1

	)

23 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

31 
	#__√ed_time•ec


	)

32 
	~<time.h
>

35 
	~<bôs/sched.h
>

37 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

40 
__BEGIN_DECLS


43 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

44 
__THROW
;

47 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

50 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

51 
__c⁄°
 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

54 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

57 
	$sched_yõld
 (Ë
__THROW
;

60 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

63 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

66 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

69 #ifde‡
__USE_GNU


71 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

72 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

73 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

74 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

75 
˝u£ç
)

	)

76 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

77 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

79 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

80 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

81 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

82 
˝u£ç
)

	)

83 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

84 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

86 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

87 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

88 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

89 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

91 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

92 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

93 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

94 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

95 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

96 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

97 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

98 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

99 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

101 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

104 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

105 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

106 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

110 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

111 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

114 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

115 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

118 
__END_DECLS


	@/usr/include/signal.h

23 #i‚def 
_SIGNAL_H


25 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


26 
	#_SIGNAL_H


	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


33 
	~<bôs/sig£t.h
>

37 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


38 #i‚de‡
__sig_©omic_t_deföed


39 
	#__sig_©omic_t_deföed


	)

40 
__BEGIN_NAMESPACE_STD


41 
__sig_©omic_t
 
	tsig_©omic_t
;

42 
	g__END_NAMESPACE_STD


44 #unde‡
__√ed_sig_©omic_t


47 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

48 #i‚de‡
__sig£t_t_deföed


49 
	#__sig£t_t_deföed


	)

50 
__sig£t_t
 
	tsig£t_t
;

52 #unde‡
__√ed_sig£t_t


55 #ifde‡
_SIGNAL_H


57 
	~<bôs/ty≥s.h
>

58 
	~<bôs/signum.h
>

60 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__pid_t_deföed


62 
__pid_t
 
	tpid_t
;

63 
	#__pid_t_deföed


	)

65 #ifde‡
__USE_XOPEN


67 #i‚de‡
__uid_t_deföed


68 
__uid_t
 
	tuid_t
;

69 
	#__uid_t_deföed


	)

75 (*
	t__sigh™dÀr_t
) ();

80 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

81 
__THROW
;

82 #ifde‡
__USE_GNU


83 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

84 
__THROW
;

90 
__BEGIN_NAMESPACE_STD


91 #ifde‡
__USE_BSD


92 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

93 
__THROW
;

96 #ifde‡
__REDIRECT_NTH


97 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

98 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

99 
__sysv_sig«l
);

101 
	#sig«l
 
__sysv_sig«l


	)

104 
__END_NAMESPACE_STD


106 #ifde‡
__USE_XOPEN


109 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

110 
__THROW
;

116 #ifde‡
__USE_POSIX


117 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

120 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


124 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

127 
__BEGIN_NAMESPACE_STD


129 
	$øi£
 (
__sig
Ë
__THROW
;

130 
__END_NAMESPACE_STD


132 #ifde‡
__USE_SVID


134 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

135 
__THROW
;

136 
	$gsig«l
 (
__sig
Ë
__THROW
;

139 #ifde‡
__USE_MISC


141 
	`psig«l
 (
__sig
, 
__c⁄°
 *
__s
);

153 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

155 #ifde‡
__FAVOR_BSD


158 
	$sig∑u£
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

160 #ifde‡
__USE_XOPEN


161 #ifde‡
__GNUC__


162 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

165 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

171 #ifde‡
__USE_BSD


178 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

181 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

184 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

187 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

191 #ifde‡
__USE_MISC


192 
	#NSIG
 
_NSIG


	)

195 #ifde‡
__USE_GNU


196 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

200 #ifde‡
__USE_BSD


201 
__sigh™dÀr_t
 
	tsig_t
;

204 #ifde‡
__USE_POSIX


206 #ifde‡
__USE_POSIX199309


208 
	#__√ed_time•ec


	)

209 
	~<time.h
>

212 
	~<bôs/sigöfo.h
>

216 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

219 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

222 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

228 
	$sigismembî
 (
__c⁄°
 
sig£t_t
 *
__£t
, 
__signo
)

229 
__THROW
 
	`__n⁄nuŒ
 ((1));

231 #ifde‡
__USE_GNU


233 
	$sigi£m±y£t
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

236 
	$sig™d£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

237 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

240 
	$sig‹£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

241 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

246 
	~<bôs/siga˘i⁄.h
>

249 
	$sig¥ocmask
 (
__how
, 
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

250 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

257 
	$sigsu•íd
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

260 
	$siga˘i⁄
 (
__sig
, 
__c⁄°
 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

261 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

264 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

271 
	$sigwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

272 
	`__n⁄nuŒ
 ((1, 2));

274 #ifde‡
__USE_POSIX199309


279 
	$sigwaôöfo
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

280 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

287 
	$sigtimedwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

288 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

289 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
)

290 
	`__n⁄nuŒ
 ((1));

294 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, 
__c⁄°
 
sigvÆ
 
__vÆ
)

295 
__THROW
;

300 #ifde‡
__USE_BSD


304 
__c⁄°
 *__c⁄° 
_sys_sigli°
[
_NSIG
];

305 
__c⁄°
 *__c⁄° 
sys_sigli°
[
_NSIG
];

308 
	ssigvec


310 
__sigh™dÀr_t
 
sv_h™dÀr
;

311 
sv_mask
;

313 
sv_Êags
;

314 
	#sv_⁄°ack
 
sv_Êags


	)

318 
	#SV_ONSTACK
 (1 << 0)

	)

319 
	#SV_INTERRUPT
 (1 << 1)

	)

320 
	#SV_RESETHAND
 (1 << 2)

	)

328 
	$sigvec
 (
__sig
, 
__c⁄°
 
sigvec
 *
__vec
,

329 
sigvec
 *
__ovec
Ë
__THROW
;

333 
	~<bôs/sigc⁄ãxt.h
>

336 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

341 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


342 
	#__√ed_size_t


	)

343 
	~<°ddef.h
>

348 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

350 
	~<bôs/sig°ack.h
>

351 #ifde‡
__USE_XOPEN


353 
	~<sys/uc⁄ãxt.h
>

359 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

360 
__THROW
 
__©åibuã_dïªˇãd__
;

364 
	$sigÆt°ack
 (
__c⁄°
 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

365 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

369 #ifde‡
__USE_XOPEN_EXTENDED


373 
	$sighﬁd
 (
__sig
Ë
__THROW
;

376 
	$sigªl£
 (
__sig
Ë
__THROW
;

379 
	$sigign‹e
 (
__sig
Ë
__THROW
;

382 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

385 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


388 
	~<bôs/±hªadty≥s.h
>

389 
	~<bôs/sigthªad.h
>

396 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

398 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

402 
__END_DECLS


	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #ifde‡
__USE_XOPEN


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

89 
__BEGIN_NAMESPACE_STD


90 #i‚de‡
__USE_FILE_OFFSET64


91 
_G_Âos_t
 
	tÂos_t
;

93 
_G_Âos64_t
 
	tÂos_t
;

95 
__END_NAMESPACE_STD


96 #ifde‡
__USE_LARGEFILE64


97 
_G_Âos64_t
 
	tÂos64_t
;

101 
	#_IOFBF
 0

	)

102 
	#_IOLBF
 1

	)

103 
	#_IONBF
 2

	)

107 #i‚de‡
BUFSIZ


108 
	#BUFSIZ
 
_IO_BUFSIZ


	)

114 #i‚de‡
EOF


115 
	#EOF
 (-1)

	)

121 
	#SEEK_SET
 0

	)

122 
	#SEEK_CUR
 1

	)

123 
	#SEEK_END
 2

	)

126 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


128 
	#P_tmpdú
 "/tmp"

	)

141 
	~<bôs/°dio_lim.h
>

145 
_IO_FILE
 *
°dö
;

146 
_IO_FILE
 *
°dout
;

147 
_IO_FILE
 *
°dîr
;

149 
	#°dö
 
°dö


	)

150 
	#°dout
 
°dout


	)

151 
	#°dîr
 
°dîr


	)

153 
__BEGIN_NAMESPACE_STD


155 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

157 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

158 
__END_NAMESPACE_STD


160 #ifde‡
__USE_ATFILE


162 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

163 
__c⁄°
 *
__√w
Ë
__THROW
;

166 
__BEGIN_NAMESPACE_STD


171 #i‚de‡
__USE_FILE_OFFSET64


172 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

174 #ifde‡
__REDIRECT


175 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

177 
	#tmpfûe
 
tmpfûe64


	)

181 #ifde‡
__USE_LARGEFILE64


182 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

186 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

187 
__END_NAMESPACE_STD


189 #ifde‡
__USE_MISC


192 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

196 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


204 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

205 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

209 
__BEGIN_NAMESPACE_STD


214 
	`f˛o£
 (
FILE
 *
__°ªam
);

219 
	`fÊush
 (
FILE
 *
__°ªam
);

220 
__END_NAMESPACE_STD


222 #ifde‡
__USE_MISC


229 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

232 #ifde‡
__USE_GNU


239 
	`f˛o£Æl
 ();

243 
__BEGIN_NAMESPACE_STD


244 #i‚de‡
__USE_FILE_OFFSET64


249 
FILE
 *
	$f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

250 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

255 
FILE
 *
	$‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

256 
__c⁄°
 *
__ª°ri˘
 
__modes
,

257 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

259 #ifde‡
__REDIRECT


260 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

261 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
)

262 
__wur
;

263 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

264 
__c⁄°
 *
__ª°ri˘
 
__modes
,

265 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

266 
__wur
;

268 
	#f›í
 
f›í64


	)

269 
	#‰e›í
 
‰e›í64


	)

272 
__END_NAMESPACE_STD


273 #ifde‡
__USE_LARGEFILE64


274 
FILE
 *
	$f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

275 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

276 
FILE
 *
	$‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

277 
__c⁄°
 *
__ª°ri˘
 
__modes
,

278 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

281 #ifdef 
__USE_POSIX


283 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
 
__wur
;

286 #ifdef 
__USE_GNU


289 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

290 
__c⁄°
 *
__ª°ri˘
 
__modes
,

291 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

294 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
)

295 
__THROW
 
__wur
;

300 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

304 
__BEGIN_NAMESPACE_STD


307 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

311 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

312 
__modes
, 
size_t
 
__n
Ë
__THROW
;

313 
__END_NAMESPACE_STD


315 #ifdef 
__USE_BSD


318 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

319 
size_t
 
__size
Ë
__THROW
;

322 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

326 
__BEGIN_NAMESPACE_STD


331 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

332 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

337 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

339 
	$•rötf
 (*
__ª°ri˘
 
__s
,

340 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

346 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

347 
_G_va_li°
 
__¨g
);

352 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

354 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

355 
_G_va_li°
 
__¨g
Ë
__THROW
;

356 
__END_NAMESPACE_STD


358 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


359 
__BEGIN_NAMESPACE_C99


361 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

362 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

363 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

365 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

366 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

367 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

368 
__END_NAMESPACE_C99


371 #ifde‡
__USE_GNU


374 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

375 
_G_va_li°
 
__¨g
)

376 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

377 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

378 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

379 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

380 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

381 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

382 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

390 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

391 
_G_va_li°
 
__¨g
)

392 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

393 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

394 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

398 
__BEGIN_NAMESPACE_STD


403 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

404 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

409 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

411 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

412 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

414 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

415 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

416 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

417 #ifde‡
__REDIRECT


421 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

422 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

423 
__isoc99_fsˇnf
Ë
__wur
;

424 
	`__REDIRECT
 (
sˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

425 
__isoc99_sˇnf
Ë
__wur
;

426 
	`__REDIRECT
 (
ssˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__s
,

427 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

428 
__isoc99_ssˇnf
Ë
__THROW
;

430 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

431 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

432 
	$__isoc99_sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$__isoc99_ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

434 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

435 
	#fsˇnf
 
__isoc99_fsˇnf


	)

436 
	#sˇnf
 
__isoc99_sˇnf


	)

437 
	#ssˇnf
 
__isoc99_ssˇnf


	)

441 
__END_NAMESPACE_STD


443 #ifdef 
__USE_ISOC99


444 
__BEGIN_NAMESPACE_C99


449 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

450 
_G_va_li°
 
__¨g
)

451 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

457 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

458 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

461 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

462 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

463 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

465 #i‡!
deföed
 
__USE_GNU
 \

466 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

467 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

468 #ifde‡
__REDIRECT


472 
	`__REDIRECT
 (
vfsˇnf
,

473 (
FILE
 *
__ª°ri˘
 
__s
,

474 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

475 
__isoc99_vfsˇnf
)

476 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

477 
	`__REDIRECT
 (
vsˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

478 
_G_va_li°
 
__¨g
), 
__isoc99_vfsˇnf
)

479 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

480 
	`__REDIRECT
 (
vssˇnf
,

481 (
__c⁄°
 *
__ª°ri˘
 
__s
,

482 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

483 
__isoc99_vssˇnf
)

484 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

486 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

487 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

488 
_G_va_li°
 
__¨g
Ë
__wur
;

489 
	$__isoc99_vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

490 
_G_va_li°
 
__¨g
Ë
__wur
;

491 
	$__isoc99_vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

492 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

493 
_G_va_li°
 
__¨g
Ë
__THROW
;

494 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

495 
	#vsˇnf
 
__isoc99_vsˇnf


	)

496 
	#vssˇnf
 
__isoc99_vssˇnf


	)

500 
__END_NAMESPACE_C99


504 
__BEGIN_NAMESPACE_STD


509 
	`fgëc
 (
FILE
 *
__°ªam
);

510 
	`gëc
 (
FILE
 *
__°ªam
);

516 
	`gëch¨
 ();

517 
__END_NAMESPACE_STD


521 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

523 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


528 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

529 
	`gëch¨_u∆ocked
 ();

532 #ifde‡
__USE_MISC


539 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

543 
__BEGIN_NAMESPACE_STD


551 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

552 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

558 
	`putch¨
 (
__c
);

559 
__END_NAMESPACE_STD


563 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

565 #ifde‡
__USE_MISC


572 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

575 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


580 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

581 
	`putch¨_u∆ocked
 (
__c
);

585 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

586 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

588 
	`gëw
 (
FILE
 *
__°ªam
);

591 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

595 
__BEGIN_NAMESPACE_STD


600 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

601 
__wur
;

608 *
	$gës
 (*
__s
Ë
__wur
;

609 
__END_NAMESPACE_STD


611 #ifde‡
__USE_GNU


618 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

619 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

623 #ifdef 
__USE_GNU


634 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

635 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

636 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

637 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

638 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

639 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

647 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

648 
size_t
 *
__ª°ri˘
 
__n
,

649 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

653 
__BEGIN_NAMESPACE_STD


658 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

664 
	`puts
 (
__c⁄°
 *
__s
);

671 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

678 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

679 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
size_t
 
	$fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

685 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
Ë
__wur
;

686 
__END_NAMESPACE_STD


688 #ifde‡
__USE_GNU


695 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

696 
FILE
 *
__ª°ri˘
 
__°ªam
);

699 #ifde‡
__USE_MISC


706 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

707 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

708 
size_t
 
	$fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

709 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

713 
__BEGIN_NAMESPACE_STD


718 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

723 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

728 
	`ªwöd
 (
FILE
 *
__°ªam
);

729 
__END_NAMESPACE_STD


736 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


737 #i‚de‡
__USE_FILE_OFFSET64


742 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

747 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

749 #ifde‡
__REDIRECT


750 
	`__REDIRECT
 (
f£eko
,

751 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

752 
f£eko64
);

753 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

755 
	#f£eko
 
f£eko64


	)

756 
	#·ñlo
 
·ñlo64


	)

761 
__BEGIN_NAMESPACE_STD


762 #i‚de‡
__USE_FILE_OFFSET64


767 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

772 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

774 #ifde‡
__REDIRECT


775 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

776 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

777 
	`__REDIRECT
 (
f£ços
,

778 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

780 
	#fgëpos
 
fgëpos64


	)

781 
	#f£ços
 
f£ços64


	)

784 
__END_NAMESPACE_STD


786 #ifde‡
__USE_LARGEFILE64


787 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

788 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

789 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

790 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

793 
__BEGIN_NAMESPACE_STD


795 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

797 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

799 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

800 
__END_NAMESPACE_STD


802 #ifde‡
__USE_MISC


804 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

805 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

806 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

810 
__BEGIN_NAMESPACE_STD


815 
	`≥º‹
 (
__c⁄°
 *
__s
);

816 
__END_NAMESPACE_STD


822 
	~<bôs/sys_îæi°.h
>

825 #ifdef 
__USE_POSIX


827 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 #ifde‡
__USE_MISC


832 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

836 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

837 
deföed
 
__USE_MISC
)

842 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

848 
	`p˛o£
 (
FILE
 *
__°ªam
);

852 #ifdef 
__USE_POSIX


854 *
	$˘îmid
 (*
__s
Ë
__THROW
;

858 #ifde‡
__USE_XOPEN


860 *
	`cu£rid
 (*
__s
);

864 #ifdef 
__USE_GNU


865 
ob°ack
;

868 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

869 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

870 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

871 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

872 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

873 
_G_va_li°
 
__¨gs
)

874 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

878 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


882 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

886 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

889 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

892 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


896 
	#__√ed_gë›t


	)

897 
	~<gë›t.h
>

902 #ifde‡
__USE_EXTERN_INLINES


903 
	~<bôs/°dio.h
>

905 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


906 
	~<bôs/°dio2.h
>

908 #ifde‡
__LDBL_COMPAT


909 
	~<bôs/°dio-ldbl.h
>

912 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 ({ uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; } 
__u
; \

53 
__u
.
__ö
 = (
°©us
); __u.
__i
; }))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
(
	`__WAIT_INT
(°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
(
	`__WAIT_INT
(°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
(
	`__WAIT_INT
(°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
(
	`__WAIT_INT
(°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
(
	`__WAIT_INT
(°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
(
	`__WAIT_INT
(°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
(
	`__WAIT_INT
(°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exã∫_ölöe
 

279 
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281  
	`°πod
 (
__≈å
, (**Ë
NULL
);

282 
	}
}

283 
__exã∫_ölöe
 

284 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287 
	}
}

288 
__exã∫_ölöe
 

289 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exãnsi⁄__
 
__exã∫_ölöe
 

298 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

314 
	$a64l
 (
__c⁄°
 *
__s
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$øndom
 (Ë
__THROW
;

330 
	$§™dom
 (
__£ed
Ë
__THROW
;

336 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351 
öt32_t
 *
Âå
;

352 
öt32_t
 *
Ωå
;

353 
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357 
öt32_t
 *
íd_±r
;

360 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

361 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

367 
size_t
 
__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

373 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$ønd
 (Ë
__THROW
;

382 
	$§™d
 (
__£ed
Ë
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


395 
	$dønd48
 (Ë
__THROW
;

396 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

399 
	$Ã™d48
 (Ë
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__n⁄nuŒ
 ((1));

404 
	$mønd48
 (Ë
__THROW
;

405 
	$jønd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n⁄nuŒ
 ((1));

409 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

412 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

429 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

432 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

435 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

436 *
__ª°ri˘
 
__ªsu…
)

437 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

445 *
__ª°ri˘
 
__ªsu…
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

449 *
__ª°ri˘
 
__ªsu…
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

473 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

474 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479 
__BEGIN_NAMESPACE_STD


485 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

488 
	$‰ì
 (*
__±r
Ë
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


502 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

505 #ifde‡
__USE_XOPEN2K


507 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

508 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

511 
__BEGIN_NAMESPACE_STD


513 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

517 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

518 
__END_NAMESPACE_STD


520 #ifdef 
__USE_MISC


523 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

524 
__THROW
 
	`__n⁄nuŒ
 ((1));

527 
__BEGIN_NAMESPACE_STD


531 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

532 
__END_NAMESPACE_STD


534 #ifde‡
__USE_ISOC99


535 
__BEGIN_NAMESPACE_C99


538 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

539 
__END_NAMESPACE_C99


543 
__BEGIN_NAMESPACE_STD


545 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

546 
__END_NAMESPACE_STD


550 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

551 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

553 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


557 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

560 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


563 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

564 
__THROW
 
	`__n⁄nuŒ
 ((2));

567 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
;

570 #ifdef 
__USE_MISC


574 
	$˛óªnv
 (Ë
__THROW
;

578 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


583 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

593 #i‚de‡
__USE_FILE_OFFSET64


594 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

596 #ifde‡
__REDIRECT


597 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

598 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

600 
	#mk°emp
 
mk°emp64


	)

603 #ifde‡
__USE_LARGEFILE64


604 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

608 #ifde‡
__USE_BSD


614 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

617 #ifde‡
__USE_GNU


624 #i‚de‡
__USE_FILE_OFFSET64


625 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

627 #ifde‡
__REDIRECT


628 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

629 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

631 
	#mko°emp
 
mko°emp64


	)

634 #ifde‡
__USE_LARGEFILE64


635 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

640 
__BEGIN_NAMESPACE_STD


645 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

646 
__END_NAMESPACE_STD


649 #ifdef 
__USE_GNU


652 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

653 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

656 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


662 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

663 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

668 #i‚de‡
__COMPAR_FN_T


669 
	#__COMPAR_FN_T


	)

670 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

672 #ifdef 
__USE_GNU


673 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

677 
__BEGIN_NAMESPACE_STD


680 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

681 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

682 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

686 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

687 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

691 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

692 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

693 
__END_NAMESPACE_STD


695 #ifde‡
__USE_ISOC99


696 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

697 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

701 
__BEGIN_NAMESPACE_STD


705 
div_t
 
	$div
 (
__numî
, 
__díom
)

706 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

707 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

708 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

709 
__END_NAMESPACE_STD


711 #ifde‡
__USE_ISOC99


712 
__BEGIN_NAMESPACE_C99


713 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

714 
__díom
)

715 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

716 
__END_NAMESPACE_C99


720 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


727 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

728 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

733 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

734 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

739 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

740 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

743 #ifde‡
__USE_MISC


745 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

746 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

747 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

748 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

749 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

750 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

751 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

752 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

757 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

758 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

759 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

760 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

761 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

762 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

764 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

765 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

766 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

767 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

768 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

769 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

770 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

771 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

776 
__BEGIN_NAMESPACE_STD


779 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

782 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

783 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

786 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

790 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

791 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

793 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

794 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

795 
__THROW
;

796 
__END_NAMESPACE_STD


799 #ifde‡
__USE_SVID


804 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

808 #ifde‡
__USE_XOPEN_EXTENDED


815 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

816 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

817 **
__ª°ri˘
 
__vÆuï
)

818 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

822 #ifde‡
__USE_XOPEN


824 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

830 #ifde‡
__USE_XOPEN2K


832 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

835 #ifde‡
__USE_XOPEN


840 
	$gø¡±
 (
__fd
Ë
__THROW
;

844 
	$u∆ock±
 (
__fd
Ë
__THROW
;

849 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

852 #ifde‡
__USE_GNU


856 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

857 
__THROW
 
	`__n⁄nuŒ
 ((2));

860 
	`gë±
 ();

863 #ifde‡
__USE_BSD


867 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

868 
__THROW
 
	`__n⁄nuŒ
 ((1));

873 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


874 
	~<bôs/°dlib.h
>

876 #ifde‡
__LDBL_COMPAT


877 
	~<bôs/°dlib-ldbl.h
>

881 #unde‡
__√ed_mÆloc_™d_ˇŒoc


883 
__END_DECLS


	@/usr/include/string.h

23 #i‚def 
_STRING_H


24 
	#_STRING_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 
__BEGIN_NAMESPACE_STD


38 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

39 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

40 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

43 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

44 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

45 
__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


51 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

52 
__c
, 
size_t
 
__n
)

53 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

57 
__BEGIN_NAMESPACE_STD


59 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

62 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

63 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

66 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

67 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

68 
__END_NAMESPACE_STD


70 #ifde‡
__USE_GNU


73 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

74 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

82 
__BEGIN_NAMESPACE_STD


84 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

85 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

87 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

88 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

89 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

92 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

93 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

95 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

96 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

99 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

100 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

102 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

103 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

106 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

107 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

109 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

110 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

111 
__THROW
 
	`__n⁄nuŒ
 ((2));

112 
__END_NAMESPACE_STD


114 #ifde‡
__USE_GNU


118 
	~<xloˇÀ.h
>

121 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

122 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

124 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

125 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

128 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


130 *
	$°rdup
 (
__c⁄°
 *
__s
)

131 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

137 #i‡
deföed
 
__USE_GNU


138 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

139 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

142 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


144 
	#°rdu∑
(
s
) \

145 (
__exãnsi⁄__
 \

147 
__c⁄°
 *
__ﬁd
 = (
s
); \

148 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

149 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

150 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

151 
	}
}))

	)

154 
	#°∫du∑
(
s
, 
n
) \

155 (
__exãnsi⁄__
 \

157 
__c⁄°
 *
__ﬁd
 = (
s
); \

158 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

159 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

160 
__√w
[
__Àn
] = '\0'; \

161 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

162 }))

	)

165 
__BEGIN_NAMESPACE_STD


167 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

168 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

170 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

171 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

172 
__END_NAMESPACE_STD


174 #ifde‡
__USE_GNU


177 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

178 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

181 
__BEGIN_NAMESPACE_STD


184 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

185 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

188 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

189 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

191 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

192 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

194 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

195 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

199 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

200 
__THROW
 
	`__n⁄nuŒ
 ((2));

201 
__END_NAMESPACE_STD


205 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

206 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

207 **
__ª°ri˘
 
__ßve_±r
)

208 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

209 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


210 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

211 **
__ª°ri˘
 
__ßve_±r
)

212 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

215 #ifde‡
__USE_GNU


217 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

218 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

221 #ifde‡
__USE_GNU


225 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

226 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

227 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

231 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

232 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

233 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

234 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

235 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

236 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

240 
__BEGIN_NAMESPACE_STD


242 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

243 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 
__END_NAMESPACE_STD


246 #ifdef 
__USE_GNU


249 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

250 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

254 
__BEGIN_NAMESPACE_STD


256 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

257 
__END_NAMESPACE_STD


258 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


266 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


269 #ifde‡
__REDIRECT_NTH


270 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

271 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

272 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

274 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

275 
__THROW
 
	`__n⁄nuŒ
 ((2));

276 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

281 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

282 
__THROW
 
	`__n⁄nuŒ
 ((2));

286 #ifde‡
__USE_GNU


288 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

296 #ifde‡
__USE_BSD


298 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

299 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

302 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

305 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

306 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

309 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

310 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

313 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

314 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

318 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

322 #ifdef 
__USE_GNU


323 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

324 #ifde‡
__GNUC__


325 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

326 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

331 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

332 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

335 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

336 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

339 #ifdef 
__USE_GNU


342 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

343 
__loˇÀ_t
 
__loc
)

344 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

346 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

347 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

348 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

351 #ifdef 
__USE_BSD


354 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

355 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

356 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

359 #ifdef 
__USE_GNU


361 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

362 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

365 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

368 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

369 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

370 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

371 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

375 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

376 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

377 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

379 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

380 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

383 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

386 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

388 #i‚de‡
ba£«me


393 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

398 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

399 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

400 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


420 
	~<bôs/°rög.h
>

423 
	~<bôs/°rög2.h
>

426 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


428 
	~<bôs/°rög3.h
>

432 
__END_DECLS


	@/usr/include/sys/stat.h

24 #i‚def 
_SYS_STAT_H


25 
	#_SYS_STAT_H
 1

	)

27 
	~<„©uªs.h
>

29 
	~<bôs/ty≥s.h
>

31 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
 || deföed 
__USE_MISC
 \

32 || 
deföed
 
	g__USE_ATFILE


33 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_time_t


	)

36 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ATFILE


37 
	#__√ed_time•ec


	)

39 
	~<time.h
>

42 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


45 #i‚de‡
__dev_t_deföed


46 
__dev_t
 
	tdev_t
;

47 
	#__dev_t_deföed


	)

50 #i‚de‡
__gid_t_deföed


51 
__gid_t
 
	tgid_t
;

52 
	#__gid_t_deföed


	)

55 #i‚de‡
__öo_t_deföed


56 #i‚de‡
__USE_FILE_OFFSET64


57 
__öo_t
 
	töo_t
;

59 
__öo64_t
 
	töo_t
;

61 
	#__öo_t_deföed


	)

64 #i‚de‡
__mode_t_deföed


65 
__mode_t
 
	tmode_t
;

66 
	#__mode_t_deföed


	)

69 #i‚de‡
__∆ök_t_deföed


70 
__∆ök_t
 
	t∆ök_t
;

71 
	#__∆ök_t_deföed


	)

74 #i‚de‡
__off_t_deföed


75 #i‚de‡
__USE_FILE_OFFSET64


76 
__off_t
 
	toff_t
;

78 
__off64_t
 
	toff_t
;

80 
	#__off_t_deföed


	)

83 #i‚de‡
__uid_t_deföed


84 
__uid_t
 
	tuid_t
;

85 
	#__uid_t_deföed


	)

89 #ifde‡
__USE_UNIX98


90 #i‚de‡
__blk˙t_t_deföed


91 #i‚de‡
__USE_FILE_OFFSET64


92 
__blk˙t_t
 
	tblk˙t_t
;

94 
__blk˙t64_t
 
	tblk˙t_t
;

96 
	#__blk˙t_t_deföed


	)

99 #i‚de‡
__blksize_t_deföed


100 
__blksize_t
 
	tblksize_t
;

101 
	#__blksize_t_deföed


	)

105 
	g__BEGIN_DECLS


107 
	~<bôs/°©.h
>

109 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


110 
	#S_IFMT
 
__S_IFMT


	)

111 
	#S_IFDIR
 
__S_IFDIR


	)

112 
	#S_IFCHR
 
__S_IFCHR


	)

113 
	#S_IFBLK
 
__S_IFBLK


	)

114 
	#S_IFREG
 
__S_IFREG


	)

115 #ifde‡
__S_IFIFO


116 
	#S_IFIFO
 
__S_IFIFO


	)

118 #ifde‡
__S_IFLNK


119 
	#S_IFLNK
 
__S_IFLNK


	)

121 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_UNIX98
) \

122 && 
deföed
 
	g__S_IFSOCK


123 
	#S_IFSOCK
 
__S_IFSOCK


	)

129 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

131 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

132 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

133 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

134 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

135 #ifde‡
__S_IFIFO


136 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

138 #ifde‡
__S_IFLNK


139 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

142 #i‡
deföed
 
__USE_BSD
 && !deföed 
__S_IFLNK


143 
	#S_ISLNK
(
mode
Ë0

	)

146 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
) \

147 && 
deföed
 
	g__S_IFSOCK


148 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

155 #ifdef 
__USE_POSIX199309


156 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

157 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

158 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

164 
	#S_ISUID
 
__S_ISUID


	)

165 
	#S_ISGID
 
__S_ISGID


	)

167 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


169 
	#S_ISVTX
 
__S_ISVTX


	)

172 
	#S_IRUSR
 
__S_IREAD


	)

173 
	#S_IWUSR
 
__S_IWRITE


	)

174 
	#S_IXUSR
 
__S_IEXEC


	)

176 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

178 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_BSD


179 
	#S_IREAD
 
S_IRUSR


	)

180 
	#S_IWRITE
 
S_IWUSR


	)

181 
	#S_IEXEC
 
S_IXUSR


	)

184 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

185 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

186 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

188 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

190 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

191 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

192 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

194 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

197 #ifdef 
__USE_BSD


199 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

200 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

201 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

203 
	#S_BLKSIZE
 512

	)

207 #i‚de‡
__USE_FILE_OFFSET64


209 
	$°©
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

210 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

214 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

216 #ifde‡
__REDIRECT_NTH


217 
	`__REDIRECT_NTH
 (
°©
, (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

218 
°©
 *
__ª°ri˘
 
__buf
), 
°©64
)

219 
	`__n⁄nuŒ
 ((1, 2));

220 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

221 
	`__n⁄nuŒ
 ((2));

223 
	#°©
 
°©64


	)

224 
	#f°©
 
f°©64


	)

227 #ifde‡
__USE_LARGEFILE64


228 
	$°©64
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

229 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

230 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

233 #ifde‡
__USE_ATFILE


237 #i‚de‡
__USE_FILE_OFFSET64


238 
	$f°©©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

239 
°©
 *
__ª°ri˘
 
__buf
, 
__Êag
)

240 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

242 #ifde‡
__REDIRECT_NTH


243 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

244 
°©
 *
__ª°ri˘
 
__buf
,

245 
__Êag
),

246 
f°©©64
Ë
	`__n⁄nuŒ
 ((2, 3));

248 
	#f°©©
 
f°©©64


	)

252 
	$f°©©64
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

253 
°©64
 *
__ª°ri˘
 
__buf
, 
__Êag
)

254 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

257 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


258 #i‚de‡
__USE_FILE_OFFSET64


261 
	$l°©
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

262 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

264 #ifde‡
__REDIRECT_NTH


265 
	`__REDIRECT_NTH
 (
l°©
,

266 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

267 
°©
 *
__ª°ri˘
 
__buf
), 
l°©64
)

268 
	`__n⁄nuŒ
 ((1, 2));

270 
	#l°©
 
l°©64


	)

273 #ifde‡
__USE_LARGEFILE64


274 
	$l°©64
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

275 
°©64
 *
__ª°ri˘
 
__buf
)

276 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

282 
	$chmod
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
)

283 
__THROW
 
	`__n⁄nuŒ
 ((1));

285 #ifde‡
__USE_BSD


289 
	$lchmod
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
)

290 
__THROW
 
	`__n⁄nuŒ
 ((1));

294 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


295 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

298 #ifde‡
__USE_ATFILE


301 
	$fchmod©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__mode_t
 
mode
, 
__Êag
)

302 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

309 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

311 #ifdef 
__USE_GNU


314 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

318 
	$mkdú
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

319 
__THROW
 
	`__n⁄nuŒ
 ((1));

321 #ifde‡
__USE_ATFILE


325 
	$mkdú©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

326 
__THROW
 
	`__n⁄nuŒ
 ((2));

332 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


333 
	$mknod
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

337 #ifde‡
__USE_ATFILE


341 
	$mknod©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

342 
__dev_t
 
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

347 
	$mkfifo
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

348 
__THROW
 
	`__n⁄nuŒ
 ((1));

350 #ifde‡
__USE_ATFILE


354 
	$mkfifﬂt
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

355 
__THROW
 
	`__n⁄nuŒ
 ((2));

358 #ifde‡
__USE_ATFILE


361 
	$utimíßt
 (
__fd
, 
__c⁄°
 *
__∑th
,

362 
__c⁄°
 
time•ec
 
__times
[2],

363 
__Êags
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

367 #ifde‡
__USE_GNU


370 
	$futimís
 (
__fd
, 
__c⁄°
 
time•ec
 
__times
[2]Ë
__THROW
;

388 #i‚de‡
_STAT_VER


389 
	#_STAT_VER
 0

	)

391 #i‚de‡
_MKNOD_VER


392 
	#_MKNOD_VER
 0

	)

396 #i‚de‡
__USE_FILE_OFFSET64


397 
	$__fx°©
 (
__vî
, 
__fûdes
, 
°©
 *
__°©_buf
)

398 
__THROW
 
	`__n⁄nuŒ
 ((3));

399 
	$__x°©
 (
__vî
, 
__c⁄°
 *
__fûíame
,

400 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

401 
	$__lx°©
 (
__vî
, 
__c⁄°
 *
__fûíame
,

402 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

403 
	$__fx°©©
 (
__vî
, 
__fûdes
, 
__c⁄°
 *
__fûíame
,

404 
°©
 *
__°©_buf
, 
__Êag
)

405 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

407 #ifde‡
__REDIRECT_NTH


408 
	`__REDIRECT_NTH
 (
__fx°©
, (
__vî
, 
__fûdes
,

409 
°©
 *
__°©_buf
), 
__fx°©64
)

410 
	`__n⁄nuŒ
 ((3));

411 
	`__REDIRECT_NTH
 (
__x°©
, (
__vî
, 
__c⁄°
 *
__fûíame
,

412 
°©
 *
__°©_buf
), 
__x°©64
)

413 
	`__n⁄nuŒ
 ((2, 3));

414 
	`__REDIRECT_NTH
 (
__lx°©
, (
__vî
, 
__c⁄°
 *
__fûíame
,

415 
°©
 *
__°©_buf
), 
__lx°©64
)

416 
	`__n⁄nuŒ
 ((2, 3));

417 
	`__REDIRECT_NTH
 (
__fx°©©
, (
__vî
, 
__fûdes
,

418 
__c⁄°
 *
__fûíame
,

419 
°©
 *
__°©_buf
, 
__Êag
),

420 
__fx°©©64
Ë
	`__n⁄nuŒ
 ((3, 4));

423 
	#__fx°©
 
__fx°©64


	)

424 
	#__x°©
 
__x°©64


	)

425 
	#__lx°©
 
__lx°©64


	)

429 #ifde‡
__USE_LARGEFILE64


430 
	$__fx°©64
 (
__vî
, 
__fûdes
, 
°©64
 *
__°©_buf
)

431 
__THROW
 
	`__n⁄nuŒ
 ((3));

432 
	$__x°©64
 (
__vî
, 
__c⁄°
 *
__fûíame
,

433 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

434 
	$__lx°©64
 (
__vî
, 
__c⁄°
 *
__fûíame
,

435 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

436 
	$__fx°©©64
 (
__vî
, 
__fûdes
, 
__c⁄°
 *
__fûíame
,

437 
°©64
 *
__°©_buf
, 
__Êag
)

438 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

440 
	$__xmknod
 (
__vî
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

441 
__dev_t
 *
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

443 
	$__xmknod©
 (
__vî
, 
__fd
, 
__c⁄°
 *
__∑th
,

444 
__mode_t
 
__mode
, 
__dev_t
 *
__dev
)

445 
__THROW
 
	`__n⁄nuŒ
 ((3, 5));

447 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


450 
__exã∫_ölöe
 

451 
	`__NTH
 (
	$°©
 (
__c⁄°
 *
__∑th
, 
°©
 *
__°©buf
))

453  
	`__x°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

454 
	}
}

456 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


457 
__exã∫_ölöe
 

458 
__NTH
 (
	$l°©
 (
__c⁄°
 *
__∑th
, 
°©
 *
__°©buf
))

460  
	`__lx°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

461 
	}
}

464 
__exã∫_ölöe
 

465 
__NTH
 (
	$f°©
 (
__fd
, 
°©
 *
__°©buf
))

467  
	`__fx°©
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

468 
	}
}

470 #ifde‡
__USE_ATFILE


471 
__exã∫_ölöe
 

472 
__NTH
 (
	$f°©©
 (
__fd
, 
__c⁄°
 *
__fûíame
, 
°©
 *
__°©buf
,

473 
__Êag
))

475  
	`__fx°©©
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

476 
	}
}

479 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD


480 
__exã∫_ölöe
 

481 
__NTH
 (
	$mknod
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
))

483  
	`__xmknod
 (
_MKNOD_VER
, 
__∑th
, 
__mode
, &
__dev
);

484 
	}
}

487 #ifde‡
__USE_ATFILE


488 
__exã∫_ölöe
 

489 
__NTH
 (
	$mknod©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

490 
__dev_t
 
__dev
))

492  
	`__xmknod©
 (
_MKNOD_VER
, 
__fd
, 
__∑th
, 
__mode
, &
__dev
);

493 
	}
}

496 #i‡
deföed
 
__USE_LARGEFILE64
 \

497 && (! 
deföed
 
	g__USE_FILE_OFFSET64
 \

498 || (
deföed
 
	g__REDIRECT_NTH
 && deföed 
	g__OPTIMIZE__
))

499 
__exã∫_ölöe
 

500 
__NTH
 (
	$°©64
 (
__c⁄°
 *
__∑th
, 
°©64
 *
__°©buf
))

502  
	`__x°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

503 
	}
}

505 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


506 
__exã∫_ölöe
 

507 
__NTH
 (
	$l°©64
 (
__c⁄°
 *
__∑th
, 
°©64
 *
__°©buf
))

509  
	`__lx°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

510 
	}
}

513 
__exã∫_ölöe
 

514 
__NTH
 (
	$f°©64
 (
__fd
, 
°©64
 *
__°©buf
))

516  
	`__fx°©64
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

517 
	}
}

519 #ifde‡
__USE_GNU


520 
__exã∫_ölöe
 

521 
__NTH
 (
	$f°©©64
 (
__fd
, 
__c⁄°
 *
__fûíame
, 
°©64
 *
__°©buf
,

522 
__Êag
))

524  
	`__fx°©©64
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

525 
	}
}

532 
	g__END_DECLS


	@/usr/include/sys/time.h

20 #i‚de‡
_SYS_TIME_H


21 
	#_SYS_TIME_H
 1

	)

23 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

26 
	#__√ed_time_t


	)

27 
	~<time.h
>

28 
	#__√ed_timevÆ


	)

29 
	~<bôs/time.h
>

31 
	~<sys/£À˘.h
>

33 #i‚de‡
__su£c⁄ds_t_deföed


34 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

35 
	#__su£c⁄ds_t_deföed


	)

39 
	g__BEGIN_DECLS


41 #ifde‡
__USE_GNU


43 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

44 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

45 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

46 }

	)

47 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

48 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

49 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

50 }

	)

54 #ifde‡
__USE_BSD


57 
	stimez⁄e


59 
	mtz_möuãswe°
;

60 
	mtz_d°time
;

63 
timez⁄e
 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

65 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

73 
	$gëtimeofday
 (
timevÆ
 *
__ª°ri˘
 
__tv
,

74 
__timez⁄e_±r_t
 
__tz
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

76 #ifde‡
__USE_BSD


79 
	$£âimeofday
 (
__c⁄°
 
timevÆ
 *
__tv
,

80 
__c⁄°
 
timez⁄e
 *
__tz
)

81 
__THROW
 
	`__n⁄nuŒ
 ((1));

87 
	$adjtime
 (
__c⁄°
 
timevÆ
 *
__dñè
,

88 
timevÆ
 *
__ﬁddñè
Ë
__THROW
;

93 
	e__ôimî_which


96 
ITIMER_REAL
 = 0,

97 
	#ITIMER_REAL
 
ITIMER_REAL


	)

99 
ITIMER_VIRTUAL
 = 1,

100 
	#ITIMER_VIRTUAL
 
ITIMER_VIRTUAL


	)

103 
ITIMER_PROF
 = 2

104 
	#ITIMER_PROF
 
ITIMER_PROF


	)

109 
	sôimîvÆ


112 
timevÆ
 
ô_öãrvÆ
;

114 
timevÆ
 
ô_vÆue
;

117 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


120 
__ôimî_which
 
	t__ôimî_which_t
;

122 
	t__ôimî_which_t
;

127 
	$gëôimî
 (
__ôimî_which_t
 
__which
,

128 
ôimîvÆ
 *
__vÆue
Ë
__THROW
;

133 
	$£tôimî
 (
__ôimî_which_t
 
__which
,

134 
__c⁄°
 
ôimîvÆ
 *
__ª°ri˘
 
__√w
,

135 
ôimîvÆ
 *
__ª°ri˘
 
__ﬁd
Ë
__THROW
;

140 
	$utimes
 (
__c⁄°
 *
__fûe
, __c⁄° 
timevÆ
 
__tvp
[2])

141 
__THROW
 
	`__n⁄nuŒ
 ((1));

143 #ifde‡
__USE_BSD


145 
	$lutimes
 (
__c⁄°
 *
__fûe
, __c⁄° 
timevÆ
 
__tvp
[2])

146 
__THROW
 
	`__n⁄nuŒ
 ((1));

149 
	$futimes
 (
__fd
, 
__c⁄°
 
timevÆ
 
__tvp
[2]Ë
__THROW
;

152 #ifde‡
__USE_ATFILE


156 
	$futimeßt
 (
__fd
, 
__c⁄°
 *
__fûe
,

157 
__c⁄°
 
timevÆ
 
__tvp
[2]Ë
__THROW
;

161 #ifde‡
__USE_BSD


164 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

165 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

166 
	#timîcmp
(
a
, 
b
, 
CMP
) \

167 (((
a
)->
tv_£c
 =(
b
)->tv_sec) ? \

168 ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_usec) : \

169 ((
a
)->
tv_£c
 
	`CMP
 (
b
)->tv_£c))

	)

170 
	#timîadd
(
a
, 
b
, 
ªsu…
) \

172 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

173 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

174 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

176 ++(
ªsu…
)->
tv_£c
; \

177 (
ªsu…
)->
tv_u£c
 -= 1000000; \

179 
	}
} 0)

	)

180 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

182 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

183 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

184 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

185 --(
ªsu…
)->
tv_£c
; \

186 (
ªsu…
)->
tv_u£c
 += 1000000; \

188 } 0)

	)

191 
	g__END_DECLS


	@/usr/include/sys/types.h

24 #i‚def 
_SYS_TYPES_H


25 
	#_SYS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

33 #ifdef 
__USE_BSD


34 #i‚de‡
__u_ch¨_deföed


35 
__u_ch¨
 
	tu_ch¨
;

36 
__u_sh‹t
 
	tu_sh‹t
;

37 
__u_öt
 
	tu_öt
;

38 
__u_l⁄g
 
	tu_l⁄g
;

39 
__quad_t
 
	tquad_t
;

40 
__u_quad_t
 
	tu_quad_t
;

41 
__fsid_t
 
	tfsid_t
;

42 
	#__u_ch¨_deföed


	)

46 
__loff_t
 
	tloff_t
;

48 #i‚de‡
__öo_t_deföed


49 #i‚de‡
__USE_FILE_OFFSET64


50 
__öo_t
 
	töo_t
;

52 
__öo64_t
 
	töo_t
;

54 
	#__öo_t_deföed


	)

56 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


57 
__öo64_t
 
	töo64_t
;

58 
	#__öo64_t_deföed


	)

61 #i‚de‡
__dev_t_deföed


62 
__dev_t
 
	tdev_t
;

63 
	#__dev_t_deföed


	)

66 #i‚de‡
__gid_t_deföed


67 
__gid_t
 
	tgid_t
;

68 
	#__gid_t_deföed


	)

71 #i‚de‡
__mode_t_deföed


72 
__mode_t
 
	tmode_t
;

73 
	#__mode_t_deföed


	)

76 #i‚de‡
__∆ök_t_deföed


77 
__∆ök_t
 
	t∆ök_t
;

78 
	#__∆ök_t_deföed


	)

81 #i‚de‡
__uid_t_deföed


82 
__uid_t
 
	tuid_t
;

83 
	#__uid_t_deföed


	)

86 #i‚de‡
__off_t_deföed


87 #i‚de‡
__USE_FILE_OFFSET64


88 
__off_t
 
	toff_t
;

90 
__off64_t
 
	toff_t
;

92 
	#__off_t_deföed


	)

94 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


95 
__off64_t
 
	toff64_t
;

96 
	#__off64_t_deföed


	)

99 #i‚de‡
__pid_t_deföed


100 
__pid_t
 
	tpid_t
;

101 
	#__pid_t_deföed


	)

104 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__id_t_deföed


105 
__id_t
 
	tid_t
;

106 
	#__id_t_deföed


	)

109 #i‚de‡
__ssize_t_deföed


110 
__ssize_t
 
	tssize_t
;

111 
	#__ssize_t_deföed


	)

114 #ifdef 
__USE_BSD


115 #i‚de‡
__daddr_t_deföed


116 
__daddr_t
 
	tdaddr_t
;

117 
__ˇddr_t
 
	tˇddr_t
;

118 
	#__daddr_t_deföed


	)

122 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


123 
__key_t
 
	tkey_t
;

124 
	#__key_t_deföed


	)

127 #ifde‡
__USE_XOPEN


128 
	#__√ed_˛ock_t


	)

130 
	#__√ed_time_t


	)

131 
	#__√ed_timî_t


	)

132 
	#__√ed_˛ockid_t


	)

133 
	~<time.h
>

135 #ifde‡
__USE_XOPEN


136 #i‚de‡
__u£c⁄ds_t_deföed


137 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

138 
	#__u£c⁄ds_t_deföed


	)

140 #i‚de‡
__su£c⁄ds_t_deföed


141 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

142 
	#__su£c⁄ds_t_deföed


	)

146 
	#__√ed_size_t


	)

147 
	~<°ddef.h
>

149 #ifde‡
__USE_MISC


151 
	tul⁄g
;

152 
	tush‹t
;

153 
	tuöt
;

158 #i‡!
__GNUC_PREREQ
 (2, 7)

161 #i‚de‡
__öt8_t_deföed


162 
	#__öt8_t_deföed


	)

163 
	töt8_t
;

164 
	töt16_t
;

165 
	töt32_t
;

166 #i‡
__WORDSIZE
 == 64

167 
	töt64_t
;

168 #ñi‡
__GLIBC_HAVE_LONG_LONG


169 
__exãnsi⁄__
 
	töt64_t
;

174 
	tu_öt8_t
;

175 
	tu_öt16_t
;

176 
	tu_öt32_t
;

177 #i‡
__WORDSIZE
 == 64

178 
	tu_öt64_t
;

179 #ñi‡
__GLIBC_HAVE_LONG_LONG


180 
__exãnsi⁄__
 
	tu_öt64_t
;

183 
	tªgi°î_t
;

188 
	#__ötN_t
(
N
, 
MODE
) \

189 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

190 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

191 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

193 #i‚de‡
	t__öt8_t_deföed


194 
	t__öt8_t_deföed


	)

195 
	t__ötN_t
 (8, 
	t__QI__
);

196 
__ötN_t
 (16, 
__HI__
);

197 
__ötN_t
 (32, 
__SI__
);

198 
__ötN_t
 (64, 
__DI__
);

201 
__u_ötN_t
 (8, 
__QI__
);

202 
__u_ötN_t
 (16, 
__HI__
);

203 
__u_ötN_t
 (32, 
__SI__
);

204 
__u_ötN_t
 (64, 
__DI__
);

206 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

212 
	#__BIT_TYPES_DEFINED__
 1

	)

215 #ifdef 
__USE_BSD


217 
	~<ídün.h
>

220 
	~<sys/£À˘.h
>

223 
	~<sys/sysma¸os.h
>

227 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__blksize_t_deföed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t
 
	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t
 
	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t
 
	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t
 
	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t
 
	tblk˙t64_t
;

263 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

264 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

269 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273 
	g__END_DECLS


	@/usr/include/time.h

24 #i‚def 
_TIME_H


26 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

27 ! 
deföed
 
	g__√ed_time•ec
)

28 
	#_TIME_H
 1

	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 #ifdef 
_TIME_H


37 
	#__√ed_size_t


	)

38 
	#__√ed_NULL


	)

39 
	~<°ddef.h
>

43 
	~<bôs/time.h
>

46 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


47 #i‚de‡
CLK_TCK


48 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

54 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

55 
	#__˛ock_t_deföed
 1

	)

57 
	~<bôs/ty≥s.h
>

59 
__BEGIN_NAMESPACE_STD


61 
__˛ock_t
 
	t˛ock_t
;

62 
	g__END_NAMESPACE_STD


63 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


64 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

68 #unde‡
__√ed_˛ock_t


70 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

71 
	#__time_t_deföed
 1

	)

73 
	~<bôs/ty≥s.h
>

75 
__BEGIN_NAMESPACE_STD


77 
__time_t
 
	ttime_t
;

78 
__END_NAMESPACE_STD


79 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


80 
	$__USING_NAMESPACE_STD
(
time_t
)

84 #unde‡
__√ed_time_t


86 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

87 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

88 
	#__˛ockid_t_deföed
 1

	)

90 
	~<bôs/ty≥s.h
>

93 
__˛ockid_t
 
	t˛ockid_t
;

96 #unde‡
__˛ockid_time_t


98 #i‡!
deföed
 
__timî_t_deföed
 && \

99 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

100 
	#__timî_t_deföed
 1

	)

102 
	~<bôs/ty≥s.h
>

105 
__timî_t
 
	ttimî_t
;

108 #unde‡
__√ed_timî_t


111 #i‡!
deföed
 
__time•ec_deföed
 && \

112 ((
deföed
 
_TIME_H
 && \

113 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

114 
deföed
 
__√ed_time•ec
)

115 
	#__time•ec_deföed
 1

	)

117 
	~<bôs/ty≥s.h
>

121 
	stime•ec


123 
__time_t
 
tv_£c
;

124 
tv_n£c
;

128 #unde‡
__√ed_time•ec


131 #ifdef 
_TIME_H


132 
__BEGIN_NAMESPACE_STD


134 
	stm


136 
tm_£c
;

137 
tm_mö
;

138 
tm_hour
;

139 
tm_mday
;

140 
tm_m⁄
;

141 
tm_yór
;

142 
tm_wday
;

143 
tm_yday
;

144 
tm_isd°
;

146 #ifdef 
__USE_BSD


147 
tm_gmtoff
;

148 
__c⁄°
 *
tm_z⁄e
;

150 
__tm_gmtoff
;

151 
__c⁄°
 *
__tm_z⁄e
;

154 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


156 
	$__USING_NAMESPACE_STD
(
tm
)

160 #ifde‡
__USE_POSIX199309


162 
	sôimî•ec


164 
time•ec
 
ô_öãrvÆ
;

165 
time•ec
 
ô_vÆue
;

169 
sigevít
;

173 #ifde‡
__USE_XOPEN2K


174 #i‚de‡
__pid_t_deföed


175 
__pid_t
 
	tpid_t
;

176 
	#__pid_t_deföed


	)

181 
__BEGIN_NAMESPACE_STD


184 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

187 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

190 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

191 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

194 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

200 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

201 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

202 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

203 
__END_NAMESPACE_STD


205 #ifde‡
__USE_XOPEN


208 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

209 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

210 
__THROW
;

213 #ifde‡
__USE_GNU


216 
	~<xloˇÀ.h
>

218 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

219 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

220 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

221 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

224 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

225 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 
__BEGIN_NAMESPACE_STD


232 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

236 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
__END_NAMESPACE_STD


239 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


242 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

243 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

247 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

248 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

251 
__BEGIN_NAMESPACE_STD


254 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

257 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

258 
__END_NAMESPACE_STD


260 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


265 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

266 *
__ª°ri˘
 
__buf
Ë
__THROW
;

269 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

270 *
__ª°ri˘
 
__buf
Ë
__THROW
;

275 *
__tz«me
[2];

276 
__daylight
;

277 
__timez⁄e
;

280 #ifdef 
__USE_POSIX


282 *
tz«me
[2];

286 
	$tz£t
 (Ë
__THROW
;

289 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


290 
daylight
;

291 
timez⁄e
;

294 #ifde‡
__USE_SVID


297 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

303 
	#__i¶óp
(
yór
) \

304 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

307 #ifde‡
__USE_MISC


312 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

315 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

318 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

322 #ifde‡
__USE_POSIX199309


327 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

328 
time•ec
 *
__ªmaöög
);

332 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

335 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

338 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

339 
__THROW
;

341 #ifde‡
__USE_XOPEN2K


346 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

347 
__c⁄°
 
time•ec
 *
__ªq
,

348 
time•ec
 *
__ªm
);

351 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

356 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

357 
sigevít
 *
__ª°ri˘
 
__evp
,

358 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

361 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

364 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

365 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

366 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

369 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

370 
__THROW
;

373 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

377 #ifde‡
__USE_XOPEN_EXTENDED


389 
gëd©e_îr
;

398 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

401 #ifde‡
__USE_GNU


412 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

413 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

416 
__END_DECLS


	@/usr/include/unistd.h

23 #i‚def 
_UNISTD_H


24 
	#_UNISTD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


34 
	#_POSIX_VERSION
 200112L

	)

40 
	#_POSIX2_VERSION
 200112L

	)

44 
	#_POSIX2_C_BIND
 200112L

	)

48 
	#_POSIX2_C_DEV
 200112L

	)

52 
	#_POSIX2_SW_DEV
 200112L

	)

56 
	#_POSIX2_LOCALEDEF
 200112L

	)

59 #ifde‡
__USE_XOPEN2K


60 
	#_XOPEN_VERSION
 600

	)

61 #ñi‡
deföed
 
__USE_UNIX98


62 
	#_XOPEN_VERSION
 500

	)

64 
	#_XOPEN_VERSION
 4

	)

68 
	#_XOPEN_XCU_VERSION
 4

	)

71 
	#_XOPEN_XPG2
 1

	)

72 
	#_XOPEN_XPG3
 1

	)

73 
	#_XOPEN_XPG4
 1

	)

76 
	#_XOPEN_UNIX
 1

	)

79 
	#_XOPEN_CRYPT
 1

	)

83 
	#_XOPEN_ENH_I18N
 1

	)

86 
	#_XOPEN_LEGACY
 1

	)

173 
	~<bôs/posix_›t.h
>

176 #ifde‡
__USE_UNIX98


177 
	~<bôs/ívú⁄míts.h
>

181 
	#STDIN_FILENO
 0

	)

182 
	#STDOUT_FILENO
 1

	)

183 
	#STDERR_FILENO
 2

	)

188 
	~<bôs/ty≥s.h
>

190 #i‚def 
__ssize_t_deföed


191 
__ssize_t
 
	tssize_t
;

192 
	#__ssize_t_deföed


	)

195 
	#__√ed_size_t


	)

196 
	#__√ed_NULL


	)

197 
	~<°ddef.h
>

199 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


202 #i‚de‡
__gid_t_deföed


203 
__gid_t
 
	tgid_t
;

204 
	#__gid_t_deföed


	)

207 #i‚de‡
__uid_t_deföed


208 
__uid_t
 
	tuid_t
;

209 
	#__uid_t_deföed


	)

212 #i‚de‡
__off_t_deföed


213 #i‚de‡
__USE_FILE_OFFSET64


214 
__off_t
 
	toff_t
;

216 
__off64_t
 
	toff_t
;

218 
	#__off_t_deföed


	)

220 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


221 
__off64_t
 
	toff64_t
;

222 
	#__off64_t_deföed


	)

225 #i‚de‡
__u£c⁄ds_t_deföed


226 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

227 
	#__u£c⁄ds_t_deföed


	)

230 #i‚de‡
__pid_t_deföed


231 
__pid_t
 
	tpid_t
;

232 
	#__pid_t_deföed


	)

236 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


237 #i‚de‡
__öçå_t_deföed


238 
__öçå_t
 
	töçå_t
;

239 
	#__öçå_t_deföed


	)

243 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


244 #i‚de‡
__sockÀn_t_deföed


245 
__sockÀn_t
 
	tsockÀn_t
;

246 
	#__sockÀn_t_deföed


	)

252 
	#R_OK
 4

	)

253 
	#W_OK
 2

	)

254 
	#X_OK
 1

	)

255 
	#F_OK
 0

	)

258 
	$ac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

260 #ifde‡
__USE_GNU


263 
	$euidac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

264 
__THROW
 
	`__n⁄nuŒ
 ((1));

267 
	$óc˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

268 
__THROW
 
	`__n⁄nuŒ
 ((1));

271 #ifde‡
__USE_ATFILE


275 
	$Ác˚sßt
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__ty≥
, 
__Êag
)

276 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

281 #i‚def 
_STDIO_H


282 
	#SEEK_SET
 0

	)

283 
	#SEEK_CUR
 1

	)

284 
	#SEEK_END
 2

	)

287 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


289 
	#L_SET
 
SEEK_SET


	)

290 
	#L_INCR
 
SEEK_CUR


	)

291 
	#L_XTND
 
SEEK_END


	)

300 #i‚de‡
__USE_FILE_OFFSET64


301 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

303 #ifde‡
__REDIRECT_NTH


304 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

305 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

306 
l£ek64
);

308 
	#l£ek
 
l£ek64


	)

311 #ifde‡
__USE_LARGEFILE64


312 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

313 
__THROW
;

320 
	`˛o£
 (
__fd
);

327 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

333 
ssize_t
 
	$wrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
Ë
__wur
;

335 #ifde‡
__USE_UNIX98


336 #i‚de‡
__USE_FILE_OFFSET64


343 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

344 
__off_t
 
__off£t
Ë
__wur
;

351 
ssize_t
 
	$pwrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

352 
__off_t
 
__off£t
Ë
__wur
;

354 #ifde‡
__REDIRECT


355 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

356 
__off64_t
 
__off£t
),

357 
¥ód64
Ë
__wur
;

358 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, 
__c⁄°
 *
__buf
,

359 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

360 
pwrôe64
Ë
__wur
;

362 
	#¥ód
 
¥ód64


	)

363 
	#pwrôe
 
pwrôe64


	)

367 #ifde‡
__USE_LARGEFILE64


371 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

372 
__off64_t
 
__off£t
Ë
__wur
;

375 
ssize_t
 
	$pwrôe64
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

376 
__off64_t
 
__off£t
Ë
__wur
;

384 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

393 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

405 
	`¶ìp
 (
__£c⁄ds
);

407 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


412 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

413 
__THROW
;

420 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

429 
	`∑u£
 ();

433 
	$chown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

434 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

436 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


438 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

443 
	$lchown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

444 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

448 #ifde‡
__USE_ATFILE


451 
	$fchow«t
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
,

452 
__gid_t
 
__group
, 
__Êag
)

453 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

457 
	$chdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

459 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


461 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

471 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

473 #ifdef 
__USE_GNU


477 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

480 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


484 *
	$gëwd
 (*
__buf
)

485 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

490 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

493 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

496 **
__ívú⁄
;

497 #ifde‡
__USE_GNU


498 **
ívú⁄
;

504 
	$execve
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[],

505 *
__c⁄°
 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

507 #ifde‡
__USE_GNU


510 
	$„xecve
 (
__fd
, *
__c⁄°
 
__¨gv
[], *__c⁄° 
__ívp
[])

511 
__THROW
;

516 
	$execv
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[])

517 
__THROW
 
	`__n⁄nuŒ
 ((1));

521 
	$exe˛e
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

522 
__THROW
 
	`__n⁄nuŒ
 ((1));

526 
	$exe˛
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

527 
__THROW
 
	`__n⁄nuŒ
 ((1));

531 
	$execvp
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[])

532 
__THROW
 
	`__n⁄nuŒ
 ((1));

537 
	$exe˛p
 (
__c⁄°
 *
__fûe
, __c⁄° *
__¨g
, ...)

538 
__THROW
 
	`__n⁄nuŒ
 ((1));

541 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


543 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

548 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

554 
	~<bôs/c⁄‚ame.h
>

557 
	$∑thc⁄f
 (
__c⁄°
 *
__∑th
, 
__«me
)

558 
__THROW
 
	`__n⁄nuŒ
 ((1));

561 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

564 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

566 #ifdef 
__USE_POSIX2


568 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

573 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

576 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

580 #i‚de‡
__FAVOR_BSD


581 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

583 #ifde‡
__REDIRECT_NTH


584 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

586 
	#gëpgΩ
 
__gëpgid


	)

591 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

592 #ifde‡
__USE_XOPEN_EXTENDED


593 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

600 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

602 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


613 #i‚de‡
__FAVOR_BSD


617 
	$£çgΩ
 (Ë
__THROW
;

622 #ifde‡
__REDIRECT_NTH


623 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

625 
	#£çgΩ
 
£çgid


	)

634 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

636 #ifde‡
__USE_XOPEN_EXTENDED


638 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

642 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

645 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

648 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

651 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

656 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

658 #ifdef 
__USE_GNU


660 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

667 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
;

669 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


672 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
;

675 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


677 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
;

684 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
;

686 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


689 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
;

692 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


694 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
;

697 #ifde‡
__USE_GNU


700 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

701 
__THROW
;

705 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

706 
__THROW
;

710 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

711 
__THROW
;

715 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

716 
__THROW
;

723 
__pid_t
 
	$f‹k
 (Ë
__THROW
;

725 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


730 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

736 *
	$ây«me
 (
__fd
Ë
__THROW
;

740 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

741 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

745 
	$ißây
 (
__fd
Ë
__THROW
;

747 #i‡
deföed
 
__USE_BSD
 \

748 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

751 
	$ây¶Ÿ
 (Ë
__THROW
;

756 
	$lök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

757 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

759 #ifde‡
__USE_ATFILE


762 
	$lök©
 (
__‰omfd
, 
__c⁄°
 *
__‰om
, 
__tofd
,

763 
__c⁄°
 *
__to
, 
__Êags
)

764 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

767 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


769 
	$symlök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

770 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

775 
ssize_t
 
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

776 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

777 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

780 #ifde‡
__USE_ATFILE


782 
	$symlök©
 (
__c⁄°
 *
__‰om
, 
__tofd
,

783 
__c⁄°
 *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

786 
ssize_t
 
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

787 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

788 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

792 
	$u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

794 #ifde‡
__USE_ATFILE


796 
	$u∆ök©
 (
__fd
, 
__c⁄°
 *
__«me
, 
__Êag
)

797 
__THROW
 
	`__n⁄nuŒ
 ((2));

801 
	$rmdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

805 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

808 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

815 *
	`gëlogö
 ();

816 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


823 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

826 #ifdef 
__USE_BSD


828 
	$£éogö
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

832 #ifdef 
__USE_POSIX2


836 
	#__√ed_gë›t


	)

837 
	~<gë›t.h
>

841 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


845 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

849 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

852 
	$£tho°«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

853 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

857 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

863 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

864 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

865 
	$£tdomaö«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

866 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

872 
	$vh™gup
 (Ë
__THROW
;

875 
	$ªvoke
 (
__c⁄°
 *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

883 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

884 
size_t
 
__off£t
, 
__sˇÀ
)

885 
__THROW
 
	`__n⁄nuŒ
 ((1));

891 
	$ac˘
 (
__c⁄°
 *
__«me
Ë
__THROW
;

895 *
	$gëu£rshñl
 (Ë
__THROW
;

896 
	$ídu£rshñl
 (Ë
__THROW
;

897 
	$£tu£rshñl
 (Ë
__THROW
;

903 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

907 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

910 
	$chroŸ
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

914 *
	$gë∑ss
 (
__c⁄°
 *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

918 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


923 
	`fsync
 (
__fd
);

927 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


930 
	`gëho°id
 ();

933 
	$sync
 (Ë
__THROW
;

938 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

943 
	$gëdèbÀsize
 (Ë
__THROW
;

947 #i‚de‡
__USE_FILE_OFFSET64


948 
	$åunˇã
 (
__c⁄°
 *
__fûe
, 
__off_t
 
__Àngth
)

949 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

951 #ifde‡
__REDIRECT_NTH


952 
	`__REDIRECT_NTH
 (
åunˇã
,

953 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
),

954 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

956 
	#åunˇã
 
åunˇã64


	)

959 #ifde‡
__USE_LARGEFILE64


960 
	$åunˇã64
 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
)

961 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

966 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


969 #i‚de‡
__USE_FILE_OFFSET64


970 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

972 #ifde‡
__REDIRECT_NTH


973 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

974 
·runˇã64
Ë
__wur
;

976 
	#·runˇã
 
·runˇã64


	)

979 #ifde‡
__USE_LARGEFILE64


980 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

986 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


990 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

996 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1000 #ifde‡
__USE_MISC


1011 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1016 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1028 
	#F_ULOCK
 0

	)

1029 
	#F_LOCK
 1

	)

1030 
	#F_TLOCK
 2

	)

1031 
	#F_TEST
 3

	)

1033 #i‚de‡
__USE_FILE_OFFSET64


1034 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1036 #ifde‡
__REDIRECT


1037 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1038 
lockf64
Ë
__wur
;

1040 
	#lockf
 
lockf64


	)

1043 #ifde‡
__USE_LARGEFILE64


1044 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1049 #ifde‡
__USE_GNU


1054 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1055 (
__exãnsi⁄__
 \

1056 ({ 
__ªsu…
; \

1057 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1058 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1059 
__ªsu…
; 
	}
}))

	)

1062 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1065 
fd©async
 (
__fûdes
);

1071 #ifdef 
__USE_XOPEN


1073 *
	$¸y±
 (
__c⁄°
 *
__key
, __c⁄° *
__ß…
)

1074 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1078 
	$í¸y±
 (*
__block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1085 
	$swab
 (
__c⁄°
 *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1086 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1092 #ifde‡
__USE_XOPEN


1094 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1099 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


1100 
	~<bôs/uni°d.h
>

1103 
__END_DECLS


	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/bits/confname.h

21 #i‚de‡
_UNISTD_H


28 
	m_PC_LINK_MAX
,

29 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

30 
	m_PC_MAX_CANON
,

31 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

32 
	m_PC_MAX_INPUT
,

33 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

34 
	m_PC_NAME_MAX
,

35 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

36 
	m_PC_PATH_MAX
,

37 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

38 
	m_PC_PIPE_BUF
,

39 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

40 
	m_PC_CHOWN_RESTRICTED
,

41 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

42 
	m_PC_NO_TRUNC
,

43 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

44 
	m_PC_VDISABLE
,

45 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

46 
	m_PC_SYNC_IO
,

47 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

48 
	m_PC_ASYNC_IO
,

49 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

50 
	m_PC_PRIO_IO
,

51 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

52 
	m_PC_SOCK_MAXBUF
,

53 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

54 
	m_PC_FILESIZEBITS
,

55 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

56 
	m_PC_REC_INCR_XFER_SIZE
,

57 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

58 
	m_PC_REC_MAX_XFER_SIZE
,

59 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

60 
	m_PC_REC_MIN_XFER_SIZE
,

61 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

62 
	m_PC_REC_XFER_ALIGN
,

63 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

64 
	m_PC_ALLOC_SIZE_MIN
,

65 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

66 
	m_PC_SYMLINK_MAX
,

67 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

68 
	m_PC_2_SYMLINKS


69 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

75 
	m_SC_ARG_MAX
,

76 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

77 
	m_SC_CHILD_MAX
,

78 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

79 
	m_SC_CLK_TCK
,

80 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

81 
	m_SC_NGROUPS_MAX
,

82 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

83 
	m_SC_OPEN_MAX
,

84 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

85 
	m_SC_STREAM_MAX
,

86 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

87 
	m_SC_TZNAME_MAX
,

88 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

89 
	m_SC_JOB_CONTROL
,

90 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

91 
	m_SC_SAVED_IDS
,

92 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

93 
	m_SC_REALTIME_SIGNALS
,

94 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

95 
	m_SC_PRIORITY_SCHEDULING
,

96 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

97 
	m_SC_TIMERS
,

98 
	#_SC_TIMERS
 
_SC_TIMERS


	)

99 
	m_SC_ASYNCHRONOUS_IO
,

100 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

101 
	m_SC_PRIORITIZED_IO
,

102 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

103 
	m_SC_SYNCHRONIZED_IO
,

104 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

105 
	m_SC_FSYNC
,

106 
	#_SC_FSYNC
 
_SC_FSYNC


	)

107 
	m_SC_MAPPED_FILES
,

108 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

109 
	m_SC_MEMLOCK
,

110 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

111 
	m_SC_MEMLOCK_RANGE
,

112 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

113 
	m_SC_MEMORY_PROTECTION
,

114 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

115 
	m_SC_MESSAGE_PASSING
,

116 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

117 
	m_SC_SEMAPHORES
,

118 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

119 
	m_SC_SHARED_MEMORY_OBJECTS
,

120 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

121 
	m_SC_AIO_LISTIO_MAX
,

122 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

123 
	m_SC_AIO_MAX
,

124 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

125 
	m_SC_AIO_PRIO_DELTA_MAX
,

126 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

127 
	m_SC_DELAYTIMER_MAX
,

128 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

129 
	m_SC_MQ_OPEN_MAX
,

130 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

131 
	m_SC_MQ_PRIO_MAX
,

132 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

133 
	m_SC_VERSION
,

134 
	#_SC_VERSION
 
_SC_VERSION


	)

135 
	m_SC_PAGESIZE
,

136 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

137 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

138 
	m_SC_RTSIG_MAX
,

139 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

140 
	m_SC_SEM_NSEMS_MAX
,

141 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

142 
	m_SC_SEM_VALUE_MAX
,

143 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

144 
	m_SC_SIGQUEUE_MAX
,

145 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

146 
	m_SC_TIMER_MAX
,

147 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

151 
	m_SC_BC_BASE_MAX
,

152 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

153 
	m_SC_BC_DIM_MAX
,

154 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

155 
	m_SC_BC_SCALE_MAX
,

156 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

157 
	m_SC_BC_STRING_MAX
,

158 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

159 
	m_SC_COLL_WEIGHTS_MAX
,

160 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

161 
	m_SC_EQUIV_CLASS_MAX
,

162 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

163 
	m_SC_EXPR_NEST_MAX
,

164 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

165 
	m_SC_LINE_MAX
,

166 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

167 
	m_SC_RE_DUP_MAX
,

168 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

169 
	m_SC_CHARCLASS_NAME_MAX
,

170 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

172 
	m_SC_2_VERSION
,

173 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

174 
	m_SC_2_C_BIND
,

175 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

176 
	m_SC_2_C_DEV
,

177 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

178 
	m_SC_2_FORT_DEV
,

179 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

180 
	m_SC_2_FORT_RUN
,

181 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

182 
	m_SC_2_SW_DEV
,

183 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

184 
	m_SC_2_LOCALEDEF
,

185 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

187 
	m_SC_PII
,

188 
	#_SC_PII
 
_SC_PII


	)

189 
	m_SC_PII_XTI
,

190 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

191 
	m_SC_PII_SOCKET
,

192 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

193 
	m_SC_PII_INTERNET
,

194 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

195 
	m_SC_PII_OSI
,

196 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

197 
	m_SC_POLL
,

198 
	#_SC_POLL
 
_SC_POLL


	)

199 
	m_SC_SELECT
,

200 
	#_SC_SELECT
 
_SC_SELECT


	)

201 
	m_SC_UIO_MAXIOV
,

202 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

203 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

204 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

205 
	m_SC_PII_INTERNET_STREAM
,

206 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

207 
	m_SC_PII_INTERNET_DGRAM
,

208 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

209 
	m_SC_PII_OSI_COTS
,

210 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

211 
	m_SC_PII_OSI_CLTS
,

212 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

213 
	m_SC_PII_OSI_M
,

214 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

215 
	m_SC_T_IOV_MAX
,

216 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

219 
	m_SC_THREADS
,

220 
	#_SC_THREADS
 
_SC_THREADS


	)

221 
	m_SC_THREAD_SAFE_FUNCTIONS
,

222 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

223 
	m_SC_GETGR_R_SIZE_MAX
,

224 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

225 
	m_SC_GETPW_R_SIZE_MAX
,

226 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

227 
	m_SC_LOGIN_NAME_MAX
,

228 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

229 
	m_SC_TTY_NAME_MAX
,

230 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

231 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

232 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

233 
	m_SC_THREAD_KEYS_MAX
,

234 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

235 
	m_SC_THREAD_STACK_MIN
,

236 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

237 
	m_SC_THREAD_THREADS_MAX
,

238 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

239 
	m_SC_THREAD_ATTR_STACKADDR
,

240 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

241 
	m_SC_THREAD_ATTR_STACKSIZE
,

242 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

243 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

244 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

245 
	m_SC_THREAD_PRIO_INHERIT
,

246 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

247 
	m_SC_THREAD_PRIO_PROTECT
,

248 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

249 
	m_SC_THREAD_PROCESS_SHARED
,

250 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

252 
	m_SC_NPROCESSORS_CONF
,

253 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

254 
	m_SC_NPROCESSORS_ONLN
,

255 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

256 
	m_SC_PHYS_PAGES
,

257 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

258 
	m_SC_AVPHYS_PAGES
,

259 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

260 
	m_SC_ATEXIT_MAX
,

261 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

262 
	m_SC_PASS_MAX
,

263 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

265 
	m_SC_XOPEN_VERSION
,

266 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

267 
	m_SC_XOPEN_XCU_VERSION
,

268 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

269 
	m_SC_XOPEN_UNIX
,

270 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

271 
	m_SC_XOPEN_CRYPT
,

272 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

273 
	m_SC_XOPEN_ENH_I18N
,

274 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

275 
	m_SC_XOPEN_SHM
,

276 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

278 
	m_SC_2_CHAR_TERM
,

279 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

280 
	m_SC_2_C_VERSION
,

281 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

282 
	m_SC_2_UPE
,

283 
	#_SC_2_UPE
 
_SC_2_UPE


	)

285 
	m_SC_XOPEN_XPG2
,

286 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

287 
	m_SC_XOPEN_XPG3
,

288 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

289 
	m_SC_XOPEN_XPG4
,

290 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

292 
	m_SC_CHAR_BIT
,

293 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

294 
	m_SC_CHAR_MAX
,

295 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

296 
	m_SC_CHAR_MIN
,

297 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

298 
	m_SC_INT_MAX
,

299 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

300 
	m_SC_INT_MIN
,

301 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

302 
	m_SC_LONG_BIT
,

303 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

304 
	m_SC_WORD_BIT
,

305 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

306 
	m_SC_MB_LEN_MAX
,

307 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

308 
	m_SC_NZERO
,

309 
	#_SC_NZERO
 
_SC_NZERO


	)

310 
	m_SC_SSIZE_MAX
,

311 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

312 
	m_SC_SCHAR_MAX
,

313 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

314 
	m_SC_SCHAR_MIN
,

315 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

316 
	m_SC_SHRT_MAX
,

317 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

318 
	m_SC_SHRT_MIN
,

319 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

320 
	m_SC_UCHAR_MAX
,

321 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

322 
	m_SC_UINT_MAX
,

323 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

324 
	m_SC_ULONG_MAX
,

325 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

326 
	m_SC_USHRT_MAX
,

327 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

329 
	m_SC_NL_ARGMAX
,

330 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

331 
	m_SC_NL_LANGMAX
,

332 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

333 
	m_SC_NL_MSGMAX
,

334 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

335 
	m_SC_NL_NMAX
,

336 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

337 
	m_SC_NL_SETMAX
,

338 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

339 
	m_SC_NL_TEXTMAX
,

340 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

342 
	m_SC_XBS5_ILP32_OFF32
,

343 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

344 
	m_SC_XBS5_ILP32_OFFBIG
,

345 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

346 
	m_SC_XBS5_LP64_OFF64
,

347 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

348 
	m_SC_XBS5_LPBIG_OFFBIG
,

349 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

351 
	m_SC_XOPEN_LEGACY
,

352 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

353 
	m_SC_XOPEN_REALTIME
,

354 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

355 
	m_SC_XOPEN_REALTIME_THREADS
,

356 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

358 
	m_SC_ADVISORY_INFO
,

359 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

360 
	m_SC_BARRIERS
,

361 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

362 
	m_SC_BASE
,

363 
	#_SC_BASE
 
_SC_BASE


	)

364 
	m_SC_C_LANG_SUPPORT
,

365 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

366 
	m_SC_C_LANG_SUPPORT_R
,

367 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

368 
	m_SC_CLOCK_SELECTION
,

369 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

370 
	m_SC_CPUTIME
,

371 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

372 
	m_SC_THREAD_CPUTIME
,

373 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

374 
	m_SC_DEVICE_IO
,

375 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

376 
	m_SC_DEVICE_SPECIFIC
,

377 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

378 
	m_SC_DEVICE_SPECIFIC_R
,

379 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

380 
	m_SC_FD_MGMT
,

381 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

382 
	m_SC_FIFO
,

383 
	#_SC_FIFO
 
_SC_FIFO


	)

384 
	m_SC_PIPE
,

385 
	#_SC_PIPE
 
_SC_PIPE


	)

386 
	m_SC_FILE_ATTRIBUTES
,

387 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

388 
	m_SC_FILE_LOCKING
,

389 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

390 
	m_SC_FILE_SYSTEM
,

391 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

392 
	m_SC_MONOTONIC_CLOCK
,

393 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

394 
	m_SC_MULTI_PROCESS
,

395 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

396 
	m_SC_SINGLE_PROCESS
,

397 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

398 
	m_SC_NETWORKING
,

399 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

400 
	m_SC_READER_WRITER_LOCKS
,

401 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

402 
	m_SC_SPIN_LOCKS
,

403 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

404 
	m_SC_REGEXP
,

405 
	#_SC_REGEXP
 
_SC_REGEXP


	)

406 
	m_SC_REGEX_VERSION
,

407 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

408 
	m_SC_SHELL
,

409 
	#_SC_SHELL
 
_SC_SHELL


	)

410 
	m_SC_SIGNALS
,

411 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

412 
	m_SC_SPAWN
,

413 
	#_SC_SPAWN
 
_SC_SPAWN


	)

414 
	m_SC_SPORADIC_SERVER
,

415 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

416 
	m_SC_THREAD_SPORADIC_SERVER
,

417 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

418 
	m_SC_SYSTEM_DATABASE
,

419 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

420 
	m_SC_SYSTEM_DATABASE_R
,

421 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

422 
	m_SC_TIMEOUTS
,

423 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

424 
	m_SC_TYPED_MEMORY_OBJECTS
,

425 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

426 
	m_SC_USER_GROUPS
,

427 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

428 
	m_SC_USER_GROUPS_R
,

429 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

430 
	m_SC_2_PBS
,

431 
	#_SC_2_PBS
 
_SC_2_PBS


	)

432 
	m_SC_2_PBS_ACCOUNTING
,

433 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

434 
	m_SC_2_PBS_LOCATE
,

435 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

436 
	m_SC_2_PBS_MESSAGE
,

437 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

438 
	m_SC_2_PBS_TRACK
,

439 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

440 
	m_SC_SYMLOOP_MAX
,

441 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

442 
	m_SC_STREAMS
,

443 
	#_SC_STREAMS
 
_SC_STREAMS


	)

444 
	m_SC_2_PBS_CHECKPOINT
,

445 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

447 
	m_SC_V6_ILP32_OFF32
,

448 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

449 
	m_SC_V6_ILP32_OFFBIG
,

450 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

451 
	m_SC_V6_LP64_OFF64
,

452 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

453 
	m_SC_V6_LPBIG_OFFBIG
,

454 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

456 
	m_SC_HOST_NAME_MAX
,

457 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

458 
	m_SC_TRACE
,

459 
	#_SC_TRACE
 
_SC_TRACE


	)

460 
	m_SC_TRACE_EVENT_FILTER
,

461 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

462 
	m_SC_TRACE_INHERIT
,

463 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

464 
	m_SC_TRACE_LOG
,

465 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

467 
	m_SC_LEVEL1_ICACHE_SIZE
,

468 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

469 
	m_SC_LEVEL1_ICACHE_ASSOC
,

470 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

471 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

472 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

473 
	m_SC_LEVEL1_DCACHE_SIZE
,

474 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

475 
	m_SC_LEVEL1_DCACHE_ASSOC
,

476 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

477 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

478 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

479 
	m_SC_LEVEL2_CACHE_SIZE
,

480 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

481 
	m_SC_LEVEL2_CACHE_ASSOC
,

482 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

483 
	m_SC_LEVEL2_CACHE_LINESIZE
,

484 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

485 
	m_SC_LEVEL3_CACHE_SIZE
,

486 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

487 
	m_SC_LEVEL3_CACHE_ASSOC
,

488 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

489 
	m_SC_LEVEL3_CACHE_LINESIZE
,

490 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

491 
	m_SC_LEVEL4_CACHE_SIZE
,

492 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

493 
	m_SC_LEVEL4_CACHE_ASSOC
,

494 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

495 
	m_SC_LEVEL4_CACHE_LINESIZE
,

496 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

499 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

500 
	#_SC_IPV6
 
_SC_IPV6


	)

501 
	m_SC_RAW_SOCKETS


502 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

508 
	m_CS_PATH
,

509 
	#_CS_PATH
 
_CS_PATH


	)

511 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

512 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

513 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

515 
	m_CS_GNU_LIBC_VERSION
,

516 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

517 
	m_CS_GNU_LIBPTHREAD_VERSION
,

518 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

520 
	m_CS_LFS_CFLAGS
 = 1000,

521 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

522 
	m_CS_LFS_LDFLAGS
,

523 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

524 
	m_CS_LFS_LIBS
,

525 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

526 
	m_CS_LFS_LINTFLAGS
,

527 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

528 
	m_CS_LFS64_CFLAGS
,

529 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

530 
	m_CS_LFS64_LDFLAGS
,

531 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

532 
	m_CS_LFS64_LIBS
,

533 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

534 
	m_CS_LFS64_LINTFLAGS
,

535 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

537 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

538 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

539 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

540 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

541 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

542 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

543 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

544 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

545 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

546 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

547 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

548 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

549 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

550 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

551 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

552 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

553 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

554 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

555 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

556 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

557 
	m_CS_XBS5_LP64_OFF64_LIBS
,

558 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

559 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

560 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

561 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

562 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

563 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

564 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

565 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

566 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

567 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

568 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

570 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

571 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

572 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

573 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

574 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

575 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

576 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

577 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

578 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

579 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

580 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

581 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

582 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

583 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

584 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

585 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

586 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

587 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

588 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

589 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

590 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

591 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

592 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

593 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

594 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

595 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

596 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

597 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

598 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

599 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

600 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


601 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

	@/usr/include/bits/environments.h

19 #i‚de‡
_UNISTD_H


23 
	~<bôs/w‹dsize.h
>

41 #i‡
__WORDSIZE
 == 64

53 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

54 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

57 
	#_POSIX_V6_LP64_OFF64
 1

	)

58 
	#_XBS5_LP64_OFF64
 1

	)

64 
	#_POSIX_V6_ILP32_OFF32
 1

	)

65 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

66 
	#_XBS5_ILP32_OFF32
 1

	)

67 
	#_XBS5_ILP32_OFFBIG
 1

	)

82 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

83 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

84 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

85 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

86 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

87 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

20 #ifde‡
_ERRNO_H


22 #unde‡
EDOM


23 #unde‡
EILSEQ


24 #unde‡
ERANGE


25 
	~<löux/î∫o.h
>

28 
	#ENOTSUP
 
EOPNOTSUPP


	)

31 #i‚de‡
ECANCELED


32 
	#ECANCELED
 125

	)

36 #i‚de‡
EOWNERDEAD


37 
	#EOWNERDEAD
 130

	)

38 
	#ENOTRECOVERABLE
 131

	)

41 #i‚de‡
__ASSEMBLER__


43 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

45 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


47 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

52 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


56 
	#EDOM
 33

	)

57 
	#EILSEQ
 84

	)

58 
	#ERANGE
 34

	)

	@/usr/include/bits/fcntl.h

20 #i‚def 
_FCNTL_H


24 
	~<sys/ty≥s.h
>

25 
	~<bôs/w‹dsize.h
>

26 #ifde‡
__USE_GNU


27 
	~<bôs/uio.h
>

33 
	#O_ACCMODE
 0003

	)

34 
	#O_RDONLY
 00

	)

35 
	#O_WRONLY
 01

	)

36 
	#O_RDWR
 02

	)

37 
	#O_CREAT
 0100

	)

38 
	#O_EXCL
 0200

	)

39 
	#O_NOCTTY
 0400

	)

40 
	#O_TRUNC
 01000

	)

41 
	#O_APPEND
 02000

	)

42 
	#O_NONBLOCK
 04000

	)

43 
	#O_NDELAY
 
O_NONBLOCK


	)

44 
	#O_SYNC
 010000

	)

45 
	#O_FSYNC
 
O_SYNC


	)

46 
	#O_ASYNC
 020000

	)

48 #ifde‡
__USE_GNU


49 
	#O_DIRECT
 040000

	)

50 
	#O_DIRECTORY
 0200000

	)

51 
	#O_NOFOLLOW
 0400000

	)

52 
	#O_NOATIME
 01000000

	)

53 
	#O_CLOEXEC
 02000000

	)

59 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


60 
	#O_DSYNC
 
O_SYNC


	)

61 
	#O_RSYNC
 
O_SYNC


	)

64 #ifde‡
__USE_LARGEFILE64


65 #i‡
__WORDSIZE
 == 64

66 
	#O_LARGEFILE
 0

	)

68 
	#O_LARGEFILE
 0100000

	)

73 
	#F_DUPFD
 0

	)

74 
	#F_GETFD
 1

	)

75 
	#F_SETFD
 2

	)

76 
	#F_GETFL
 3

	)

77 
	#F_SETFL
 4

	)

78 #i‡
__WORDSIZE
 == 64

79 
	#F_GETLK
 5

	)

80 
	#F_SETLK
 6

	)

81 
	#F_SETLKW
 7

	)

83 
	#F_GETLK64
 5

	)

84 
	#F_SETLK64
 6

	)

85 
	#F_SETLKW64
 7

	)

87 #i‚de‡
__USE_FILE_OFFSET64


88 
	#F_GETLK
 5

	)

89 
	#F_SETLK
 6

	)

90 
	#F_SETLKW
 7

	)

92 
	#F_GETLK
 
F_GETLK64


	)

93 
	#F_SETLK
 
F_SETLK64


	)

94 
	#F_SETLKW
 
F_SETLKW64


	)

96 
	#F_GETLK64
 12

	)

97 
	#F_SETLK64
 13

	)

98 
	#F_SETLKW64
 14

	)

101 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


102 
	#F_SETOWN
 8

	)

103 
	#F_GETOWN
 9

	)

106 #ifde‡
__USE_GNU


107 
	#F_SETSIG
 10

	)

108 
	#F_GETSIG
 11

	)

111 #ifde‡
__USE_GNU


112 
	#F_SETLEASE
 1024

	)

113 
	#F_GETLEASE
 1025

	)

114 
	#F_NOTIFY
 1026

	)

115 
	#F_DUPFD_CLOEXEC
 1030

	)

120 
	#FD_CLOEXEC
 1

	)

123 
	#F_RDLCK
 0

	)

124 
	#F_WRLCK
 1

	)

125 
	#F_UNLCK
 2

	)

128 
	#F_EXLCK
 4

	)

129 
	#F_SHLCK
 8

	)

131 #ifde‡
__USE_BSD


133 
	#LOCK_SH
 1

	)

134 
	#LOCK_EX
 2

	)

135 
	#LOCK_NB
 4

	)

137 
	#LOCK_UN
 8

	)

140 #ifde‡
__USE_GNU


141 
	#LOCK_MAND
 32

	)

142 
	#LOCK_READ
 64

	)

143 
	#LOCK_WRITE
 128

	)

144 
	#LOCK_RW
 192

	)

147 #ifde‡
__USE_GNU


149 
	#DN_ACCESS
 0x00000001

	)

150 
	#DN_MODIFY
 0x00000002

	)

151 
	#DN_CREATE
 0x00000004

	)

152 
	#DN_DELETE
 0x00000008

	)

153 
	#DN_RENAME
 0x00000010

	)

154 
	#DN_ATTRIB
 0x00000020

	)

155 
	#DN_MULTISHOT
 0x80000000

	)

158 
	sÊock


160 
	ml_ty≥
;

161 
	ml_whí˚
;

162 #i‚de‡
__USE_FILE_OFFSET64


163 
__off_t
 
	ml_°¨t
;

164 
__off_t
 
	ml_Àn
;

166 
__off64_t
 
	ml_°¨t
;

167 
__off64_t
 
	ml_Àn
;

169 
__pid_t
 
	ml_pid
;

172 #ifde‡
__USE_LARGEFILE64


173 
	sÊock64


175 
	ml_ty≥
;

176 
	ml_whí˚
;

177 
__off64_t
 
	ml_°¨t
;

178 
__off64_t
 
	ml_Àn
;

179 
__pid_t
 
	ml_pid
;

185 #ifdef 
__USE_BSD


186 
	#FAPPEND
 
O_APPEND


	)

187 
	#FFSYNC
 
O_FSYNC


	)

188 
	#FASYNC
 
O_ASYNC


	)

189 
	#FNONBLOCK
 
O_NONBLOCK


	)

190 
	#FNDELAY
 
O_NDELAY


	)

194 #ifde‡
__USE_XOPEN2K


195 
	#POSIX_FADV_NORMAL
 0

	)

196 
	#POSIX_FADV_RANDOM
 1

	)

197 
	#POSIX_FADV_SEQUENTIAL
 2

	)

198 
	#POSIX_FADV_WILLNEED
 3

	)

199 
	#POSIX_FADV_DONTNEED
 4

	)

200 
	#POSIX_FADV_NOREUSE
 5

	)

204 #ifde‡
__USE_GNU


206 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

209 
	#SYNC_FILE_RANGE_WRITE
 2

	)

212 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

217 
	#SPLICE_F_MOVE
 1

	)

218 
	#SPLICE_F_NONBLOCK
 2

	)

221 
	#SPLICE_F_MORE
 4

	)

222 
	#SPLICE_F_GIFT
 8

	)

225 
	g__BEGIN_DECLS


227 #ifde‡
__USE_GNU


230 
ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

231 
__THROW
;

235 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__‰om
, __off64_à
__to
,

236 
__Êags
);

240 
ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

241 
size_t
 
__cou¡
, 
__Êags
);

244 
ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

245 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

246 
__Êags
);

249 
ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

250 
__Êags
);

254 
__END_DECLS


	@/usr/include/bits/fcntl2.h

20 #i‚def 
_FCNTL_H


26 #i‚de‡
__USE_FILE_OFFSET64


27 
	$__›í_2
 (
__c⁄°
 *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

28 
	`__REDIRECT
 (
__›í_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
, ...),

29 
›í
Ë
	`__n⁄nuŒ
 ((1));

31 
	`__REDIRECT
 (
__›í_2
, (
__c⁄°
 *
__∑th
, 
__oÊag
),

32 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

33 
	`__REDIRECT
 (
__›í_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
, ...),

34 
›í64
Ë
	`__n⁄nuŒ
 ((1));

36 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

38 
	`__îr‹de˛
 (
__›í_missög_mode
,

41 
__exã∫_Æways_ölöe
 

42 
	$›í
 (
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

44 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

45 
	`__›í_too_m™y_¨gs
 ();

47 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

49 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

51 
	`__›í_missög_mode
 ();

52  
	`__›í_2
 (
__∑th
, 
__oÊag
);

54  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

57 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

58  
	`__›í_2
 (
__∑th
, 
__oÊag
);

60  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

61 
	}
}

64 #ifde‡
__USE_LARGEFILE64


65 
	$__›í64_2
 (
__c⁄°
 *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

66 
	`__REDIRECT
 (
__›í64_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
,

67 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

68 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

70 
	`__îr‹de˛
 (
__›í64_missög_mode
,

73 
__exã∫_Æways_ölöe
 

74 
	$›í64
 (
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

76 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

77 
	`__›í64_too_m™y_¨gs
 ();

79 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

81 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

83 
	`__›í64_missög_mode
 ();

84  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

86  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

89 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

90  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

92  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

93 
	}
}

97 #ifde‡
__USE_ATFILE


98 #i‚de‡
__USE_FILE_OFFSET64


99 
	$__›í©_2
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
)

100 
	`__n⁄nuŒ
 ((2));

101 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

102 
__oÊag
, ...), 
›í©
)

103 
	`__n⁄nuŒ
 ((2));

105 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, 
__c⁄°
 *
__∑th
,

106 
__oÊag
), 
__›í©64_2
)

107 
	`__n⁄nuŒ
 ((2));

108 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

109 
__oÊag
, ...), 
›í©64
)

110 
	`__n⁄nuŒ
 ((2));

112 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

114 
	`__îr‹de˛
 (
__›í©_missög_mode
,

117 
__exã∫_Æways_ölöe
 

118 
	$›í©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

120 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

121 
	`__›í©_too_m™y_¨gs
 ();

123 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

125 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

127 
	`__›í©_missög_mode
 ();

128  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

130  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

133 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

134  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

136  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

137 
	}
}

140 #ifde‡
__USE_LARGEFILE64


141 
	$__›í©64_2
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
)

142 
	`__n⁄nuŒ
 ((2));

143 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

144 
__oÊag
, ...), 
›í©64
)

145 
	`__n⁄nuŒ
 ((2));

146 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

148 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

151 
__exã∫_Æways_ölöe
 

152 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

154 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

155 
	`__›í©64_too_m™y_¨gs
 ();

157 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

159 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

161 
	`__›í©64_missög_mode
 ();

162  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

164  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

167 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

168  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

170  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

171 
	}
}

	@/usr/include/bits/posix_opt.h

20 #i‚def 
_POSIX_OPT_H


21 
	#_POSIX_OPT_H
 1

	)

24 
	#_POSIX_JOB_CONTROL
 1

	)

27 
	#_POSIX_SAVED_IDS
 1

	)

30 
	#_POSIX_PRIORITY_SCHEDULING
 200112L

	)

33 
	#_POSIX_SYNCHRONIZED_IO
 200112L

	)

36 
	#_POSIX_FSYNC
 200112L

	)

39 
	#_POSIX_MAPPED_FILES
 200112L

	)

42 
	#_POSIX_MEMLOCK
 200112L

	)

45 
	#_POSIX_MEMLOCK_RANGE
 200112L

	)

48 
	#_POSIX_MEMORY_PROTECTION
 200112L

	)

51 
	#_POSIX_CHOWN_RESTRICTED
 1

	)

55 
	#_POSIX_VDISABLE
 '\0'

	)

58 
	#_POSIX_NO_TRUNC
 1

	)

61 
	#_XOPEN_REALTIME
 1

	)

64 
	#_XOPEN_REALTIME_THREADS
 1

	)

67 
	#_XOPEN_SHM
 1

	)

70 
	#_POSIX_THREADS
 200112L

	)

73 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

74 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200112L

	)

77 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200112L

	)

80 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200112L

	)

83 
	#_POSIX_THREAD_ATTR_STACKADDR
 200112L

	)

86 
	#_POSIX_THREAD_PRIO_INHERIT
 200112L

	)

90 
	#_POSIX_THREAD_PRIO_PROTECT
 200112L

	)

93 
	#_POSIX_SEMAPHORES
 200112L

	)

96 
	#_POSIX_REALTIME_SIGNALS
 200112L

	)

99 
	#_POSIX_ASYNCHRONOUS_IO
 200112L

	)

100 
	#_POSIX_ASYNC_IO
 1

	)

102 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

104 
	#_POSIX_PRIORITIZED_IO
 200112L

	)

107 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

110 
	#_LFS_LARGEFILE
 1

	)

111 
	#_LFS64_LARGEFILE
 1

	)

112 
	#_LFS64_STDIO
 1

	)

115 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200112L

	)

118 
	#_POSIX_CPUTIME
 0

	)

121 
	#_POSIX_THREAD_CPUTIME
 0

	)

124 
	#_POSIX_REGEXP
 1

	)

127 
	#_POSIX_READER_WRITER_LOCKS
 200112L

	)

130 
	#_POSIX_SHELL
 1

	)

133 
	#_POSIX_TIMEOUTS
 200112L

	)

136 
	#_POSIX_SPIN_LOCKS
 200112L

	)

139 
	#_POSIX_SPAWN
 200112L

	)

142 
	#_POSIX_TIMERS
 200112L

	)

145 
	#_POSIX_BARRIERS
 200112L

	)

148 
	#_POSIX_MESSAGE_PASSING
 200112L

	)

151 
	#_POSIX_THREAD_PROCESS_SHARED
 200112L

	)

154 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

157 
	#_POSIX_CLOCK_SELECTION
 200112L

	)

160 
	#_POSIX_ADVISORY_INFO
 200112L

	)

163 
	#_POSIX_IPV6
 200112L

	)

166 
	#_POSIX_RAW_SOCKETS
 200112L

	)

169 
	#_POSIX2_CHAR_TERM
 200112L

	)

172 
	#_POSIX_SPORADIC_SERVER
 -1

	)

173 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

176 
	#_POSIX_TRACE
 -1

	)

177 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

178 
	#_POSIX_TRACE_INHERIT
 -1

	)

179 
	#_POSIX_TRACE_LOG
 -1

	)

182 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

20 #i‚de‡
_BITS_PTHREADTYPES_H


21 
	#_BITS_PTHREADTYPES_H
 1

	)

23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

28 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

29 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

30 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

31 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

32 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

33 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

34 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

36 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

37 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

38 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

39 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

40 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

41 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

42 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

43 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

44 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

50 
	t±hªad_t
;

55 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

56 
	m__Æign
;

57 } 
	t±hªad_©å_t
;

60 #i‡
__WORDSIZE
 == 64

61 
	s__±hªad_öã∫Æ_li°


63 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

64 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

65 } 
	t__±hªad_li°_t
;

67 
	s__±hªad_öã∫Æ_¶i°


69 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

70 } 
	t__±hªad_¶i°_t
;

78 
	s__±hªad_muãx_s


80 
	m__lock
;

81 
	m__cou¡
;

82 
	m__ow√r
;

83 #i‡
__WORDSIZE
 == 64

84 
	m__nu£rs
;

88 
	m__köd
;

89 #i‡
__WORDSIZE
 == 64

90 
	m__•ös
;

91 
__±hªad_li°_t
 
	m__li°
;

92 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

94 
	m__nu£rs
;

95 
__exãnsi⁄__
 union

97 
	m__•ös
;

98 
__±hªad_¶i°_t
 
	m__li°
;

101 } 
	m__d©a
;

102 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

103 
	m__Æign
;

104 } 
	t±hªad_muãx_t
;

108 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

109 
	m__Æign
;

110 } 
	t±hªad_muãx©å_t
;

119 
	m__lock
;

120 
	m__fuãx
;

121 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

122 
__exãnsi⁄__
 
	m__wakeup_£q
;

123 
__exãnsi⁄__
 
	m__wokí_£q
;

124 *
	m__muãx
;

125 
	m__nwaôîs
;

126 
	m__brﬂdˇ°_£q
;

127 } 
	m__d©a
;

128 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

129 
__exãnsi⁄__
 
	m__Æign
;

130 } 
	t±hªad_c⁄d_t
;

134 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

135 
	m__Æign
;

136 } 
	t±hªad_c⁄d©å_t
;

140 
	t±hªad_key_t
;

144 
	t±hªad_⁄˚_t
;

147 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


152 #i‡
__WORDSIZE
 == 64

155 
	m__lock
;

156 
	m__ƒ_ªadîs
;

157 
	m__ªadîs_wakeup
;

158 
	m__wrôî_wakeup
;

159 
	m__ƒ_ªadîs_queued
;

160 
	m__ƒ_wrôîs_queued
;

161 
	m__wrôî
;

162 
	m__sh¨ed
;

163 
	m__∑d1
;

164 
	m__∑d2
;

167 
	m__Êags
;

168 } 
	m__d©a
;

172 
	m__lock
;

173 
	m__ƒ_ªadîs
;

174 
	m__ªadîs_wakeup
;

175 
	m__wrôî_wakeup
;

176 
	m__ƒ_ªadîs_queued
;

177 
	m__ƒ_wrôîs_queued
;

180 
	m__Êags
;

181 
	m__sh¨ed
;

182 
	m__∑d1
;

183 
	m__∑d2
;

184 
	m__wrôî
;

185 } 
	m__d©a
;

187 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

188 
	m__Æign
;

189 } 
	t±hªad_rwlock_t
;

193 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

194 
	m__Æign
;

195 } 
	t±hªad_rwlock©å_t
;

199 #ifde‡
__USE_XOPEN2K


201 vﬁ©ûê
	t±hªad_•ölock_t
;

208 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

209 
	m__Æign
;

210 } 
	t±hªad_b¨rõr_t
;

214 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

215 
	m__Æign
;

216 } 
	t±hªad_b¨rõøâr_t
;

220 #i‡
__WORDSIZE
 == 32

222 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/sched.h

22 #i‚de‡
__√ed_sched∑øm


24 #i‚de‡
_SCHED_H


30 
	#SCHED_OTHER
 0

	)

31 
	#SCHED_FIFO
 1

	)

32 
	#SCHED_RR
 2

	)

33 #ifde‡
__USE_GNU


34 
	#SCHED_BATCH
 3

	)

37 #ifde‡
__USE_MISC


39 
	#CSIGNAL
 0x000000f‡

	)

40 
	#CLONE_VM
 0x00000100

	)

41 
	#CLONE_FS
 0x00000200

	)

42 
	#CLONE_FILES
 0x00000400

	)

43 
	#CLONE_SIGHAND
 0x00000800

	)

44 
	#CLONE_PTRACE
 0x00002000

	)

45 
	#CLONE_VFORK
 0x00004000

	)

47 
	#CLONE_PARENT
 0x00008000

	)

49 
	#CLONE_THREAD
 0x00010000

	)

50 
	#CLONE_NEWNS
 0x00020000

	)

51 
	#CLONE_SYSVSEM
 0x00040000

	)

52 
	#CLONE_SETTLS
 0x00080000

	)

53 
	#CLONE_PARENT_SETTID
 0x00100000

	)

55 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

57 
	#CLONE_DETACHED
 0x00400000

	)

58 
	#CLONE_UNTRACED
 0x00800000

	)

60 
	#CLONE_CHILD_SETTID
 0x01000000

	)

62 
	#CLONE_STOPPED
 0x02000000

	)

66 
	ssched_∑øm


68 
	m__sched_¥i‹ôy
;

71 
	g__BEGIN_DECLS


73 #ifde‡
__USE_MISC


75 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

76 
__Êags
, *
__¨g
, ...Ë
__THROW
;

79 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

82 
	$sched_gë˝u
 (Ë
__THROW
;

85 
__END_DECLS


89 #i‡!
deföed
 
__deföed_sched∑øm
 \

90 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

91 
	#__deföed_sched∑øm
 1

	)

93 
	s__sched_∑øm


95 
__sched_¥i‹ôy
;

97 #unde‡
__√ed_sched∑øm


101 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


102 
	#__˝u_£t_t_deföed


	)

104 
	#__CPU_SETSIZE
 1024

	)

105 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

108 
	t__˝u_mask
;

111 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

112 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

117 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

118 } 
	t˝u_£t_t
;

121 #i‡
	`__GNUC_PREREQ
 (2, 91)

122 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

123 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

125 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

127 
size_t
 
__i
; \

128 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

129 
˝u_£t_t
 *
__¨r
 = (
˝u£ç
); \

130 
__i
 = 0; __ò< 
__imax
; ++__i) \

131 
__¨r
->
__bôs
[
__i
] = 0; \

132 
	}
} 0)

	)

134 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

135 (
__exãnsi⁄__
 \

136 ({ 
size_t
 
__˝u
 = (
˝u
); \

137 
__˝u
 < 8 * (
£tsize
) \

138 ? ((
˝u£ç
)->
__bôs
[
	`__CPUELT
 (
__˝u
)] |
	`__CPUMASK
 (__˝u)Ë: 0; }))

	)

139 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

140 (
__exãnsi⁄__
 \

141 ({ 
size_t
 
__˝u
 = (
˝u
); \

142 
__˝u
 < 8 * (
£tsize
) \

143 ? ((
˝u£ç
)->
__bôs
[
	`__CPUELT
 (
__˝u
)] &~
	`__CPUMASK
 (__˝u)Ë: 0; }))

	)

144 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

145 (
__exãnsi⁄__
 \

146 ({ 
size_t
 
__˝u
 = (
˝u
); \

147 
__˝u
 < 8 * (
£tsize
) \

148 ? (((
˝u£ç
)->
__bôs
[
	`__CPUELT
 (
__˝u
)] & 
	`__CPUMASK
 (__cpu))) != 0 \

149 : 0; }))

	)

151 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

152 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

154 #i‡
__GNUC_PREREQ
 (2, 91)

155 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

156 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

158 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

159 (
__exãnsi⁄__
 \

160 ({ 
˝u_£t_t
 *
__¨r1
 = (
˝u£ç1
); \

161 
˝u_£t_t
 *
__¨r2
 = (
˝u£ç2
); \

162 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

163 
size_t
 
__i
; \

164 
__i
 = 0; __ò< 
__imax
; ++__i) \

165 i‡(
__¨r1
->
__bôs
[
__i
] !
__¨r2
->__bits[__i]) \

167 
__i
 =
__imax
; }))

	)

170 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

171 (
__exãnsi⁄__
 \

172 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

173 
˝u_£t_t
 *
__¨r1
 = (
§c£t1
); \

174 
˝u_£t_t
 *
__¨r2
 = (
§c£t2
); \

175 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

176 
size_t
 
__i
; \

177 
__i
 = 0; __ò< 
__imax
; ++__i) \

178 
__de°
->
__bôs
[
__i
] = 
__¨r1
->__bôs[__i] 
›
 
__¨r2
->__bits[__i]; \

179 
__de°
; }))

	)

181 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

182 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË* 8)

	)

183 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

184 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

186 
__BEGIN_DECLS


188 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

189 
__THROW
;

190 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

191 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

193 
__END_DECLS


	@/usr/include/bits/setjmp.h

20 #i‚de‡
_BITS_SETJMP_H


21 
	#_BITS_SETJMP_H
 1

	)

23 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


27 
	~<bôs/w‹dsize.h
>

29 #i‚de‡
_ASM


31 #i‡
__WORDSIZE
 == 64

32 
	t__jmp_buf
[8];

34 
	t__jmp_buf
[6];

	@/usr/include/bits/sigaction.h

20 #i‚de‡
_SIGNAL_H


25 
	ssiga˘i⁄


28 #ifde‡
__USE_POSIX199309


32 
__sigh™dÀr_t
 
	mß_h™dÀr
;

34 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

36 
	m__siga˘i⁄_h™dÀr
;

37 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

38 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

40 
__sigh™dÀr_t
 
	mß_h™dÀr
;

44 
__sig£t_t
 
	mß_mask
;

47 
	mß_Êags
;

50 (*
	mß_ª°‹î
) ();

54 
	#SA_NOCLDSTOP
 1

	)

55 
	#SA_NOCLDWAIT
 2

	)

56 
	#SA_SIGINFO
 4

	)

58 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


59 
	#SA_ONSTACK
 0x08000000

	)

60 
	#SA_RESTART
 0x10000000

	)

61 
	#SA_NODEFER
 0x40000000

	)

63 
	#SA_RESETHAND
 0x80000000

	)

65 #ifde‡
__USE_MISC


66 
	#SA_INTERRUPT
 0x20000000

	)

69 
	#SA_NOMASK
 
SA_NODEFER


	)

70 
	#SA_ONESHOT
 
SA_RESETHAND


	)

71 
	#SA_STACK
 
SA_ONSTACK


	)

75 
	#SIG_BLOCK
 0

	)

76 
	#SIG_UNBLOCK
 1

	)

77 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

19 #i‚de‡
_BITS_SIGCONTEXT_H


20 
	#_BITS_SIGCONTEXT_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


26 
	~<bôs/w‹dsize.h
>

28 
	s_Âªg


30 
	msignifiˇnd
[4];

31 
	mexp⁄ít
;

34 
	s_Âxªg


36 
	msignifiˇnd
[4];

37 
	mexp⁄ít
;

38 
	m∑ddög
[3];

41 
	s_xmmªg


43 
__uöt32_t
 
	mñemít
[4];

48 #i‡
__WORDSIZE
 == 32

50 
	s_Â°©e


53 
__uöt32_t
 
	mcw
;

54 
__uöt32_t
 
	msw
;

55 
__uöt32_t
 
	mèg
;

56 
__uöt32_t
 
	mùoff
;

57 
__uöt32_t
 
	mcs£l
;

58 
__uöt32_t
 
	md©aoff
;

59 
__uöt32_t
 
	md©a£l
;

60 
_Âªg
 
	m_°
[8];

61 
	m°©us
;

62 
	mmagic
;

65 
__uöt32_t
 
	m_fx§_ív
[6];

66 
__uöt32_t
 
	mmxc§
;

67 
__uöt32_t
 
	mª£rved
;

68 
_Âxªg
 
	m_fx§_°
[8];

69 
_xmmªg
 
	m_xmm
[8];

70 
__uöt32_t
 
	m∑ddög
[56];

73 #i‚de‡
sigc⁄ãxt_°ru˘


78 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

81 
	ssigc⁄ãxt


83 
	mgs
, 
	m__gsh
;

84 
	mfs
, 
	m__fsh
;

85 
	mes
, 
	m__esh
;

86 
	mds
, 
	m__dsh
;

87 
	medi
;

88 
	mesi
;

89 
	mebp
;

90 
	me•
;

91 
	mebx
;

92 
	medx
;

93 
	mecx
;

94 
	móx
;

95 
	må≠no
;

96 
	mîr
;

97 
	meù
;

98 
	mcs
, 
	m__csh
;

99 
	meÊags
;

100 
	me•_©_sig«l
;

101 
	mss
, 
	m__ssh
;

102 
_Â°©e
 * 
	mÂ°©e
;

103 
	mﬁdmask
;

104 
	m¸2
;

109 
	s_Â°©e


112 
__uöt16_t
 
	mcwd
;

113 
__uöt16_t
 
	mswd
;

114 
__uöt16_t
 
	m·w
;

115 
__uöt16_t
 
	mf›
;

116 
__uöt64_t
 
	mrù
;

117 
__uöt64_t
 
	mrdp
;

118 
__uöt32_t
 
	mmxc§
;

119 
__uöt32_t
 
	mmx¸_mask
;

120 
_Âxªg
 
	m_°
[8];

121 
_xmmªg
 
	m_xmm
[16];

122 
__uöt32_t
 
	m∑ddög
[24];

125 
	ssigc⁄ãxt


127 
	mr8
;

128 
	mr9
;

129 
	mr10
;

130 
	mr11
;

131 
	mr12
;

132 
	mr13
;

133 
	mr14
;

134 
	mr15
;

135 
	mrdi
;

136 
	mrsi
;

137 
	mrbp
;

138 
	mrbx
;

139 
	mrdx
;

140 
	møx
;

141 
	mrcx
;

142 
	mr•
;

143 
	mrù
;

144 
	meÊags
;

145 
	mcs
;

146 
	mgs
;

147 
	mfs
;

148 
	m__∑d0
;

149 
	mîr
;

150 
	må≠no
;

151 
	mﬁdmask
;

152 
	m¸2
;

153 
_Â°©e
 * 
	mÂ°©e
;

154 
	m__ª£rved1
 [8];

	@/usr/include/bits/siginfo.h

20 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

21 && !
deföed
 
	g__√ed_sigevít_t


25 
	~<bôs/w‹dsize.h
>

27 #i‡(!
deföed
 
__have_sigvÆ_t
 \

28 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

29 || 
deföed
 
	g__√ed_sigevít_t
))

30 
	#__have_sigvÆ_t
 1

	)

33 
	usigvÆ


35 
	msivÆ_öt
;

36 *
	msivÆ_±r
;

37 } 
	tsigvÆ_t
;

40 #i‡(!
deföed
 
__have_sigöfo_t
 \

41 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

42 
	#__have_sigöfo_t
 1

	)

44 
	#__SI_MAX_SIZE
 128

	)

45 #i‡
__WORDSIZE
 == 64

46 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

48 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

51 
	ssigöfo


53 
	msi_signo
;

54 
	msi_î∫o
;

56 
	msi_code
;

60 
	m_∑d
[
__SI_PAD_SIZE
];

65 
__pid_t
 
	msi_pid
;

66 
__uid_t
 
	msi_uid
;

67 } 
	m_kûl
;

72 
	msi_tid
;

73 
	msi_ovîrun
;

74 
sigvÆ_t
 
	msi_sigvÆ
;

75 } 
	m_timî
;

80 
__pid_t
 
	msi_pid
;

81 
__uid_t
 
	msi_uid
;

82 
sigvÆ_t
 
	msi_sigvÆ
;

83 } 
	m_π
;

88 
__pid_t
 
	msi_pid
;

89 
__uid_t
 
	msi_uid
;

90 
	msi_°©us
;

91 
__˛ock_t
 
	msi_utime
;

92 
__˛ock_t
 
	msi_°ime
;

93 } 
	m_sigchld
;

98 *
	msi_addr
;

99 } 
	m_sigÁu…
;

104 
	msi_b™d
;

105 
	msi_fd
;

106 } 
	m_sigpﬁl
;

107 } 
	m_sifõlds
;

108 } 
	tsigöfo_t
;

112 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

113 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

114 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

115 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

116 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

117 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

118 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

119 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

120 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

121 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

122 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

123 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

124 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

131 
	mSI_ASYNCNL
 = -60,

132 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

133 
	mSI_TKILL
 = -6,

134 
	#SI_TKILL
 
SI_TKILL


	)

135 
	mSI_SIGIO
,

136 
	#SI_SIGIO
 
SI_SIGIO


	)

137 
	mSI_ASYNCIO
,

138 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

139 
	mSI_MESGQ
,

140 
	#SI_MESGQ
 
SI_MESGQ


	)

141 
	mSI_TIMER
,

142 
	#SI_TIMER
 
SI_TIMER


	)

143 
	mSI_QUEUE
,

144 
	#SI_QUEUE
 
SI_QUEUE


	)

145 
	mSI_USER
,

146 
	#SI_USER
 
SI_USER


	)

147 
	mSI_KERNEL
 = 0x80

148 
	#SI_KERNEL
 
SI_KERNEL


	)

155 
	mILL_ILLOPC
 = 1,

156 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

157 
	mILL_ILLOPN
,

158 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

159 
	mILL_ILLADR
,

160 
	#ILL_ILLADR
 
ILL_ILLADR


	)

161 
	mILL_ILLTRP
,

162 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

163 
	mILL_PRVOPC
,

164 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

165 
	mILL_PRVREG
,

166 
	#ILL_PRVREG
 
ILL_PRVREG


	)

167 
	mILL_COPROC
,

168 
	#ILL_COPROC
 
ILL_COPROC


	)

169 
	mILL_BADSTK


170 
	#ILL_BADSTK
 
ILL_BADSTK


	)

176 
	mFPE_INTDIV
 = 1,

177 
	#FPE_INTDIV
 
FPE_INTDIV


	)

178 
	mFPE_INTOVF
,

179 
	#FPE_INTOVF
 
FPE_INTOVF


	)

180 
	mFPE_FLTDIV
,

181 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

182 
	mFPE_FLTOVF
,

183 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

184 
	mFPE_FLTUND
,

185 
	#FPE_FLTUND
 
FPE_FLTUND


	)

186 
	mFPE_FLTRES
,

187 
	#FPE_FLTRES
 
FPE_FLTRES


	)

188 
	mFPE_FLTINV
,

189 
	#FPE_FLTINV
 
FPE_FLTINV


	)

190 
	mFPE_FLTSUB


191 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

197 
	mSEGV_MAPERR
 = 1,

198 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

199 
	mSEGV_ACCERR


200 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

206 
	mBUS_ADRALN
 = 1,

207 
	#BUS_ADRALN
 
BUS_ADRALN


	)

208 
	mBUS_ADRERR
,

209 
	#BUS_ADRERR
 
BUS_ADRERR


	)

210 
	mBUS_OBJERR


211 
	#BUS_OBJERR
 
BUS_OBJERR


	)

217 
	mTRAP_BRKPT
 = 1,

218 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

219 
	mTRAP_TRACE


220 
	#TRAP_TRACE
 
TRAP_TRACE


	)

226 
	mCLD_EXITED
 = 1,

227 
	#CLD_EXITED
 
CLD_EXITED


	)

228 
	mCLD_KILLED
,

229 
	#CLD_KILLED
 
CLD_KILLED


	)

230 
	mCLD_DUMPED
,

231 
	#CLD_DUMPED
 
CLD_DUMPED


	)

232 
	mCLD_TRAPPED
,

233 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

234 
	mCLD_STOPPED
,

235 
	#CLD_STOPPED
 
CLD_STOPPED


	)

236 
	mCLD_CONTINUED


237 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

243 
	mPOLL_IN
 = 1,

244 
	#POLL_IN
 
POLL_IN


	)

245 
	mPOLL_OUT
,

246 
	#POLL_OUT
 
POLL_OUT


	)

247 
	mPOLL_MSG
,

248 
	#POLL_MSG
 
POLL_MSG


	)

249 
	mPOLL_ERR
,

250 
	#POLL_ERR
 
POLL_ERR


	)

251 
	mPOLL_PRI
,

252 
	#POLL_PRI
 
POLL_PRI


	)

253 
	mPOLL_HUP


254 
	#POLL_HUP
 
POLL_HUP


	)

257 #unde‡
__√ed_sigöfo_t


261 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

262 && !
deföed
 
	g__have_sigevít_t


263 
	#__have_sigevít_t
 1

	)

266 
	#__SIGEV_MAX_SIZE
 64

	)

267 #i‡
__WORDSIZE
 == 64

268 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

270 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

273 
	ssigevít


275 
sigvÆ_t
 
	msigev_vÆue
;

276 
	msigev_signo
;

277 
	msigev_nŸify
;

281 
	m_∑d
[
__SIGEV_PAD_SIZE
];

285 
__pid_t
 
	m_tid
;

289 (*
	m_fun˘i⁄
Ë(
	msigvÆ_t
);

290 *
	m_©åibuã
;

291 } 
	m_sigev_thªad
;

292 } 
	m_sigev_un
;

293 } 
	tsigevít_t
;

296 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

297 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

302 
	mSIGEV_SIGNAL
 = 0,

303 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

304 
	mSIGEV_NONE
,

305 
	#SIGEV_NONE
 
SIGEV_NONE


	)

306 
	mSIGEV_THREAD
,

307 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

309 
	mSIGEV_THREAD_ID
 = 4

310 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/signum.h

20 #ifdef 
_SIGNAL_H


23 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

24 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

25 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

27 #ifde‡
__USE_UNIX98


28 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

33 
	#SIGHUP
 1

	)

34 
	#SIGINT
 2

	)

35 
	#SIGQUIT
 3

	)

36 
	#SIGILL
 4

	)

37 
	#SIGTRAP
 5

	)

38 
	#SIGABRT
 6

	)

39 
	#SIGIOT
 6

	)

40 
	#SIGBUS
 7

	)

41 
	#SIGFPE
 8

	)

42 
	#SIGKILL
 9

	)

43 
	#SIGUSR1
 10

	)

44 
	#SIGSEGV
 11

	)

45 
	#SIGUSR2
 12

	)

46 
	#SIGPIPE
 13

	)

47 
	#SIGALRM
 14

	)

48 
	#SIGTERM
 15

	)

49 
	#SIGSTKFLT
 16

	)

50 
	#SIGCLD
 
SIGCHLD


	)

51 
	#SIGCHLD
 17

	)

52 
	#SIGCONT
 18

	)

53 
	#SIGSTOP
 19

	)

54 
	#SIGTSTP
 20

	)

55 
	#SIGTTIN
 21

	)

56 
	#SIGTTOU
 22

	)

57 
	#SIGURG
 23

	)

58 
	#SIGXCPU
 24

	)

59 
	#SIGXFSZ
 25

	)

60 
	#SIGVTALRM
 26

	)

61 
	#SIGPROF
 27

	)

62 
	#SIGWINCH
 28

	)

63 
	#SIGPOLL
 
SIGIO


	)

64 
	#SIGIO
 29

	)

65 
	#SIGPWR
 30

	)

66 
	#SIGSYS
 31

	)

67 
	#SIGUNUSED
 31

	)

69 
	#_NSIG
 65

	)

72 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

73 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

77 
	#__SIGRTMIN
 32

	)

78 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigset.h

21 #i‚def 
_SIGSET_H_ty≥s


22 
	#_SIGSET_H_ty≥s
 1

	)

24 
	t__sig_©omic_t
;

28 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

31 
	m__vÆ
[
_SIGSET_NWORDS
];

32 } 
	t__sig£t_t
;

43 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


44 
	#_SIGSET_H_‚s
 1

	)

46 #i‚de‡
_EXTERN_INLINE


47 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

51 
	#__sigmask
(
sig
) \

52 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

55 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

57 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

58 
	#__sigem±y£t
(
£t
) \

59 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

60 
sig£t_t
 *
__£t
 = (
£t
); \

61 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

62 0; }))

	)

63 
	#__sigfûl£t
(
£t
) \

64 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

65 
sig£t_t
 *
__£t
 = (
£t
); \

66 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

67 0; }))

	)

69 #ifde‡
__USE_GNU


73 
	#__sigi£m±y£t
(
£t
) \

74 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

75 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

76 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

77 !
__ªt
 && --
__˙t
 >= 0) \

78 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

79 
__ªt
 =0; }))

	)

80 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

81 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

82 
sig£t_t
 *
__de°
 = (
de°
); \

83 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

84 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

85 --
__˙t
 >= 0) \

86 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

87 & 
__right
->
__vÆ
[
__˙t
]); \

88 0; }))

	)

89 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

90 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

91 
sig£t_t
 *
__de°
 = (
de°
); \

92 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

93 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

94 --
__˙t
 >= 0) \

95 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

96 | 
__right
->
__vÆ
[
__˙t
]); \

97 0; }))

	)

104 
__sigismembî
 (
__c⁄°
 
__sig£t_t
 *, );

105 
__sigadd£t
 (
__sig£t_t
 *, );

106 
__sigdñ£t
 (
__sig£t_t
 *, );

108 #ifde‡
__USE_EXTERN_INLINES


109 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

110 
_EXTERN_INLINE
 \

111 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

113 
__mask
 = 
	`__sigmask
 (
__sig
); \

114 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

115  
BODY
; \

116 }

	)

118 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
Ë? 1 : 0, 
__c⁄°
)

119 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

120 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

122 #unde‡
__SIGSETFN


	@/usr/include/bits/sigstack.h

20 #i‚de‡
_SIGNAL_H


26 
	ssig°ack


28 *
	mss_•
;

29 
	mss_⁄°ack
;

36 
	mSS_ONSTACK
 = 1,

37 
	#SS_ONSTACK
 
SS_ONSTACK


	)

38 
	mSS_DISABLE


39 
	#SS_DISABLE
 
SS_DISABLE


	)

43 
	#MINSIGSTKSZ
 2048

	)

46 
	#SIGSTKSZ
 8192

	)

50 
	ssigÆt°ack


52 *
	mss_•
;

53 
	mss_Êags
;

54 
size_t
 
	mss_size
;

55 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

20 #i‚de‡
_BITS_SIGTHREAD_H


21 
	#_BITS_SIGTHREAD_H
 1

	)

23 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


31 
	$±hªad_sigmask
 (
__how
,

32 
__c⁄°
 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

33 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

36 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

	@/usr/include/bits/stat.h

19 #i‚de‡
_SYS_STAT_H


24 
	#_STAT_VER_KERNEL
 0

	)

26 #i‡
__WORDSIZE
 == 32

27 
	#_STAT_VER_SVR4
 2

	)

28 
	#_STAT_VER_LINUX
 3

	)

31 
	#_MKNOD_VER_LINUX
 1

	)

32 
	#_MKNOD_VER_SVR4
 2

	)

33 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

35 
	#_STAT_VER_LINUX
 1

	)

38 
	#_MKNOD_VER_LINUX
 0

	)

41 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

43 
	s°©


45 
__dev_t
 
	m°_dev
;

46 #i‡
__WORDSIZE
 == 32

47 
	m__∑d1
;

49 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


50 
__öo_t
 
	m°_öo
;

52 
__öo_t
 
	m__°_öo
;

54 #i‡
__WORDSIZE
 == 32

55 
__mode_t
 
	m°_mode
;

56 
__∆ök_t
 
	m°_∆ök
;

58 
__∆ök_t
 
	m°_∆ök
;

59 
__mode_t
 
	m°_mode
;

61 
__uid_t
 
	m°_uid
;

62 
__gid_t
 
	m°_gid
;

63 #i‡
__WORDSIZE
 == 64

64 
	m∑d0
;

66 
__dev_t
 
	m°_rdev
;

67 #i‡
__WORDSIZE
 == 32

68 
	m__∑d2
;

70 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


71 
__off_t
 
	m°_size
;

73 
__off64_t
 
	m°_size
;

75 
__blksize_t
 
	m°_blksize
;

76 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


77 
__blk˙t_t
 
	m°_blocks
;

79 
__blk˙t64_t
 
	m°_blocks
;

81 #ifde‡
__USE_MISC


88 
time•ec
 
	m°_©im
;

89 
time•ec
 
	m°_mtim
;

90 
time•ec
 
	m°_˘im
;

91 
	#°_©ime
 
°_©im
.
tv_£c


	)

92 
	#°_mtime
 
°_mtim
.
tv_£c


	)

93 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

95 
__time_t
 
	m°_©ime
;

96 
	m°_©imí£c
;

97 
__time_t
 
	m°_mtime
;

98 
	m°_mtimí£c
;

99 
__time_t
 
	m°_˘ime
;

100 
	m°_˘imí£c
;

102 #i‡
__WORDSIZE
 == 64

103 
	m__unu£d
[3];

105 #i‚de‡
__USE_FILE_OFFSET64


106 
	m__unu£d4
;

107 
	m__unu£d5
;

109 
__öo64_t
 
	m°_öo
;

114 #ifde‡
__USE_LARGEFILE64


116 
	s°©64


118 
__dev_t
 
	m°_dev
;

119 #i‡
__WORDSIZE
 == 64

120 
__öo64_t
 
	m°_öo
;

121 
__∆ök_t
 
	m°_∆ök
;

122 
__mode_t
 
	m°_mode
;

124 
	m__∑d1
;

125 
__öo_t
 
	m__°_öo
;

126 
__mode_t
 
	m°_mode
;

127 
__∆ök_t
 
	m°_∆ök
;

129 
__uid_t
 
	m°_uid
;

130 
__gid_t
 
	m°_gid
;

131 #i‡
__WORDSIZE
 == 64

132 
	m∑d0
;

133 
__dev_t
 
	m°_rdev
;

134 
__off_t
 
	m°_size
;

136 
__dev_t
 
	m°_rdev
;

137 
	m__∑d2
;

138 
__off64_t
 
	m°_size
;

140 
__blksize_t
 
	m°_blksize
;

141 
__blk˙t64_t
 
	m°_blocks
;

142 #ifde‡
__USE_MISC


149 
time•ec
 
	m°_©im
;

150 
time•ec
 
	m°_mtim
;

151 
time•ec
 
	m°_˘im
;

152 
	#°_©ime
 
°_©im
.
tv_£c


	)

153 
	#°_mtime
 
°_mtim
.
tv_£c


	)

154 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

156 
__time_t
 
	m°_©ime
;

157 
	m°_©imí£c
;

158 
__time_t
 
	m°_mtime
;

159 
	m°_mtimí£c
;

160 
__time_t
 
	m°_˘ime
;

161 
	m°_˘imí£c
;

163 #i‡
__WORDSIZE
 == 64

164 
	m__unu£d
[3];

166 
__öo64_t
 
	m°_öo
;

172 
	#_STATBUF_ST_BLKSIZE


	)

173 
	#_STATBUF_ST_RDEV


	)

175 
	#_STATBUF_ST_NSEC


	)

179 
	#__S_IFMT
 0170000

	)

182 
	#__S_IFDIR
 0040000

	)

183 
	#__S_IFCHR
 0020000

	)

184 
	#__S_IFBLK
 0060000

	)

185 
	#__S_IFREG
 0100000

	)

186 
	#__S_IFIFO
 0010000

	)

187 
	#__S_IFLNK
 0120000

	)

188 
	#__S_IFSOCK
 0140000

	)

192 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

193 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

194 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

198 
	#__S_ISUID
 04000

	)

199 
	#__S_ISGID
 02000

	)

200 
	#__S_ISVTX
 01000

	)

201 
	#__S_IREAD
 0400

	)

202 
	#__S_IWRITE
 0200

	)

203 
	#__S_IEXEC
 0100

	)

205 #i‡
deföed
 
__USE_ATFILE
 || deföed 
__USE_GNU


207 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

208 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/stdio-ldbl.h

20 #i‚de‡
_STDIO_H


24 
__BEGIN_NAMESPACE_STD


25 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

26 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

27 
	$__LDBL_REDIR_DECL
 (
•rötf
)

28 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

29 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

30 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
__REDIRECT
 \

33 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

40 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

42 
__END_NAMESPACE_STD


44 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


45 
__BEGIN_NAMESPACE_C99


46 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

47 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

48 
__END_NAMESPACE_C99


51 #ifdef 
__USE_ISOC99


52 
__BEGIN_NAMESPACE_C99


53 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

54 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

55 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

57 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

61 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

63 
__END_NAMESPACE_C99


66 #ifde‡
__USE_GNU


67 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

68 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

69 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

70 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

71 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

73 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

76 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


77 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

78 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

79 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


80 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

81 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

84 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

85 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

86 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

	@/usr/include/bits/stdio.h

20 #i‚de‡
_STDIO_H


24 #i‚de‡
__exã∫_ölöe


25 
	#__STDIO_INLINE
 
ölöe


	)

27 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

31 #ifde‡
__USE_EXTERN_INLINES


34 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
)

36 
__STDIO_INLINE
 

37 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

39  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

40 
	}
}

44 
__STDIO_INLINE
 

45 
	$gëch¨
 ()

47  
	`_IO_gëc
 (
°dö
);

48 
	}
}

51 #ifde‡
__USE_MISC


53 
__STDIO_INLINE
 

54 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

56  
	`_IO_gëc_u∆ocked
 (
__Â
);

57 
	}
}

61 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


63 
__STDIO_INLINE
 

64 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

66  
	`_IO_gëc_u∆ocked
 (
__Â
);

67 
	}
}

70 
__STDIO_INLINE
 

71 
	$gëch¨_u∆ocked
 ()

73  
	`_IO_gëc_u∆ocked
 (
°dö
);

74 
	}
}

79 
__STDIO_INLINE
 

80 
	$putch¨
 (
__c
)

82  
	`_IO_putc
 (
__c
, 
°dout
);

83 
	}
}

86 #ifde‡
__USE_MISC


88 
__STDIO_INLINE
 

89 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

91  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

92 
	}
}

96 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


98 
__STDIO_INLINE
 

99 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

101  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

102 
	}
}

105 
__STDIO_INLINE
 

106 
	$putch¨_u∆ocked
 (
__c
)

108  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

109 
	}
}

113 #ifdef 
__USE_GNU


115 
__STDIO_INLINE
 
_IO_ssize_t


116 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

118  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

119 
	}
}

123 #ifde‡
__USE_MISC


125 
__STDIO_INLINE
 

126 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

128  
	`_IO_„of_u∆ocked
 (
__°ªam
);

129 
	}
}

132 
__STDIO_INLINE
 

133 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

135  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

136 
	}
}

142 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

143 && !
deföed
 
	g__˝lu•lus


145 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

146 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

147 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

148 && (
size_t
Ë(
size
) != 0) \

149 ? ({ *
__±r
 = (*Ë(
±r
); \

150 
FILE
 *
__°ªam
 = (
°ªam
); \

151 
size_t
 
__˙t
; \

152 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

153 
__˙t
 > 0; --__cnt) \

155 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

156 i‡(
__c
 =
EOF
) \

158 *
__±r
++ = 
__c
; \

160 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

161 / (
size_t
Ë(
size
); }) \

162 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

163 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

165 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

166 (Ë(
n
), (
size_t
) 0) \

167 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

169 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

170 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

171 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

172 && (
size_t
Ë(
size
) != 0) \

173 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

174 
FILE
 *
__°ªam
 = (
°ªam
); \

175 
size_t
 
__˙t
; \

176 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

177 
__˙t
 > 0; --__cnt) \

178 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

180 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

181 / (
size_t
Ë(
size
); }) \

182 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

183 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

185 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

186 (Ë(
n
), (
size_t
) 0) \

187 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

191 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

20 #i‚de‡
_STDIO_H


24 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

25 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

26 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

27 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

28 
_G_va_li°
 
__≠
Ë
__THROW
;

30 #ifde‡
__va_¨g_∑ck


31 
__exã∫_Æways_ölöe
 

32 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

34  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

35 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

36 
	}
}

37 #ñi‡!
deföed
 
__˝lu•lus


38 
	#•rötf
(
°r
, ...) \

39 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

40 
__VA_ARGS__
)

	)

43 
__exã∫_Æways_ölöe
 

44 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

45 
_G_va_li°
 
__≠
))

47  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

48 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

49 
	}
}

51 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


53 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

54 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

55 ...Ë
__THROW
;

56 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

57 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

58 
_G_va_li°
 
__≠
Ë
__THROW
;

60 #ifde‡
__va_¨g_∑ck


61 
__exã∫_Æways_ölöe
 

62 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

63 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

65  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

66 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

67 
	}
}

68 #ñi‡!
deföed
 
__˝lu•lus


69 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

70 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

71 
__VA_ARGS__
)

	)

74 
__exã∫_Æways_ölöe
 

75 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

76 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

78  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

79 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

80 
	}
}

84 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

87 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

88 
__¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

89 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

90 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

91 
__v¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

92 
_G_va_li°
 
__≠
);

94 #ifde‡
__va_¨g_∑ck


95 
__exã∫_Æways_ölöe
 

96 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...)

98  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

99 
	`__va_¨g_∑ck
 ());

100 
	}
}

102 
__exã∫_Æways_ölöe
 

103 
	$¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

105  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

106 
	}
}

107 #ñi‡!
deföed
 
__˝lu•lus


108 
	#¥ötf
(...) \

109 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

110 
	#Ârötf
(
°ªam
, ...) \

111 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

114 
__exã∫_Æways_ölöe
 

115 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

117 #ifde‡
__USE_EXTERN_INLINES


118  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

120  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

122 
	}
}

124 
__exã∫_Æways_ölöe
 

125 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

126 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

128  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

129 
	}
}

133 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

134 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

135 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

138 
__exã∫_Æways_ölöe
 
__wur
 *

139 
	$gës
 (*
__°r
)

141 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

142  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

143  
	`__gës_w¨n
 (
__°r
);

144 
	}
}

146 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

147 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

148 *
	`__REDIRECT
 (
__fgës_Æüs
,

149 (*
__ª°ri˘
 
__s
, 
__n
,

150 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

151 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

152 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

153 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

154 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

157 
__exã∫_Æways_ölöe
 
__wur
 *

158 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

160 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

162 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

163  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

165 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

166  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

168  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

169 
	}
}

171 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

172 
size_t
 
__size
, size_à
__n
,

173 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

174 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

175 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

176 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

177 
‰ód
Ë
__wur
;

178 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

179 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

180 
size_t
 
__size
, size_à
__n
,

181 
FILE
 *
__ª°ri˘
 
__°ªam
),

182 
__‰ód_chk
)

183 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

186 
__exã∫_Æways_ölöe
 
__wur
 
size_t


187 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

188 
FILE
 *
__ª°ri˘
 
__°ªam
)

190 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

192 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

193 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

194 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

195  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

197 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

198  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

200  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

201 
	}
}

203 #ifde‡
__USE_GNU


204 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

205 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

206 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

207 (*
__ª°ri˘
 
__s
, 
__n
,

208 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

209 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

210 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

211 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

212 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

215 
__exã∫_Æways_ölöe
 
__wur
 *

216 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

218 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

220 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

221  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

223 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

224  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

226  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

227 
	}
}

230 #ifde‡
__USE_MISC


231 #unde‡
‰ód_u∆ocked


232 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

233 
size_t
 
__size
, size_à
__n
,

234 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

235 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

236 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

237 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

238 
‰ód_u∆ocked
Ë
__wur
;

239 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

240 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

241 
size_t
 
__size
, size_à
__n
,

242 
FILE
 *
__ª°ri˘
 
__°ªam
),

243 
__‰ód_u∆ocked_chk
)

244 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

247 
__exã∫_Æways_ölöe
 
__wur
 
size_t


248 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

249 
FILE
 *
__ª°ri˘
 
__°ªam
)

251 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

253 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

254 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

255 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

256  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

257 
__°ªam
);

259 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

260  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

261 
__°ªam
);

264 #ifde‡
__USE_EXTERN_INLINES


265 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

266 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

267 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

268 && 
__size
 * 
__n
 <= 8)

270 
size_t
 
__˙t
 = 
__size
 * 
__n
;

271 *
__˝å
 = (*Ë
__±r
;

272 i‡(
__˙t
 == 0)

275 ; 
__˙t
 > 0; --__cnt)

277 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

278 i‡(
__c
 =
EOF
)

280 *
__˝å
++ = 
__c
;

282  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

285  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

286 
	}
}

	@/usr/include/bits/stdio_lim.h

19 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


23 #ifde‡
_STDIO_H


24 
	#L_tm≤am
 20

	)

25 
	#TMP_MAX
 238328

	)

26 
	#FILENAME_MAX
 4096

	)

28 #ifde‡
__USE_POSIX


29 
	#L_˘îmid
 9

	)

30 
	#L_cu£rid
 9

	)

34 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


35 #unde‡
FOPEN_MAX


36 
	#FOPEN_MAX
 16

	)

39 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


40 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-ldbl.h

20 #i‚de‡
_STDLIB_H


24 #ifdef 
__USE_ISOC99


25 
__BEGIN_NAMESPACE_C99


26 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

27 
__END_NAMESPACE_C99


30 #ifde‡
__USE_GNU


31 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

34 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


35 #ifde‡
__USE_MISC


36 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

38 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

39 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

40 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

20 #i‚de‡
_STDLIB_H


24 *
	$__ªÆ∑th_chk
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

25 *
__ª°ri˘
 
__ªsﬁved
,

26 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

27 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

28 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

29 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

30 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

31 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

32 *
__ª°ri˘
 
__ªsﬁved
,

33 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


34 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

37 
__exã∫_Æways_ölöe
 
__wur
 *

38 
	`__NTH
 (
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

40 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

42 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


43 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

44  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

46  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

49  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

50 
	}
}

53 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

54 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

55 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

56 
size_t
 
__buÊí
), 
±¢ame_r
)

57 
	`__n⁄nuŒ
 ((2));

58 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

60 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

61 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

64 
__exã∫_Æways_ölöe
 

65 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

67 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

69 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

70  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

71 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

72  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

74  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

75 
	}
}

78 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

79 
__THROW
 
__wur
;

80 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

81 
w˘omb
Ë
__wur
;

83 
__exã∫_Æways_ölöe
 
__wur
 

84 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

89 
	#__STDLIB_MB_LEN_MAX
 16

	)

90 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


93 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

94  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

95  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

96 
	}
}

99 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

100 
__c⁄°
 *
__ª°ri˘
 
__§c
,

101 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

102 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

103 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

104 
__c⁄°
 *
__ª°ri˘
 
__§c
,

105 
size_t
 
__Àn
), 
mb°owcs
);

106 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

107 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

108 
__c⁄°
 *
__ª°ri˘
 
__§c
,

109 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

110 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

113 
__exã∫_Æways_ölöe
 
size_t


114 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

115 
size_t
 
__Àn
))

117 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

119 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

120  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

121 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

123 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

124  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

125 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

127  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

128 
	}
}

131 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

132 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

133 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

134 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

135 (*
__ª°ri˘
 
__d°
,

136 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

137 
size_t
 
__Àn
), 
wc°ombs
);

138 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

139 (*
__ª°ri˘
 
__d°
,

140 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

141 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

142 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

144 
__exã∫_Æways_ölöe
 
size_t


145 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__§c
,

146 
size_t
 
__Àn
))

148 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

150 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

151  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

152 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

153  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

155  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

156 
	}
}

	@/usr/include/bits/string.h

20 #i‚de‡
_STRING_H


26 
	#_STRING_ARCH_u«lig√d
 1

	)

	@/usr/include/bits/string2.h

21 #i‚de‡
_STRING_H


25 #i‡!
deföed
 
__NO_STRING_INLINES
 && !deföed 
__BOUNDED_POINTERS__


42 #i‚de‡
__STRING_INLINE


43 #ifde‡
__˝lu•lus


44 
	#__STRING_INLINE
 
ölöe


	)

46 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 #i‡
_STRING_ARCH_u«lig√d


52 
	~<ídün.h
>

53 
	~<bôs/ty≥s.h
>

55 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


56 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

57 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

58 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

59 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

60 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

61 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

62 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

63 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

65 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

66 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

67 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1])

	)

68 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

69 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

70 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

71 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

72 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3])

	)

77 
	#__STRING2_COPY_TYPE
(
N
) \

78 °ru˘ { 
__¨r
[
N
]; } \

79 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

80 
	t__STRING2_COPY_TYPE
 (2);

81 
__STRING2_COPY_TYPE
 (3);

82 
__STRING2_COPY_TYPE
 (4);

83 
__STRING2_COPY_TYPE
 (5);

84 
__STRING2_COPY_TYPE
 (6);

85 
__STRING2_COPY_TYPE
 (7);

86 
__STRING2_COPY_TYPE
 (8);

87 #unde‡
__STRING2_COPY_TYPE


93 
	#__°rög2_1b±r_p
(
__x
) \

94 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

97 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


98 #i‡!
__GNUC_PREREQ
 (3, 0)

99 #i‡
_STRING_ARCH_u«lig√d


100 
	#mem£t
(
s
, 
c
, 
n
) \

101 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

102 ? ((
n
) == 1 \

103 ? 
	`__mem£t_1
 (
s
, 
c
) \

104 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

105 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

106 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

107 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

109 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

110 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

112 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

113 ({ *
__s
 = (
s
); \

115 
__ui
; \

116 
__usi
; \

117 
__uc
; \

118 } *
__u
 = 
__s
; \

119 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

122 (Ë(
n
)) \

125 
__u
->
__ui
 = 
__c
 * 0x01010101; \

126 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

128 
__u
->
__ui
 = 
__c
 * 0x01010101; \

129 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

131 
__u
->
__ui
 = 
__c
 * 0x01010101; \

132 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

134 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

135 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

136 
__u
->
__uc
 = (Ë
__c
; \

140 
__u
->
__ui
 = 
__c
 * 0x01010101; \

141 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

143 
__u
->
__ui
 = 
__c
 * 0x01010101; \

144 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

146 
__u
->
__ui
 = 
__c
 * 0x01010101; \

147 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

149 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

153 
__u
->
__ui
 = 
__c
 * 0x01010101; \

154 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

156 
__u
->
__ui
 = 
__c
 * 0x01010101; \

157 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

159 
__u
->
__ui
 = 
__c
 * 0x01010101; \

160 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

162 
__u
->
__uc
 = (Ë
__c
; \

166 
__u
->
__ui
 = 
__c
 * 0x01010101; \

167 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

169 
__u
->
__ui
 = 
__c
 * 0x01010101; \

170 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

172 
__u
->
__ui
 = 
__c
 * 0x01010101; \

173 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

175 
__u
->
__ui
 = 
__c
 * 0x01010101; \

180 
__s
; })

	)

182 
	#mem£t
(
s
, 
c
, 
n
) \

183 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

184 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

185 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

194 #i‡
__GNUC_PREREQ
 (2, 91)

195 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

203 #ifde‡
__USE_GNU


204 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


205 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


206 #i‡
__GNUC_PREREQ
 (3, 4)

207 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

208 #ñi‡
__GNUC_PREREQ
 (3, 0)

209 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

210 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

211 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

212 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

213 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

215 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

216 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

217 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

218 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

219 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

223 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

226 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


227 #i‡
_STRING_ARCH_u«lig√d


228 #i‚de‡
_FORCE_INLINES


229 
	#__memp˝y_¨gs
(
§c
) \

230 ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[2], \

231 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[6], \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

235 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

237 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

238 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

239 
__uöt32_t
, 
size_t
);

240 
__STRING_INLINE
 *

241 
	$__memp˝y_smÆl
 (*
__de°1
,

242 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

243 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

244 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

245 
size_t
 
__§˛í
)

248 
__uöt32_t
 
__ui
;

249 
__uöt16_t
 
__usi
;

250 
__uc
;

251 
__c
;

252 } *
__u
 = 
__de°1
;

253 (Ë
__§˛í
)

256 
__u
->
__c
 = 
__§c0_1
;

257 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

260 
__u
->
__usi
 = 
__§c0_2
;

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

264 
__u
->
__usi
 = 
__§c0_2
;

265 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

266 
__u
->
__c
 = 
__§c2_1
;

267 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

270 
__u
->
__ui
 = 
__§c0_4
;

271 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

274 
__u
->
__ui
 = 
__§c0_4
;

275 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

276 
__u
->
__c
 = 
__§c4_1
;

277 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

280 
__u
->
__ui
 = 
__§c0_4
;

281 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

282 
__u
->
__usi
 = 
__§c4_2
;

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

286 
__u
->
__ui
 = 
__§c0_4
;

287 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

288 
__u
->
__usi
 = 
__§c4_2
;

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

290 
__u
->
__c
 = 
__§c6_1
;

291 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

294 
__u
->
__ui
 = 
__§c0_4
;

295 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

296 
__u
->
__ui
 = 
__§c4_4
;

297 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

300  (*Ë
__u
;

301 
	}
}

303 #i‚de‡
_FORCE_INLINES


304 
	#__memp˝y_¨gs
(
§c
) \

305 ((
__c⁄°
 *Ë(
§c
))[0], \

306 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

307 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1] } }), \

308 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

309 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

310 ((
__c⁄°
 *Ë(
§c
))[2] } }), \

311 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

312 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

313 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3] } }), \

314 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

315 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

316 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

317 ((
__c⁄°
 *Ë(
§c
))[4] } }), \

318 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

319 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

320 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

321 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5] } }), \

322 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

323 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

324 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

325 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

326 ((
__c⁄°
 *Ë(
§c
))[6] } }), \

327 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

328 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

329 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

330 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

331 ((
__c⁄°
 *Ë(
§c
))[6], ((__c⁄° *Ë(§c))[7] } })

	)

333 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

334 
__STRING2_COPY_ARR3
,

335 
__STRING2_COPY_ARR4
,

336 
__STRING2_COPY_ARR5
,

337 
__STRING2_COPY_ARR6
,

338 
__STRING2_COPY_ARR7
,

339 
__STRING2_COPY_ARR8
, 
size_t
);

340 
__STRING_INLINE
 *

341 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

342 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

343 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

344 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

345 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

348 
__c
;

349 
__STRING2_COPY_ARR2
 
__sˇ2
;

350 
__STRING2_COPY_ARR3
 
__sˇ3
;

351 
__STRING2_COPY_ARR4
 
__sˇ4
;

352 
__STRING2_COPY_ARR5
 
__sˇ5
;

353 
__STRING2_COPY_ARR6
 
__sˇ6
;

354 
__STRING2_COPY_ARR7
 
__sˇ7
;

355 
__STRING2_COPY_ARR8
 
__sˇ8
;

356 } *
__u
 = 
__de°
;

357 (Ë
__§˛í
)

360 
__u
->
__c
 = 
__§c1
;

363 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

366 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

369 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

372 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

375 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

378 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

381 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

384  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

385 
	}
}

393 #i‚de‡
_HAVE_STRING_ARCH_°rchr


394 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

395 #i‡
__GNUC_PREREQ
 (3, 2)

396 
	#°rchr
(
s
, 
c
) \

397 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

398 && (
c
) == '\0' \

399 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

400 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

402 
	#°rchr
(
s
, 
c
) \

403 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

404 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

405 : 
	`°rchr
 (
s
, 
c
)))

	)

411 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

412 || 
deföed
 
	g_FORCE_INLINES


413 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

414 
	#°r˝y
(
de°
, 
§c
) \

415 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

416 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

417 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

418 
	`°æí
 (
§c
) + 1) \

419 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

420 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

423 #i‡
_STRING_ARCH_u«lig√d


424 #i‚de‡
_FORCE_INLINES


425 
	#__°r˝y_¨gs
(
§c
) \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

429 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

431 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

432 
__uöt32_t
, __uöt32_t, 
size_t
);

433 
__STRING_INLINE
 *

434 
	$__°r˝y_smÆl
 (*
__de°
,

435 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

436 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

437 
size_t
 
__§˛í
)

440 
__uöt32_t
 
__ui
;

441 
__uöt16_t
 
__usi
;

442 
__uc
;

443 } *
__u
 = (*Ë
__de°
;

444 (Ë
__§˛í
)

447 
__u
->
__uc
 = '\0';

450 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
->
__usi
 = 
__§c0_2
;

454 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

455 
__u
->
__uc
 = '\0';

458 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
->
__ui
 = 
__§c0_4
;

462 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

463 
__u
->
__uc
 = '\0';

466 
__u
->
__ui
 = 
__§c0_4
;

467 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

468 
__u
->
__usi
 = 
__§c4_2
;

471 
__u
->
__ui
 = 
__§c0_4
;

472 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

473 
__u
->
__usi
 = 
__§c4_2
;

474 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

475 
__u
->
__uc
 = '\0';

478 
__u
->
__ui
 = 
__§c0_4
;

479 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

480 
__u
->
__ui
 = 
__§c4_4
;

483  
__de°
;

484 
	}
}

486 #i‚de‡
_FORCE_INLINES


487 
	#__°r˝y_¨gs
(
§c
) \

488 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

489 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

490 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

491 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

493 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

494 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

495 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

496 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

497 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

498 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

500 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

501 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

502 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

503 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

504 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

505 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

506 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

507 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

509 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

510 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

511 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

512 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

513 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

515 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

516 
__STRING2_COPY_ARR3
,

517 
__STRING2_COPY_ARR4
,

518 
__STRING2_COPY_ARR5
,

519 
__STRING2_COPY_ARR6
,

520 
__STRING2_COPY_ARR7
,

521 
__STRING2_COPY_ARR8
, 
size_t
);

522 
__STRING_INLINE
 *

523 
	$__°r˝y_smÆl
 (*
__de°
,

524 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

525 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

526 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

527 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

530 
__c
;

531 
__STRING2_COPY_ARR2
 
__sˇ2
;

532 
__STRING2_COPY_ARR3
 
__sˇ3
;

533 
__STRING2_COPY_ARR4
 
__sˇ4
;

534 
__STRING2_COPY_ARR5
 
__sˇ5
;

535 
__STRING2_COPY_ARR6
 
__sˇ6
;

536 
__STRING2_COPY_ARR7
 
__sˇ7
;

537 
__STRING2_COPY_ARR8
 
__sˇ8
;

538 } *
__u
 = (*Ë
__de°
;

539 (Ë
__§˛í
)

542 
__u
->
__c
 = '\0';

545 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

548 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

551 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

554 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

557 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

560 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

563 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

566  
__de°
;

567 
	}
}

573 #ifde‡
__USE_GNU


574 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


575 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


576 #i‡
__GNUC_PREREQ
 (3, 4)

577 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

578 #ñi‡
__GNUC_PREREQ
 (3, 0)

579 
	#__°p˝y
(
de°
, 
§c
) \

580 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

581 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

582 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

583 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

585 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

587 
	#__°p˝y
(
de°
, 
§c
) \

588 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

589 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

590 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

591 
	`°æí
 (
§c
) + 1) \

592 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

594 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

598 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

601 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


602 #i‡
_STRING_ARCH_u«lig√d


603 #i‚de‡
_FORCE_INLINES


604 
	#__°p˝y_¨gs
(
§c
) \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

608 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

610 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

611 
__uöt32_t
, __uöt32_t, 
size_t
);

612 
__STRING_INLINE
 *

613 
	$__°p˝y_smÆl
 (*
__de°
,

614 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

615 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

616 
size_t
 
__§˛í
)

619 
__ui
;

620 
__usi
;

621 
__uc
;

622 
__c
;

623 } *
__u
 = (*Ë
__de°
;

624 (Ë
__§˛í
)

627 
__u
->
__uc
 = '\0';

630 
__u
->
__usi
 = 
__§c0_2
;

631 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

634 
__u
->
__usi
 = 
__§c0_2
;

635 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

636 
__u
->
__uc
 = '\0';

639 
__u
->
__ui
 = 
__§c0_4
;

640 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

643 
__u
->
__ui
 = 
__§c0_4
;

644 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

645 
__u
->
__uc
 = '\0';

648 
__u
->
__ui
 = 
__§c0_4
;

649 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

650 
__u
->
__usi
 = 
__§c4_2
;

651 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

654 
__u
->
__ui
 = 
__§c0_4
;

655 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

656 
__u
->
__usi
 = 
__§c4_2
;

657 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

658 
__u
->
__uc
 = '\0';

661 
__u
->
__ui
 = 
__§c0_4
;

662 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

663 
__u
->
__ui
 = 
__§c4_4
;

664 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

667  &
__u
->
__c
;

668 
	}
}

670 #i‚de‡
_FORCE_INLINES


671 
	#__°p˝y_¨gs
(
§c
) \

672 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

673 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

674 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

675 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

677 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

678 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

679 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

680 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

681 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

682 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

684 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

685 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

686 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

687 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

688 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

689 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

690 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

691 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

693 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

694 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

695 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

696 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

697 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

699 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

700 
__STRING2_COPY_ARR3
,

701 
__STRING2_COPY_ARR4
,

702 
__STRING2_COPY_ARR5
,

703 
__STRING2_COPY_ARR6
,

704 
__STRING2_COPY_ARR7
,

705 
__STRING2_COPY_ARR8
, 
size_t
);

706 
__STRING_INLINE
 *

707 
	$__°p˝y_smÆl
 (*
__de°
,

708 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

709 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

710 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

711 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

714 
__c
;

715 
__STRING2_COPY_ARR2
 
__sˇ2
;

716 
__STRING2_COPY_ARR3
 
__sˇ3
;

717 
__STRING2_COPY_ARR4
 
__sˇ4
;

718 
__STRING2_COPY_ARR5
 
__sˇ5
;

719 
__STRING2_COPY_ARR6
 
__sˇ6
;

720 
__STRING2_COPY_ARR7
 
__sˇ7
;

721 
__STRING2_COPY_ARR8
 
__sˇ8
;

722 } *
__u
 = (*Ë
__de°
;

723 (Ë
__§˛í
)

726 
__u
->
__c
 = '\0';

729 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

732 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

735 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

738 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

741 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

744 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

747 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

750  
__de°
 + 
__§˛í
 - 1;

751 
	}
}

759 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


760 #i‡
__GNUC_PREREQ
 (3, 2)

761 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

763 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

764 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

765 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

766 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

768 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

774 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


775 #ifde‡
_USE_STRING_ARCH_°rchr


776 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

777 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

778 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

779 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

780 ? 
	`°rˇt
 (
__de°
, 
§c
) \

781 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

782 
§c
, 
n
)Ë'\0', 
__de°
)) \

783 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

784 #ñi‡
__GNUC_PREREQ
 (3, 2)

785 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

787 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

788 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

789 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

790 ? 
	`°rˇt
 (
de°
, 
§c
) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

792 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

798 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


799 #i‡
__GNUC_PREREQ
 (3, 2)

800 
	#°rcmp
(
s1
, 
s2
) \

801 
__exãnsi⁄__
 \

802 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

803 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

804 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

805 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

806 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

807 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

808 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

809 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

810 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

811 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

812 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

813 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

814 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

815 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

816 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

817 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

818 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

820 
	#°rcmp
(
s1
, 
s2
) \

821 
__exãnsi⁄__
 \

822 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

823 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

824 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

825 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

826 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

827 ? 
	`memcmp
 ((
__c⁄°
 *Ë(
s1
), (__c⁄° *Ë(
s2
), \

828 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

829 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

830 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

831 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

832 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

833 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

834 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

835 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

836 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

837 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

838 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

839 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

842 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

843 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

844 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

845 - ((
__c⁄°
 *Ë(__c⁄° *)(
s2
))[0]);\

846 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

848 
__ªsu…
 = (((
__c⁄°
 *) \

849 (
__c⁄°
 *Ë(
s1
))[1] \

850 - ((
__c⁄°
 *) \

851 (
__c⁄°
 *Ë(
s2
))[1]); \

852 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

854 
__ªsu…
 = \

855 (((
__c⁄°
 *) \

856 (
__c⁄°
 *Ë(
s1
))[2] \

857 - ((
__c⁄°
 *) \

858 (
__c⁄°
 *Ë(
s2
))[2]); \

859 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

860 
__ªsu…
 = \

861 (((
__c⁄°
 *) \

862 (
__c⁄°
 *Ë(
s1
))[3] \

863 - ((
__c⁄°
 *) \

864 (
__c⁄°
 *Ë(
s2
))[3]); \

867 
__ªsu…
; }))

	)

869 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

870 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s2
 = \

871 (
__c⁄°
 *Ë(__c⁄° *Ë(
s2
); \

872 
__ªsu…
 = \

873 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

874 - 
__s2
[0]); \

875 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

877 
__ªsu…
 = (((
__c⁄°
 *) \

878 (
__c⁄°
 *Ë(
s1
))[1] - 
__s2
[1]); \

879 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

881 
__ªsu…
 = (((
__c⁄°
 *) \

882 (
__c⁄°
 *Ë(
s1
))[2] - 
__s2
[2]);\

883 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

884 
__ªsu…
 = (((
__c⁄°
 *) \

885 (
__c⁄°
 *Ë(
s1
))[3] \

886 - 
__s2
[3]); \

889 
__ªsu…
; }))

	)

891 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

892 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s1
 = \

893 (
__c⁄°
 *Ë(__c⁄° *Ë(
s1
); \

894 
__ªsu…
 = \

895 
__s1
[0] - ((
__c⁄°
 *) \

896 (
__c⁄°
 *Ë(
s2
))[0]; \

897 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

899 
__ªsu…
 = (
__s1
[1] \

900 - ((
__c⁄°
 *) \

901 (
__c⁄°
 *Ë(
s2
))[1]); \

902 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

904 
__ªsu…
 = \

905 (
__s1
[2] - ((
__c⁄°
 *) \

906 (
__c⁄°
 *Ë(
s2
))[2]); \

907 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

908 
__ªsu…
 = \

909 (
__s1
[3] \

910 - ((
__c⁄°
 *) \

911 (
__c⁄°
 *Ë(
s2
))[3]); \

914 
__ªsu…
; }))

	)

919 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


920 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

921 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

922 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

923 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

924 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

925 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

926 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

932 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


933 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


934 #i‡
__GNUC_PREREQ
 (3, 2)

935 
	#°rc•n
(
s
, 
ªje˘
) \

936 
__exãnsi⁄__
 \

937 ({ 
__r0
, 
__r1
, 
__r2
; \

938 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

939 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

940 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

941 : ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

942 ? 
	`°æí
 (
s
) \

943 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

944 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

945 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

946 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

947 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

948 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

949 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

950 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

952 
	#°rc•n
(
s
, 
ªje˘
) \

953 
__exãnsi⁄__
 \

954 ({ 
__r0
, 
__r1
, 
__r2
; \

955 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

956 ? ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

957 ? 
	`°æí
 (
s
) \

958 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

959 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

960 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

961 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

962 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

963 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

964 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

965 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

969 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
);

970 
__STRING_INLINE
 
size_t


971 
	$__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

975 ++
__ªsu…
;

976  
__ªsu…
;

977 
	}
}

979 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

980 
__ªje˘2
);

981 
__STRING_INLINE
 
size_t


982 
	$__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
)

984 
size_t
 
__ªsu…
 = 0;

985 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


986 && 
__s
[
__ªsu…
] !
__ªje˘2
)

987 ++
__ªsu…
;

988  
__ªsu…
;

989 
	}
}

991 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

992 
__ªje˘2
, 
__ªje˘3
);

993 
__STRING_INLINE
 
size_t


994 
	$__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
,

995 
__ªje˘3
)

997 
size_t
 
__ªsu…
 = 0;

998 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


999 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

1000 ++
__ªsu…
;

1001  
__ªsu…
;

1002 
	}
}

1008 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


1009 #i‚de‡
_HAVE_STRING_ARCH_°r•n


1010 #i‡
__GNUC_PREREQ
 (3, 2)

1011 
	#°r•n
(
s
, 
ac˚±
) \

1012 
__exãnsi⁄__
 \

1013 ({ 
__a0
, 
__a1
, 
__a2
; \

1014 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1015 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1016 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

1017 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1018 ? ((Ë(
s
), 0) \

1019 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1020 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1021 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1022 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1023 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1024 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1025 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1026 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1028 
	#°r•n
(
s
, 
ac˚±
) \

1029 
__exãnsi⁄__
 \

1030 ({ 
__a0
, 
__a1
, 
__a2
; \

1031 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1032 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1033 ? ((Ë(
s
), 0) \

1034 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1035 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1036 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1037 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1038 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1039 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1040 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1041 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1045 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±
)

1052 ++
__ªsu…
;

1053  
__ªsu…
;

1054 
	}
}

1056 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1057 
__ac˚±2
);

1058 
__STRING_INLINE
 
size_t


1059 
	$__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1061 
size_t
 
__ªsu…
 = 0;

1063 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1064 ++
__ªsu…
;

1065  
__ªsu…
;

1066 
	}
}

1068 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1069 
__ac˚±2
, 
__ac˚±3
);

1070 
__STRING_INLINE
 
size_t


1071 
	$__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1073 
size_t
 
__ªsu…
 = 0;

1075 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1076 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1077 ++
__ªsu…
;

1078  
__ªsu…
;

1079 
	}
}

1084 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1085 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1086 #i‡
__GNUC_PREREQ
 (3, 2)

1087 
	#°Ωbrk
(
s
, 
ac˚±
) \

1088 
__exãnsi⁄__
 \

1089 ({ 
__a0
, 
__a1
, 
__a2
; \

1090 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1091 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1092 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1093 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1094 ? ((Ë(
s
), (*Ë
NULL
) \

1095 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1096 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1097 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1098 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1099 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1100 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1101 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1102 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1104 
	#°Ωbrk
(
s
, 
ac˚±
) \

1105 
__exãnsi⁄__
 \

1106 ({ 
__a0
, 
__a1
, 
__a2
; \

1107 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1108 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1109 ? ((Ë(
s
), (*Ë
NULL
) \

1110 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1111 ? 
	`°rchr
 (
s
, 
__a0
) \

1112 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1113 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1114 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1115 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1116 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1117 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1121 
__STRING_INLINE
 *
__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1122 
__ac˚±2
);

1123 
__STRING_INLINE
 *

1124 
	$__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1127 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1128 ++
__s
;

1129  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1130 
	}
}

1132 
__STRING_INLINE
 *
__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1133 
__ac˚±2
, 
__ac˚±3
);

1134 
__STRING_INLINE
 *

1135 
	$__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
,

1136 
__ac˚±3
)

1139 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1140 && *
__s
 !
__ac˚±3
)

1141 ++
__s
;

1142  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1143 
	}
}

1149 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1150 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1151 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1152 ? (((
__c⁄°
 *Ë(
√edÀ
))[0] == '\0' \

1153 ? (*Ë(
size_t
Ë(
hay°ack
) \

1154 : (((
__c⁄°
 *Ë(
√edÀ
))[1] == '\0' \

1155 ? 
	`°rchr
 (
hay°ack
, \

1156 ((
__c⁄°
 *Ë(
√edÀ
))[0]) \

1157 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1158 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1162 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1163 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1164 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1165 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1166 ? (((
__c⁄°
 *Ë(
£p
))[0] != '\0' \

1167 && ((
__c⁄°
 *Ë(
£p
))[1] == '\0' \

1168 ? 
	`__°πok_r_1c
 (
s
, ((
__c⁄°
 *Ë(
£p
))[0], 
√xç
) \

1169 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)) \

1170 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1173 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1174 
__STRING_INLINE
 *

1175 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1177 *
__ªsu…
;

1178 i‡(
__s
 =
NULL
)

1179 
__s
 = *
__√xç
;

1180 *
__s
 =
__£p
)

1181 ++
__s
;

1182 
__ªsu…
 = 
NULL
;

1183 i‡(*
__s
 != '\0')

1185 
__ªsu…
 = 
__s
++;

1186 *
__s
 != '\0')

1187 i‡(*
__s
++ =
__£p
)

1189 
__s
[-1] = '\0';

1192 *
__√xç
 = 
__s
;

1194  
__ªsu…
;

1195 
	}
}

1196 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1197 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1202 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1203 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1205 *
__°r£p_g
 (**
__°rögp
, 
__c⁄°
 *
__dñim
);

1206 
	#__°r£p
(
s
, 
ªje˘
) \

1207 
__exãnsi⁄__
 \

1208 ({ 
__r0
, 
__r1
, 
__r2
; \

1209 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1210 && (
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], \

1211 ((
__c⁄°
 *Ë(
ªje˘
))[0] != '\0') \

1212 ? ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], \

1213 ((
__c⁄°
 *Ë(
ªje˘
))[1] == '\0') \

1214 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1215 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

1216 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1217 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

1218 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1219 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1220 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1223 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1224 
__STRING_INLINE
 *

1225 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1227 *
__ªtvÆ
 = *
__s
;

1228 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1229 *(*
__s
)++ = '\0';

1230  
__ªtvÆ
;

1231 
	}
}

1233 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1234 
__STRING_INLINE
 *

1235 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1237 *
__ªtvÆ
 = *
__s
;

1238 i‡(
__ªtvÆ
 !
NULL
)

1240 *
__˝
 = 
__ªtvÆ
;

1243 i‡(*
__˝
 == '\0')

1245 
__˝
 = 
NULL
;

1248 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1250 *
__˝
++ = '\0';

1253 ++
__˝
;

1255 *
__s
 = 
__˝
;

1257  
__ªtvÆ
;

1258 
	}
}

1260 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1261 
__ªje˘3
);

1262 
__STRING_INLINE
 *

1263 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1265 *
__ªtvÆ
 = *
__s
;

1266 i‡(
__ªtvÆ
 !
NULL
)

1268 *
__˝
 = 
__ªtvÆ
;

1271 i‡(*
__˝
 == '\0')

1273 
__˝
 = 
NULL
;

1276 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1278 *
__˝
++ = '\0';

1281 ++
__˝
;

1283 *
__s
 = 
__˝
;

1285  
__ªtvÆ
;

1286 
	}
}

1287 #ifde‡
__USE_BSD


1288 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1295 #ifde‡
__USE_MISC


1297 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1298 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1299 
	~<°dlib.h
>

1302 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1304 *
	$__°rdup
 (
__c⁄°
 *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1305 
	#__°rdup
(
s
) \

1306 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1307 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1308 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1309 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1310 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1311 i‡(
__ªtvÆ
 !
NULL
) \

1312 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1313 
__ªtvÆ
; 
	}
})) \

1314 : 
	`__°rdup
 (
s
)))

	)

1316 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1317 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1321 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1323 *
	$__°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

1324 
__THROW
 
__©åibuã_mÆloc__
;

1325 
	#__°∫dup
(
s
, 
n
) \

1326 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1327 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1328 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1329 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1330 
size_t
 
__n
 = (
n
); \

1331 *
__ªtvÆ
; \

1332 i‡(
__n
 < 
__Àn
) \

1333 
__Àn
 = 
__n
 + 1; \

1334 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1335 i‡(
__ªtvÆ
 !
NULL
) \

1337 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1338 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1339 
__Àn
 - 1); \

1341 
__ªtvÆ
; 
	}
})) \

1342 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1344 #ifde‡
__USE_GNU


1345 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1351 #i‚de‡
_FORCE_INLINES


1352 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

19 #i‚de‡
_STRING_H


23 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

26 #i‚de‡
__˝lu•lus


30 #unde‡
mem˝y


31 #unde‡
memmove


32 #unde‡
mem£t


33 #unde‡
°rˇt


34 #unde‡
°r˝y


35 #unde‡
°∫ˇt


36 #unde‡
°∫˝y


37 #ifde‡
__USE_GNU


38 #unde‡
memp˝y


39 #unde‡
°p˝y


41 #ifde‡
__USE_BSD


42 #unde‡
bc›y


43 #unde‡
bzîo


48 
__exã∫_Æways_ölöe
 *

49 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

50 
size_t
 
__Àn
))

52  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

53 
	}
}

55 
__exã∫_Æways_ölöe
 *

56 
__NTH
 (
	$memmove
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

57 
size_t
 
__Àn
))

59  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

60 
	}
}

62 #ifde‡
__USE_GNU


63 
__exã∫_Æways_ölöe
 *

64 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

65 
size_t
 
__Àn
))

67  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

68 
	}
}

77 
__exã∫_Æways_ölöe
 *

78 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

80 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0)

82 
	`__w¨n_mem£t_zîo_Àn
 ();

83  
__de°
;

85  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

86 
	}
}

88 #ifde‡
__USE_BSD


89 
__exã∫_Æways_ölöe
 

90 
__NTH
 (
	$bc›y
 (
__c⁄°
 *
__ª°ri˘
 
__§c
, *__ª°ri˘ 
__de°
,

91 
size_t
 
__Àn
))

93 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

94 
	}
}

96 
__exã∫_Æways_ölöe
 

97 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

99 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

100 
	}
}

103 
__exã∫_Æways_ölöe
 *

104 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

106  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

107 
	}
}

109 #ifde‡
__USE_GNU


110 
__exã∫_Æways_ölöe
 *

111 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

113  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

114 
	}
}

118 
__exã∫_Æways_ölöe
 *

119 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

120 
size_t
 
__Àn
))

122  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

123 
	}
}

126 *
	$__°≤˝y_chk
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

127 
size_t
 
__de°Àn
Ë
__THROW
;

128 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
,

129 
__c⁄°
 *
__§c
,

130 
size_t
 
__n
), 
°≤˝y
);

132 
__exã∫_Æways_ölöe
 *

133 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
))

135 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

136 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

137  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

138  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

139 
	}
}

142 
__exã∫_Æways_ölöe
 *

143 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

145  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

146 
	}
}

149 
__exã∫_Æways_ölöe
 *

150 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

151 
size_t
 
__Àn
))

153  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

154 
	}
}

	@/usr/include/bits/sys_errlist.h

20 #i‚de‡
_STDIO_H


26 #ifde‡ 
__USE_BSD


27 
sys_√º
;

28 
__c⁄°
 *__c⁄° 
sys_îæi°
[];

30 #ifde‡ 
__USE_GNU


31 
_sys_√º
;

32 
__c⁄°
 *__c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/time.h

24 #i‚de‡
__√ed_timevÆ


25 #i‚de‡
_BITS_TIME_H


26 
	#_BITS_TIME_H
 1

	)

34 
	#CLOCKS_PER_SEC
 1000000l

	)

36 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


39 
	~<bôs/ty≥s.h
>

40 
__sysc⁄f
 ();

41 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

44 #ifde‡
__USE_POSIX199309


46 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

50 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

52 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

55 
	#TIMER_ABSTIME
 1

	)

61 #ifde‡
__√ed_timevÆ


62 #unde‡
__√ed_timevÆ


63 #i‚de‡
_STRUCT_TIMEVAL


64 
	#_STRUCT_TIMEVAL
 1

	)

65 
	~<bôs/ty≥s.h
>

69 
	stimevÆ


71 
__time_t
 
	mtv_£c
;

72 
__su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/bits/types.h

24 #i‚def 
_BITS_TYPES_H


25 
	#_BITS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	t__u_ch¨
;

32 
	t__u_sh‹t
;

33 
	t__u_öt
;

34 
	t__u_l⁄g
;

37 sig√d 
	t__öt8_t
;

38 
	t__uöt8_t
;

39 sig√d 
	t__öt16_t
;

40 
	t__uöt16_t
;

41 sig√d 
	t__öt32_t
;

42 
	t__uöt32_t
;

43 #i‡
__WORDSIZE
 == 64

44 sig√d 
	t__öt64_t
;

45 
	t__uöt64_t
;

46 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


47 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

48 
__exãnsi⁄__
 
	t__uöt64_t
;

52 #i‡
__WORDSIZE
 == 64

53 
	t__quad_t
;

54 
	t__u_quad_t
;

55 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


56 
__exãnsi⁄__
 
	t__quad_t
;

57 
__exãnsi⁄__
 
	t__u_quad_t
;

61 
	m__vÆ
[2];

62 } 
	t__quad_t
;

65 
__u_l⁄g
 
	m__vÆ
[2];

66 } 
	t__u_quad_t
;

99 
	#__S16_TYPE
 

	)

100 
	#__U16_TYPE
 

	)

101 
	#__S32_TYPE
 

	)

102 
	#__U32_TYPE
 

	)

103 
	#__SLONGWORD_TYPE
 

	)

104 
	#__ULONGWORD_TYPE
 

	)

105 #i‡
__WORDSIZE
 == 32

106 
	#__SQUAD_TYPE
 
__quad_t


	)

107 
	#__UQUAD_TYPE
 
__u_quad_t


	)

108 
	#__SWORD_TYPE
 

	)

109 
	#__UWORD_TYPE
 

	)

110 
	#__SLONG32_TYPE
 

	)

111 
	#__ULONG32_TYPE
 

	)

112 
	#__S64_TYPE
 
__quad_t


	)

113 
	#__U64_TYPE
 
__u_quad_t


	)

116 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

117 #ñi‡
__WORDSIZE
 == 64

118 
	t__SQUAD_TYPE
 

	)

119 
	t__UQUAD_TYPE
 

	)

120 
	t__SWORD_TYPE
 

	)

121 
	t__UWORD_TYPE
 

	)

122 
	t__SLONG32_TYPE
 

	)

123 
	t__ULONG32_TYPE
 

	)

124 
	t__S64_TYPE
 

	)

125 
	t__U64_TYPE
 

	)

127 
	t__STD_TYPE
 

	)

131 
	~<bôs/ty≥sizes.h
>

134 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

135 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

136 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

137 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

138 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

139 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

140 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

141 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

142 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

143 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

144 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

145 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

146 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

147 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

148 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

149 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

150 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

151 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

153 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

154 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

155 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

158 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

161 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

164 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

169 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

170 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

173 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

174 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

177 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

178 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

180 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

184 
__off64_t
 
	t__loff_t
;

185 
__quad_t
 *
	t__qaddr_t
;

186 *
	t__ˇddr_t
;

189 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

192 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

195 #unde‡
__STD_TYPE


	@/usr/include/bits/unistd.h

20 #i‚de‡
_UNISTD_H


24 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

25 
size_t
 
__buÊí
Ë
__wur
;

26 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

27 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

28 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

29 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

30 
size_t
 
__buÊí
), 
__ªad_chk
)

31 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

34 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


35 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

37 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

39 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

40  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

42 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

43  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

45  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

46 
	}
}

48 #ifde‡
__USE_UNIX98


49 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

50 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

51 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

52 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

53 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

54 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

55 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

56 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

57 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

58 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

59 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

60 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

61 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

62 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

64 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

65 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

66 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

67 
__¥ód64_chk
)

68 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

71 #i‚de‡
__USE_FILE_OFFSET64


72 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


73 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

75 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

77 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

78  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

80 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

81  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

82 
	`__bos0
 (
__buf
));

84  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

85 
	}
}

87 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


88 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

90 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

92 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

93  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

95 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

96  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

97 
	`__bos0
 (
__buf
));

100  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

101 
	}
}

104 #ifde‡
__USE_LARGEFILE64


105 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


106 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

108 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

110 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

111  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

113 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

114  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

115 
	`__bos0
 (
__buf
));

118  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

119 
	}
}

123 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


124 
ssize_t
 
	$__ªadlök_chk
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

125 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

126 
size_t
 
__buÊí
)

127 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

128 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

129 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

130 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

131 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

132 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

133 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

134 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

135 
size_t
 
__buÊí
), 
__ªadlök_chk
)

136 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

139 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


140 
	`__NTH
 (
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

141 
size_t
 
__Àn
))

143 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

145 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

146  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

148 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

149  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

151  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

152 
	}
}

155 #ifde‡
__USE_ATFILE


156 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

157 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

158 
size_t
 
__buÊí
)

159 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

160 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

161 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

162 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

163 
ªadlök©
)

164 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

165 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

166 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

167 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

168 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

169 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

173 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


174 
	`__NTH
 (
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

175 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

177 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

179 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

180  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

182 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

183  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

184 
	`__bos
 (
__buf
));

186  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

187 
	}
}

190 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

191 
__THROW
 
__wur
;

192 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

193 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

194 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

195 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

196 
__gëcwd_chk
)

197 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

200 
__exã∫_Æways_ölöe
 
__wur
 *

201 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

203 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

205 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

206  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

208 i‡(
__size
 > 
	`__bos
 (
__buf
))

209  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

211  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

212 
	}
}

214 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


215 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

217 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

218 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

221 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

222 
	`__NTH
 (
	$gëwd
 (*
__buf
))

224 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

225  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

226  
	`__gëwd_w¨n
 (
__buf
);

227 
	}
}

230 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

231 
size_t
 
__buÊí
Ë
__THROW
;

232 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

233 
size_t
 
__Àn
), 
c⁄f°r
);

234 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

235 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

236 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

237 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

240 
__exã∫_Æways_ölöe
 
size_t


241 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

243 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

245 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

246  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

248 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

249  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

251  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

252 
	}
}

255 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

256 
__THROW
 
__wur
;

257 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

258 
gëgroups
Ë
__wur
;

259 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

260 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

261 
__gëgroups_chk
)

262 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

265 
__exã∫_Æways_ölöe
 

266 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

268 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

270 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

271  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

273 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

274  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

276  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

277 
	}
}

280 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

281 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

282 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

283 
size_t
 
__buÊí
), 
ây«me_r
)

284 
	`__n⁄nuŒ
 ((2));

285 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

286 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

287 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

288 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

291 
__exã∫_Æways_ölöe
 

292 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

294 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

296 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

297  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

299 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

300  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

302  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

303 
	}
}

306 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


307 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

308 
	`__n⁄nuŒ
 ((1));

309 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

310 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

311 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

312 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

313 
__gëlogö_r_chk
)

314 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

317 
__exã∫_Æways_ölöe
 

318 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

320 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

322 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

323  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

325 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

326  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

328  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

329 
	}
}

333 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


334 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

335 
__THROW
 
	`__n⁄nuŒ
 ((1));

336 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

337 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

338 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

339 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

340 
__gëho°«me_chk
)

341 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

344 
__exã∫_Æways_ölöe
 

345 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

347 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

349 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

350  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

352 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

353  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

355  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

356 
	}
}

360 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

361 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

363 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

364 
size_t
 
__buÊí
),

365 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

366 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

367 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

368 
__gëdomaö«me_chk
)

369 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

373 
__exã∫_Æways_ölöe
 

374 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

376 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

378 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

379  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

381 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

382  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

384  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

385 
	}
}

	@/usr/include/bits/waitflags.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


26 
	#WNOHANG
 1

	)

27 
	#WUNTRACED
 2

	)

30 
	#WSTOPPED
 2

	)

31 
	#WEXITED
 4

	)

32 
	#WCONTINUED
 8

	)

33 
	#WNOWAIT
 0x01000000

	)

35 
	#__WNOTHREAD
 0x20000000

	)

37 
	#__WALL
 0x40000000

	)

38 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


29 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

32 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

35 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

38 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

41 
	#__WIFSIGNALED
(
°©us
) \

42 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

45 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

49 #ifde‡
WCONTINUED


50 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

54 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

57 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

58 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

59 
	#__W_CONTINUED
 0xffff

	)

60 
	#__WCOREFLAG
 0x80

	)

63 #ifdef 
__USE_BSD


65 
	~<ídün.h
>

67 
	uwaô


69 
	mw_°©us
;

72 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


73 
	m__w_ãrmsig
:7;

74 
	m__w_c‹edump
:1;

75 
	m__w_ªtcode
:8;

78 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


80 
	m__w_ªtcode
:8;

81 
	m__w_c‹edump
:1;

82 
	m__w_ãrmsig
:7;

84 } 
	m__waô_ãrmö©ed
;

87 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


88 
	m__w_°›vÆ
:8;

89 
	m__w_°›sig
:8;

92 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


94 
	m__w_°›sig
:8;

95 
	m__w_°›vÆ
:8;

97 } 
	m__waô_°›≥d
;

100 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

101 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

102 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

103 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

104 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__


4 
	#__WORDSIZE
 64

	)

5 
	#__WORDSIZE_COMPAT32
 1

	)

7 
	#__WORDSIZE
 32

	)

	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

	@/usr/include/features.h

19 #i‚def 
_FEATURES_H


20 
	#_FEATURES_H
 1

	)

93 #unde‡
__USE_ISOC99


94 #unde‡
__USE_ISOC95


95 #unde‡
__USE_POSIX


96 #unde‡
__USE_POSIX2


97 #unde‡
__USE_POSIX199309


98 #unde‡
__USE_POSIX199506


99 #unde‡
__USE_XOPEN


100 #unde‡
__USE_XOPEN_EXTENDED


101 #unde‡
__USE_UNIX98


102 #unde‡
__USE_XOPEN2K


103 #unde‡
__USE_LARGEFILE


104 #unde‡
__USE_LARGEFILE64


105 #unde‡
__USE_FILE_OFFSET64


106 #unde‡
__USE_BSD


107 #unde‡
__USE_SVID


108 #unde‡
__USE_MISC


109 #unde‡
__USE_ATFILE


110 #unde‡
__USE_GNU


111 #unde‡
__USE_REENTRANT


112 #unde‡
__USE_FORTIFY_LEVEL


113 #unde‡
__FAVOR_BSD


114 #unde‡
__KERNEL_STRICT_NAMES


118 #i‚de‡
_LOOSE_KERNEL_NAMES


119 
	#__KERNEL_STRICT_NAMES


	)

123 
	#__USE_ANSI
 1

	)

132 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


133 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

134 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

136 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

141 #i‡
deföed
 
_BSD_SOURCE
 && \

142 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

143 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_XOPEN_SOURCE_EXTENDED
 || \

144 
deföed
 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

145 
	#__FAVOR_BSD
 1

	)

149 #ifde‡
_GNU_SOURCE


150 #unde‡
_ISOC99_SOURCE


151 
	#_ISOC99_SOURCE
 1

	)

152 #unde‡
_POSIX_SOURCE


153 
	#_POSIX_SOURCE
 1

	)

154 #unde‡
_POSIX_C_SOURCE


155 
	#_POSIX_C_SOURCE
 200112L

	)

156 #unde‡
_XOPEN_SOURCE


157 
	#_XOPEN_SOURCE
 600

	)

158 #unde‡
_XOPEN_SOURCE_EXTENDED


159 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

160 #unde‡
_LARGEFILE64_SOURCE


161 
	#_LARGEFILE64_SOURCE
 1

	)

162 #unde‡
_BSD_SOURCE


163 
	#_BSD_SOURCE
 1

	)

164 #unde‡
_SVID_SOURCE


165 
	#_SVID_SOURCE
 1

	)

166 #unde‡
_ATFILE_SOURCE


167 
	#_ATFILE_SOURCE
 1

	)

172 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

173 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

174 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_XOPEN_SOURCE_EXTENDED
 && \

175 !
deföed
 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

176 
	#_BSD_SOURCE
 1

	)

177 
	#_SVID_SOURCE
 1

	)

184 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

185 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

186 
	#__USE_ISOC99
 1

	)

190 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

191 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

192 
	#__USE_ISOC95
 1

	)

197 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

198 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

199 
	#_POSIX_SOURCE
 1

	)

200 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

201 
	#_POSIX_C_SOURCE
 2

	)

202 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

203 
	#_POSIX_C_SOURCE
 199506L

	)

205 
	#_POSIX_C_SOURCE
 200112L

	)

209 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


210 
	#__USE_POSIX
 1

	)

213 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


214 
	#__USE_POSIX2
 1

	)

217 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

218 
	#__USE_POSIX199309
 1

	)

221 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

222 
	#__USE_POSIX199506
 1

	)

225 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

226 
	#__USE_XOPEN2K
 1

	)

229 #ifdef 
_XOPEN_SOURCE


230 
	#__USE_XOPEN
 1

	)

231 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

232 
	#__USE_XOPEN_EXTENDED
 1

	)

233 
	#__USE_UNIX98
 1

	)

234 #unde‡
_LARGEFILE_SOURCE


235 
	#_LARGEFILE_SOURCE
 1

	)

236 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

237 
	#__USE_XOPEN2K
 1

	)

238 #unde‡
__USE_ISOC99


239 
	#__USE_ISOC99
 1

	)

242 #ifde‡
_XOPEN_SOURCE_EXTENDED


243 
	#__USE_XOPEN_EXTENDED
 1

	)

248 #ifde‡
_LARGEFILE_SOURCE


249 
	#__USE_LARGEFILE
 1

	)

252 #ifde‡
_LARGEFILE64_SOURCE


253 
	#__USE_LARGEFILE64
 1

	)

256 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

257 
	#__USE_FILE_OFFSET64
 1

	)

260 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


261 
	#__USE_MISC
 1

	)

264 #ifdef 
_BSD_SOURCE


265 
	#__USE_BSD
 1

	)

268 #ifdef 
_SVID_SOURCE


269 
	#__USE_SVID
 1

	)

272 #ifdef 
_ATFILE_SOURCE


273 
	#__USE_ATFILE
 1

	)

276 #ifdef 
_GNU_SOURCE


277 
	#__USE_GNU
 1

	)

280 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


281 
	#__USE_REENTRANT
 1

	)

284 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

285 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

286 #i‡
_FORTIFY_SOURCE
 > 1

287 
	#__USE_FORTIFY_LEVEL
 2

	)

289 
	#__USE_FORTIFY_LEVEL
 1

	)

292 
	#__USE_FORTIFY_LEVEL
 0

	)

296 
	#__STDC_IEC_559__
 1

	)

297 
	#__STDC_IEC_559_COMPLEX__
 1

	)

300 
	#__STDC_ISO_10646__
 200009L

	)

308 #unde‡
__GNU_LIBRARY__


309 
	#__GNU_LIBRARY__
 6

	)

313 
	#__GLIBC__
 2

	)

314 
	#__GLIBC_MINOR__
 7

	)

316 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

317 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

320 #i‡
deföed
 
__GNUC__
 \

321 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

322 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

323 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

324 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

328 #i‚de‡
__ASSEMBLER__


329 #i‚de‡
_SYS_CDEFS_H


330 
	~<sys/cdefs.h
>

335 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


336 
	#__USE_LARGEFILE
 1

	)

337 
	#__USE_LARGEFILE64
 1

	)

343 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

344 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

345 && 
deföed
 
	g__exã∫_ölöe


346 
	#__USE_EXTERN_INLINES
 1

	)

354 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 
gë›t
 ();

158 #i‚de‡
__√ed_gë›t


159 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
,

161 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

162 
__THROW
;

163 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
,

165 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

166 
__THROW
;

170 #ifdef 
__˝lu•lus


175 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde‡
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

151 
	#_IO_SKIPWS
 01

	)

152 
	#_IO_LEFT
 02

	)

153 
	#_IO_RIGHT
 04

	)

154 
	#_IO_INTERNAL
 010

	)

155 
	#_IO_DEC
 020

	)

156 
	#_IO_OCT
 040

	)

157 
	#_IO_HEX
 0100

	)

158 
	#_IO_SHOWBASE
 0200

	)

159 
	#_IO_SHOWPOINT
 0400

	)

160 
	#_IO_UPPERCASE
 01000

	)

161 
	#_IO_SHOWPOS
 02000

	)

162 
	#_IO_SCIENTIFIC
 04000

	)

163 
	#_IO_FIXED
 010000

	)

164 
	#_IO_UNITBUF
 020000

	)

165 
	#_IO_STDIO
 040000

	)

166 
	#_IO_DONT_CLOSE
 0100000

	)

167 
	#_IO_BOOLALPHA
 0200000

	)

170 
_IO_jump_t
; 
	g_IO_FILE
;

173 #ifde‡
_IO_MTSAFE_IO


174 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

175 
	~<bôs/°dio-lock.h
>

180 
	t_IO_lock_t
;

186 
	s_IO_m¨kî
 {

187 
_IO_m¨kî
 *
	m_√xt
;

188 
_IO_FILE
 *
	m_sbuf
;

192 
	m_pos
;

194 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

195 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

196 
	mpublic
:

197 
°ªamm¨kî
(
°ªambuf
 *
sb
);

198 ~
°ªamm¨kî
();

199 
ßvög
(Ë{  
	m_•os
 == -2; }

200 
dñè
(
°ªamm¨kî
&);

201 
dñè
();

206 
	e__codecvt_ªsu…


208 
	m__codecvt_ok
,

209 
	m__codecvt_∑πül
,

210 
	m__codecvt_îr‹
,

211 
	m__codecvt_noc⁄v


214 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


217 
	s_IO_codecvt


219 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

220 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

221 
	m__mb°©e_t
 *,

222 c⁄° 
	mwch¨_t
 *,

223 c⁄° 
	mwch¨_t
 *,

224 c⁄° 
	mwch¨_t
 **, *,

226 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

227 
	m__mb°©e_t
 *, *,

229 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

230 
	m__mb°©e_t
 *,

232 c⁄° **, 
	mwch¨_t
 *,

233 
	mwch¨_t
 *, wchar_t **);

234 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

235 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

236 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

237 c⁄° *, c⁄° *, 
	m_IO_size_t
);

238 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

240 
_IO_ic⁄v_t
 
	m__cd_ö
;

241 
_IO_ic⁄v_t
 
	m__cd_out
;

245 
	s_IO_wide_d©a


247 
wch¨_t
 *
	m_IO_ªad_±r
;

248 
wch¨_t
 *
	m_IO_ªad_íd
;

249 
wch¨_t
 *
	m_IO_ªad_ba£
;

250 
wch¨_t
 *
	m_IO_wrôe_ba£
;

251 
wch¨_t
 *
	m_IO_wrôe_±r
;

252 
wch¨_t
 *
	m_IO_wrôe_íd
;

253 
wch¨_t
 *
	m_IO_buf_ba£
;

254 
wch¨_t
 *
	m_IO_buf_íd
;

256 
wch¨_t
 *
	m_IO_ßve_ba£
;

257 
wch¨_t
 *
	m_IO_backup_ba£
;

259 
wch¨_t
 *
	m_IO_ßve_íd
;

261 
__mb°©e_t
 
	m_IO_°©e
;

262 
__mb°©e_t
 
	m_IO_œ°_°©e
;

263 
_IO_codecvt
 
	m_codecvt
;

265 
wch¨_t
 
	m_sh‹tbuf
[1];

267 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

271 
	s_IO_FILE
 {

272 
	m_Êags
;

273 
	#_IO_fûe_Êags
 
_Êags


	)

277 * 
	m_IO_ªad_±r
;

278 * 
	m_IO_ªad_íd
;

279 * 
	m_IO_ªad_ba£
;

280 * 
	m_IO_wrôe_ba£
;

281 * 
	m_IO_wrôe_±r
;

282 * 
	m_IO_wrôe_íd
;

283 * 
	m_IO_buf_ba£
;

284 * 
	m_IO_buf_íd
;

286 *
	m_IO_ßve_ba£
;

287 *
	m_IO_backup_ba£
;

288 *
	m_IO_ßve_íd
;

290 
_IO_m¨kî
 *
	m_m¨kîs
;

292 
_IO_FILE
 *
	m_chaö
;

294 
	m_fûío
;

296 
	m_blksize
;

298 
	m_Êags2
;

300 
_IO_off_t
 
	m_ﬁd_off£t
;

302 
	#__HAVE_COLUMN


	)

304 
	m_cur_cﬁumn
;

305 sig√d 
	m_vèbÀ_off£t
;

306 
	m_sh‹tbuf
[1];

310 
_IO_lock_t
 *
	m_lock
;

311 #ifde‡
_IO_USE_OLD_IO_FILE


314 
	s_IO_FILE_com∂ëe


316 
_IO_FILE
 
	m_fûe
;

318 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

319 
_IO_off64_t
 
	m_off£t
;

320 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


322 
_IO_codecvt
 *
	m_codecvt
;

323 
_IO_wide_d©a
 *
	m_wide_d©a
;

324 
_IO_FILE
 *
	m_‰ìªs_li°
;

325 *
	m_‰ìªs_buf
;

326 
size_t
 
	m_‰ìªs_size
;

328 *
	m__∑d1
;

329 *
	m__∑d2
;

330 *
	m__∑d3
;

331 *
	m__∑d4
;

332 
size_t
 
	m__∑d5
;

334 
	m_mode
;

336 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

340 #i‚de‡
__˝lu•lus


341 
_IO_FILE
 
	t_IO_FILE
;

344 
	g_IO_FILE_∂us
;

346 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

347 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

348 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

349 #i‚de‡
_LIBC


350 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

351 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

352 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

354 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

355 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

356 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

364 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

372 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

373 
	tsize_t
 
	t__n
);

381 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

384 
	t__io_˛o£_‚
 (*
	t__cookõ
);

387 #ifde‡
_GNU_SOURCE


389 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

390 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

391 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

392 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

397 
__io_ªad_‚
 *
	mªad
;

398 
__io_wrôe_‚
 *
	mwrôe
;

399 
__io_£ek_‚
 *
	m£ek
;

400 
__io_˛o£_‚
 *
	m˛o£
;

401 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

402 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

404 
	g_IO_cookõ_fûe
;

407 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

408 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

412 #ifde‡
__˝lu•lus


416 
__undîÊow
 (
_IO_FILE
 *);

417 
__uÊow
 (
_IO_FILE
 *);

418 
__ovîÊow
 (
_IO_FILE
 *, );

419 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


420 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

421 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

422 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

425 #i‡ 
__GNUC__
 >= 3

426 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

428 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

431 
	#_IO_gëc_u∆ocked
(
_Â
) \

432 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

433 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

434 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

435 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

436 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

437 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

438 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

439 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

440 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

441 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

443 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


444 
	#_IO_gëwc_u∆ocked
(
_Â
) \

445 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 >(_Â)->_wide_d©a->
_IO_ªad_íd
,\

447 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

448 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

449 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

450 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
, 0) \

451 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

452 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

455 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

456 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

458 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

459 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

460 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

461 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

463 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

466 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

467 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

469 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

470 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

471 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

473 #ifde‡
_IO_MTSAFE_IO


474 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

475 
	#_IO_Êockfûe
(
_Â
) \

476 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

477 
	#_IO_fu∆ockfûe
(
_Â
) \

478 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

480 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

481 
	#_IO_Êockfûe
(
_Â
Ë

	)

482 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

483 
	#_IO_·rylockfûe
(
_Â
Ë

	)

484 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

485 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

488 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

489 
_IO_va_li°
, *
__ª°ri˘
);

490 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

491 
_IO_va_li°
);

492 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

493 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

495 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

496 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

498 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

500 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


501 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

502 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

503 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

504 #i‡
__GNUC__
 >= 2

507 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


508 
	~<shlib-com∑t.h
>

509 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

510 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

511 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

512 c⁄° 
_IO_°dö_u£d
;

513 
wók_exã∫
 (
_IO_°dö_u£d
);

516 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


517 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

521 
	#_IO_fwide
(
__Â
, 
__mode
) \

522 ({ 
__ªsu…
 = (
__mode
); \

523 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

525 i‡((
__Â
)->
_mode
 == 0) \

527 (
__Â
)->
_mode
 = -1; \

528 
__ªsu…
 = (
__Â
)->
_mode
; \

530 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

531 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

533 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

534 
__ªsu…
; })

	)

537 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

538 
_IO_va_li°
, *
__ª°ri˘
);

539 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

540 
_IO_va_li°
);

541 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

542 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

545 #ifde‡
__LDBL_COMPAT


546 
	~<bôs/libio-ldbl.h
>

549 #ifde‡
__˝lu•lus


	@/usr/include/sys/select.h

22 #i‚de‡
_SYS_SELECT_H


23 
	#_SYS_SELECT_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

31 
	~<bôs/£À˘.h
>

34 
	~<bôs/sig£t.h
>

36 #i‚de‡
__sig£t_t_deföed


37 
	#__sig£t_t_deföed


	)

38 
__sig£t_t
 
	tsig£t_t
;

42 
	#__√ed_time_t


	)

43 
	#__√ed_time•ec


	)

44 
	~<time.h
>

45 
	#__√ed_timevÆ


	)

46 
	~<bôs/time.h
>

48 #i‚de‡
__su£c⁄ds_t_deföed


49 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

50 
	#__su£c⁄ds_t_deföed


	)

55 
	t__fd_mask
;

58 #unde‡
__NFDBITS


59 #unde‡
__FDELT


60 #unde‡
__FDMASK


62 
	#__NFDBITS
 (8 *  (
__fd_mask
))

	)

63 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

64 
	#__FDMASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

71 #ifde‡
__USE_XOPEN


72 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

75 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

76 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

78 } 
	tfd_£t
;

81 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

83 #ifde‡
__USE_MISC


85 
__fd_mask
 
	tfd_mask
;

88 
	#NFDBITS
 
__NFDBITS


	)

93 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

94 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

95 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

96 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

99 
__BEGIN_DECLS


109 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

110 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

111 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

112 
timevÆ
 *
__ª°ri˘
 
__timeout
);

114 #ifde‡
__USE_XOPEN2K


121 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

122 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

123 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

124 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

125 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

128 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

21 #i‚de‡
_SYS_SYSMACROS_H


22 
	#_SYS_SYSMACROS_H
 1

	)

24 
	~<„©uªs.h
>

29 #ifde‡
__GLIBC_HAVE_LONG_LONG


30 
__exãnsi⁄__


31 
	$gnu_dev_maj‹
 (
__dev
)

32 
__THROW
;

33 
__exãnsi⁄__


34 
	$gnu_dev_mö‹
 (
__dev
)

35 
__THROW
;

36 
__exãnsi⁄__


37 
	$gnu_dev_makedev
 (
__maj‹
,

38 
__mö‹
)

39 
__THROW
;

41 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


42 
__exãnsi⁄__
 
__exã∫_ölöe
 

43 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

45  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

46 
	}
}

48 
__exãnsi⁄__
 
__exã∫_ölöe
 

49 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

51  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

52 
	}
}

54 
__exãnsi⁄__
 
__exã∫_ölöe
 

55 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

57  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

58 | (((Ë(
__mö‹
 & ~0xff)) << 12)

59 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

60 
	}
}

65 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

66 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

67 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/sys/ucontext.h

19 #i‚de‡
_SYS_UCONTEXT_H


20 
	#_SYS_UCONTEXT_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sig«l.h
>

24 
	~<bôs/w‹dsize.h
>

28 
	~<bôs/sigc⁄ãxt.h
>

30 #i‡
__WORDSIZE
 == 64

33 
	tgªg_t
;

36 
	#NGREG
 23

	)

39 
gªg_t
 
	tgªg£t_t
[
NGREG
];

41 #ifde‡
__USE_GNU


45 
	mREG_R8
 = 0,

46 
	#REG_R8
 
REG_R8


	)

47 
	mREG_R9
,

48 
	#REG_R9
 
REG_R9


	)

49 
	mREG_R10
,

50 
	#REG_R10
 
REG_R10


	)

51 
	mREG_R11
,

52 
	#REG_R11
 
REG_R11


	)

53 
	mREG_R12
,

54 
	#REG_R12
 
REG_R12


	)

55 
	mREG_R13
,

56 
	#REG_R13
 
REG_R13


	)

57 
	mREG_R14
,

58 
	#REG_R14
 
REG_R14


	)

59 
	mREG_R15
,

60 
	#REG_R15
 
REG_R15


	)

61 
	mREG_RDI
,

62 
	#REG_RDI
 
REG_RDI


	)

63 
	mREG_RSI
,

64 
	#REG_RSI
 
REG_RSI


	)

65 
	mREG_RBP
,

66 
	#REG_RBP
 
REG_RBP


	)

67 
	mREG_RBX
,

68 
	#REG_RBX
 
REG_RBX


	)

69 
	mREG_RDX
,

70 
	#REG_RDX
 
REG_RDX


	)

71 
	mREG_RAX
,

72 
	#REG_RAX
 
REG_RAX


	)

73 
	mREG_RCX
,

74 
	#REG_RCX
 
REG_RCX


	)

75 
	mREG_RSP
,

76 
	#REG_RSP
 
REG_RSP


	)

77 
	mREG_RIP
,

78 
	#REG_RIP
 
REG_RIP


	)

79 
	mREG_EFL
,

80 
	#REG_EFL
 
REG_EFL


	)

81 
	mREG_CSGSFS
,

82 
	#REG_CSGSFS
 
REG_CSGSFS


	)

83 
	mREG_ERR
,

84 
	#REG_ERR
 
REG_ERR


	)

85 
	mREG_TRAPNO
,

86 
	#REG_TRAPNO
 
REG_TRAPNO


	)

87 
	mREG_OLDMASK
,

88 
	#REG_OLDMASK
 
REG_OLDMASK


	)

89 
	mREG_CR2


90 
	#REG_CR2
 
REG_CR2


	)

94 
	s_libc_Âxªg


96 
	msignifiˇnd
[4];

97 
	mexp⁄ít
;

98 
	m∑ddög
[3];

101 
	s_libc_xmmªg


103 
__uöt32_t
 
	mñemít
[4];

106 
	s_libc_Â°©e


109 
__uöt16_t
 
	mcwd
;

110 
__uöt16_t
 
	mswd
;

111 
__uöt16_t
 
	m·w
;

112 
__uöt16_t
 
	mf›
;

113 
__uöt64_t
 
	mrù
;

114 
__uöt64_t
 
	mrdp
;

115 
__uöt32_t
 
	mmxc§
;

116 
__uöt32_t
 
	mmx¸_mask
;

117 
_libc_Âxªg
 
	m_°
[8];

118 
_libc_xmmªg
 
	m_xmm
[16];

119 
__uöt32_t
 
	m∑ddög
[24];

123 
_libc_Â°©e
 *
	tÂªg£t_t
;

128 
gªg£t_t
 
	mgªgs
;

130 
Âªg£t_t
 
	mÂªgs
;

131 
	m__ª£rved1
 [8];

132 } 
	tmc⁄ãxt_t
;

135 
	suc⁄ãxt


137 
	muc_Êags
;

138 
uc⁄ãxt
 *
	muc_lök
;

139 
°ack_t
 
	muc_°ack
;

140 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

141 
__sig£t_t
 
	muc_sigmask
;

142 
_libc_Â°©e
 
	m__Âªgs_mem
;

143 } 
	tuc⁄ãxt_t
;

148 
	tgªg_t
;

151 
	#NGREG
 19

	)

154 
gªg_t
 
	tgªg£t_t
[
NGREG
];

156 #ifde‡
__USE_GNU


160 
	mREG_GS
 = 0,

161 
	#REG_GS
 
REG_GS


	)

162 
	mREG_FS
,

163 
	#REG_FS
 
REG_FS


	)

164 
	mREG_ES
,

165 
	#REG_ES
 
REG_ES


	)

166 
	mREG_DS
,

167 
	#REG_DS
 
REG_DS


	)

168 
	mREG_EDI
,

169 
	#REG_EDI
 
REG_EDI


	)

170 
	mREG_ESI
,

171 
	#REG_ESI
 
REG_ESI


	)

172 
	mREG_EBP
,

173 
	#REG_EBP
 
REG_EBP


	)

174 
	mREG_ESP
,

175 
	#REG_ESP
 
REG_ESP


	)

176 
	mREG_EBX
,

177 
	#REG_EBX
 
REG_EBX


	)

178 
	mREG_EDX
,

179 
	#REG_EDX
 
REG_EDX


	)

180 
	mREG_ECX
,

181 
	#REG_ECX
 
REG_ECX


	)

182 
	mREG_EAX
,

183 
	#REG_EAX
 
REG_EAX


	)

184 
	mREG_TRAPNO
,

185 
	#REG_TRAPNO
 
REG_TRAPNO


	)

186 
	mREG_ERR
,

187 
	#REG_ERR
 
REG_ERR


	)

188 
	mREG_EIP
,

189 
	#REG_EIP
 
REG_EIP


	)

190 
	mREG_CS
,

191 
	#REG_CS
 
REG_CS


	)

192 
	mREG_EFL
,

193 
	#REG_EFL
 
REG_EFL


	)

194 
	mREG_UESP
,

195 
	#REG_UESP
 
REG_UESP


	)

196 
	mREG_SS


197 
	#REG_SS
 
REG_SS


	)

202 
	s_libc_Âªg


204 
	msignifiˇnd
[4];

205 
	mexp⁄ít
;

208 
	s_libc_Â°©e


210 
	mcw
;

211 
	msw
;

212 
	mèg
;

213 
	mùoff
;

214 
	mcs£l
;

215 
	md©aoff
;

216 
	md©a£l
;

217 
_libc_Âªg
 
	m_°
[8];

218 
	m°©us
;

222 
_libc_Â°©e
 *
	tÂªg£t_t
;

227 
gªg£t_t
 
	mgªgs
;

230 
Âªg£t_t
 
	mÂªgs
;

231 
	mﬁdmask
;

232 
	m¸2
;

233 } 
	tmc⁄ãxt_t
;

236 
	suc⁄ãxt


238 
	muc_Êags
;

239 
uc⁄ãxt
 *
	muc_lök
;

240 
°ack_t
 
	muc_°ack
;

241 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

242 
__sig£t_t
 
	muc_sigmask
;

243 
_libc_Â°©e
 
	m__Âªgs_mem
;

244 } 
	tuc⁄ãxt_t
;

	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__›í64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/libio-ldbl.h

20 #i‚de‡
_IO_STDIO_H


24 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

25 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/select.h

19 #i‚de‡
_SYS_SELECT_H


26 
	#__FD_ZERO
(
s
) \

28 
__i
; \

29 
fd_£t
 *
__¨r
 = (
s
); \

30 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

31 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

32 } 0)

	)

33 
	#__FD_SET
(
d
, 
s
Ë(
	`__FDS_BITS
 (s)[
	`__FDELT
(d)] |
	`__FDMASK
(d))

	)

34 
	#__FD_CLR
(
d
, 
s
Ë(
	`__FDS_BITS
 (s)[
	`__FDELT
(d)] &~
	`__FDMASK
(d))

	)

35 
	#__FD_ISSET
(
d
, 
s
Ë((
	`__FDS_BITS
 (s)[
	`__FDELT
(d)] & 
	`__FDMASK
(d)Ë!0)

	)

	@/usr/include/bits/stdio-lock.h

20 #i‚de‡
_BITS_STDIO_LOCK_H


21 
	#_BITS_STDIO_LOCK_H
 1

	)

23 
	~<bôs/libc-lock.h
>

24 
	~<lowÀvñlock.h
>

28 
	#_IO_lock_öex≥nsive
 1

	)

30 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t_IO_lock_t
;

32 
	#_IO_lock_öôülizî
 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

34 
	#_IO_lock_öô
(
_«me
) \

35 ((
_«me
Ë(
_IO_lock_t
Ë
_IO_lock_öôülizî
 , 0)

	)

37 
	#_IO_lock_föi
(
_«me
) \

38 ((Ë0)

	)

40 
	#_IO_lock_lock
(
_«me
) \

42 *
__£lf
 = 
THREAD_SELF
; \

43 i‡((
_«me
).
ow√r
 !
__£lf
) \

45 
	`Œl_lock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

46 (
_«me
).
ow√r
 = 
__£lf
; \

48 ++(
_«me
).
˙t
; \

49 } 0)

	)

51 
	#_IO_lock_åylock
(
_«me
) \

53 
__ªsu…
 = 0; \

54 *
__£lf
 = 
THREAD_SELF
; \

55 i‡((
_«me
).
ow√r
 !
__£lf
) \

57 i‡(
	`Œl_åylock
 ((
_«me
).
lock
) == 0) \

59 (
_«me
).
ow√r
 = 
__£lf
; \

60 (
_«me
).
˙t
 = 1; \

63 
__ªsu…
 = 
EBUSY
; \

66 ++(
_«me
).
˙t
; \

67 
__ªsu…
; \

68 })

	)

70 
	#_IO_lock_u∆ock
(
_«me
) \

72 i‡(--(
_«me
).
˙t
 == 0) \

74 (
_«me
).
ow√r
 = 
NULL
; \

75 
	`Œl_u∆ock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

77 } 0)

	)

81 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
) \

82 
	`__libc_˛ónup_ªgi⁄_°¨t
 (((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0, 
_f˘
, _Â)

	)

83 
	#_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
_f˘
) \

84 
	`__libc_˛ónup_ªgi⁄_°¨t
 (1, 
_f˘
, 
NULL
)

	)

85 
	#_IO_˛ónup_ªgi⁄_íd
(
_doô
) \

86 
	`__libc_˛ónup_ªgi⁄_íd
 (
_doô
)

	)

88 #i‡
deföed
 
_LIBC
 && !deföed 
NOT_IN_libc


90 #ifde‡
__EXCEPTIONS


91 
	#_IO_acquúe_lock
(
_Â
) \

93 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

94 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_f˘
))) \

95 (
_Â
); \

96 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

97 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
) \

99 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

100 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_˛ór_Êags2_f˘
))) \

101 (
_Â
); \

102 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

104 
	#_IO_acquúe_lock
(
_Â
Ë
_IO_acquúe_lock_√eds_ex˚±i⁄s_íabÀd


	)

105 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
Ë
	`_IO_acquúe_lock
 (_Â)

	)

107 
	#_IO_ªÀa£_lock
(
_Â
Ë; } 0)

	)

	@/usr/include/bits/typesizes.h

20 #i‚de‡
_BITS_TYPES_H


24 #i‚def 
_BITS_TYPESIZES_H


25 
	#_BITS_TYPESIZES_H
 1

	)

30 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

31 
	#__UID_T_TYPE
 
__U32_TYPE


	)

32 
	#__GID_T_TYPE
 
__U32_TYPE


	)

33 
	#__INO_T_TYPE
 
__ULONGWORD_TYPE


	)

34 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

35 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

36 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

37 
	#__OFF_T_TYPE
 
__SLONGWORD_TYPE


	)

38 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

39 
	#__PID_T_TYPE
 
__S32_TYPE


	)

40 
	#__RLIM_T_TYPE
 
__ULONGWORD_TYPE


	)

41 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

42 
	#__BLKCNT_T_TYPE
 
__SLONGWORD_TYPE


	)

43 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

44 
	#__FSBLKCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

45 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

46 
	#__FSFILCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

47 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

48 
	#__ID_T_TYPE
 
__U32_TYPE


	)

49 
	#__CLOCK_T_TYPE
 
__SLONGWORD_TYPE


	)

50 
	#__TIME_T_TYPE
 
__SLONGWORD_TYPE


	)

51 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

52 
	#__SUSECONDS_T_TYPE
 
__SLONGWORD_TYPE


	)

53 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

54 
	#__SWBLK_T_TYPE
 
__SLONGWORD_TYPE


	)

55 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

56 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

57 
	#__TIMER_T_TYPE
 *

	)

58 
	#__BLKSIZE_T_TYPE
 
__SLONGWORD_TYPE


	)

59 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

60 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

63 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/uio.h

19 #i‡!
deföed
 
_SYS_UIO_H
 && !deföed 
_FCNTL_H


23 #i‚de‡
_BITS_UIO_H


24 
	#_BITS_UIO_H
 1

	)

26 
	~<sys/ty≥s.h
>

40 
	#UIO_MAXIOV
 1024

	)

44 
	siovec


46 *
	miov_ba£
;

47 
size_t
 
	miov_Àn
;

	@/usr/include/gnu/stubs.h

4 
	~<bôs/w‹dsize.h
>

6 #i‡
__WORDSIZE
 == 32

7 
	~<gnu/°ubs-32.h
>

8 #ñi‡
__WORDSIZE
 == 64

9 
	~<gnu/°ubs-64.h
>

	@/usr/include/linux/errno.h

1 #i‚de‡
_LINUX_ERRNO_H


2 
	#_LINUX_ERRNO_H


	)

4 
	~<asm/î∫o.h
>

	@/usr/include/sys/cdefs.h

20 #i‚def 
_SYS_CDEFS_H


21 
	#_SYS_CDEFS_H
 1

	)

24 #i‚de‡
_FEATURES_H


25 
	~<„©uªs.h
>

31 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


36 #unde‡
__P


37 #unde‡
__PMT


39 #ifde‡
__GNUC__


46 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

47 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

48 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
)Ë
	)
fct

50 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

51 
	#__THROW
 
	`throw
 ()

	)

52 
	#__NTH
(
f˘
Ëf˘ 
	`throw
 ()

	)

54 
	#__THROW


	)

55 
	#__NTH
(
f˘
Ë
	)
fct

61 
	#__ölöe


	)

63 
	#__THROW


	)

64 
	#__NTH
(
f˘
Ë
	)
fct

66 
	#__c⁄°
 c⁄°

	)

67 
	#__sig√d
 sig√d

	)

68 
	#__vﬁ©ûe
 vﬁ©ûe

	)

74 
	#__P
(
¨gs
Ë
	)
args

75 
	#__PMT
(
¨gs
Ë
	)
args

80 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

81 
	#__STRING
(
x
Ë#x

	)

84 
	#__±r_t
 *

	)

85 
	#__l⁄g_doubÀ_t
 

	)

89 #ifdef 
__˝lu•lus


90 
	#__BEGIN_DECLS
 "C" {

	)

91 
	#__END_DECLS
 }

	)

93 
	#__BEGIN_DECLS


	)

94 
	#__END_DECLS


	)

103 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


104 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

105 
	#__END_NAMESPACE_STD
 }

	)

106 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

107 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

108 
	#__END_NAMESPACE_C99
 }

	)

109 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

114 
	#__BEGIN_NAMESPACE_STD


	)

115 
	#__END_NAMESPACE_STD


	)

116 
	#__USING_NAMESPACE_STD
(
«me
)

	)

117 
	#__BEGIN_NAMESPACE_C99


	)

118 
	#__END_NAMESPACE_C99


	)

119 
	#__USING_NAMESPACE_C99
(
«me
)

	)

124 #i‚de‡
__BOUNDED_POINTERS__


125 
	#__bounded


	)

126 
	#__unbounded


	)

127 
	#__±rvÆue


	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

135 #i‡
__GNUC_PREREQ
 (4,3)

136 
	#__w¨nde˛
(
«me
, 
msg
) \

137 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

138 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

139 
	#__îr‹de˛
(
«me
, 
msg
) \

140 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

142 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

143 
	#__w¨«âr
(
msg
)

	)

144 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

148 #i‡
__GNUC_PREREQ
 (2,97)

150 
	#__Êex¨r
 []

	)

152 #ifde‡
__GNUC__


153 
	#__Êex¨r
 [0]

	)

155 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

156 
	#__Êex¨r
 []

	)

159 
	#__Êex¨r
 [1]

	)

175 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

177 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

178 #ifde‡
__˝lu•lus


179 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

180 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

182 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

183 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

185 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

186 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

199 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

200 
	#__©åibuã__
(
xyz
Ë

	)

206 #i‡
__GNUC_PREREQ
 (2,96)

207 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

209 
	#__©åibuã_mÆloc__


	)

215 #i‡
__GNUC_PREREQ
 (2,96)

216 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

218 
	#__©åibuã_puª__


	)

224 #i‡
__GNUC_PREREQ
 (3,1)

225 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

226 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

228 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

229 
	#__©åibuã_noölöe__


	)

233 #i‡
__GNUC_PREREQ
 (3,2)

234 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

236 
	#__©åibuã_dïªˇãd__


	)

245 #i‡
__GNUC_PREREQ
 (2,8)

246 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

248 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

255 #i‡
__GNUC_PREREQ
 (2,97)

256 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

257 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

259 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

264 #i‡
__GNUC_PREREQ
 (3,3)

265 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

267 
	#__n⁄nuŒ
(
∑øms
)

	)

272 #i‡
__GNUC_PREREQ
 (3,4)

273 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

274 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

275 #i‡
__USE_FORTIFY_LEVEL
 > 0

276 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

279 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

281 #i‚de‡
__wur


282 
	#__wur


	)

286 #i‡
__GNUC_PREREQ
 (3,2)

287 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

289 
	#__Æways_ölöe
 
__ölöe


	)

294 #i‡!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3)

295 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


296 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

297 #i‡
__GNUC_PREREQ
 (4,3)

298 
	#__exã∫_Æways_ölöe
 \

299 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
, 
__¨tificül__
))

	)

301 
	#__exã∫_Æways_ölöe
 \

302 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

305 
	#__exã∫_ölöe
 
__ölöe


	)

306 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

312 #i‡
__GNUC_PREREQ
 (4,3)

313 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

314 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

321 #i‡!
__GNUC_PREREQ
 (2,8)

322 
	#__exãnsi⁄__


	)

326 #i‡!
__GNUC_PREREQ
 (2,92)

327 
	#__ª°ri˘


	)

333 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


334 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

336 #ifde‡
__GNUC__


337 
	#__ª°ri˘_¨r


	)

339 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

340 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

343 
	#__ª°ri˘_¨r


	)

348 
	~<bôs/w‹dsize.h
>

350 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


351 
	#__LDBL_COMPAT
 1

	)

352 #ifde‡
__REDIRECT


353 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

354 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

355 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

356 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

357 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

358 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

359 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

360 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

361 
	#__LDBL_REDIR_DECL
(
«me
) \

362 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

363 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

364 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

365 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

366 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

369 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


370 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

371 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

372 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

373 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

374 
	#__LDBL_REDIR_DECL
(
«me
)

	)

375 #ifde‡
__REDIRECT


376 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

377 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

378 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/bits/libc-lock.h

20 #i‚de‡
_BITS_LIBC_LOCK_H


21 
	#_BITS_LIBC_LOCK_H
 1

	)

23 
	~<±hªad.h
>

24 
	#__√ed_NULL


	)

25 
	~<°ddef.h
>

34 #ifde‡
_LIBC


35 
	~<lowÀvñlock.h
>

36 
	~<és.h
>

37 
	~<±hªad-fun˘i⁄s.h
>

41 #i‡
deföed
 
_LIBC
 || deföed 
_IO_MTSAFE_IO


42 #i‡(
deföed
 
NOT_IN_libc
 && !deföed 
IS_IN_lib±hªad
Ë|| !deföed 
_LIBC


43 
±hªad_muãx_t
 
	t__libc_lock_t
;

44 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

46 
	t__libc_lock_t
;

47 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t__libc_lock_ªcursive_t
;

49 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__πld_lock_ªcursive_t
;

50 #ifde‡
__USE_UNIX98


51 
±hªad_rwlock_t
 
	t__libc_rwlock_t
;

53 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

56 
__libc_lock_›aque__
 
	t__libc_lock_t
;

57 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

58 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

62 
±hªad_key_t
 
	t__libc_key_t
;

71 
	#__libc_lock_deföe
(
CLASS
,
NAME
) \

72 
CLASS
 
__libc_lock_t
 
NAME
;

	)

73 
	#__libc_rwlock_deföe
(
CLASS
,
NAME
) \

74 
CLASS
 
__libc_rwlock_t
 
NAME
;

	)

75 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

76 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

77 
	#__πld_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

78 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
;

	)

89 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

90 #i‡
LLL_LOCK_INITIALIZER
 == 0

91 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

92 
CLASS
 
__libc_lock_t
 
NAME
;

	)

94 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

95 
CLASS
 
__libc_lock_t
 
NAME
 = 
LLL_LOCK_INITIALIZER
;

	)

98 #i‡
__LT_SPINLOCK_INIT
 == 0

99 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

100 
CLASS
 
__libc_lock_t
 
NAME
;

	)

102 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

103 
CLASS
 
__libc_lock_t
 
NAME
 = 
PTHREAD_MUTEX_INITIALIZER
;

	)

107 
	#__libc_rwlock_deföe_öôülized
(
CLASS
,
NAME
) \

108 
CLASS
 
__libc_rwlock_t
 
NAME
 = 
PTHREAD_RWLOCK_INITIALIZER
;

	)

112 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

113 #i‡
LLL_LOCK_INITIALIZER
 == 0

114 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

115 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

117 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

118 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

120 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

121 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

123 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

124 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

125 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

126 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

129 
	#__πld_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

130 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
 = 
_RTLD_LOCK_RECURSIVE_INITIALIZER
;

	)

131 
	#_RTLD_LOCK_RECURSIVE_INITIALIZER
 \

132 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

134 
	#__πld_lock_öôülize
(
NAME
) \

135 (Ë((
NAME
Ë(
__πld_lock_ªcursive_t
Ë
_RTLD_LOCK_RECURSIVE_INITIALIZER
)

	)

142 #ifde‡
__PIC__


143 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

144 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of
 (
FUNC
Ë*
_‚
 = (FUNC); \

145 
_‚
 !
NULL
 ? (*_‚Ë
ARGS
 : 
ELSE
; }))

	)

147 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

148 (
FUNC
 !
NULL
 ? FUNC 
ARGS
 : 
ELSE
)

	)

152 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


153 
	#PTFAVAIL
(
NAME
Ë
__libc_±hªad_fun˘i⁄s_öô


	)

154 
	#__libc_±f_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

155 (
__libc_±hªad_fun˘i⁄s_öô
 ? 
	`PTHFCT_CALL
 (
±r_
##
FUNC
, 
ARGS
Ë: 
ELSE
)

	)

156 
	#__libc_±f_ˇŒ_Æways
(
FUNC
, 
ARGS
) \

157 
	`PTHFCT_CALL
 (
±r_
##
FUNC
, 
ARGS
)

	)

159 
	#PTFAVAIL
(
NAME
Ë(NAME !
NULL
)

	)

160 
	#__libc_±f_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

161 
	`__libc_maybe_ˇŒ
 (
FUNC
, 
ARGS
, 
ELSE
)

	)

162 
	#__libc_±f_ˇŒ_Æways
(
FUNC
, 
ARGS
) \

163 
FUNC
 
ARGS


	)

169 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

170 
	#__libc_lock_öô
(
NAME
Ë((NAMEË
LLL_LOCK_INITIALIZER
, 0)

	)

172 
	#__libc_lock_öô
(
NAME
) \

173 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_öô
, (&(
NAME
), 
NULL
), 0)

	)

175 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


178 
	#__libc_rwlock_öô
(
NAME
) \

179 (
	`__buûtö_mem£t
 (&(
NAME
), '\0',  (NAME)), 0)

	)

181 
	#__libc_rwlock_öô
(
NAME
) \

182 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_öô
, (&(
NAME
), 
NULL
), 0)

	)

186 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

187 
	#__libc_lock_öô_ªcursive
(
NAME
) \

188 ((
NAME
Ë(
__libc_lock_ªcursive_t
Ë
_LIBC_LOCK_RECURSIVE_INITIALIZER
, 0)

	)

190 
	#__libc_lock_öô_ªcursive
(
NAME
) \

192 i‡(
__±hªad_muãx_öô
 !
NULL
) \

194 
±hªad_muãx©å_t
 
__©å
; \

195 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

196 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

197 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

198 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

200 } 0)

	)

203 
	#__πld_lock_öô_ªcursive
(
NAME
) \

205 i‡(
__±hªad_muãx_öô
 !
NULL
) \

207 
±hªad_muãx©å_t
 
__©å
; \

208 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

209 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

210 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

211 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

213 } 0)

	)

218 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

219 
	#__libc_lock_föi
(
NAME
Ë((Ë0)

	)

221 
	#__libc_lock_föi
(
NAME
) \

222 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_de°roy
, (&(
NAME
)), 0)

	)

224 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


225 
	#__libc_rwlock_föi
(
NAME
Ë((Ë0)

	)

227 
	#__libc_rwlock_föi
(
NAME
) \

228 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_de°roy
, (&(
NAME
)), 0)

	)

232 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

233 
	#__libc_lock_föi_ªcursive
(
NAME
Ë((Ë0)

	)

235 
	#__libc_lock_föi_ªcursive
(
NAME
) \

236 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_de°roy
, (&(
NAME
)), 0)

	)

240 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

241 
	#__libc_lock_lock
(
NAME
) \

242 ({ 
	`Œl_lock
 (
NAME
, 
LLL_PRIVATE
); 0; })

	)

244 
	#__libc_lock_lock
(
NAME
) \

245 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
)), 0)

	)

247 
	#__libc_rwlock_rdlock
(
NAME
) \

248 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_rdlock
, (&(
NAME
)), 0)

	)

249 
	#__libc_rwlock_wæock
(
NAME
) \

250 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_wæock
, (&(
NAME
)), 0)

	)

253 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

254 
	#__libc_lock_lock_ªcursive
(
NAME
) \

256 *
£lf
 = 
THREAD_SELF
; \

257 i‡((
NAME
).
ow√r
 !
£lf
) \

259 
	`Œl_lock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

260 (
NAME
).
ow√r
 = 
£lf
; \

262 ++(
NAME
).
˙t
; \

263 } 0)

	)

265 
	#__libc_lock_lock_ªcursive
(
NAME
) \

266 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
).
muãx
), 0)

	)

270 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

271 
	#__libc_lock_åylock
(
NAME
) \

272 
	`Œl_åylock
 (
NAME
)

	)

274 
	#__libc_lock_åylock
(
NAME
) \

275 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
)), 0)

	)

277 
	#__libc_rwlock_åyrdlock
(
NAME
) \

278 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åyrdlock
, (&(
NAME
)), 0)

	)

279 
	#__libc_rwlock_åywæock
(
NAME
) \

280 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åywæock
, (&(
NAME
)), 0)

	)

283 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

284 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

286 
ªsu…
 = 0; \

287 *
£lf
 = 
THREAD_SELF
; \

288 i‡((
NAME
).
ow√r
 !
£lf
) \

290 i‡(
	`Œl_åylock
 ((
NAME
).
lock
) == 0) \

292 (
NAME
).
ow√r
 = 
£lf
; \

293 (
NAME
).
˙t
 = 1; \

296 
ªsu…
 = 
EBUSY
; \

299 ++(
NAME
).
˙t
; \

300 
ªsu…
; \

301 })

	)

303 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

304 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
)), 0)

	)

307 
	#__πld_lock_åylock_ªcursive
(
NAME
) \

308 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
).
muãx
), 0)

	)

311 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

312 
	#__libc_lock_u∆ock
(
NAME
) \

313 
	`Œl_u∆ock
 (
NAME
, 
LLL_PRIVATE
)

	)

315 
	#__libc_lock_u∆ock
(
NAME
) \

316 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
)), 0)

	)

318 
	#__libc_rwlock_u∆ock
(
NAME
) \

319 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_u∆ock
, (&(
NAME
)), 0)

	)

322 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

324 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

326 i‡(--(
NAME
).
˙t
 == 0) \

328 (
NAME
).
ow√r
 = 
NULL
; \

329 
	`Œl_u∆ock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

331 } 0)

	)

333 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

334 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
)), 0)

	)

337 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


338 
	#__πld_lock_deÁu…_lock_ªcursive
(
lock
) \

339 ++((
±hªad_muãx_t
 *)(
lock
))->
__d©a
.
__cou¡
;

	)

341 
	#__πld_lock_deÁu…_u∆ock_ªcursive
(
lock
) \

342 --((
±hªad_muãx_t
 *)(
lock
))->
__d©a
.
__cou¡
;

	)

344 
	#__πld_lock_lock_ªcursive
(
NAME
) \

345 
	`GL
(
dl_πld_lock_ªcursive
Ë(&(
NAME
).
muãx
)

	)

347 
	#__πld_lock_u∆ock_ªcursive
(
NAME
) \

348 
	`GL
(
dl_πld_u∆ock_ªcursive
Ë(&(
NAME
).
muãx
)

	)

350 
	#__πld_lock_lock_ªcursive
(
NAME
) \

351 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
).
muãx
), 0)

	)

353 
	#__πld_lock_u∆ock_ªcursive
(
NAME
) \

354 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
).
muãx
), 0)

	)

358 #i‡
PTHREAD_ONCE_INIT
 == 0

361 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

362 
CLASS
 
±hªad_⁄˚_t
 
NAME


	)

364 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

365 
CLASS
 
±hªad_⁄˚_t
 
NAME
 = 
PTHREAD_ONCE_INIT


	)

369 
	#__libc_⁄˚
(
ONCE_CONTROL
, 
INIT_FUNCTION
) \

371 i‡(
	`PTFAVAIL
 (
__±hªad_⁄˚
)) \

372 
	`__libc_±f_ˇŒ_Æways
 (
__±hªad_⁄˚
, (&(
ONCE_CONTROL
), \

373 
INIT_FUNCTION
)); \

374 i‡((
ONCE_CONTROL
Ë=
PTHREAD_ONCE_INIT
) { \

375 
	`INIT_FUNCTION
 (); \

376 (
ONCE_CONTROL
) |= 2; \

378 } 0)

	)

385 
_±hªad_˛ónup_push
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

386 (*
routöe
Ë(*), *
¨g
);

387 
	`_±hªad_˛ónup_p›
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

388 
execuã
);

389 
	`_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

390 (*
routöe
Ë(*), *
¨g
);

391 
	`_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

392 
execuã
);

395 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

396 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

397 
_avaû
; \

398 i‡(
DOIT
) { \

399 
_avaû
 = 
	`PTFAVAIL
 (
_±hªad_˛ónup_push_de„r
); \

400 i‡(
_avaû
) { \

401 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_push_de„r
, (&
_buf„r
, 
FCT
, \

402 
ARG
)); \

404 
_buf„r
.
__routöe
 = (
FCT
); \

405 
_buf„r
.
__¨g
 = (
ARG
); \

408 
_avaû
 = 0; \

409 }

	)

412 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

413 i‡(
_avaû
) { \

414 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_p›_ª°‹e
, (&
_buf„r
, 
DOIT
));\

415 } i‡(
DOIT
) \

416 
_buf„r
.
	`__routöe
 (_buf„r.
__¨g
); \

417 
	}

	)
}

420 
	#__libc_˛ónup_íd
(
DOIT
) \

421 i‡(
_avaû
) { \

422 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_p›_ª°‹e
, (&
_buf„r
, 
DOIT
));\

423 } i‡(
DOIT
) \

424 
_buf„r
.
	`__routöe
 (_buf„r.
__¨g
)

	)

428 
__exã∫_ölöe
 

429 
	$__libc_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
f
)

431 i‡(
f
->
__do_ô
)

432 
f
->
	`__ˇn˚l_routöe
 (f->
__ˇn˚l_¨g
);

433 
	}
}

435 
	#__libc_˛ónup_push
(
f˘
, 
¨g
) \

437 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

438 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__libc_˛ónup_routöe
))) \

439 { .
__ˇn˚l_routöe
 = (
f˘
), .
__ˇn˚l_¨g
 = (
¨g
), \

440 .
__do_ô
 = 1 };

	)

442 
	#__libc_˛ónup_p›
(
execuã
) \

443 
__˛‰ame
.
__do_ô
 = (
execuã
); \

444 } 0)

	)

448 
	#__libc_key_¸óã
(
KEY
, 
DESTRUCTOR
) \

449 
	`__libc_±f_ˇŒ
 (
__±hªad_key_¸óã
, (
KEY
, 
DESTRUCTOR
), 1)

	)

452 
	#__libc_gë•ecific
(
KEY
) \

453 
	`__libc_±f_ˇŒ
 (
__±hªad_gë•ecific
, (
KEY
), 
NULL
)

	)

456 
	#__libc_£t•ecific
(
KEY
, 
VALUE
) \

457 
	`__libc_±f_ˇŒ
 (
__±hªad_£t•ecific
, (
KEY
, 
VALUE
), 0)

	)

463 
	#__libc_©f‹k
(
PREPARE
, 
PARENT
, 
CHILD
) \

464 
	`__ªgi°î_©f‹k
 (
PREPARE
, 
PARENT
, 
CHILD
, 
NULL
)

	)

465 
__ªgi°î_©f‹k
 ((*
__¥ï¨e
) (),

466 (*
__∑ª¡
) (),

467 (*
__chûd
) (),

468 *
__dso_h™dÀ
);

473 
	`__±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

474 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx_©å
);

476 
	`__±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
);

478 
	`__±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
);

480 
	`__±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
);

482 
	`__±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
);

484 
	`__±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
);

486 
	`__±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
);

488 
	`__±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
,

489 
__köd
);

491 #ifde‡
__USE_UNIX98


492 
	`__±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__rwlock
,

493 
__c⁄°
 
±hªad_rwlock©å_t
 *
__©å
);

495 
	`__±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
);

497 
	`__±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

499 
	`__±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

501 
	`__±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
);

503 
	`__±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
);

505 
	`__±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
);

508 
	`__±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

509 (*
__de°r_fun˘i⁄
) (*));

511 
	`__±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

512 
__c⁄°
 *
__poöãr
);

514 *
	`__±hªad_gë•ecific
 (
±hªad_key_t
 
__key
);

516 
	`__±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

517 (*
__öô_routöe
) ());

519 
	`__±hªad_©f‹k
 ((*
__¥ï¨e
) (),

520 (*
__∑ª¡
) (),

521 (*
__chûd
) ());

527 #i‚de‡
__NO_WEAK_PTHREAD_ALIASES


528 #ifde‡
wók_exã∫


529 #i‡
_LIBC


530 
	~<bp-sym.h
>

532 
	#BP_SYM
 (
sym
Ë
	)
sym

534 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_öô
))

535 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_de°roy
))

536 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_lock
))

537 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_åylock
))

538 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_u∆ock
))

539 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_öô
))

540 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_de°roy
))

541 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_£ây≥
))

542 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_öô
))

543 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_de°roy
))

544 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_rdlock
))

545 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_åyrdlock
))

546 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_wæock
))

547 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_åywæock
))

548 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_u∆ock
))

549 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_key_¸óã
))

550 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_£t•ecific
))

551 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_gë•ecific
))

552 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_⁄˚
))

553 
	$wók_exã∫
 (
__±hªad_öôülize
)

554 
	$wók_exã∫
 (
__±hªad_©f‹k
)

555 
	`wók_exã∫
 (
	$BP_SYM
 (
_±hªad_˛ónup_push_de„r
))

556 
	`wók_exã∫
 (
	$BP_SYM
 (
_±hªad_˛ónup_p›_ª°‹e
))

557 
	`wók_exã∫
 (
	$BP_SYM
 (
±hªad_£tˇn˚l°©e
))

559 #¥agm®
wók
 
__±hªad_muãx_öô


560 #¥agm®
wók
 
__±hªad_muãx_de°roy


561 #¥agm®
wók
 
__±hªad_muãx_lock


562 #¥agm®
wók
 
__±hªad_muãx_åylock


563 #¥agm®
wók
 
__±hªad_muãx_u∆ock


564 #¥agm®
wók
 
__±hªad_muãx©å_öô


565 #¥agm®
wók
 
__±hªad_muãx©å_de°roy


566 #¥agm®
wók
 
__±hªad_muãx©å_£ây≥


567 #¥agm®
wók
 
__±hªad_rwlock_de°roy


568 #¥agm®
wók
 
__±hªad_rwlock_rdlock


569 #¥agm®
wók
 
__±hªad_rwlock_åyrdlock


570 #¥agm®
wók
 
__±hªad_rwlock_wæock


571 #¥agm®
wók
 
__±hªad_rwlock_åywæock


572 #¥agm®
wók
 
__±hªad_rwlock_u∆ock


573 #¥agm®
wók
 
__±hªad_key_¸óã


574 #¥agm®
wók
 
__±hªad_£t•ecific


575 #¥agm®
wók
 
__±hªad_gë•ecific


576 #¥agm®
wók
 
__±hªad_⁄˚


577 #¥agm®
wók
 
__±hªad_öôülize


578 #¥agm®
wók
 
__±hªad_©f‹k


579 #¥agm®
wók
 
_±hªad_˛ónup_push_de„r


580 #¥agm®
wók
 
_±hªad_˛ónup_p›_ª°‹e


581 #¥agm®
wók
 
±hªad_£tˇn˚l°©e


	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wöt_t


	)

29 
	~<wch¨.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wch¨_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

72 
	t__c⁄°
 **, __const *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

86 
	t__c⁄°
 *,

87 
	t__c⁄°
 **,

88 
	t__c⁄°
 *, **,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

93 
	t__c⁄°
 *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 
__c⁄°
 *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___kî√l_co¶


	)

11 
	#__°ub___kî√l_söl


	)

12 
	#__°ub___kî√l_è∆


	)

13 
	#__°ub_chÊags


	)

14 
	#__°ub_Áâach


	)

15 
	#__°ub_fchÊags


	)

16 
	#__°ub_fdëach


	)

17 
	#__°ub_gây


	)

18 
	#__°ub_lchmod


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #ifde‡
__USE_UNIX98


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

56 #i‚de‡
_WINT_T


61 
	#_WINT_T


	)

62 
	twöt_t
;

66 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

67 && 
deföed
 
__WINT_TYPE__


68 
__BEGIN_NAMESPACE_STD


69 
__WINT_TYPE__
 
	twöt_t
;

70 
	g__END_NAMESPACE_STD


75 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
__mb°©e_t_deföed


76 
	#__mb°©e_t_deföed
 1

	)

80 
	m__cou¡
;

83 #ifde‡
__WINT_TYPE__


84 
__WINT_TYPE__
 
	m__wch
;

86 
wöt_t
 
	m__wch
;

88 
	m__wchb
[4];

89 } 
	m__vÆue
;

90 } 
	t__mb°©e_t
;

92 #unde‡
__√ed_mb°©e_t


97 #ifde‡
_WCHAR_H


99 
__BEGIN_NAMESPACE_C99


101 
__mb°©e_t
 
	tmb°©e_t
;

102 
	g__END_NAMESPACE_C99


103 #ifde‡
__USE_GNU


104 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

107 #i‚de‡
WCHAR_MIN


109 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

110 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

113 #i‚de‡
WEOF


114 
	#WEOF
 (0xffffffffu)

	)

119 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


120 
	~<w˘y≥.h
>

124 
__BEGIN_DECLS


126 
__BEGIN_NAMESPACE_STD


129 
tm
;

130 
__END_NAMESPACE_STD


134 
	$__USING_NAMESPACE_STD
(
tm
)

137 
__BEGIN_NAMESPACE_STD


139 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

140 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

142 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

143 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

144 
__THROW
;

147 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

150 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

151 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
;

155 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

156 
__THROW
 
__©åibuã_puª__
;

158 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

159 
__THROW
 
__©åibuã_puª__
;

160 
__END_NAMESPACE_STD


162 #ifde‡
__USE_GNU


164 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

167 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

168 
size_t
 
__n
Ë
__THROW
;

172 
	~<xloˇÀ.h
>

174 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

175 
__loˇÀ_t
 
__loc
Ë
__THROW
;

177 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

178 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

181 
__BEGIN_NAMESPACE_STD


184 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

188 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

189 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

190 
__END_NAMESPACE_STD


192 #ifde‡
__USE_GNU


198 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

199 
__loˇÀ_t
 
__loc
Ë
__THROW
;

204 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

205 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

208 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

211 
__BEGIN_NAMESPACE_STD


213 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

214 
__THROW
 
__©åibuã_puª__
;

216 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

217 
__THROW
 
__©åibuã_puª__
;

218 
__END_NAMESPACE_STD


220 #ifde‡
__USE_GNU


223 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

224 
__THROW
 
__©åibuã_puª__
;

227 
__BEGIN_NAMESPACE_STD


230 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

231 
__THROW
 
__©åibuã_puª__
;

234 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

235 
__THROW
 
__©åibuã_puª__
;

237 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

238 
__THROW
 
__©åibuã_puª__
;

240 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

241 
__THROW
 
__©åibuã_puª__
;

244 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

245 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

246 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

249 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

250 
__END_NAMESPACE_STD


252 #ifde‡
__USE_XOPEN


254 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

255 
__THROW
 
__©åibuã_puª__
;

258 #ifde‡
__USE_GNU


260 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

261 
__THROW
 
__©åibuã_puª__
;

265 
__BEGIN_NAMESPACE_STD


267 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

268 
__THROW
 
__©åibuã_puª__
;

271 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s1
,

272 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

273 
__THROW
 
__©åibuã_puª__
;

276 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

277 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

281 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

282 
__THROW
;

285 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

286 
__END_NAMESPACE_STD


288 #ifde‡
__USE_GNU


291 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

292 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

293 
__THROW
;

297 
__BEGIN_NAMESPACE_STD


300 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

304 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

308 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

312 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

313 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

314 
mb°©e_t
 *
__p
Ë
__THROW
;

317 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

318 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

321 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

322 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

323 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

324 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

325 
__END_NAMESPACE_STD


327 #ifde‡
__USE_EXTERN_INLINES


333 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

334 
__exã∫_ölöe
 
wöt_t


335 
	`__NTH
 (
	$btowc
 (
__c
))

336 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

337 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

339 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

340 
__exã∫_ölöe
 

341 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

342 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

343 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

345 
__exã∫_ölöe
 
size_t


346 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

347 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

348 {  (
__ps
 !
NULL


349 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

352 
__BEGIN_NAMESPACE_STD


355 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

356 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

357 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

361 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

362 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

363 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

364 
__END_NAMESPACE_STD


367 #ifdef 
__USE_GNU


370 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

371 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

372 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

377 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

378 
size_t
 
__nwc
, size_à
__Àn
,

379 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

384 #ifde‡
__USE_XOPEN


386 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

390 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

394 
__BEGIN_NAMESPACE_STD


397 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

398 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

399 
__END_NAMESPACE_STD


401 #ifde‡
__USE_ISOC99


402 
__BEGIN_NAMESPACE_C99


404 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

405 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

406 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

407 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

408 
__END_NAMESPACE_C99


412 
__BEGIN_NAMESPACE_STD


415 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

416 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

420 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

421 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

422 
__THROW
;

423 
__END_NAMESPACE_STD


425 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

426 
__BEGIN_NAMESPACE_C99


429 
__exãnsi⁄__


430 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

431 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

432 
__THROW
;

436 
__exãnsi⁄__


437 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

438 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

439 
__ba£
Ë
__THROW
;

440 
__END_NAMESPACE_C99


443 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


446 
__exãnsi⁄__


447 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

448 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

449 
__THROW
;

453 
__exãnsi⁄__


454 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

455 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

456 
__ba£
Ë
__THROW
;

459 #ifde‡
__USE_GNU


473 
	~<xloˇÀ.h
>

477 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

478 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

479 
__loˇÀ_t
 
__loc
Ë
__THROW
;

481 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

482 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

483 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

485 
__exãnsi⁄__


486 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

487 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

488 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

490 
__exãnsi⁄__


491 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

492 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

493 
__ba£
, 
__loˇÀ_t
 
__loc
)

494 
__THROW
;

496 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

497 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

498 
__THROW
;

500 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

501 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

502 
__THROW
;

504 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

505 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

506 
__loˇÀ_t
 
__loc
Ë
__THROW
;

510 #ifdef 
__USE_GNU


513 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
Ë
__THROW
;

517 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
)

518 
__THROW
;

524 #ifdef 
__USE_GNU


527 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

530 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


531 
__BEGIN_NAMESPACE_STD


534 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

541 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

542 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

548 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

551 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

552 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

553 
__THROW
 ;

559 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

560 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

561 
__gnuc_va_li°
 
__¨g
)

567 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

568 
__gnuc_va_li°
 
__¨g
)

572 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

573 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

574 
__gnuc_va_li°
 
__¨g
)

575 
__THROW
 ;

582 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

583 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

589 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

592 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

593 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

594 
__THROW
 ;

596 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

597 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

598 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

599 #ifde‡
__REDIRECT


603 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

604 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

605 
__isoc99_fwsˇnf
)

607 
	`__REDIRECT
 (
wsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

608 
__isoc99_wsˇnf
)

610 
	`__REDIRECT
 (
swsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

611 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

612 
__isoc99_swsˇnf
)

613 
__THROW
 ;

615 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

616 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

617 
	`__isoc99_wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

618 
	$__isoc99_swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

619 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

620 
__THROW
;

621 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

622 
	#wsˇnf
 
__isoc99_wsˇnf


	)

623 
	#swsˇnf
 
__isoc99_swsˇnf


	)

627 
__END_NAMESPACE_STD


630 #ifde‡
__USE_ISOC99


631 
__BEGIN_NAMESPACE_C99


636 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

637 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

638 
__gnuc_va_li°
 
__¨g
)

644 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

645 
__gnuc_va_li°
 
__¨g
)

648 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

649 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

650 
__gnuc_va_li°
 
__¨g
)

651 
__THROW
 ;

653 #i‡!
deföed
 
__USE_GNU
 \

654 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

655 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

656 #ifde‡
__REDIRECT


657 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

658 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

659 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

661 
	`__REDIRECT
 (
vwsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

662 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

664 
	`__REDIRECT
 (
vswsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

665 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

666 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

667 
__THROW
 ;

669 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

670 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

671 
__gnuc_va_li°
 
__¨g
);

672 
	`__isoc99_vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

673 
__gnuc_va_li°
 
__¨g
);

674 
	$__isoc99_vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

675 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

676 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

677 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

678 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

679 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

683 
__END_NAMESPACE_C99


687 
__BEGIN_NAMESPACE_STD


692 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

693 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

699 
wöt_t
 
	`gëwch¨
 ();

706 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

707 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

713 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

721 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

722 
__FILE
 *
__ª°ri˘
 
__°ªam
);

728 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

729 
__FILE
 *
__ª°ri˘
 
__°ªam
);

736 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

737 
__END_NAMESPACE_STD


740 #ifde‡
__USE_GNU


748 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

749 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

757 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

765 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

774 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

775 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

784 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

785 
__FILE
 *
__ª°ri˘
 
__°ªam
);

793 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

794 
__FILE
 *
__ª°ri˘
 
__°ªam
);

798 
__BEGIN_NAMESPACE_C99


802 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

803 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

804 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

805 
__END_NAMESPACE_C99


807 #ifde‡
__USE_GNU


808 
	~<xloˇÀ.h
>

812 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

813 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

814 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

815 
__loˇÀ_t
 
__loc
Ë
__THROW
;

824 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


825 
	#__√ed_iswxxx


	)

826 
	~<w˘y≥.h
>

830 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


831 
	~<bôs/wch¨2.h
>

834 #ifde‡
__LDBL_COMPAT


835 
	~<bôs/wch¨-ldbl.h
>

838 
__END_DECLS


844 #unde‡
__√ed_mb°©e_t


845 #unde‡
__√ed_wöt_t


	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

	@/usr/include/bits/wchar-ldbl.h

20 #i‚de‡
_WCHAR_H


24 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


25 
__BEGIN_NAMESPACE_C99


26 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

27 
__LDBL_REDIR_DECL
 (
w¥ötf
);

28 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

31 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

32 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

33 && !
deföed
 
	g__REDIRECT
 \

34 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

35 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

37 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

39 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

41 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

43 
__END_NAMESPACE_C99


46 #ifde‡
__USE_ISOC99


47 
__BEGIN_NAMESPACE_C99


48 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

49 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

50 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

51 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

53 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

55 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

57 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

59 
__END_NAMESPACE_C99


62 #ifde‡
__USE_GNU


63 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

66 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


67 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

68 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

69 #i‡
__USE_FORTIFY_LEVEL
 > 1

70 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

73 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar.h

20 #i‚de‡
_BITS_WCHAR_H


21 
	#_BITS_WCHAR_H
 1

	)

23 
	#__WCHAR_MIN
 (-2147483647 - 1)

	)

24 
	#__WCHAR_MAX
 (2147483647)

	)

	@/usr/include/bits/wchar2.h

20 #i‚de‡
_WCHAR_H


25 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

26 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

27 
size_t
 
__ns1
Ë
__THROW
;

28 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

29 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

30 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

31 
wmem˝y
);

32 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

33 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

34 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

35 
size_t
 
__ns1
), 
__wmem˝y_chk
)

36 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

39 
__exã∫_Æways_ölöe
 
wch¨_t
 *

40 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

41 
size_t
 
__n
))

43 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

45 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

46  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

47 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

49 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

50  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

51 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

53  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

54 
	}
}

57 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

58 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

59 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

60 
__c⁄°
 
wch¨_t
 *
__s2
,

61 
size_t
 
__n
), 
wmemmove
);

62 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

63 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

64 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

65 
size_t
 
__ns1
), 
__wmemmove_chk
)

66 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

69 
__exã∫_Æways_ölöe
 
wch¨_t
 *

70 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

71 
size_t
 
__n
))

73 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

75 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

76  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

77 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

79 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

80  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

81 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

83  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

84 
	}
}

87 #ifde‡
__USE_GNU


88 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

89 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

90 
size_t
 
__ns1
Ë
__THROW
;

91 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

92 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

93 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
,

94 
size_t
 
__n
), 
wmemp˝y
);

95 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

96 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

97 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

98 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

99 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

102 
__exã∫_Æways_ölöe
 
wch¨_t
 *

103 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

104 
size_t
 
__n
))

106 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

108 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

109  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

110 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

112 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

113  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

114 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

116  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

117 
	}
}

121 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

122 
size_t
 
__ns
Ë
__THROW
;

123 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

124 
size_t
 
__n
), 
wmem£t
);

125 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

126 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

127 
size_t
 
__ns
), 
__wmem£t_chk
)

128 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

131 
__exã∫_Æways_ölöe
 
wch¨_t
 *

132 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__ª°ri˘
 
__s
, wch¨_à
__c
, 
size_t
 
__n
))

134 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

136 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

137  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

139 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

140  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

141 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

143  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

144 
	}
}

147 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

149 
size_t
 
__n
Ë
__THROW
;

150 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

151 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

152 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

154 
__exã∫_Æways_ölöe
 
wch¨_t
 *

155 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
))

157 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

158  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

159  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

160 
	}
}

163 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
,

164 
size_t
 
__de°Àn
Ë
__THROW
;

165 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
, (wch¨_à*
__de°
,

166 
__c⁄°
 
wch¨_t
 *
__§c
),

167 
w˝˝y
);

169 
__exã∫_Æways_ölöe
 
wch¨_t
 *

170 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
))

172 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

173  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

174  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

175 
	}
}

178 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

179 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

180 
size_t
 
__de°Àn
Ë
__THROW
;

181 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

182 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

183 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

184 
size_t
 
__n
), 
wc¢˝y
);

185 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

186 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

187 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

188 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

189 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

192 
__exã∫_Æways_ölöe
 
wch¨_t
 *

193 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
))

195 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

197 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

198  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

199 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

200 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

201  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

202 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

204  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

205 
	}
}

208 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

209 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

210 
size_t
 
__de°Àn
Ë
__THROW
;

211 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

212 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

213 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

214 
size_t
 
__n
), 
w˝n˝y
);

215 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

216 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

217 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

218 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

219 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

222 
__exã∫_Æways_ölöe
 
wch¨_t
 *

223 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
))

225 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

227 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

228  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

229 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

230 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

231  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

232 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

234  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

235 
	}
}

238 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

239 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

240 
size_t
 
__de°Àn
Ë
__THROW
;

241 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

242 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

243 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

245 
__exã∫_Æways_ölöe
 
wch¨_t
 *

246 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
))

248 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

249  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

250  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

251 
	}
}

254 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

255 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

256 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

257 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

258 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

259 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

260 
size_t
 
__n
), 
wc¢ˇt
);

262 
__exã∫_Æways_ölöe
 
wch¨_t
 *

263 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
))

265 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

266  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

267 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

268  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

269 
	}
}

272 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

273 
__Êag
, 
size_t
 
__s_Àn
,

274 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

275 
__THROW
 ;

277 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

278 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

279 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

280 
sw¥ötf
);

282 #ifde‡
__va_¨g_∑ck


283 
__exã∫_Æways_ölöe
 

284 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

285 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

287 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

288  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

289 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

290 
__fmt
, 
	`__va_¨g_∑ck
 ());

291  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

292 
	}
}

293 #ñi‡!
deföed
 
__˝lu•lus


295 
	#sw¥ötf
(
s
, 
n
, ...) \

296 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

297 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

298 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

299 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

302 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

303 
__Êag
, 
size_t
 
__s_Àn
,

304 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

305 
__gnuc_va_li°
 
__¨g
)

306 
__THROW
 ;

308 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

309 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

310 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

311 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

313 
__exã∫_Æways_ölöe
 

314 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

315 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

317 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

318  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

319 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

320  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

321 
	}
}

324 #i‡
__USE_FORTIFY_LEVEL
 > 1

326 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

327 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

328 
__w¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

330 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

331 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

332 
__gnuc_va_li°
 
__≠
);

333 
__vw¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

334 
__gnuc_va_li°
 
__≠
);

336 #ifde‡
__va_¨g_∑ck


337 
__exã∫_Æways_ölöe
 

338 
	$w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

340  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

341 
	}
}

343 
__exã∫_Æways_ölöe
 

344 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

346  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

347 
	`__va_¨g_∑ck
 ());

348 
	}
}

349 #ñi‡!
deföed
 
__˝lu•lus


350 
	#w¥ötf
(...) \

351 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

352 
	#fw¥ötf
(
°ªam
, ...) \

353 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

356 
__exã∫_Æways_ölöe
 

357 
	$vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

359  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

360 
	}
}

362 
__exã∫_Æways_ölöe
 

363 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

364 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

366  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

367 
	}
}

371 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

372 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

373 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

374 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

375 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

376 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

377 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

378 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

379 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

382 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

383 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

385 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

387 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

388  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

389 
__n
, 
__°ªam
);

391 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

392  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

393 
__n
, 
__°ªam
);

395  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

396 
	}
}

398 #ifde‡
__USE_GNU


399 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

400 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

401 
__wur
;

402 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

403 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

404 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

405 
__wur
;

406 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

407 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

408 
__FILE
 *
__ª°ri˘
 
__°ªam
),

409 
__fgëws_u∆ocked_chk
)

410 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

413 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

414 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

416 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

418 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

419  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

420 
__n
, 
__°ªam
);

422 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

423  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

424 
__n
, 
__°ªam
);

426  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

427 
	}
}

431 
size_t
 
	$__w¸tomb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
mb°©e_t
 *
__p
,

432 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

433 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

434 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

435 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

437 
__exã∫_Æways_ölöe
 
__wur
 
size_t


438 
	`__NTH
 (
	$w¸tomb
 (*
__s
, 
wch¨_t
 
__wch¨
, 
mb°©e_t
 *
__ps
))

443 
	#__WCHAR_MB_LEN_MAX
 16

	)

444 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


447 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

448  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

449  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

450 
	}
}

453 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

454 
__c⁄°
 **
__ª°ri˘
 
__§c
,

455 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

456 
size_t
 
__d°Àn
Ë
__THROW
;

457 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

458 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

459 
__c⁄°
 **
__ª°ri˘
 
__§c
,

460 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

461 
mb§towcs
);

462 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

463 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

464 
__c⁄°
 **
__ª°ri˘
 
__§c
,

465 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

466 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

467 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

470 
__exã∫_Æways_ölöe
 
size_t


471 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

472 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

474 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

476 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

477  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

478 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

480 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

481  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

482 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

484  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

485 
	}
}

488 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

489 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

490 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

491 
size_t
 
__d°Àn
Ë
__THROW
;

492 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

493 (*
__ª°ri˘
 
__d°
,

494 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

495 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

496 
wc§tombs
);

497 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

498 (*
__ª°ri˘
 
__d°
,

499 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

500 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

501 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

502 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

504 
__exã∫_Æways_ölöe
 
size_t


505 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

506 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

508 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

510 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

511  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

513 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

514  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

516  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

517 
	}
}

520 #ifde‡
__USE_GNU


521 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

522 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

523 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

524 
size_t
 
__d°Àn
Ë
__THROW
;

525 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

526 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

527 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

528 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

529 
mb¢πowcs
);

530 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

531 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

532 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

533 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

534 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

535 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

538 
__exã∫_Æways_ölöe
 
size_t


539 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

540 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

542 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

544 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

545  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

546 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

548 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

549  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

550 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

552  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

553 
	}
}

556 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

557 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

558 
size_t
 
__nwc
, size_à
__Àn
,

559 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

560 
__THROW
;

561 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

562 (*
__ª°ri˘
 
__d°
,

563 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

564 
size_t
 
__nwc
, size_à
__Àn
,

565 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

566 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

567 (*
__ª°ri˘
 
__d°
,

568 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

569 
size_t
 
__nwc
, size_à
__Àn
,

570 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

571 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

572 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

574 
__exã∫_Æways_ölöe
 
size_t


575 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

576 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

578 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

580 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

581  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

582 
	`__bos
 (
__d°
));

584 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

585  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

586 
	`__bos
 (
__d°
));

588  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

589 
	}
}

	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wöt_t


	)

34 
	~<wch¨.h
>

38 #i‚de‡
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde‡
__√ed_iswxxx


47 #i‚de‡
__iswxxx_deföed


48 
	#__iswxxx_deföed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw˘y≥_t
;

54 
	g__END_NAMESPACE_C99


56 #i‚de‡
_ISwbô


61 
	~<ídün.h
>

62 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


63 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

65 
	#_ISwbô
(
bô
) \

66 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

74 
	m__ISwuµî
 = 0,

75 
	m__ISwlowî
 = 1,

76 
	m__ISwÆpha
 = 2,

77 
	m__ISwdigô
 = 3,

78 
	m__ISwxdigô
 = 4,

79 
	m__ISw•a˚
 = 5,

80 
	m__ISw¥öt
 = 6,

81 
	m__ISwgøph
 = 7,

82 
	m__ISwbœnk
 = 8,

83 
	m__ISw˙ål
 = 9,

84 
	m__ISwpun˘
 = 10,

85 
	m__ISwÆnum
 = 11,

87 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

88 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

89 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

90 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

91 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

92 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

93 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

94 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

95 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

96 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

97 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

98 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

118 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

121 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

129 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

137 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

152 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

157 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

162 #ifde‡
__USE_ISOC99


163 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

172 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

176 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

188 
__END_NAMESPACE_C99


189 #ifde‡
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde‡
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

222 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde‡
__USE_GNU


227 
	~<xloˇÀ.h
>

231 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

237 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

240 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

244 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

248 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

256 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

271 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

276 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

281 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

286 
__THROW
;

290 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

291 
__THROW
;

299 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

302 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

306 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

307 
__THROW
;

310 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

311 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
__END_DECLS


	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@
1
.
1
/usr/include
145
2669
alter.c
analyze.c
attach.c
auth.c
btree.c
btree.h
build.c
callback.c
complete.c
date.c
delete.c
experimental.c
expr.c
func.c
hash.c
hash.h
insert.c
legacy.c
main.c
md5.c
os.c
os.h
os_common.h
os_test.c
os_test.h
os_unix.c
os_unix.h
os_win.c
os_win.h
pager.c
pager.h
parse.y
pragma.c
prepare.c
printf.c
random.c
select.c
server.c
shell.c
sqliteInt.h
table.c
tclsqlite.c
test1.c
test2.c
test3.c
test4.c
test5.c
test6.c
test7.c
test_async.c
test_md5.c
test_server.c
tokenize.c
trigger.c
update.c
utf.c
util.c
vacuum.c
vdbe.c
vdbe.h
vdbeInt.h
vdbeapi.c
vdbeaux.c
vdbefifo.c
vdbemem.c
where.c
/usr/include/assert.h
/usr/include/ctype.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/pthread.h
/usr/include/pwd.h
/usr/include/sched.h
/usr/include/signal.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/stat.h
/usr/include/sys/time.h
/usr/include/sys/types.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/bits/confname.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/sched.h
/usr/include/bits/setjmp.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/siginfo.h
/usr/include/bits/signum.h
/usr/include/bits/sigset.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/stat.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/unistd.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wordsize.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/sys/ucontext.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/bits/endian.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/select.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/typesizes.h
/usr/include/bits/uio.h
/usr/include/gnu/stubs.h
/usr/include/linux/errno.h
/usr/include/sys/cdefs.h
/usr/include/asm/errno.h
/usr/include/bits/libc-lock.h
/usr/include/gconv.h
/usr/include/gnu/stubs-32.h
/usr/include/wchar.h
/usr/include/asm-generic/errno.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar.h
/usr/include/bits/wchar2.h
/usr/include/wctype.h
/usr/include/asm-generic/errno-base.h
